
WifiTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000248  00800200  00002dbe  00002e52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002dbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000668  00800448  00800448  0000309a  2**0
                  ALLOC
  3 .stab         00002784  00000000  00000000  0000309c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000095a  00000000  00000000  00005820  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  00006180  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002586  00000000  00000000  000063a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f56  00000000  00000000  00008926  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001624  00000000  00000000  0000987c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009d0  00000000  00000000  0000aea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ec  00000000  00000000  0000b870  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000282f  00000000  00000000  0000c25c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000ea8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_23>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_51>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee eb       	ldi	r30, 0xBE	; 190
      fc:	fd e2       	ldi	r31, 0x2D	; 45
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 34       	cpi	r26, 0x48	; 72
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	1a e0       	ldi	r17, 0x0A	; 10
     112:	a8 e4       	ldi	r26, 0x48	; 72
     114:	b4 e0       	ldi	r27, 0x04	; 4
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a0 3b       	cpi	r26, 0xB0	; 176
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <main>
     124:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <AdcInit>:
// ATmega2560 ADC Channel : 0(ADC0) ~ 7(ADC7), Single Ended Input
void AdcInit(unsigned char ucAdcChannel)
{
	// Internal 2.56V Voltage Reference with external capacitor at AREF pin
//	ADMUX	=	0xC0 | ucAdcChannel;     		// ADC Channel
	ADMUX	=	(1<<REFS1) | (1<<REFS0) | ucAdcChannel;     		// ADC Channel
     12c:	80 6c       	ori	r24, 0xC0	; 192
     12e:	80 93 7c 00 	sts	0x007C, r24

	// ADC Module Enable, Free Running Mode, ADC Prescaler : 64
	// ADC Auto Trigger Enable
//	ADCSRA	=	0xA7;
	ADCSRA	=	(1<<ADEN)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     132:	ea e7       	ldi	r30, 0x7A	; 122
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	87 ea       	ldi	r24, 0xA7	; 167
     138:	80 83       	st	Z, r24
//	ADCSRA	|=	0x40;			// ADC start conversion
	ADCSRA	|=	(1<<ADSC);		// ADC start conversion
     13a:	80 81       	ld	r24, Z
     13c:	80 64       	ori	r24, 0x40	; 64
     13e:	80 83       	st	Z, r24
}
     140:	08 95       	ret

00000142 <AdcRead>:
unsigned int AdcRead(void)
{
	unsigned char ucLowValue = 0;
	unsigned char ucHighValue = 0;
	unsigned int unAdcValue = 0;
	while ((ADCSRA&0x10)==0x00);	// ADC Î≥ÄÌôòÏù¥ ÎÅùÎÇ†ÎñÑ ÍπåÏßÄ ÎåÄÍ∏∞
     142:	ea e7       	ldi	r30, 0x7A	; 122
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	84 ff       	sbrs	r24, 4
     14a:	fd cf       	rjmp	.-6      	; 0x146 <AdcRead+0x4>
	
	ucLowValue = ADCL;				//ÌïòÏúÑ 8bit
     14c:	80 91 78 00 	lds	r24, 0x0078
	ucHighValue	= ADCH ;			//ÏÉÅÏúÑ 2bit
     150:	90 91 79 00 	lds	r25, 0x0079
	
	unAdcValue = (ucHighValue << 8) | ucLowValue;
     154:	39 2f       	mov	r19, r25
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	82 2b       	or	r24, r18
     15c:	93 2b       	or	r25, r19
//	debugprint("unAdcValue : %d\r\n", unAdcValue);
	
	return unAdcValue;
     15e:	08 95       	ret

00000160 <__vector_23>:
//unsigned int gun_AdcValue	=	0;
unsigned char guc_OverflowCnt	=	0;
unsigned int n_flag_getADC = 0;

ISR (TIMER0_OVF_vect)	// Timer0 Overflow0 ISR
{
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	0f 92       	push	r0
     168:	11 24       	eor	r1, r1
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
	cli();																	//----------------v ±‚¥… ∫π∫Ÿ
     17a:	f8 94       	cli
	// 0.01sø° ø¿πˆ«√∑ŒøÏ πﬂª˝, 1/(14745600Hz/1024)•™144 = 0.01s
	TCNT0	=	0xff - 144;
     17c:	8f e6       	ldi	r24, 0x6F	; 111
     17e:	86 bd       	out	0x26, r24	; 38

	timerCouter++;
     180:	80 91 57 04 	lds	r24, 0x0457
     184:	90 91 58 04 	lds	r25, 0x0458
     188:	a0 91 59 04 	lds	r26, 0x0459
     18c:	b0 91 5a 04 	lds	r27, 0x045A
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	a1 1d       	adc	r26, r1
     194:	b1 1d       	adc	r27, r1
     196:	80 93 57 04 	sts	0x0457, r24
     19a:	90 93 58 04 	sts	0x0458, r25
     19e:	a0 93 59 04 	sts	0x0459, r26
     1a2:	b0 93 5a 04 	sts	0x045A, r27
	
	if ( timerCouter >= setTimerCheckCounter )
     1a6:	40 91 57 04 	lds	r20, 0x0457
     1aa:	50 91 58 04 	lds	r21, 0x0458
     1ae:	60 91 59 04 	lds	r22, 0x0459
     1b2:	70 91 5a 04 	lds	r23, 0x045A
     1b6:	80 91 53 04 	lds	r24, 0x0453
     1ba:	90 91 54 04 	lds	r25, 0x0454
     1be:	a0 91 55 04 	lds	r26, 0x0455
     1c2:	b0 91 56 04 	lds	r27, 0x0456
     1c6:	48 17       	cp	r20, r24
     1c8:	59 07       	cpc	r21, r25
     1ca:	6a 07       	cpc	r22, r26
     1cc:	7b 07       	cpc	r23, r27
     1ce:	58 f0       	brcs	.+22     	; 0x1e6 <__vector_23+0x86>
	{
		flagOverflowSetTimer = 1;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	80 93 52 04 	sts	0x0452, r24
		timerCouter = 0;
     1d6:	10 92 57 04 	sts	0x0457, r1
     1da:	10 92 58 04 	sts	0x0458, r1
     1de:	10 92 59 04 	sts	0x0459, r1
     1e2:	10 92 5a 04 	sts	0x045A, r1
	}
	sei();
     1e6:	78 94       	sei
														//-------------------------------------^±‚¥… ∫π∫Ÿ
	guc_OverflowCnt++;
     1e8:	80 91 4a 04 	lds	r24, 0x044A
     1ec:	8f 5f       	subi	r24, 0xFF	; 255
     1ee:	80 93 4a 04 	sts	0x044A, r24

	if (guc_OverflowCnt == 100)		// 0.003s * 100 = 0.3s
     1f2:	84 36       	cpi	r24, 0x64	; 100
     1f4:	41 f4       	brne	.+16     	; 0x206 <__vector_23+0xa6>
	{
		guc_OverflowCnt	=	0;
     1f6:	10 92 4a 04 	sts	0x044A, r1
		n_flag_getADC = 1;
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	90 93 49 04 	sts	0x0449, r25
     202:	80 93 48 04 	sts	0x0448, r24
	}
}
     206:	bf 91       	pop	r27
     208:	af 91       	pop	r26
     20a:	9f 91       	pop	r25
     20c:	8f 91       	pop	r24
     20e:	7f 91       	pop	r23
     210:	6f 91       	pop	r22
     212:	5f 91       	pop	r21
     214:	4f 91       	pop	r20
     216:	0f 90       	pop	r0
     218:	0f be       	out	0x3f, r0	; 63
     21a:	0f 90       	pop	r0
     21c:	1f 90       	pop	r1
     21e:	18 95       	reti

00000220 <TIMER_Init>:
/*-----------------------------led ∫Œ∫–¡¶∞≈*/
void TIMER_Init (void)
{
	
	TCCR0B	=	0x05;
     220:	85 e0       	ldi	r24, 0x05	; 5
     222:	85 bd       	out	0x25, r24	; 37
	
	TCNT0	=	0xff - 45;		// 0.003s
     224:	82 ed       	ldi	r24, 0xD2	; 210
     226:	86 bd       	out	0x26, r24	; 38
	TIMSK0	|=	1 << TOIE0;		
     228:	ee e6       	ldi	r30, 0x6E	; 110
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	81 60       	ori	r24, 0x01	; 1
     230:	80 83       	st	Z, r24
	TIFR0	|=	1 << TOV0;	// set Overflow Interupt Flag
     232:	a8 9a       	sbi	0x15, 0	; 21
}
     234:	08 95       	ret

00000236 <LED_Init>:

void LED_Init (void)
{
     236:	cf 93       	push	r28
     238:	c0 e0       	ldi	r28, 0x00	; 0
	int i = 0;
	
	for(i=0; i<MAX_LED_NUM; i++)
	{
		pinMode(RED_PORT, i, OUTPUT);
     23a:	82 e0       	ldi	r24, 0x02	; 2
     23c:	6c 2f       	mov	r22, r28
     23e:	41 e0       	ldi	r20, 0x01	; 1
     240:	0e 94 12 09 	call	0x1224	; 0x1224 <pinMode>
		digitalWrite(RED_PORT, i, LOW);
     244:	82 e0       	ldi	r24, 0x02	; 2
     246:	6c 2f       	mov	r22, r28
     248:	40 e0       	ldi	r20, 0x00	; 0
     24a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
		pinMode(GREEN_PORT, i, OUTPUT);
     24e:	8a e0       	ldi	r24, 0x0A	; 10
     250:	6c 2f       	mov	r22, r28
     252:	41 e0       	ldi	r20, 0x01	; 1
     254:	0e 94 12 09 	call	0x1224	; 0x1224 <pinMode>
		digitalWrite(GREEN_PORT, i, LOW);
     258:	8a e0       	ldi	r24, 0x0A	; 10
     25a:	6c 2f       	mov	r22, r28
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
     262:	cf 5f       	subi	r28, 0xFF	; 255

void LED_Init (void)
{
	int i = 0;
	
	for(i=0; i<MAX_LED_NUM; i++)
     264:	c8 30       	cpi	r28, 0x08	; 8
     266:	49 f7       	brne	.-46     	; 0x23a <LED_Init+0x4>
		pinMode(RED_PORT, i, OUTPUT);
		digitalWrite(RED_PORT, i, LOW);
		pinMode(GREEN_PORT, i, OUTPUT);
		digitalWrite(GREEN_PORT, i, LOW);
	}
}
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <controlLED>:

// color : RED(0), GREEN(1)
void controlLED (int color, unsigned char data)
{
     26c:	ef 92       	push	r14
     26e:	ff 92       	push	r15
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	8c 01       	movw	r16, r24
	int i = 0;
	unsigned char nLedStatus = 0;
	nLedStatus	=	data;
	
	for(i=0; i<MAX_LED_NUM; i++)
     27a:	c0 e0       	ldi	r28, 0x00	; 0
     27c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if((nLedStatus & (1<<i)))
     27e:	e6 2e       	mov	r14, r22
     280:	ff 24       	eor	r15, r15
     282:	c7 01       	movw	r24, r14
     284:	0c 2e       	mov	r0, r28
     286:	02 c0       	rjmp	.+4      	; 0x28c <controlLED+0x20>
     288:	95 95       	asr	r25
     28a:	87 95       	ror	r24
     28c:	0a 94       	dec	r0
     28e:	e2 f7       	brpl	.-8      	; 0x288 <controlLED+0x1c>
     290:	80 ff       	sbrs	r24, 0
     292:	12 c0       	rjmp	.+36     	; 0x2b8 <controlLED+0x4c>
		{
			if (color == RED)
     294:	01 15       	cp	r16, r1
     296:	11 05       	cpc	r17, r1
     298:	31 f4       	brne	.+12     	; 0x2a6 <controlLED+0x3a>
				digitalWrite(RED_PORT, i, HIGH);
     29a:	82 e0       	ldi	r24, 0x02	; 2
     29c:	6c 2f       	mov	r22, r28
     29e:	41 e0       	ldi	r20, 0x01	; 1
     2a0:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
     2a4:	1a c0       	rjmp	.+52     	; 0x2da <controlLED+0x6e>
			else if (color == GREEN)
     2a6:	01 30       	cpi	r16, 0x01	; 1
     2a8:	11 05       	cpc	r17, r1
     2aa:	b9 f4       	brne	.+46     	; 0x2da <controlLED+0x6e>
				digitalWrite(GREEN_PORT, i, HIGH);
     2ac:	8a e0       	ldi	r24, 0x0A	; 10
     2ae:	6c 2f       	mov	r22, r28
     2b0:	41 e0       	ldi	r20, 0x01	; 1
     2b2:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
     2b6:	11 c0       	rjmp	.+34     	; 0x2da <controlLED+0x6e>
		}
		else
		{
			if (color == RED)
     2b8:	01 15       	cp	r16, r1
     2ba:	11 05       	cpc	r17, r1
     2bc:	31 f4       	brne	.+12     	; 0x2ca <controlLED+0x5e>
				digitalWrite(RED_PORT, i, LOW);
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	6c 2f       	mov	r22, r28
     2c2:	40 e0       	ldi	r20, 0x00	; 0
     2c4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
     2c8:	08 c0       	rjmp	.+16     	; 0x2da <controlLED+0x6e>
			else if (color == GREEN)
     2ca:	01 30       	cpi	r16, 0x01	; 1
     2cc:	11 05       	cpc	r17, r1
     2ce:	29 f4       	brne	.+10     	; 0x2da <controlLED+0x6e>
				digitalWrite(GREEN_PORT, i, LOW);
     2d0:	8a e0       	ldi	r24, 0x0A	; 10
     2d2:	6c 2f       	mov	r22, r28
     2d4:	40 e0       	ldi	r20, 0x00	; 0
     2d6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
{
	int i = 0;
	unsigned char nLedStatus = 0;
	nLedStatus	=	data;
	
	for(i=0; i<MAX_LED_NUM; i++)
     2da:	21 96       	adiw	r28, 0x01	; 1
     2dc:	c8 30       	cpi	r28, 0x08	; 8
     2de:	d1 05       	cpc	r29, r1
     2e0:	81 f6       	brne	.-96     	; 0x282 <controlLED+0x16>
				digitalWrite(RED_PORT, i, LOW);
			else if (color == GREEN)
				digitalWrite(GREEN_PORT, i, LOW);
		}
	}
}		
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
     2ea:	ff 90       	pop	r15
     2ec:	ef 90       	pop	r14
     2ee:	08 95       	ret

000002f0 <putCh2>:
volatile unsigned char g_debugRxData[MAX_DEBUG_RX_DATA]; // Rx buff
volatile unsigned char g_debugRxCurrentIndex = 0;       // Rx buffer index

void putCh2(char ch)
{
	while (!(UCSR2A & 0x20));
     2f0:	e0 ed       	ldi	r30, 0xD0	; 208
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	90 81       	ld	r25, Z
     2f6:	95 ff       	sbrs	r25, 5
     2f8:	fd cf       	rjmp	.-6      	; 0x2f4 <putCh2+0x4>
		UDR2= ch;
     2fa:	80 93 d6 00 	sts	0x00D6, r24
}
     2fe:	08 95       	ret

00000300 <__vector_51>:

ISR(USART2_RX_vect)
{
     300:	1f 92       	push	r1
     302:	0f 92       	push	r0
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	0f 92       	push	r0
     308:	0b b6       	in	r0, 0x3b	; 59
     30a:	0f 92       	push	r0
     30c:	11 24       	eor	r1, r1
     30e:	8f 93       	push	r24
     310:	9f 93       	push	r25
     312:	ef 93       	push	r30
     314:	ff 93       	push	r31
	g_debugRxData[g_debugRxCurrentIndex] = UDR2;
     316:	90 91 4b 04 	lds	r25, 0x044B
     31a:	80 91 d6 00 	lds	r24, 0x00D6
     31e:	ed e5       	ldi	r30, 0x5D	; 93
     320:	f4 e0       	ldi	r31, 0x04	; 4
     322:	e9 0f       	add	r30, r25
     324:	f1 1d       	adc	r31, r1
     326:	80 83       	st	Z, r24
	g_debugRxCurrentIndex++;
     328:	80 91 4b 04 	lds	r24, 0x044B
     32c:	8f 5f       	subi	r24, 0xFF	; 255
     32e:	80 93 4b 04 	sts	0x044B, r24
	if(g_debugRxCurrentIndex >= MAX_DEBUG_RX_DATA)
     332:	80 91 4b 04 	lds	r24, 0x044B
     336:	80 34       	cpi	r24, 0x40	; 64
     338:	10 f0       	brcs	.+4      	; 0x33e <__vector_51+0x3e>
		g_debugRxCurrentIndex = 0;
     33a:	10 92 4b 04 	sts	0x044B, r1
}
     33e:	ff 91       	pop	r31
     340:	ef 91       	pop	r30
     342:	9f 91       	pop	r25
     344:	8f 91       	pop	r24
     346:	0f 90       	pop	r0
     348:	0b be       	out	0x3b, r0	; 59
     34a:	0f 90       	pop	r0
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	0f 90       	pop	r0
     350:	1f 90       	pop	r1
     352:	18 95       	reti

00000354 <debugInit>:
#define BAUD_RATE 115200L
void debugInit()
{
	// USART2 use
	// PH0 => RX, PH1 => TX
	DDRH  &= 0xFC;										// "0" input, "1" output
     354:	e1 e0       	ldi	r30, 0x01	; 1
     356:	f1 e0       	ldi	r31, 0x01	; 1
     358:	80 81       	ld	r24, Z
     35a:	8c 7f       	andi	r24, 0xFC	; 252
     35c:	80 83       	st	Z, r24
	PORTH |= 0x00;
     35e:	e2 e0       	ldi	r30, 0x02	; 2
     360:	f1 e0       	ldi	r31, 0x01	; 1
     362:	80 81       	ld	r24, Z
     364:	80 83       	st	Z, r24
	
	// Not Double mode, Not multi_communication
	UCSR2A = 0x00;								// x2 Mode
     366:	10 92 d0 00 	sts	0x00D0, r1
	UCSR2B = 0x98;
     36a:	88 e9       	ldi	r24, 0x98	; 152
     36c:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C = 0x06;
     370:	86 e0       	ldi	r24, 0x06	; 6
     372:	80 93 d2 00 	sts	0x00D2, r24
	//	UBRR0L = 0x3F;	// 0b00110011, (14745600 / (16 * 14400)) - 1 = 0x40
	//	UBRR0L = 0x2F;	// 0b00110011, (14745600 / (16 * 19200)) - 1 = 0x2F
	//	UBRR0L = 0x17;	// 0b00110011, (14745600 / (16 * 38400)) - 1 = 0x17
	//	UBRR0L = 0x0F;	// 0b00110011, (14745600 / (16 * 57600)) - 1 = 0x0F

	UBRR2H=(unsigned char) (baud >>8);                            // baud ?????? ??????  H???????? ????
     376:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L=(unsigned char) (baud & 0xFF);                         // baud ?????? ??????  L???????  ????
     37a:	87 e0       	ldi	r24, 0x07	; 7
     37c:	80 93 d4 00 	sts	0x00D4, r24
	
	//	UBRR2H = 0x00;
	//	UBRR2L = 16;								// 115200
}
     380:	08 95       	ret

00000382 <debugprint>:

void debugprint(const char *fmt,...)
{
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	c0 58       	subi	r28, 0x80	; 128
     390:	d0 40       	sbci	r29, 0x00	; 0
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	de bf       	out	0x3e, r29	; 62
     398:	0f be       	out	0x3f, r0	; 63
     39a:	cd bf       	out	0x3d, r28	; 61
     39c:	fe 01       	movw	r30, r28
     39e:	e8 57       	subi	r30, 0x78	; 120
     3a0:	ff 4f       	sbci	r31, 0xFF	; 255
     3a2:	61 91       	ld	r22, Z+
     3a4:	71 91       	ld	r23, Z+
	va_list ap;
	char s[128];
	char *p_char = s;
	va_start(ap, fmt);
	vsprintf(s, fmt,ap);
     3a6:	ce 01       	movw	r24, r28
     3a8:	01 96       	adiw	r24, 0x01	; 1
     3aa:	4e 2f       	mov	r20, r30
     3ac:	5f 2f       	mov	r21, r31
     3ae:	0e 94 0d 14 	call	0x281a	; 0x281a <vsprintf>
	va_end(ap);
	while(0 != *p_char){
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
     3b4:	88 23       	and	r24, r24
     3b6:	51 f0       	breq	.+20     	; 0x3cc <debugprint+0x4a>
     3b8:	8e 01       	movw	r16, r28
     3ba:	0e 5f       	subi	r16, 0xFE	; 254
     3bc:	1f 4f       	sbci	r17, 0xFF	; 255
		putCh2(*p_char++);
     3be:	0e 94 78 01 	call	0x2f0	; 0x2f0 <putCh2>
	char s[128];
	char *p_char = s;
	va_start(ap, fmt);
	vsprintf(s, fmt,ap);
	va_end(ap);
	while(0 != *p_char){
     3c2:	f8 01       	movw	r30, r16
     3c4:	81 91       	ld	r24, Z+
     3c6:	8f 01       	movw	r16, r30
     3c8:	88 23       	and	r24, r24
     3ca:	c9 f7       	brne	.-14     	; 0x3be <debugprint+0x3c>
		putCh2(*p_char++);
	}	
}
     3cc:	c0 58       	subi	r28, 0x80	; 128
     3ce:	df 4f       	sbci	r29, 0xFF	; 255
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	cd bf       	out	0x3d, r28	; 61
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	08 95       	ret

000003e4 <debugConsoleMain>:

void debugConsoleMain()
{
	int i;

	if ( !g_debugRxCurrentIndex ) 
     3e4:	80 91 4b 04 	lds	r24, 0x044B
     3e8:	88 23       	and	r24, r24
     3ea:	79 f0       	breq	.+30     	; 0x40a <debugConsoleMain+0x26>
		return;
	
	for(i = 0; i <g_debugRxCurrentIndex;i++)
     3ec:	80 91 4b 04 	lds	r24, 0x044B
     3f0:	88 23       	and	r24, r24
     3f2:	49 f0       	breq	.+18     	; 0x406 <debugConsoleMain+0x22>
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	20 91 4b 04 	lds	r18, 0x044B
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	82 17       	cp	r24, r18
     402:	93 07       	cpc	r25, r19
     404:	cc f3       	brlt	.-14     	; 0x3f8 <debugConsoleMain+0x14>
	{

	}
	g_debugRxCurrentIndex = 0;
     406:	10 92 4b 04 	sts	0x044B, r1
     40a:	08 95       	ret

0000040c <putCh0>:
volatile int g_rxDataLen = 0;
volatile uint8_t g_rxDataBuff[MAX_WIFI_RX_DATA];

void putCh0(char ch)
{
	while (!(UCSR0A & 0x20));
     40c:	e0 ec       	ldi	r30, 0xC0	; 192
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	90 81       	ld	r25, Z
     412:	95 ff       	sbrs	r25, 5
     414:	fd cf       	rjmp	.-6      	; 0x410 <putCh0+0x4>
	UDR0= ch;
     416:	80 93 c6 00 	sts	0x00C6, r24
}
     41a:	08 95       	ret

0000041c <__vector_25>:

ISR(USART0_RX_vect)
{
     41c:	1f 92       	push	r1
     41e:	0f 92       	push	r0
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	0f 92       	push	r0
     424:	0b b6       	in	r0, 0x3b	; 59
     426:	0f 92       	push	r0
     428:	11 24       	eor	r1, r1
     42a:	8f 93       	push	r24
     42c:	9f 93       	push	r25
     42e:	ef 93       	push	r30
     430:	ff 93       	push	r31
	g_wifiRxData[g_wifiRxCurrentIndex] = UDR0;
     432:	90 91 51 04 	lds	r25, 0x0451
     436:	80 91 c6 00 	lds	r24, 0x00C6
     43a:	ed e9       	ldi	r30, 0x9D	; 157
     43c:	f6 e0       	ldi	r31, 0x06	; 6
     43e:	e9 0f       	add	r30, r25
     440:	f1 1d       	adc	r31, r1
     442:	80 83       	st	Z, r24
	g_wifiRxCurrentIndex++;
     444:	80 91 51 04 	lds	r24, 0x0451
     448:	8f 5f       	subi	r24, 0xFF	; 255
     44a:	80 93 51 04 	sts	0x0451, r24
	if(g_wifiRxCurrentIndex >= MAX_WIFI_RX_DATA)
     44e:	80 91 51 04 	lds	r24, 0x0451
	g_wifiRxCurrentIndex = 0;
}
     452:	ff 91       	pop	r31
     454:	ef 91       	pop	r30
     456:	9f 91       	pop	r25
     458:	8f 91       	pop	r24
     45a:	0f 90       	pop	r0
     45c:	0b be       	out	0x3b, r0	; 59
     45e:	0f 90       	pop	r0
     460:	0f be       	out	0x3f, r0	; 63
     462:	0f 90       	pop	r0
     464:	1f 90       	pop	r1
     466:	18 95       	reti

00000468 <wifiAndBTModuleReset>:

void wifiAndBTModuleReset()
{
	// MOD_RESET(PD6) (wifi module and  BT module reset )  => bt + wifi  reset
	DDRD  &= 0xBF; // input										// "0" input, "1" output
     468:	56 98       	cbi	0x0a, 6	; 10
	PORTD &= 0xBF; // low
     46a:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     46c:	89 e9       	ldi	r24, 0x99	; 153
     46e:	99 e5       	ldi	r25, 0x59	; 89
     470:	a1 e0       	ldi	r26, 0x01	; 1
     472:	81 50       	subi	r24, 0x01	; 1
     474:	90 40       	sbci	r25, 0x00	; 0
     476:	a0 40       	sbci	r26, 0x00	; 0
     478:	e1 f7       	brne	.-8      	; 0x472 <wifiAndBTModuleReset+0xa>
     47a:	00 00       	nop
	
	_delay_ms(30);
	DDRD  |= 0x40; // output
     47c:	56 9a       	sbi	0x0a, 6	; 10
     47e:	8f ef       	ldi	r24, 0xFF	; 255
     480:	9f e3       	ldi	r25, 0x3F	; 63
     482:	a2 e0       	ldi	r26, 0x02	; 2
     484:	81 50       	subi	r24, 0x01	; 1
     486:	90 40       	sbci	r25, 0x00	; 0
     488:	a0 40       	sbci	r26, 0x00	; 0
     48a:	e1 f7       	brne	.-8      	; 0x484 <wifiAndBTModuleReset+0x1c>
     48c:	00 c0       	rjmp	.+0      	; 0x48e <wifiAndBTModuleReset+0x26>
     48e:	00 00       	nop
	_delay_ms(50);
	DDRD  &= 0xBF; // input
     490:	56 98       	cbi	0x0a, 6	; 10
	PORTD |= 0x40; // high
     492:	5e 9a       	sbi	0x0b, 6	; 11
     494:	8f ef       	ldi	r24, 0xFF	; 255
     496:	9f ef       	ldi	r25, 0xFF	; 255
     498:	a9 e5       	ldi	r26, 0x59	; 89
     49a:	81 50       	subi	r24, 0x01	; 1
     49c:	90 40       	sbci	r25, 0x00	; 0
     49e:	a0 40       	sbci	r26, 0x00	; 0
     4a0:	e1 f7       	brne	.-8      	; 0x49a <wifiAndBTModuleReset+0x32>
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <wifiAndBTModuleReset+0x3c>
     4a4:	00 00       	nop
	
	_delay_ms(2000);
}
     4a6:	08 95       	ret

000004a8 <wifiEnable>:

void wifiEnable(uint8_t bEnable)
{
	if ( bEnable)
     4a8:	88 23       	and	r24, r24
     4aa:	11 f0       	breq	.+4      	; 0x4b0 <wifiEnable+0x8>
	{
		PORTD |= 0x80;  // high output
     4ac:	5f 9a       	sbi	0x0b, 7	; 11
     4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <wifiEnable+0xa>
	}
	else
	{
		PORTD &= 0x7F;  // low output
     4b0:	5f 98       	cbi	0x0b, 7	; 11
     4b2:	8f ef       	ldi	r24, 0xFF	; 255
     4b4:	9f ef       	ldi	r25, 0xFF	; 255
     4b6:	a8 e0       	ldi	r26, 0x08	; 8
     4b8:	81 50       	subi	r24, 0x01	; 1
     4ba:	90 40       	sbci	r25, 0x00	; 0
     4bc:	a0 40       	sbci	r26, 0x00	; 0
     4be:	e1 f7       	brne	.-8      	; 0x4b8 <wifiEnable+0x10>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <wifiEnable+0x1a>
     4c2:	00 00       	nop
	}
	_delay_ms(200);
	
}
     4c4:	08 95       	ret

000004c6 <wifiInit>:
#define BAUD_RATE_WIFI 115200L
void wifiInit()
{
	// USART0 use
	// PE0 => RX, PE1 => TX
	DDRE  &= 0xFC;										// "0" input, "1" output
     4c6:	8d b1       	in	r24, 0x0d	; 13
     4c8:	8c 7f       	andi	r24, 0xFC	; 252
     4ca:	8d b9       	out	0x0d, r24	; 13
	PORTE |= 0x00;
     4cc:	8e b1       	in	r24, 0x0e	; 14
     4ce:	8e b9       	out	0x0e, r24	; 14
	
	// Not Double mode, Not multi_communication
	UCSR0A = 0x00;								// x2 Mode
     4d0:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x98;
     4d4:	88 e9       	ldi	r24, 0x98	; 152
     4d6:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = 0x06;
     4da:	86 e0       	ldi	r24, 0x06	; 6
     4dc:	80 93 c2 00 	sts	0x00C2, r24
	//	UBRR0L = 16;								// 115200
	
	unsigned int baud=1;   									// ??? baud???? "1"?? ????
	baud = ((F_CPU+(BAUD_RATE_WIFI*8L))/(BAUD_RATE_WIFI*16L)-1);      // baud?? ???¨÷¨„?????? ????
	
	UBRR0H=(unsigned char) (baud >>8);                            // baud ?????? ??????  H???????? ????
     4e0:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=(unsigned char) (baud & 0xFF);                         // baud ?????? ??????  L???????  ????
     4e4:	87 e0       	ldi	r24, 0x07	; 7
     4e6:	80 93 c4 00 	sts	0x00C4, r24
	
	// wifi enable init
	// WIFI_EN  ( PD7 )
	DDRD  |= 0x80; // output										// "0" input, "1" output
     4ea:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= 0x80; // default high
     4ec:	5f 9a       	sbi	0x0b, 7	; 11
	
	wifiAndBTModuleReset();
     4ee:	0e 94 34 02 	call	0x468	; 0x468 <wifiAndBTModuleReset>
     4f2:	8f ef       	ldi	r24, 0xFF	; 255
     4f4:	9f e7       	ldi	r25, 0x7F	; 127
     4f6:	a4 e0       	ldi	r26, 0x04	; 4
     4f8:	81 50       	subi	r24, 0x01	; 1
     4fa:	90 40       	sbci	r25, 0x00	; 0
     4fc:	a0 40       	sbci	r26, 0x00	; 0
     4fe:	e1 f7       	brne	.-8      	; 0x4f8 <wifiInit+0x32>
     500:	00 c0       	rjmp	.+0      	; 0x502 <wifiInit+0x3c>
     502:	00 00       	nop
	_delay_ms(100);
	wifiEnable(1);
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	0e 94 54 02 	call	0x4a8	; 0x4a8 <wifiEnable>
	
	callbackFnc = NULL;
     50a:	10 92 9e 0a 	sts	0x0A9E, r1
     50e:	10 92 9d 0a 	sts	0x0A9D, r1
}
     512:	08 95       	ret

00000514 <wifiprint>:

void wifiprint(const char *fmt,...)
{
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	c0 58       	subi	r28, 0x80	; 128
     522:	d0 40       	sbci	r29, 0x00	; 0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	f8 94       	cli
     528:	de bf       	out	0x3e, r29	; 62
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	fe 01       	movw	r30, r28
     530:	e8 57       	subi	r30, 0x78	; 120
     532:	ff 4f       	sbci	r31, 0xFF	; 255
     534:	61 91       	ld	r22, Z+
     536:	71 91       	ld	r23, Z+
	va_list ap;
	char s[128];
	char *p_char = s;
	va_start(ap, fmt);
	vsprintf(s, fmt,ap);
     538:	ce 01       	movw	r24, r28
     53a:	01 96       	adiw	r24, 0x01	; 1
     53c:	4e 2f       	mov	r20, r30
     53e:	5f 2f       	mov	r21, r31
     540:	0e 94 0d 14 	call	0x281a	; 0x281a <vsprintf>
	va_end(ap);
	while(0 != *p_char){
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	88 23       	and	r24, r24
     548:	51 f0       	breq	.+20     	; 0x55e <wifiprint+0x4a>
     54a:	8e 01       	movw	r16, r28
     54c:	0e 5f       	subi	r16, 0xFE	; 254
     54e:	1f 4f       	sbci	r17, 0xFF	; 255
		putCh0(*p_char++);
     550:	0e 94 06 02 	call	0x40c	; 0x40c <putCh0>
	char s[128];
	char *p_char = s;
	va_start(ap, fmt);
	vsprintf(s, fmt,ap);
	va_end(ap);
	while(0 != *p_char){
     554:	f8 01       	movw	r30, r16
     556:	81 91       	ld	r24, Z+
     558:	8f 01       	movw	r16, r30
     55a:	88 23       	and	r24, r24
     55c:	c9 f7       	brne	.-14     	; 0x550 <wifiprint+0x3c>
		putCh0(*p_char++);
	}
}
     55e:	c0 58       	subi	r28, 0x80	; 128
     560:	df 4f       	sbci	r29, 0xFF	; 255
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	f8 94       	cli
     566:	de bf       	out	0x3e, r29	; 62
     568:	0f be       	out	0x3f, r0	; 63
     56a:	cd bf       	out	0x3d, r28	; 61
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	08 95       	ret

00000576 <parsingIPDRxData>:
// 1 => under rxing
// 2 => parcing fail

// +IPD,<len>:<data>
uint8_t parsingIPDRxData(uint8_t* buff, int buffLen)
{
     576:	8f 92       	push	r8
     578:	9f 92       	push	r9
     57a:	af 92       	push	r10
     57c:	bf 92       	push	r11
     57e:	cf 92       	push	r12
     580:	df 92       	push	r13
     582:	ef 92       	push	r14
     584:	ff 92       	push	r15
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
     592:	2a 97       	sbiw	r28, 0x0a	; 10
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	6c 01       	movw	r12, r24
     5a0:	7b 01       	movw	r14, r22
	int deliIndex = -1;
	int rxLen;
	char  strTemp[10];
	for( int i = 0; i < buffLen ; i++)
     5a2:	16 16       	cp	r1, r22
     5a4:	17 06       	cpc	r1, r23
     5a6:	0c f0       	brlt	.+2      	; 0x5aa <parsingIPDRxData+0x34>
     5a8:	76 c0       	rjmp	.+236    	; 0x696 <parsingIPDRxData+0x120>
	{
		if (buff[i] == ':')
     5aa:	fc 01       	movw	r30, r24
     5ac:	80 81       	ld	r24, Z
     5ae:	8a 33       	cpi	r24, 0x3A	; 58
     5b0:	c1 f0       	breq	.+48     	; 0x5e2 <parsingIPDRxData+0x6c>
// 0 => success
// 1 => under rxing
// 2 => parcing fail

// +IPD,<len>:<data>
uint8_t parsingIPDRxData(uint8_t* buff, int buffLen)
     5b2:	31 96       	adiw	r30, 0x01	; 1
{
	int deliIndex = -1;
	int rxLen;
	char  strTemp[10];
	for( int i = 0; i < buffLen ; i++)
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	03 c0       	rjmp	.+6      	; 0x5c0 <parsingIPDRxData+0x4a>
	{
		if (buff[i] == ':')
     5ba:	21 91       	ld	r18, Z+
     5bc:	2a 33       	cpi	r18, 0x3A	; 58
     5be:	31 f0       	breq	.+12     	; 0x5cc <parsingIPDRxData+0x56>
uint8_t parsingIPDRxData(uint8_t* buff, int buffLen)
{
	int deliIndex = -1;
	int rxLen;
	char  strTemp[10];
	for( int i = 0; i < buffLen ; i++)
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	8e 15       	cp	r24, r14
     5c4:	9f 05       	cpc	r25, r15
     5c6:	c9 f7       	brne	.-14     	; 0x5ba <parsingIPDRxData+0x44>
			break;
		}
	}
	if ( deliIndex == -1)
	{
		return 1;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	6e c0       	rjmp	.+220    	; 0x6a8 <parsingIPDRxData+0x132>
		{
			deliIndex = i;
			break;
		}
	}
	if ( deliIndex == -1)
     5cc:	ff ef       	ldi	r31, 0xFF	; 255
     5ce:	8f 3f       	cpi	r24, 0xFF	; 255
     5d0:	9f 07       	cpc	r25, r31
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <parsingIPDRxData+0x60>
     5d4:	62 c0       	rjmp	.+196    	; 0x69a <parsingIPDRxData+0x124>
uint8_t parsingIPDRxData(uint8_t* buff, int buffLen)
{
	int deliIndex = -1;
	int rxLen;
	char  strTemp[10];
	for( int i = 0; i < buffLen ; i++)
     5d6:	5c 01       	movw	r10, r24
	}
	if ( deliIndex == -1)
	{
		return 1;
	}
	if (deliIndex > 11 )
     5d8:	8c 30       	cpi	r24, 0x0C	; 12
     5da:	91 05       	cpc	r25, r1
     5dc:	0c f0       	brlt	.+2      	; 0x5e0 <parsingIPDRxData+0x6a>
     5de:	5f c0       	rjmp	.+190    	; 0x69e <parsingIPDRxData+0x128>
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <parsingIPDRxData+0x70>
uint8_t parsingIPDRxData(uint8_t* buff, int buffLen)
{
	int deliIndex = -1;
	int rxLen;
	char  strTemp[10];
	for( int i = 0; i < buffLen ; i++)
     5e2:	aa 24       	eor	r10, r10
     5e4:	bb 24       	eor	r11, r11
	if (deliIndex > 11 )
	{
		
		return 2;
	}
	memcpy(strTemp,buff+5, deliIndex - 5 );
     5e6:	85 01       	movw	r16, r10
     5e8:	05 50       	subi	r16, 0x05	; 5
     5ea:	10 40       	sbci	r17, 0x00	; 0
     5ec:	b6 01       	movw	r22, r12
     5ee:	6b 5f       	subi	r22, 0xFB	; 251
     5f0:	7f 4f       	sbci	r23, 0xFF	; 255
     5f2:	ce 01       	movw	r24, r28
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	40 2f       	mov	r20, r16
     5f8:	51 2f       	mov	r21, r17
     5fa:	0e 94 bf 13 	call	0x277e	; 0x277e <memcpy>
	strTemp[deliIndex - 5] = NULL;
     5fe:	e1 e0       	ldi	r30, 0x01	; 1
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	ec 0f       	add	r30, r28
     604:	fd 1f       	adc	r31, r29
     606:	e0 0f       	add	r30, r16
     608:	f1 1f       	adc	r31, r17
     60a:	10 82       	st	Z, r1
	
	rxLen = atoi(strTemp);
     60c:	ce 01       	movw	r24, r28
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	0e 94 a1 13 	call	0x2742	; 0x2742 <atoi>
     614:	ac 01       	movw	r20, r24
	
	if ( rxLen == 0)
     616:	00 97       	sbiw	r24, 0x00	; 0
     618:	09 f4       	brne	.+2      	; 0x61c <parsingIPDRxData+0xa6>
     61a:	43 c0       	rjmp	.+134    	; 0x6a2 <parsingIPDRxData+0x12c>
	{
		return 2;
	}
	
	if ( (buffLen -deliIndex-1) < rxLen )
     61c:	ea 18       	sub	r14, r10
     61e:	fb 08       	sbc	r15, r11
     620:	87 01       	movw	r16, r14
     622:	01 50       	subi	r16, 0x01	; 1
     624:	10 40       	sbci	r17, 0x00	; 0
     626:	08 17       	cp	r16, r24
     628:	19 07       	cpc	r17, r25
     62a:	34 f5       	brge	.+76     	; 0x678 <parsingIPDRxData+0x102>
	{
		if ( (buffLen-deliIndex+1) == rxLen ) // messageø°  \r\n ∫Ÿ¿∫ ∞ÊøÏ 
     62c:	c7 01       	movw	r24, r14
     62e:	01 96       	adiw	r24, 0x01	; 1
     630:	84 17       	cp	r24, r20
     632:	95 07       	cpc	r25, r21
     634:	c1 f5       	brne	.+112    	; 0x6a6 <parsingIPDRxData+0x130>
		{
			g_wifiIPDRxDataLen = rxLen;	
     636:	90 93 50 04 	sts	0x0450, r25
     63a:	80 93 4f 04 	sts	0x044F, r24
			memcpy(g_wifiIPDRxData,buff+deliIndex+1,rxLen-2 );
     63e:	0f 2e       	mov	r0, r31
     640:	fd e9       	ldi	r31, 0x9D	; 157
     642:	8f 2e       	mov	r8, r31
     644:	f4 e0       	ldi	r31, 0x04	; 4
     646:	9f 2e       	mov	r9, r31
     648:	f0 2d       	mov	r31, r0
     64a:	b5 01       	movw	r22, r10
     64c:	6f 5f       	subi	r22, 0xFF	; 255
     64e:	7f 4f       	sbci	r23, 0xFF	; 255
     650:	6c 0d       	add	r22, r12
     652:	7d 1d       	adc	r23, r13
     654:	88 2d       	mov	r24, r8
     656:	99 2d       	mov	r25, r9
     658:	40 2f       	mov	r20, r16
     65a:	51 2f       	mov	r21, r17
     65c:	0e 94 bf 13 	call	0x277e	; 0x277e <memcpy>
			g_wifiIPDRxData[rxLen-2] = 0x0D;
     660:	f4 01       	movw	r30, r8
     662:	e0 0f       	add	r30, r16
     664:	f1 1f       	adc	r31, r17
     666:	8d e0       	ldi	r24, 0x0D	; 13
     668:	80 83       	st	Z, r24
			g_wifiIPDRxData[rxLen-1] = 0x0A;
     66a:	f4 01       	movw	r30, r8
     66c:	ee 0d       	add	r30, r14
     66e:	ff 1d       	adc	r31, r15
     670:	8a e0       	ldi	r24, 0x0A	; 10
     672:	80 83       	st	Z, r24
			return 0;
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	18 c0       	rjmp	.+48     	; 0x6a8 <parsingIPDRxData+0x132>
		}
		return 1;
	}
	g_wifiIPDRxDataLen = rxLen;
     678:	90 93 50 04 	sts	0x0450, r25
     67c:	80 93 4f 04 	sts	0x044F, r24
	memcpy(g_wifiIPDRxData,buff+deliIndex+1,rxLen );
     680:	8d e9       	ldi	r24, 0x9D	; 157
     682:	94 e0       	ldi	r25, 0x04	; 4
     684:	b5 01       	movw	r22, r10
     686:	6f 5f       	subi	r22, 0xFF	; 255
     688:	7f 4f       	sbci	r23, 0xFF	; 255
     68a:	6c 0d       	add	r22, r12
     68c:	7d 1d       	adc	r23, r13
     68e:	0e 94 bf 13 	call	0x277e	; 0x277e <memcpy>
	return 0;
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	09 c0       	rjmp	.+18     	; 0x6a8 <parsingIPDRxData+0x132>
			break;
		}
	}
	if ( deliIndex == -1)
	{
		return 1;
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	07 c0       	rjmp	.+14     	; 0x6a8 <parsingIPDRxData+0x132>
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	05 c0       	rjmp	.+10     	; 0x6a8 <parsingIPDRxData+0x132>
	}
	if (deliIndex > 11 )
	{
		
		return 2;
     69e:	82 e0       	ldi	r24, 0x02	; 2
     6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <parsingIPDRxData+0x132>
	
	rxLen = atoi(strTemp);
	
	if ( rxLen == 0)
	{
		return 2;
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <parsingIPDRxData+0x132>
			memcpy(g_wifiIPDRxData,buff+deliIndex+1,rxLen-2 );
			g_wifiIPDRxData[rxLen-2] = 0x0D;
			g_wifiIPDRxData[rxLen-1] = 0x0A;
			return 0;
		}
		return 1;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
	}
	g_wifiIPDRxDataLen = rxLen;
	memcpy(g_wifiIPDRxData,buff+deliIndex+1,rxLen );
	return 0;
}
     6a8:	2a 96       	adiw	r28, 0x0a	; 10
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	de bf       	out	0x3e, r29	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	cd bf       	out	0x3d, r28	; 61
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	ff 90       	pop	r15
     6be:	ef 90       	pop	r14
     6c0:	df 90       	pop	r13
     6c2:	cf 90       	pop	r12
     6c4:	bf 90       	pop	r11
     6c6:	af 90       	pop	r10
     6c8:	9f 90       	pop	r9
     6ca:	8f 90       	pop	r8
     6cc:	08 95       	ret

000006ce <parsingMsg>:
#define  MSG_SEND_READY	8
#define  MSG_BYSY		9
#define  MSG_UNDER_MSG  10

uint8_t parsingMsg(uint8_t* buff, int buffLen)
{
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	ec 01       	movw	r28, r24
     6d8:	8b 01       	movw	r16, r22
	//putCh2(g_wifiRxData[i]);
	debugprint("[%02X]",buff[i]);
}
debugprint("\r\n");
#endif	
	if (!strncmp((char*)buff,"OK",2))
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	72 e0       	ldi	r23, 0x02	; 2
     6de:	42 e0       	ldi	r20, 0x02	; 2
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	0e 94 c8 13 	call	0x2790	; 0x2790 <strncmp>
     6e6:	28 2f       	mov	r18, r24
     6e8:	39 2f       	mov	r19, r25
     6ea:	21 15       	cp	r18, r1
     6ec:	31 05       	cpc	r19, r1
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <parsingMsg+0x24>
     6f0:	6a c0       	rjmp	.+212    	; 0x7c6 <parsingMsg+0xf8>
	{
		return MSG_OK;
	}
	else if (buff[0] == '>')
     6f2:	88 81       	ld	r24, Y
     6f4:	8e 33       	cpi	r24, 0x3E	; 62
     6f6:	09 f4       	brne	.+2      	; 0x6fa <parsingMsg+0x2c>
     6f8:	68 c0       	rjmp	.+208    	; 0x7ca <parsingMsg+0xfc>
	{
		return MSG_SEND_READY;
	}
	else if ((buffLen >= 7) && !strncmp(buff,"SEND OK",7)  )
     6fa:	07 30       	cpi	r16, 0x07	; 7
     6fc:	11 05       	cpc	r17, r1
     6fe:	6c f0       	brlt	.+26     	; 0x71a <parsingMsg+0x4c>
     700:	ce 01       	movw	r24, r28
     702:	63 e0       	ldi	r22, 0x03	; 3
     704:	72 e0       	ldi	r23, 0x02	; 2
     706:	47 e0       	ldi	r20, 0x07	; 7
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	0e 94 c8 13 	call	0x2790	; 0x2790 <strncmp>
     70e:	28 2f       	mov	r18, r24
     710:	39 2f       	mov	r19, r25
     712:	21 15       	cp	r18, r1
     714:	31 05       	cpc	r19, r1
     716:	09 f4       	brne	.+2      	; 0x71a <parsingMsg+0x4c>
     718:	5a c0       	rjmp	.+180    	; 0x7ce <parsingMsg+0x100>
	{
		return MSG_SEND_OK;
	}
	else if ((buffLen >=4) &&  !strncmp(buff,"+IPD,",4) )
     71a:	04 30       	cpi	r16, 0x04	; 4
     71c:	11 05       	cpc	r17, r1
     71e:	c4 f0       	brlt	.+48     	; 0x750 <parsingMsg+0x82>
     720:	ce 01       	movw	r24, r28
     722:	6b e0       	ldi	r22, 0x0B	; 11
     724:	72 e0       	ldi	r23, 0x02	; 2
     726:	44 e0       	ldi	r20, 0x04	; 4
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	0e 94 c8 13 	call	0x2790	; 0x2790 <strncmp>
     72e:	28 2f       	mov	r18, r24
     730:	39 2f       	mov	r19, r25
     732:	21 15       	cp	r18, r1
     734:	31 05       	cpc	r19, r1
     736:	61 f4       	brne	.+24     	; 0x750 <parsingMsg+0x82>
	{
		uint8_t temp;
		temp = parsingIPDRxData(buff, buffLen);
     738:	ce 01       	movw	r24, r28
     73a:	b8 01       	movw	r22, r16
     73c:	0e 94 bb 02 	call	0x576	; 0x576 <parsingIPDRxData>
		if ( temp == 0)
     740:	88 23       	and	r24, r24
     742:	09 f4       	brne	.+2      	; 0x746 <parsingMsg+0x78>
     744:	46 c0       	rjmp	.+140    	; 0x7d2 <parsingMsg+0x104>
			return MSG_RX;
		else if (temp == 1)
     746:	81 30       	cpi	r24, 0x01	; 1
     748:	09 f0       	breq	.+2      	; 0x74c <parsingMsg+0x7e>
     74a:	45 c0       	rjmp	.+138    	; 0x7d6 <parsingMsg+0x108>
			return MSG_RXING;
     74c:	84 e0       	ldi	r24, 0x04	; 4
     74e:	4e c0       	rjmp	.+156    	; 0x7ec <parsingMsg+0x11e>
		
		return MSG_UNDEFINED;	// fail
	}
	else if ((buffLen >= 5) && !strncmp(buff,"ERROR",5)  )
     750:	05 30       	cpi	r16, 0x05	; 5
     752:	11 05       	cpc	r17, r1
     754:	64 f0       	brlt	.+24     	; 0x76e <parsingMsg+0xa0>
     756:	ce 01       	movw	r24, r28
     758:	61 e1       	ldi	r22, 0x11	; 17
     75a:	72 e0       	ldi	r23, 0x02	; 2
     75c:	45 e0       	ldi	r20, 0x05	; 5
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	0e 94 c8 13 	call	0x2790	; 0x2790 <strncmp>
     764:	28 2f       	mov	r18, r24
     766:	39 2f       	mov	r19, r25
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	b1 f1       	breq	.+108    	; 0x7da <parsingMsg+0x10c>
	{
		return MSG_ERROR;
	}
	else if ((buffLen >= 4) && !strncmp(buff,"FAIL",5)  )
     76e:	04 30       	cpi	r16, 0x04	; 4
     770:	11 05       	cpc	r17, r1
     772:	64 f0       	brlt	.+24     	; 0x78c <parsingMsg+0xbe>
     774:	ce 01       	movw	r24, r28
     776:	67 e1       	ldi	r22, 0x17	; 23
     778:	72 e0       	ldi	r23, 0x02	; 2
     77a:	45 e0       	ldi	r20, 0x05	; 5
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	0e 94 c8 13 	call	0x2790	; 0x2790 <strncmp>
     782:	28 2f       	mov	r18, r24
     784:	39 2f       	mov	r19, r25
     786:	21 15       	cp	r18, r1
     788:	31 05       	cpc	r19, r1
     78a:	49 f1       	breq	.+82     	; 0x7de <parsingMsg+0x110>
	{
		return MSG_FAIL;
	}
	else if ((buffLen >= 7) && !strncmp(buff,"ALREADY",7)  )
     78c:	07 30       	cpi	r16, 0x07	; 7
     78e:	11 05       	cpc	r17, r1
     790:	44 f1       	brlt	.+80     	; 0x7e2 <parsingMsg+0x114>
     792:	ce 01       	movw	r24, r28
     794:	6c e1       	ldi	r22, 0x1C	; 28
     796:	72 e0       	ldi	r23, 0x02	; 2
     798:	47 e0       	ldi	r20, 0x07	; 7
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	0e 94 c8 13 	call	0x2790	; 0x2790 <strncmp>
     7a0:	28 2f       	mov	r18, r24
     7a2:	39 2f       	mov	r19, r25
     7a4:	21 15       	cp	r18, r1
     7a6:	31 05       	cpc	r19, r1
     7a8:	f1 f0       	breq	.+60     	; 0x7e6 <parsingMsg+0x118>
	{
		return MSG_ALREAD;
	}
	else if ((buffLen>= 7) && !strncmp(buff,"busy...",7) )
     7aa:	ce 01       	movw	r24, r28
     7ac:	64 e2       	ldi	r22, 0x24	; 36
     7ae:	72 e0       	ldi	r23, 0x02	; 2
     7b0:	47 e0       	ldi	r20, 0x07	; 7
     7b2:	50 e0       	ldi	r21, 0x00	; 0
     7b4:	0e 94 c8 13 	call	0x2790	; 0x2790 <strncmp>
     7b8:	28 2f       	mov	r18, r24
     7ba:	39 2f       	mov	r19, r25
     7bc:	21 15       	cp	r18, r1
     7be:	31 05       	cpc	r19, r1
     7c0:	a1 f4       	brne	.+40     	; 0x7ea <parsingMsg+0x11c>
	{
		return MSG_BYSY;
     7c2:	89 e0       	ldi	r24, 0x09	; 9
     7c4:	13 c0       	rjmp	.+38     	; 0x7ec <parsingMsg+0x11e>
}
debugprint("\r\n");
#endif	
	if (!strncmp((char*)buff,"OK",2))
	{
		return MSG_OK;
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	11 c0       	rjmp	.+34     	; 0x7ec <parsingMsg+0x11e>
	}
	else if (buff[0] == '>')
	{
		return MSG_SEND_READY;
     7ca:	88 e0       	ldi	r24, 0x08	; 8
     7cc:	0f c0       	rjmp	.+30     	; 0x7ec <parsingMsg+0x11e>
	}
	else if ((buffLen >= 7) && !strncmp(buff,"SEND OK",7)  )
	{
		return MSG_SEND_OK;
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	0d c0       	rjmp	.+26     	; 0x7ec <parsingMsg+0x11e>
	else if ((buffLen >=4) &&  !strncmp(buff,"+IPD,",4) )
	{
		uint8_t temp;
		temp = parsingIPDRxData(buff, buffLen);
		if ( temp == 0)
			return MSG_RX;
     7d2:	83 e0       	ldi	r24, 0x03	; 3
     7d4:	0b c0       	rjmp	.+22     	; 0x7ec <parsingMsg+0x11e>
		else if (temp == 1)
			return MSG_RXING;
		
		return MSG_UNDEFINED;	// fail
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	09 c0       	rjmp	.+18     	; 0x7ec <parsingMsg+0x11e>
	}
	else if ((buffLen >= 5) && !strncmp(buff,"ERROR",5)  )
	{
		return MSG_ERROR;
     7da:	85 e0       	ldi	r24, 0x05	; 5
     7dc:	07 c0       	rjmp	.+14     	; 0x7ec <parsingMsg+0x11e>
	}
	else if ((buffLen >= 4) && !strncmp(buff,"FAIL",5)  )
	{
		return MSG_FAIL;
     7de:	86 e0       	ldi	r24, 0x06	; 6
     7e0:	05 c0       	rjmp	.+10     	; 0x7ec <parsingMsg+0x11e>
	else if (buffLen>= 7)
	{
		return MSG_UNDEFINED;
	}
	
	return MSG_UNDER_MSG;
     7e2:	8a e0       	ldi	r24, 0x0A	; 10
     7e4:	03 c0       	rjmp	.+6      	; 0x7ec <parsingMsg+0x11e>
	{
		return MSG_FAIL;
	}
	else if ((buffLen >= 7) && !strncmp(buff,"ALREADY",7)  )
	{
		return MSG_ALREAD;
     7e6:	87 e0       	ldi	r24, 0x07	; 7
     7e8:	01 c0       	rjmp	.+2      	; 0x7ec <parsingMsg+0x11e>
	{
		return MSG_BYSY;
	}
	else if (buffLen>= 7)
	{
		return MSG_UNDEFINED;
     7ea:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return MSG_UNDER_MSG;
}
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	08 95       	ret

000007f6 <rxDataProcess>:

uint8_t rxDataProcess(uint8_t* msgBuff, uint8_t msgBuffLen)
{
     7f6:	2f 92       	push	r2
     7f8:	3f 92       	push	r3
     7fa:	4f 92       	push	r4
     7fc:	5f 92       	push	r5
     7fe:	6f 92       	push	r6
     800:	7f 92       	push	r7
     802:	8f 92       	push	r8
     804:	9f 92       	push	r9
     806:	af 92       	push	r10
     808:	bf 92       	push	r11
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	c2 50       	subi	r28, 0x02	; 2
     820:	d2 40       	sbci	r29, 0x02	; 2
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
     82c:	3c 01       	movw	r6, r24
     82e:	c6 2e       	mov	r12, r22
	int lineFeedIndex;
	
	uint8_t syncDetected;
	uint8_t temp;
	uint8_t msgBuffIndex = 0;
	if (g_wifiRxCurrentIndex == 0 )
     830:	80 91 51 04 	lds	r24, 0x0451
     834:	88 23       	and	r24, r24
     836:	09 f4       	brne	.+2      	; 0x83a <rxDataProcess+0x44>
     838:	0b c1       	rjmp	.+534    	; 0xa50 <rxDataProcess+0x25a>
		return 0;
	
	if ((g_rxDataLen + g_wifiRxCurrentIndex) >= MAX_WIFI_RX_DATA )
     83a:	20 91 51 04 	lds	r18, 0x0451
     83e:	80 91 4c 04 	lds	r24, 0x044C
     842:	90 91 4d 04 	lds	r25, 0x044D
     846:	82 0f       	add	r24, r18
     848:	91 1d       	adc	r25, r1
     84a:	22 e0       	ldi	r18, 0x02	; 2
     84c:	80 30       	cpi	r24, 0x00	; 0
     84e:	92 07       	cpc	r25, r18
     850:	44 f0       	brlt	.+16     	; 0x862 <rxDataProcess+0x6c>
	{
		g_rxDataLen = 0;
     852:	10 92 4d 04 	sts	0x044D, r1
     856:	10 92 4c 04 	sts	0x044C, r1
		g_underRxDataFlag = 0;
     85a:	10 92 4e 04 	sts	0x044E, r1
		return msgBuffIndex;
     85e:	dd 24       	eor	r13, r13
     860:	f8 c0       	rjmp	.+496    	; 0xa52 <rxDataProcess+0x25c>
	}
	memcpy(g_rxDataBuff,g_wifiRxData,g_wifiRxCurrentIndex);
     862:	40 91 51 04 	lds	r20, 0x0451
     866:	8d e9       	ldi	r24, 0x9D	; 157
     868:	98 e0       	ldi	r25, 0x08	; 8
     86a:	6d e9       	ldi	r22, 0x9D	; 157
     86c:	76 e0       	ldi	r23, 0x06	; 6
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	0e 94 bf 13 	call	0x277e	; 0x277e <memcpy>
	g_rxDataLen += (int)g_wifiRxCurrentIndex;
     874:	20 91 51 04 	lds	r18, 0x0451
     878:	80 91 4c 04 	lds	r24, 0x044C
     87c:	90 91 4d 04 	lds	r25, 0x044D
     880:	82 0f       	add	r24, r18
     882:	91 1d       	adc	r25, r1
     884:	90 93 4d 04 	sts	0x044D, r25
     888:	80 93 4c 04 	sts	0x044C, r24
	g_wifiRxCurrentIndex = 0;
     88c:	10 92 51 04 	sts	0x0451, r1
	int  carriageReturnIndex;
	int lineFeedIndex;
	
	uint8_t syncDetected;
	uint8_t temp;
	uint8_t msgBuffIndex = 0;
     890:	dd 24       	eor	r13, r13
	while(1)
	{
		carriageReturnIndex = -1;
		lineFeedIndex = -1;
		
		for ( int i = 0; i < g_rxDataLen ; i++ )
     892:	aa 24       	eor	r10, r10
     894:	bb 24       	eor	r11, r11
	}
#endif

	while(1)
	{
		carriageReturnIndex = -1;
     896:	88 24       	eor	r8, r8
     898:	8a 94       	dec	r8
     89a:	98 2c       	mov	r9, r8
					break;
				}
			}
			else
			{
				if ( g_rxDataBuff[i] ==  CARRIAGE_RETURN )
     89c:	0f 2e       	mov	r0, r31
     89e:	fd e9       	ldi	r31, 0x9D	; 157
     8a0:	ef 2e       	mov	r14, r31
     8a2:	f8 e0       	ldi	r31, 0x08	; 8
     8a4:	ff 2e       	mov	r15, r31
     8a6:	f0 2d       	mov	r31, r0
     8a8:	cf 5f       	subi	r28, 0xFF	; 255
     8aa:	dd 4f       	sbci	r29, 0xFD	; 253
     8ac:	e8 82       	st	Y, r14
     8ae:	c1 50       	subi	r28, 0x01	; 1
     8b0:	d2 40       	sbci	r29, 0x02	; 2
     8b2:	ce 5f       	subi	r28, 0xFE	; 254
     8b4:	dd 4f       	sbci	r29, 0xFD	; 253
     8b6:	f8 82       	st	Y, r15
     8b8:	c2 50       	subi	r28, 0x02	; 2
     8ba:	d2 40       	sbci	r29, 0x02	; 2
				if ( (g_rxDataBuff[i] ==  LINE_FEED) && ((carriageReturnIndex+1) == i ) )
				{
					lineFeedIndex = i;
					if ( lineFeedIndex == 1)//
					{
						memcpy(strTemp, g_rxDataBuff+lineFeedIndex+1, g_rxDataLen - lineFeedIndex -1);
     8bc:	0f 2e       	mov	r0, r31
     8be:	ff e9       	ldi	r31, 0x9F	; 159
     8c0:	4f 2e       	mov	r4, r31
     8c2:	f8 e0       	ldi	r31, 0x08	; 8
     8c4:	5f 2e       	mov	r5, r31
     8c6:	f0 2d       	mov	r31, r0
						memcpy(g_rxDataBuff , strTemp, g_rxDataLen - lineFeedIndex -1);
     8c8:	0f 2e       	mov	r0, r31
     8ca:	fe ef       	ldi	r31, 0xFE	; 254
     8cc:	2f 2e       	mov	r2, r31
     8ce:	ff ef       	ldi	r31, 0xFF	; 255
     8d0:	3f 2e       	mov	r3, r31
     8d2:	f0 2d       	mov	r31, r0
     8d4:	24 0c       	add	r2, r4
     8d6:	35 1c       	adc	r3, r5
	while(1)
	{
		carriageReturnIndex = -1;
		lineFeedIndex = -1;
		
		for ( int i = 0; i < g_rxDataLen ; i++ )
     8d8:	80 91 4c 04 	lds	r24, 0x044C
     8dc:	90 91 4d 04 	lds	r25, 0x044D
     8e0:	18 16       	cp	r1, r24
     8e2:	19 06       	cpc	r1, r25
     8e4:	0c f0       	brlt	.+2      	; 0x8e8 <rxDataProcess+0xf2>
     8e6:	9b c0       	rjmp	.+310    	; 0xa1e <rxDataProcess+0x228>
     8e8:	85 01       	movw	r16, r10
	}
#endif

	while(1)
	{
		carriageReturnIndex = -1;
     8ea:	b4 01       	movw	r22, r8
		lineFeedIndex = -1;
		
		for ( int i = 0; i < g_rxDataLen ; i++ )
		{
			// check carriage return and line feed
			if ( carriageReturnIndex !=  -1)
     8ec:	8f ef       	ldi	r24, 0xFF	; 255
     8ee:	6f 3f       	cpi	r22, 0xFF	; 255
     8f0:	78 07       	cpc	r23, r24
     8f2:	09 f4       	brne	.+2      	; 0x8f6 <rxDataProcess+0x100>
     8f4:	83 c0       	rjmp	.+262    	; 0x9fc <rxDataProcess+0x206>
			{
				if ( (g_rxDataBuff[i] ==  LINE_FEED) && ((carriageReturnIndex+1) == i ) )
     8f6:	f7 01       	movw	r30, r14
     8f8:	e0 0f       	add	r30, r16
     8fa:	f1 1f       	adc	r31, r17
     8fc:	80 81       	ld	r24, Z
     8fe:	8a 30       	cpi	r24, 0x0A	; 10
     900:	09 f0       	breq	.+2      	; 0x904 <rxDataProcess+0x10e>
     902:	83 c0       	rjmp	.+262    	; 0xa0a <rxDataProcess+0x214>
     904:	cb 01       	movw	r24, r22
     906:	01 96       	adiw	r24, 0x01	; 1
     908:	80 17       	cp	r24, r16
     90a:	91 07       	cpc	r25, r17
     90c:	09 f0       	breq	.+2      	; 0x910 <rxDataProcess+0x11a>
     90e:	7d c0       	rjmp	.+250    	; 0xa0a <rxDataProcess+0x214>
				{
					lineFeedIndex = i;
					if ( lineFeedIndex == 1)//
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	91 05       	cpc	r25, r1
     914:	19 f5       	brne	.+70     	; 0x95c <rxDataProcess+0x166>
					{
						memcpy(strTemp, g_rxDataBuff+lineFeedIndex+1, g_rxDataLen - lineFeedIndex -1);
     916:	40 91 4c 04 	lds	r20, 0x044C
     91a:	50 91 4d 04 	lds	r21, 0x044D
     91e:	42 50       	subi	r20, 0x02	; 2
     920:	50 40       	sbci	r21, 0x00	; 0
     922:	ce 01       	movw	r24, r28
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	64 2d       	mov	r22, r4
     928:	75 2d       	mov	r23, r5
     92a:	0e 94 bf 13 	call	0x277e	; 0x277e <memcpy>
						memcpy(g_rxDataBuff , strTemp, g_rxDataLen - lineFeedIndex -1);
     92e:	40 91 4c 04 	lds	r20, 0x044C
     932:	50 91 4d 04 	lds	r21, 0x044D
     936:	42 50       	subi	r20, 0x02	; 2
     938:	50 40       	sbci	r21, 0x00	; 0
     93a:	82 2d       	mov	r24, r2
     93c:	93 2d       	mov	r25, r3
     93e:	be 01       	movw	r22, r28
     940:	6f 5f       	subi	r22, 0xFF	; 255
     942:	7f 4f       	sbci	r23, 0xFF	; 255
     944:	0e 94 bf 13 	call	0x277e	; 0x277e <memcpy>
						g_rxDataLen -= (lineFeedIndex + 1);
     948:	80 91 4c 04 	lds	r24, 0x044C
     94c:	90 91 4d 04 	lds	r25, 0x044D
     950:	02 97       	sbiw	r24, 0x02	; 2
     952:	90 93 4d 04 	sts	0x044D, r25
     956:	80 93 4c 04 	sts	0x044C, r24
     95a:	be cf       	rjmp	.-132    	; 0x8d8 <rxDataProcess+0xe2>
						break;
					}
					temp = parsingMsg(g_rxDataBuff, carriageReturnIndex);
     95c:	cf 5f       	subi	r28, 0xFF	; 255
     95e:	dd 4f       	sbci	r29, 0xFD	; 253
     960:	88 81       	ld	r24, Y
     962:	c1 50       	subi	r28, 0x01	; 1
     964:	d2 40       	sbci	r29, 0x02	; 2
     966:	ce 5f       	subi	r28, 0xFE	; 254
     968:	dd 4f       	sbci	r29, 0xFD	; 253
     96a:	98 81       	ld	r25, Y
     96c:	c2 50       	subi	r28, 0x02	; 2
     96e:	d2 40       	sbci	r29, 0x02	; 2
     970:	0e 94 67 03 	call	0x6ce	; 0x6ce <parsingMsg>
					//					debugprint("M1:%d\r\n",temp);
					if ( msgBuffIndex <  msgBuffLen )
     974:	dc 14       	cp	r13, r12
     976:	28 f4       	brcc	.+10     	; 0x982 <rxDataProcess+0x18c>
					{
						msgBuff[msgBuffIndex] = temp;
     978:	f3 01       	movw	r30, r6
     97a:	ed 0d       	add	r30, r13
     97c:	f1 1d       	adc	r31, r1
     97e:	80 83       	st	Z, r24
						msgBuffIndex++;
     980:	d3 94       	inc	r13
						
					}
					if ( (lineFeedIndex+1) == g_rxDataLen ) //when  line feed is data end
     982:	20 91 4c 04 	lds	r18, 0x044C
     986:	30 91 4d 04 	lds	r19, 0x044D
     98a:	c8 01       	movw	r24, r16
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	82 17       	cp	r24, r18
     990:	93 07       	cpc	r25, r19
     992:	19 f4       	brne	.+6      	; 0x99a <rxDataProcess+0x1a4>
					{
						g_underRxDataFlag = 0;
     994:	10 92 4e 04 	sts	0x044E, r1
						return msgBuffIndex;
     998:	5c c0       	rjmp	.+184    	; 0xa52 <rxDataProcess+0x25c>
					}
					memcpy(strTemp, g_rxDataBuff+lineFeedIndex+1, g_rxDataLen - lineFeedIndex -1);
     99a:	b8 01       	movw	r22, r16
     99c:	62 56       	subi	r22, 0x62	; 98
     99e:	77 4f       	sbci	r23, 0xF7	; 247
     9a0:	40 91 4c 04 	lds	r20, 0x044C
     9a4:	50 91 4d 04 	lds	r21, 0x044D
     9a8:	40 1b       	sub	r20, r16
     9aa:	51 0b       	sbc	r21, r17
     9ac:	41 50       	subi	r20, 0x01	; 1
     9ae:	50 40       	sbci	r21, 0x00	; 0
     9b0:	ce 01       	movw	r24, r28
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	0e 94 bf 13 	call	0x277e	; 0x277e <memcpy>
					memcpy(g_rxDataBuff , strTemp, g_rxDataLen - lineFeedIndex -1);
     9b8:	40 91 4c 04 	lds	r20, 0x044C
     9bc:	50 91 4d 04 	lds	r21, 0x044D
     9c0:	40 1b       	sub	r20, r16
     9c2:	51 0b       	sbc	r21, r17
     9c4:	41 50       	subi	r20, 0x01	; 1
     9c6:	50 40       	sbci	r21, 0x00	; 0
     9c8:	8e 2d       	mov	r24, r14
     9ca:	9f 2d       	mov	r25, r15
     9cc:	be 01       	movw	r22, r28
     9ce:	6f 5f       	subi	r22, 0xFF	; 255
     9d0:	7f 4f       	sbci	r23, 0xFF	; 255
     9d2:	0e 94 bf 13 	call	0x277e	; 0x277e <memcpy>
					g_rxDataLen -= (lineFeedIndex + 1);
     9d6:	20 91 4c 04 	lds	r18, 0x044C
     9da:	30 91 4d 04 	lds	r19, 0x044D
     9de:	c8 01       	movw	r24, r16
     9e0:	80 95       	com	r24
     9e2:	90 95       	com	r25
     9e4:	82 0f       	add	r24, r18
     9e6:	93 1f       	adc	r25, r19
     9e8:	90 93 4d 04 	sts	0x044D, r25
     9ec:	80 93 4c 04 	sts	0x044C, r24
					continue;
				}
			}
		}
		
		if ( lineFeedIndex == -1) // no find sync, check rxing data
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	0f 3f       	cpi	r16, 0xFF	; 255
     9f4:	12 07       	cpc	r17, r18
     9f6:	09 f0       	breq	.+2      	; 0x9fa <rxDataProcess+0x204>
     9f8:	6f cf       	rjmp	.-290    	; 0x8d8 <rxDataProcess+0xe2>
     9fa:	11 c0       	rjmp	.+34     	; 0xa1e <rxDataProcess+0x228>
					break;
				}
			}
			else
			{
				if ( g_rxDataBuff[i] ==  CARRIAGE_RETURN )
     9fc:	f7 01       	movw	r30, r14
     9fe:	e0 0f       	add	r30, r16
     a00:	f1 1f       	adc	r31, r17
     a02:	80 81       	ld	r24, Z
     a04:	8d 30       	cpi	r24, 0x0D	; 13
     a06:	09 f4       	brne	.+2      	; 0xa0a <rxDataProcess+0x214>
     a08:	b8 01       	movw	r22, r16
	while(1)
	{
		carriageReturnIndex = -1;
		lineFeedIndex = -1;
		
		for ( int i = 0; i < g_rxDataLen ; i++ )
     a0a:	0f 5f       	subi	r16, 0xFF	; 255
     a0c:	1f 4f       	sbci	r17, 0xFF	; 255
     a0e:	80 91 4c 04 	lds	r24, 0x044C
     a12:	90 91 4d 04 	lds	r25, 0x044D
     a16:	08 17       	cp	r16, r24
     a18:	19 07       	cpc	r17, r25
     a1a:	0c f4       	brge	.+2      	; 0xa1e <rxDataProcess+0x228>
     a1c:	67 cf       	rjmp	.-306    	; 0x8ec <rxDataProcess+0xf6>
			}
		}
		
		if ( lineFeedIndex == -1) // no find sync, check rxing data
		{
			g_underRxDataFlag = 1;
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	80 93 4e 04 	sts	0x044E, r24
			
			temp = parsingMsg(g_rxDataBuff, g_rxDataLen);
     a24:	60 91 4c 04 	lds	r22, 0x044C
     a28:	70 91 4d 04 	lds	r23, 0x044D
     a2c:	8d e9       	ldi	r24, 0x9D	; 157
     a2e:	98 e0       	ldi	r25, 0x08	; 8
     a30:	0e 94 67 03 	call	0x6ce	; 0x6ce <parsingMsg>
			//			debugprint("M2:%d\r\n",temp);
			if ((temp ==MSG_UNDER_MSG) || (temp ==MSG_RXING) )
     a34:	8a 30       	cpi	r24, 0x0A	; 10
     a36:	31 f0       	breq	.+12     	; 0xa44 <rxDataProcess+0x24e>
     a38:	84 30       	cpi	r24, 0x04	; 4
     a3a:	21 f0       	breq	.+8      	; 0xa44 <rxDataProcess+0x24e>
			{
			}
			else
			{
				g_rxDataLen = 0;
     a3c:	10 92 4d 04 	sts	0x044D, r1
     a40:	10 92 4c 04 	sts	0x044C, r1
			}
			msgBuff[msgBuffIndex] = temp;
     a44:	f3 01       	movw	r30, r6
     a46:	ed 0d       	add	r30, r13
     a48:	f1 1d       	adc	r31, r1
     a4a:	80 83       	st	Z, r24
			msgBuffIndex++;
     a4c:	d3 94       	inc	r13
			return msgBuffIndex;
     a4e:	01 c0       	rjmp	.+2      	; 0xa52 <rxDataProcess+0x25c>
	
	uint8_t syncDetected;
	uint8_t temp;
	uint8_t msgBuffIndex = 0;
	if (g_wifiRxCurrentIndex == 0 )
		return 0;
     a50:	dd 24       	eor	r13, r13
			return msgBuffIndex;
		}
	}
	
	return msgBuffIndex;
}
     a52:	8d 2d       	mov	r24, r13
     a54:	ce 5f       	subi	r28, 0xFE	; 254
     a56:	dd 4f       	sbci	r29, 0xFD	; 253
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	bf 90       	pop	r11
     a74:	af 90       	pop	r10
     a76:	9f 90       	pop	r9
     a78:	8f 90       	pop	r8
     a7a:	7f 90       	pop	r7
     a7c:	6f 90       	pop	r6
     a7e:	5f 90       	pop	r5
     a80:	4f 90       	pop	r4
     a82:	3f 90       	pop	r3
     a84:	2f 90       	pop	r2
     a86:	08 95       	ret

00000a88 <wifiMain>:
[04][00][00][00][00][00][00][00][00][00][00][00][00][01][02][04][00][00][00][00][00][00][00][00][03]
[00][00][00][00][1E][00][00][00][FF]
*/

void wifiMain()
{
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	00 d0       	rcall	.+0      	; 0xa8e <wifiMain+0x6>
     a8e:	0f 92       	push	r0
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
	g_wifiRxCurrentIndex = 0;
#else
	int i;
	int  endIndex = -1;
	
	if ( g_wifiIPDRxDataLen )// no ipd data
     a94:	80 91 4f 04 	lds	r24, 0x044F
     a98:	90 91 50 04 	lds	r25, 0x0450
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	99 f0       	breq	.+38     	; 0xac6 <wifiMain+0x3e>
	{
		if (callbackFnc != NULL )
     aa0:	e0 91 9d 0a 	lds	r30, 0x0A9D
     aa4:	f0 91 9e 0a 	lds	r31, 0x0A9E
     aa8:	30 97       	sbiw	r30, 0x00	; 0
     aaa:	49 f0       	breq	.+18     	; 0xabe <wifiMain+0x36>
		{
			callbackFnc(EVENT_RX_DATA,g_wifiIPDRxData,g_wifiIPDRxDataLen);
     aac:	40 91 4f 04 	lds	r20, 0x044F
     ab0:	50 91 50 04 	lds	r21, 0x0450
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	6d e9       	ldi	r22, 0x9D	; 157
     aba:	74 e0       	ldi	r23, 0x04	; 4
     abc:	19 95       	eicall
		}
		g_wifiIPDRxDataLen = 0;
     abe:	10 92 50 04 	sts	0x0450, r1
     ac2:	10 92 4f 04 	sts	0x044F, r1
		
	}
	
	if ( !g_wifiRxCurrentIndex )
     ac6:	80 91 51 04 	lds	r24, 0x0451
     aca:	88 23       	and	r24, r24
     acc:	f1 f0       	breq	.+60     	; 0xb0a <wifiMain+0x82>
	}
#endif

	uint8_t msgBuff[4];
	uint8_t msgRxNum;
	msgRxNum = rxDataProcess(msgBuff,4);
     ace:	ce 01       	movw	r24, r28
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	64 e0       	ldi	r22, 0x04	; 4
     ad4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <rxDataProcess>
	
	
	if ( !g_wifiIPDRxDataLen )// no ipd data
     ad8:	80 91 4f 04 	lds	r24, 0x044F
     adc:	90 91 50 04 	lds	r25, 0x0450
     ae0:	00 97       	sbiw	r24, 0x00	; 0
     ae2:	99 f0       	breq	.+38     	; 0xb0a <wifiMain+0x82>
		return;

	if (callbackFnc != NULL )
     ae4:	e0 91 9d 0a 	lds	r30, 0x0A9D
     ae8:	f0 91 9e 0a 	lds	r31, 0x0A9E
     aec:	30 97       	sbiw	r30, 0x00	; 0
     aee:	49 f0       	breq	.+18     	; 0xb02 <wifiMain+0x7a>
	{
		callbackFnc(EVENT_RX_DATA,g_wifiIPDRxData,g_wifiIPDRxDataLen);
     af0:	40 91 4f 04 	lds	r20, 0x044F
     af4:	50 91 50 04 	lds	r21, 0x0450
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	6d e9       	ldi	r22, 0x9D	; 157
     afe:	74 e0       	ldi	r23, 0x04	; 4
     b00:	19 95       	eicall
	}
	g_wifiIPDRxDataLen = 0;
     b02:	10 92 50 04 	sts	0x0450, r1
     b06:	10 92 4f 04 	sts	0x044F, r1

	#endif
}
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <WaitOKWithPrint>:

int WaitOKWithPrint()
{
     b18:	2f 92       	push	r2
     b1a:	3f 92       	push	r3
     b1c:	4f 92       	push	r4
     b1e:	5f 92       	push	r5
     b20:	6f 92       	push	r6
     b22:	7f 92       	push	r7
     b24:	8f 92       	push	r8
     b26:	9f 92       	push	r9
     b28:	af 92       	push	r10
     b2a:	bf 92       	push	r11
     b2c:	cf 92       	push	r12
     b2e:	df 92       	push	r13
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	c0 50       	subi	r28, 0x00	; 0
     b42:	d2 40       	sbci	r29, 0x02	; 2
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
	uint8_t strTemp[512];
	int currentIndex = 0;
     b4e:	ee 24       	eor	r14, r14
     b50:	ff 24       	eor	r15, r15
		if (g_wifiRxCurrentIndex)
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
			{
				//
				strTemp[currentIndex++] = g_wifiRxData[i];
     b52:	0f 2e       	mov	r0, r31
     b54:	fd e9       	ldi	r31, 0x9D	; 157
     b56:	af 2e       	mov	r10, r31
     b58:	f6 e0       	ldi	r31, 0x06	; 6
     b5a:	bf 2e       	mov	r11, r31
     b5c:	f0 2d       	mov	r31, r0
						{
							g_wifiRxCurrentIndex = 0;
							//							debugprint("error\r\n");
							return -1;
						}
						else if ((currentIndex >= 7) && !strncmp(strTemp,"ERROR",5)  )
     b5e:	0f 2e       	mov	r0, r31
     b60:	f1 e1       	ldi	r31, 0x11	; 17
     b62:	2f 2e       	mov	r2, r31
     b64:	f2 e0       	ldi	r31, 0x02	; 2
     b66:	3f 2e       	mov	r3, r31
     b68:	f0 2d       	mov	r31, r0
				{
					//debugprint("\r\n");
					if ( currentIndex >= 4) // "OK\r\n"
					{
						// check end  "OK\r\n"
						if (!strncmp((char*)strTemp,"OK",2))
     b6a:	0f 2e       	mov	r0, r31
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	6f 2e       	mov	r6, r31
     b70:	f2 e0       	ldi	r31, 0x02	; 2
     b72:	7f 2e       	mov	r7, r31
     b74:	f0 2d       	mov	r31, r0
						{
							g_wifiRxCurrentIndex = 0;
							return 0;
						}
						else if ((currentIndex >=4) &&  !strncmp(strTemp,"+IPD,",4) )
     b76:	0f 2e       	mov	r0, r31
     b78:	fb e0       	ldi	r31, 0x0B	; 11
     b7a:	4f 2e       	mov	r4, r31
     b7c:	f2 e0       	ldi	r31, 0x02	; 2
     b7e:	5f 2e       	mov	r5, r31
     b80:	f0 2d       	mov	r31, r0
	OK\r\n
	*/
	
	while(1)
	{
		if (g_wifiRxCurrentIndex)
     b82:	80 91 51 04 	lds	r24, 0x0451
     b86:	88 23       	and	r24, r24
     b88:	e1 f3       	breq	.-8      	; 0xb82 <WaitOKWithPrint+0x6a>
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
     b8a:	80 91 51 04 	lds	r24, 0x0451
     b8e:	88 23       	and	r24, r24
     b90:	09 f4       	brne	.+2      	; 0xb94 <WaitOKWithPrint+0x7c>
     b92:	a9 c0       	rjmp	.+338    	; 0xce6 <WaitOKWithPrint+0x1ce>
     b94:	cc 24       	eor	r12, r12
     b96:	dd 24       	eor	r13, r13
						
						#endif
						//						debugprint(strTemp);
						
					}
					currentIndex = 0;
     b98:	88 24       	eor	r8, r8
     b9a:	99 24       	eor	r9, r9
		if (g_wifiRxCurrentIndex)
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
			{
				//
				strTemp[currentIndex++] = g_wifiRxData[i];
     b9c:	85 01       	movw	r16, r10
     b9e:	0c 0d       	add	r16, r12
     ba0:	1d 1d       	adc	r17, r13
     ba2:	f8 01       	movw	r30, r16
     ba4:	80 81       	ld	r24, Z
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	ec 0f       	add	r30, r28
     bac:	fd 1f       	adc	r31, r29
     bae:	ee 0d       	add	r30, r14
     bb0:	ff 1d       	adc	r31, r15
     bb2:	80 83       	st	Z, r24
     bb4:	08 94       	sec
     bb6:	e1 1c       	adc	r14, r1
     bb8:	f1 1c       	adc	r15, r1
				//if((g_wifiRxData[i] !=0x0D) && (g_wifiRxData[i] !=0x0A)   )
				putCh2(g_wifiRxData[i]);
     bba:	f8 01       	movw	r30, r16
     bbc:	80 81       	ld	r24, Z
     bbe:	0e 94 78 01 	call	0x2f0	; 0x2f0 <putCh2>
				
				if (g_wifiRxData[i] == 0x0A)
     bc2:	f8 01       	movw	r30, r16
     bc4:	80 81       	ld	r24, Z
     bc6:	8a 30       	cpi	r24, 0x0A	; 10
     bc8:	09 f0       	breq	.+2      	; 0xbcc <WaitOKWithPrint+0xb4>
     bca:	83 c0       	rjmp	.+262    	; 0xcd2 <WaitOKWithPrint+0x1ba>
				{
					//debugprint("\r\n");
					if ( currentIndex >= 4) // "OK\r\n"
     bcc:	f4 e0       	ldi	r31, 0x04	; 4
     bce:	ef 16       	cp	r14, r31
     bd0:	f1 04       	cpc	r15, r1
     bd2:	0c f4       	brge	.+2      	; 0xbd6 <WaitOKWithPrint+0xbe>
     bd4:	79 c0       	rjmp	.+242    	; 0xcc8 <WaitOKWithPrint+0x1b0>
					{
						// check end  "OK\r\n"
						if (!strncmp((char*)strTemp,"OK",2))
     bd6:	ce 01       	movw	r24, r28
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	b3 01       	movw	r22, r6
     bdc:	42 e0       	ldi	r20, 0x02	; 2
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	0e 94 c8 13 	call	0x2790	; 0x2790 <strncmp>
     be4:	28 2f       	mov	r18, r24
     be6:	39 2f       	mov	r19, r25
     be8:	21 15       	cp	r18, r1
     bea:	31 05       	cpc	r19, r1
     bec:	29 f4       	brne	.+10     	; 0xbf8 <WaitOKWithPrint+0xe0>
						{
							g_wifiRxCurrentIndex = 0;
     bee:	10 92 51 04 	sts	0x0451, r1
							return 0;
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	7a c0       	rjmp	.+244    	; 0xcec <WaitOKWithPrint+0x1d4>
						}
						else if ((currentIndex >=4) &&  !strncmp(strTemp,"+IPD,",4) )
     bf8:	ce 01       	movw	r24, r28
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	b2 01       	movw	r22, r4
     bfe:	44 e0       	ldi	r20, 0x04	; 4
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	0e 94 c8 13 	call	0x2790	; 0x2790 <strncmp>
     c06:	28 2f       	mov	r18, r24
     c08:	39 2f       	mov	r19, r25
     c0a:	21 15       	cp	r18, r1
     c0c:	31 05       	cpc	r19, r1
     c0e:	29 f4       	brne	.+10     	; 0xc1a <WaitOKWithPrint+0x102>
						{
							g_wifiRxCurrentIndex = 0;
     c10:	10 92 51 04 	sts	0x0451, r1
							//							debugprint("error\r\n");
							return -1;
     c14:	8f ef       	ldi	r24, 0xFF	; 255
     c16:	9f ef       	ldi	r25, 0xFF	; 255
     c18:	69 c0       	rjmp	.+210    	; 0xcec <WaitOKWithPrint+0x1d4>
						}
						else if ((currentIndex >= 7) && !strncmp(strTemp,"ERROR",5)  )
     c1a:	87 e0       	ldi	r24, 0x07	; 7
     c1c:	e8 16       	cp	r14, r24
     c1e:	f1 04       	cpc	r15, r1
     c20:	8c f0       	brlt	.+34     	; 0xc44 <WaitOKWithPrint+0x12c>
     c22:	ce 01       	movw	r24, r28
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	b1 01       	movw	r22, r2
     c28:	45 e0       	ldi	r20, 0x05	; 5
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	0e 94 c8 13 	call	0x2790	; 0x2790 <strncmp>
     c30:	28 2f       	mov	r18, r24
     c32:	39 2f       	mov	r19, r25
     c34:	21 15       	cp	r18, r1
     c36:	31 05       	cpc	r19, r1
     c38:	29 f4       	brne	.+10     	; 0xc44 <WaitOKWithPrint+0x12c>
						{
							g_wifiRxCurrentIndex = 0;
     c3a:	10 92 51 04 	sts	0x0451, r1
							//							debugprint("error\r\n");
							return -1;
     c3e:	8f ef       	ldi	r24, 0xFF	; 255
     c40:	9f ef       	ldi	r25, 0xFF	; 255
     c42:	54 c0       	rjmp	.+168    	; 0xcec <WaitOKWithPrint+0x1d4>
						}
						else if ((currentIndex >= 6) && !strncmp(strTemp,"FAIL",5)  )
     c44:	e6 e0       	ldi	r30, 0x06	; 6
     c46:	ee 16       	cp	r14, r30
     c48:	f1 04       	cpc	r15, r1
     c4a:	94 f0       	brlt	.+36     	; 0xc70 <WaitOKWithPrint+0x158>
     c4c:	ce 01       	movw	r24, r28
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	67 e1       	ldi	r22, 0x17	; 23
     c52:	72 e0       	ldi	r23, 0x02	; 2
     c54:	45 e0       	ldi	r20, 0x05	; 5
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	0e 94 c8 13 	call	0x2790	; 0x2790 <strncmp>
     c5c:	28 2f       	mov	r18, r24
     c5e:	39 2f       	mov	r19, r25
     c60:	21 15       	cp	r18, r1
     c62:	31 05       	cpc	r19, r1
     c64:	29 f4       	brne	.+10     	; 0xc70 <WaitOKWithPrint+0x158>
						{
							g_wifiRxCurrentIndex = 0;
     c66:	10 92 51 04 	sts	0x0451, r1
							//							debugprint("fail\r\n");
							return -1;
     c6a:	8f ef       	ldi	r24, 0xFF	; 255
     c6c:	9f ef       	ldi	r25, 0xFF	; 255
     c6e:	3e c0       	rjmp	.+124    	; 0xcec <WaitOKWithPrint+0x1d4>
						}
						else if ((currentIndex >= 7) && !strncmp(strTemp,"ALREAY",5)  )
     c70:	f7 e0       	ldi	r31, 0x07	; 7
     c72:	ef 16       	cp	r14, r31
     c74:	f1 04       	cpc	r15, r1
     c76:	94 f0       	brlt	.+36     	; 0xc9c <WaitOKWithPrint+0x184>
     c78:	ce 01       	movw	r24, r28
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	6c e2       	ldi	r22, 0x2C	; 44
     c7e:	72 e0       	ldi	r23, 0x02	; 2
     c80:	45 e0       	ldi	r20, 0x05	; 5
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	0e 94 c8 13 	call	0x2790	; 0x2790 <strncmp>
     c88:	28 2f       	mov	r18, r24
     c8a:	39 2f       	mov	r19, r25
     c8c:	21 15       	cp	r18, r1
     c8e:	31 05       	cpc	r19, r1
     c90:	29 f4       	brne	.+10     	; 0xc9c <WaitOKWithPrint+0x184>
						{
							g_wifiRxCurrentIndex = 0;
     c92:	10 92 51 04 	sts	0x0451, r1
							return 0;
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	28 c0       	rjmp	.+80     	; 0xcec <WaitOKWithPrint+0x1d4>
						}
						else if ((currentIndex >= 9) && !strncmp(strTemp,"SEND OK",7)  )
     c9c:	89 e0       	ldi	r24, 0x09	; 9
     c9e:	e8 16       	cp	r14, r24
     ca0:	f1 04       	cpc	r15, r1
     ca2:	a4 f0       	brlt	.+40     	; 0xccc <WaitOKWithPrint+0x1b4>
     ca4:	ce 01       	movw	r24, r28
     ca6:	01 96       	adiw	r24, 0x01	; 1
     ca8:	63 e0       	ldi	r22, 0x03	; 3
     caa:	72 e0       	ldi	r23, 0x02	; 2
     cac:	47 e0       	ldi	r20, 0x07	; 7
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	0e 94 c8 13 	call	0x2790	; 0x2790 <strncmp>
     cb4:	28 2f       	mov	r18, r24
     cb6:	39 2f       	mov	r19, r25
     cb8:	21 15       	cp	r18, r1
     cba:	31 05       	cpc	r19, r1
     cbc:	49 f4       	brne	.+18     	; 0xcd0 <WaitOKWithPrint+0x1b8>
						{
							g_wifiRxCurrentIndex = 0;
     cbe:	10 92 51 04 	sts	0x0451, r1
							return 0;
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	12 c0       	rjmp	.+36     	; 0xcec <WaitOKWithPrint+0x1d4>
						
						#endif
						//						debugprint(strTemp);
						
					}
					currentIndex = 0;
     cc8:	74 01       	movw	r14, r8
     cca:	03 c0       	rjmp	.+6      	; 0xcd2 <WaitOKWithPrint+0x1ba>
     ccc:	74 01       	movw	r14, r8
     cce:	01 c0       	rjmp	.+2      	; 0xcd2 <WaitOKWithPrint+0x1ba>
     cd0:	74 01       	movw	r14, r8
	
	while(1)
	{
		if (g_wifiRxCurrentIndex)
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
     cd2:	08 94       	sec
     cd4:	c1 1c       	adc	r12, r1
     cd6:	d1 1c       	adc	r13, r1
     cd8:	80 91 51 04 	lds	r24, 0x0451
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	c8 16       	cp	r12, r24
     ce0:	d9 06       	cpc	r13, r25
     ce2:	0c f4       	brge	.+2      	; 0xce6 <WaitOKWithPrint+0x1ce>
     ce4:	5b cf       	rjmp	.-330    	; 0xb9c <WaitOKWithPrint+0x84>
						
					}
					currentIndex = 0;
				}
			}
			g_wifiRxCurrentIndex = 0;
     ce6:	10 92 51 04 	sts	0x0451, r1
     cea:	4b cf       	rjmp	.-362    	; 0xb82 <WaitOKWithPrint+0x6a>
		}
	}
}
     cec:	c0 50       	subi	r28, 0x00	; 0
     cee:	de 4f       	sbci	r29, 0xFE	; 254
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	df 90       	pop	r13
     d08:	cf 90       	pop	r12
     d0a:	bf 90       	pop	r11
     d0c:	af 90       	pop	r10
     d0e:	9f 90       	pop	r9
     d10:	8f 90       	pop	r8
     d12:	7f 90       	pop	r7
     d14:	6f 90       	pop	r6
     d16:	5f 90       	pop	r5
     d18:	4f 90       	pop	r4
     d1a:	3f 90       	pop	r3
     d1c:	2f 90       	pop	r2
     d1e:	08 95       	ret

00000d20 <WaitSendReadyWithoutPrint>:


int WaitSendReadyWithoutPrint()
{
     d20:	cf 92       	push	r12
     d22:	df 92       	push	r13
     d24:	ff 92       	push	r15
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <WaitSendReadyWithoutPrint+0x10>
     d30:	0f 92       	push	r0
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	0f 2e       	mov	r0, r31
     d38:	f5 e6       	ldi	r31, 0x65	; 101
     d3a:	cf 2e       	mov	r12, r31
     d3c:	dd 24       	eor	r13, r13
     d3e:	f0 2d       	mov	r31, r0
	int counter = 0;
	uint8_t msgBuff[4];
	uint8_t msgRxNum;
	int i;
	uint8_t okFlag =0;
	uint8_t readyFlag = 0;
     d40:	00 e0       	ldi	r16, 0x00	; 0
{
	int counter = 0;
	uint8_t msgBuff[4];
	uint8_t msgRxNum;
	int i;
	uint8_t okFlag =0;
     d42:	ff 24       	eor	r15, r15
		for(i = 0 ; i< msgRxNum ; i++)
		{
			if (msgBuff[i] == MSG_SEND_READY)
			{
				
				readyFlag = 1;
     d44:	11 e0       	ldi	r17, 0x01	; 1
	int i;
	uint8_t okFlag =0;
	uint8_t readyFlag = 0;
	while(1)
	{
		msgRxNum = rxDataProcess(msgBuff,4);
     d46:	ce 01       	movw	r24, r28
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	64 e0       	ldi	r22, 0x04	; 4
     d4c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <rxDataProcess>
		for(i = 0 ; i< msgRxNum ; i++)
     d50:	88 23       	and	r24, r24
     d52:	a1 f0       	breq	.+40     	; 0xd7c <WaitSendReadyWithoutPrint+0x5c>
     d54:	fe 01       	movw	r30, r28
     d56:	31 96       	adiw	r30, 0x01	; 1
		}
	}
}


int WaitSendReadyWithoutPrint()
     d58:	9f 01       	movw	r18, r30
     d5a:	28 0f       	add	r18, r24
     d5c:	31 1d       	adc	r19, r1
     d5e:	c9 01       	movw	r24, r18
	while(1)
	{
		msgRxNum = rxDataProcess(msgBuff,4);
		for(i = 0 ; i< msgRxNum ; i++)
		{
			if (msgBuff[i] == MSG_SEND_READY)
     d60:	21 91       	ld	r18, Z+
     d62:	28 30       	cpi	r18, 0x08	; 8
     d64:	29 f0       	breq	.+10     	; 0xd70 <WaitSendReadyWithoutPrint+0x50>
			{
				
				readyFlag = 1;
			}
			else if (msgBuff[i] == MSG_OK)
     d66:	22 30       	cpi	r18, 0x02	; 2
     d68:	29 f0       	breq	.+10     	; 0xd74 <WaitSendReadyWithoutPrint+0x54>
			{
				okFlag = 1;
			}
			else if (msgBuff[i] == MSG_ERROR)
     d6a:	25 30       	cpi	r18, 0x05	; 5
     d6c:	21 f4       	brne	.+8      	; 0xd76 <WaitSendReadyWithoutPrint+0x56>
     d6e:	26 c0       	rjmp	.+76     	; 0xdbc <WaitSendReadyWithoutPrint+0x9c>
		for(i = 0 ; i< msgRxNum ; i++)
		{
			if (msgBuff[i] == MSG_SEND_READY)
			{
				
				readyFlag = 1;
     d70:	01 2f       	mov	r16, r17
     d72:	01 c0       	rjmp	.+2      	; 0xd76 <WaitSendReadyWithoutPrint+0x56>
			}
			else if (msgBuff[i] == MSG_OK)
			{
				okFlag = 1;
     d74:	f1 2e       	mov	r15, r17
	uint8_t okFlag =0;
	uint8_t readyFlag = 0;
	while(1)
	{
		msgRxNum = rxDataProcess(msgBuff,4);
		for(i = 0 ; i< msgRxNum ; i++)
     d76:	e8 17       	cp	r30, r24
     d78:	f9 07       	cpc	r31, r25
     d7a:	91 f7       	brne	.-28     	; 0xd60 <WaitSendReadyWithoutPrint+0x40>
			else if (msgBuff[i] == MSG_ERROR)
			{
				return -1;
			}
		}
		if ( readyFlag && okFlag )
     d7c:	00 23       	and	r16, r16
     d7e:	11 f0       	breq	.+4      	; 0xd84 <WaitSendReadyWithoutPrint+0x64>
     d80:	ff 20       	and	r15, r15
     d82:	f9 f4       	brne	.+62     	; 0xdc2 <WaitSendReadyWithoutPrint+0xa2>
     d84:	08 94       	sec
     d86:	c1 08       	sbc	r12, r1
     d88:	d1 08       	sbc	r13, r1
		{
			return 0;
		}
		
		counter++;
		if (counter> 100)
     d8a:	c1 14       	cp	r12, r1
     d8c:	d1 04       	cpc	r13, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <WaitSendReadyWithoutPrint+0x8e>
		{
			debugprint("WaitSendReadyWithoutPrint counter err\r\n");
     d90:	0f 92       	push	r0
     d92:	0f 92       	push	r0
     d94:	83 e3       	ldi	r24, 0x33	; 51
     d96:	92 e0       	ldi	r25, 0x02	; 2
     d98:	ed b7       	in	r30, 0x3d	; 61
     d9a:	fe b7       	in	r31, 0x3e	; 62
     d9c:	92 83       	std	Z+2, r25	; 0x02
     d9e:	81 83       	std	Z+1, r24	; 0x01
     da0:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
			return -1;
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	8f ef       	ldi	r24, 0xFF	; 255
     daa:	9f ef       	ldi	r25, 0xFF	; 255
     dac:	0c c0       	rjmp	.+24     	; 0xdc6 <WaitSendReadyWithoutPrint+0xa6>
     dae:	8f ef       	ldi	r24, 0xFF	; 255
     db0:	9f e8       	ldi	r25, 0x8F	; 143
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <WaitSendReadyWithoutPrint+0x92>
     db6:	00 c0       	rjmp	.+0      	; 0xdb8 <WaitSendReadyWithoutPrint+0x98>
     db8:	00 00       	nop
     dba:	c5 cf       	rjmp	.-118    	; 0xd46 <WaitSendReadyWithoutPrint+0x26>
			{
				okFlag = 1;
			}
			else if (msgBuff[i] == MSG_ERROR)
			{
				return -1;
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	9f ef       	ldi	r25, 0xFF	; 255
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <WaitSendReadyWithoutPrint+0xa6>
			}
		}
		if ( readyFlag && okFlag )
		{
			return 0;
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
			return -1;
		}
		
		_delay_ms(10);
	}
}
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	08 95       	ret

00000dde <WaitSendOKWithoutPrint>:

int WaitSendOKWithoutPrint()
{
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	00 d0       	rcall	.+0      	; 0xde8 <WaitSendOKWithoutPrint+0xa>
     de8:	0f 92       	push	r0
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	05 e6       	ldi	r16, 0x65	; 101
     df0:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t msgBuff[4];
	uint8_t msgRxNum;
	int i;
	while(1)
	{
		msgRxNum = rxDataProcess(msgBuff,4);
     df2:	ce 01       	movw	r24, r28
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	64 e0       	ldi	r22, 0x04	; 4
     df8:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <rxDataProcess>
		for(i = 0 ; i< msgRxNum ; i++)
     dfc:	88 23       	and	r24, r24
     dfe:	b9 f0       	breq	.+46     	; 0xe2e <WaitSendOKWithoutPrint+0x50>
		{
			if (msgBuff[i] == MSG_SEND_OK)
     e00:	99 81       	ldd	r25, Y+1	; 0x01
     e02:	91 30       	cpi	r25, 0x01	; 1
     e04:	69 f1       	breq	.+90     	; 0xe60 <WaitSendOKWithoutPrint+0x82>
			return 0;
			else if (msgBuff[i] == MSG_ERROR)
     e06:	95 30       	cpi	r25, 0x05	; 5
     e08:	71 f1       	breq	.+92     	; 0xe66 <WaitSendOKWithoutPrint+0x88>
     e0a:	fe 01       	movw	r30, r28
     e0c:	32 96       	adiw	r30, 0x02	; 2
		
		_delay_ms(10);
	}
}

int WaitSendOKWithoutPrint()
     e0e:	21 e0       	ldi	r18, 0x01	; 1
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	2c 0f       	add	r18, r28
     e14:	3d 1f       	adc	r19, r29
     e16:	28 0f       	add	r18, r24
     e18:	31 1d       	adc	r19, r1
     e1a:	c9 01       	movw	r24, r18
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <WaitSendOKWithoutPrint+0x4a>
	while(1)
	{
		msgRxNum = rxDataProcess(msgBuff,4);
		for(i = 0 ; i< msgRxNum ; i++)
		{
			if (msgBuff[i] == MSG_SEND_OK)
     e1e:	21 91       	ld	r18, Z+
     e20:	21 30       	cpi	r18, 0x01	; 1
     e22:	21 f1       	breq	.+72     	; 0xe6c <WaitSendOKWithoutPrint+0x8e>
			return 0;
			else if (msgBuff[i] == MSG_ERROR)
     e24:	25 30       	cpi	r18, 0x05	; 5
     e26:	29 f1       	breq	.+74     	; 0xe72 <WaitSendOKWithoutPrint+0x94>
	uint8_t msgRxNum;
	int i;
	while(1)
	{
		msgRxNum = rxDataProcess(msgBuff,4);
		for(i = 0 ; i< msgRxNum ; i++)
     e28:	e8 17       	cp	r30, r24
     e2a:	f9 07       	cpc	r31, r25
     e2c:	c1 f7       	brne	.-16     	; 0xe1e <WaitSendOKWithoutPrint+0x40>
     e2e:	01 50       	subi	r16, 0x01	; 1
     e30:	10 40       	sbci	r17, 0x00	; 0
			else if (msgBuff[i] == MSG_ERROR)
			return -1;
		}
		
		counter++;
		if (counter> 100)
     e32:	79 f4       	brne	.+30     	; 0xe52 <WaitSendOKWithoutPrint+0x74>
		{
			debugprint("WaitOKWithoutPrint counter err\r\n");
     e34:	0f 92       	push	r0
     e36:	0f 92       	push	r0
     e38:	8b e5       	ldi	r24, 0x5B	; 91
     e3a:	92 e0       	ldi	r25, 0x02	; 2
     e3c:	ed b7       	in	r30, 0x3d	; 61
     e3e:	fe b7       	in	r31, 0x3e	; 62
     e40:	92 83       	std	Z+2, r25	; 0x02
     e42:	81 83       	std	Z+1, r24	; 0x01
     e44:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
			return -1;
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	8f ef       	ldi	r24, 0xFF	; 255
     e4e:	9f ef       	ldi	r25, 0xFF	; 255
     e50:	12 c0       	rjmp	.+36     	; 0xe76 <WaitSendOKWithoutPrint+0x98>
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	9f e8       	ldi	r25, 0x8F	; 143
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <WaitSendOKWithoutPrint+0x78>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <WaitSendOKWithoutPrint+0x7e>
     e5c:	00 00       	nop
     e5e:	c9 cf       	rjmp	.-110    	; 0xdf2 <WaitSendOKWithoutPrint+0x14>
	{
		msgRxNum = rxDataProcess(msgBuff,4);
		for(i = 0 ; i< msgRxNum ; i++)
		{
			if (msgBuff[i] == MSG_SEND_OK)
			return 0;
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	08 c0       	rjmp	.+16     	; 0xe76 <WaitSendOKWithoutPrint+0x98>
			else if (msgBuff[i] == MSG_ERROR)
			return -1;
     e66:	8f ef       	ldi	r24, 0xFF	; 255
     e68:	9f ef       	ldi	r25, 0xFF	; 255
     e6a:	05 c0       	rjmp	.+10     	; 0xe76 <WaitSendOKWithoutPrint+0x98>
	{
		msgRxNum = rxDataProcess(msgBuff,4);
		for(i = 0 ; i< msgRxNum ; i++)
		{
			if (msgBuff[i] == MSG_SEND_OK)
			return 0;
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <WaitSendOKWithoutPrint+0x98>
			else if (msgBuff[i] == MSG_ERROR)
			return -1;
     e72:	8f ef       	ldi	r24, 0xFF	; 255
     e74:	9f ef       	ldi	r25, 0xFF	; 255
			return -1;
		}
		_delay_ms(10);
		
	}
}
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	08 95       	ret

00000e88 <WaitOk>:

int WaitOk() //"\r\nOK\r\n"
{
     e88:	cf 92       	push	r12
     e8a:	df 92       	push	r13
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	c0 50       	subi	r28, 0x00	; 0
     e9e:	d1 40       	sbci	r29, 0x01	; 1
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
	uint8_t strTemp[256];
	int currentIndex = 0;
	uint8_t firstCarrageReturnDetect = 0;
     eaa:	dd 24       	eor	r13, r13
}

int WaitOk() //"\r\nOK\r\n"
{
	uint8_t strTemp[256];
	int currentIndex = 0;
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(10);
		
	}
}

int WaitOk() //"\r\nOK\r\n"
     eb0:	be 01       	movw	r22, r28
     eb2:	6f 5f       	subi	r22, 0xFF	; 255
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
     eb6:	ee 24       	eor	r14, r14
     eb8:	ff 24       	eor	r15, r15
	{
		if (g_wifiRxCurrentIndex)
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
			{
				strTemp[currentIndex++] = g_wifiRxData[i];
     eba:	0d e9       	ldi	r16, 0x9D	; 157
     ebc:	16 e0       	ldi	r17, 0x06	; 6
				if (g_wifiRxData[i] == 0x0A)
				{
					if ( !firstCarrageReturnDetect )
					{
						firstCarrageReturnDetect = 1;
     ebe:	cc 24       	eor	r12, r12
     ec0:	c3 94       	inc	r12
	uint8_t firstCarrageReturnDetect = 0;
	int i;
	
	while(1)
	{
		if (g_wifiRxCurrentIndex)
     ec2:	80 91 51 04 	lds	r24, 0x0451
     ec6:	88 23       	and	r24, r24
     ec8:	e1 f3       	breq	.-8      	; 0xec2 <WaitOk+0x3a>
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
     eca:	80 91 51 04 	lds	r24, 0x0451
     ece:	88 23       	and	r24, r24
     ed0:	c1 f3       	breq	.-16     	; 0xec2 <WaitOk+0x3a>
		_delay_ms(10);
		
	}
}

int WaitOk() //"\r\nOK\r\n"
     ed2:	db 01       	movw	r26, r22
     ed4:	a4 0f       	add	r26, r20
     ed6:	b5 1f       	adc	r27, r21
     ed8:	97 01       	movw	r18, r14
	{
		if (g_wifiRxCurrentIndex)
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
			{
				strTemp[currentIndex++] = g_wifiRxData[i];
     eda:	f8 01       	movw	r30, r16
     edc:	e2 0f       	add	r30, r18
     ede:	f3 1f       	adc	r31, r19
     ee0:	80 81       	ld	r24, Z
     ee2:	8d 93       	st	X+, r24
				if (g_wifiRxData[i] == 0x0A)
     ee4:	80 81       	ld	r24, Z
     ee6:	8a 30       	cpi	r24, 0x0A	; 10
     ee8:	39 f5       	brne	.+78     	; 0xf38 <WaitOk+0xb0>
				{
					if ( !firstCarrageReturnDetect )
     eea:	dd 20       	and	r13, r13
     eec:	21 f1       	breq	.+72     	; 0xf36 <WaitOk+0xae>
						firstCarrageReturnDetect = 1;
					}
					else
					{
						// check end  "OK\r\n"
						if (!strncmp(strTemp+2,"OK",2))
     eee:	ce 01       	movw	r24, r28
     ef0:	03 96       	adiw	r24, 0x03	; 3
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	72 e0       	ldi	r23, 0x02	; 2
     ef6:	42 e0       	ldi	r20, 0x02	; 2
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	0e 94 c8 13 	call	0x2790	; 0x2790 <strncmp>
     efe:	28 2f       	mov	r18, r24
     f00:	39 2f       	mov	r19, r25
     f02:	21 15       	cp	r18, r1
     f04:	31 05       	cpc	r19, r1
     f06:	29 f4       	brne	.+10     	; 0xf12 <WaitOk+0x8a>
						{
							g_wifiRxCurrentIndex = 0;
     f08:	10 92 51 04 	sts	0x0451, r1
							return 0;
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	22 c0       	rjmp	.+68     	; 0xf56 <WaitOk+0xce>
						}
						else if (!strncmp(strTemp+2,"ERROR",5)  )
     f12:	ce 01       	movw	r24, r28
     f14:	03 96       	adiw	r24, 0x03	; 3
     f16:	61 e1       	ldi	r22, 0x11	; 17
     f18:	72 e0       	ldi	r23, 0x02	; 2
     f1a:	45 e0       	ldi	r20, 0x05	; 5
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	0e 94 c8 13 	call	0x2790	; 0x2790 <strncmp>
     f22:	28 2f       	mov	r18, r24
     f24:	39 2f       	mov	r19, r25
     f26:	21 15       	cp	r18, r1
     f28:	31 05       	cpc	r19, r1
     f2a:	99 f4       	brne	.+38     	; 0xf52 <WaitOk+0xca>
						{
							g_wifiRxCurrentIndex = 0;
     f2c:	10 92 51 04 	sts	0x0451, r1
							return -1;
     f30:	8f ef       	ldi	r24, 0xFF	; 255
     f32:	9f ef       	ldi	r25, 0xFF	; 255
     f34:	10 c0       	rjmp	.+32     	; 0xf56 <WaitOk+0xce>
				strTemp[currentIndex++] = g_wifiRxData[i];
				if (g_wifiRxData[i] == 0x0A)
				{
					if ( !firstCarrageReturnDetect )
					{
						firstCarrageReturnDetect = 1;
     f36:	dc 2c       	mov	r13, r12
		_delay_ms(10);
		
	}
}

int WaitOk() //"\r\nOK\r\n"
     f38:	ad 01       	movw	r20, r26
     f3a:	46 1b       	sub	r20, r22
     f3c:	57 0b       	sbc	r21, r23
	
	while(1)
	{
		if (g_wifiRxCurrentIndex)
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
     f3e:	2f 5f       	subi	r18, 0xFF	; 255
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	80 91 51 04 	lds	r24, 0x0451
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	28 17       	cp	r18, r24
     f4a:	39 07       	cpc	r19, r25
     f4c:	0c f0       	brlt	.+2      	; 0xf50 <WaitOk+0xc8>
     f4e:	b9 cf       	rjmp	.-142    	; 0xec2 <WaitOk+0x3a>
     f50:	c4 cf       	rjmp	.-120    	; 0xeda <WaitOk+0x52>
						else if (!strncmp(strTemp+2,"ERROR",5)  )
						{
							g_wifiRxCurrentIndex = 0;
							return -1;
						}
						return -1;
     f52:	8f ef       	ldi	r24, 0xFF	; 255
     f54:	9f ef       	ldi	r25, 0xFF	; 255
				}
			}
		}
	}
	return -1;
}
     f56:	c0 50       	subi	r28, 0x00	; 0
     f58:	df 4f       	sbci	r29, 0xFF	; 255
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	ff 90       	pop	r15
     f6e:	ef 90       	pop	r14
     f70:	df 90       	pop	r13
     f72:	cf 90       	pop	r12
     f74:	08 95       	ret

00000f76 <wifiDisplayAPlist>:

int wifiDisplayAPlist()
{
	wifiprint("AT+CWLAP\r\n");
     f76:	0f 92       	push	r0
     f78:	0f 92       	push	r0
     f7a:	8c e7       	ldi	r24, 0x7C	; 124
     f7c:	92 e0       	ldi	r25, 0x02	; 2
     f7e:	ad b7       	in	r26, 0x3d	; 61
     f80:	be b7       	in	r27, 0x3e	; 62
     f82:	12 96       	adiw	r26, 0x02	; 2
     f84:	9c 93       	st	X, r25
     f86:	8e 93       	st	-X, r24
     f88:	11 97       	sbiw	r26, 0x01	; 1
     f8a:	0e 94 8a 02 	call	0x514	; 0x514 <wifiprint>
     f8e:	8f ef       	ldi	r24, 0xFF	; 255
     f90:	9f ef       	ldi	r25, 0xFF	; 255
     f92:	a9 e5       	ldi	r26, 0x59	; 89
     f94:	81 50       	subi	r24, 0x01	; 1
     f96:	90 40       	sbci	r25, 0x00	; 0
     f98:	a0 40       	sbci	r26, 0x00	; 0
     f9a:	e1 f7       	brne	.-8      	; 0xf94 <wifiDisplayAPlist+0x1e>
     f9c:	00 c0       	rjmp	.+0      	; 0xf9e <wifiDisplayAPlist+0x28>
     f9e:	00 00       	nop
	_delay_ms(2000);
	return WaitOKWithPrint();
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0e 94 8c 05 	call	0xb18	; 0xb18 <WaitOKWithPrint>
}
     fa8:	08 95       	ret

00000faa <wifiConnectAP>:

uint8_t wifiConnectAP(char* ssid, char* pwd)
{
	wifiprint("AT+CWJAP_DEF=\"%s\",\"%s\"\r\n",ssid,pwd);
     faa:	00 d0       	rcall	.+0      	; 0xfac <wifiConnectAP+0x2>
     fac:	00 d0       	rcall	.+0      	; 0xfae <wifiConnectAP+0x4>
     fae:	ed b7       	in	r30, 0x3d	; 61
     fb0:	fe b7       	in	r31, 0x3e	; 62
     fb2:	31 96       	adiw	r30, 0x01	; 1
     fb4:	27 e8       	ldi	r18, 0x87	; 135
     fb6:	32 e0       	ldi	r19, 0x02	; 2
     fb8:	ad b7       	in	r26, 0x3d	; 61
     fba:	be b7       	in	r27, 0x3e	; 62
     fbc:	12 96       	adiw	r26, 0x02	; 2
     fbe:	3c 93       	st	X, r19
     fc0:	2e 93       	st	-X, r18
     fc2:	11 97       	sbiw	r26, 0x01	; 1
     fc4:	93 83       	std	Z+3, r25	; 0x03
     fc6:	82 83       	std	Z+2, r24	; 0x02
     fc8:	75 83       	std	Z+5, r23	; 0x05
     fca:	64 83       	std	Z+4, r22	; 0x04
     fcc:	0e 94 8a 02 	call	0x514	; 0x514 <wifiprint>
	
	return WaitOKWithPrint();
     fd0:	8d b7       	in	r24, 0x3d	; 61
     fd2:	9e b7       	in	r25, 0x3e	; 62
     fd4:	06 96       	adiw	r24, 0x06	; 6
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	9e bf       	out	0x3e, r25	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	8d bf       	out	0x3d, r24	; 61
     fe0:	0e 94 8c 05 	call	0xb18	; 0xb18 <WaitOKWithPrint>
}
     fe4:	08 95       	ret

00000fe6 <wifiModeSet>:


uint8_t wifiModeSet()
{
	wifiprint("AT+CWMODE=3\r\n");
     fe6:	0f 92       	push	r0
     fe8:	0f 92       	push	r0
     fea:	80 ea       	ldi	r24, 0xA0	; 160
     fec:	92 e0       	ldi	r25, 0x02	; 2
     fee:	ed b7       	in	r30, 0x3d	; 61
     ff0:	fe b7       	in	r31, 0x3e	; 62
     ff2:	92 83       	std	Z+2, r25	; 0x02
     ff4:	81 83       	std	Z+1, r24	; 0x01
     ff6:	0e 94 8a 02 	call	0x514	; 0x514 <wifiprint>
	return WaitOKWithPrint();
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0e 94 8c 05 	call	0xb18	; 0xb18 <WaitOKWithPrint>

}
    1002:	08 95       	ret

00001004 <wifiDisplayLocalIP>:

uint8_t wifiDisplayLocalIP()
{
	wifiprint("AT+CIPSTA_CUR?\r\n");
    1004:	0f 92       	push	r0
    1006:	0f 92       	push	r0
    1008:	8e ea       	ldi	r24, 0xAE	; 174
    100a:	92 e0       	ldi	r25, 0x02	; 2
    100c:	ed b7       	in	r30, 0x3d	; 61
    100e:	fe b7       	in	r31, 0x3e	; 62
    1010:	92 83       	std	Z+2, r25	; 0x02
    1012:	81 83       	std	Z+1, r24	; 0x01
    1014:	0e 94 8a 02 	call	0x514	; 0x514 <wifiprint>
	return WaitOKWithPrint();
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0e 94 8c 05 	call	0xb18	; 0xb18 <WaitOKWithPrint>
}
    1020:	08 95       	ret

00001022 <wifiEnableDHCP>:

uint8_t wifiEnableDHCP()
{
	wifiprint("AT+CWDHCP_CUR=1,1\r\n");
    1022:	0f 92       	push	r0
    1024:	0f 92       	push	r0
    1026:	8f eb       	ldi	r24, 0xBF	; 191
    1028:	92 e0       	ldi	r25, 0x02	; 2
    102a:	ed b7       	in	r30, 0x3d	; 61
    102c:	fe b7       	in	r31, 0x3e	; 62
    102e:	92 83       	std	Z+2, r25	; 0x02
    1030:	81 83       	std	Z+1, r24	; 0x01
    1032:	0e 94 8a 02 	call	0x514	; 0x514 <wifiprint>
	return WaitOKWithPrint();
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0e 94 8c 05 	call	0xb18	; 0xb18 <WaitOKWithPrint>

}
    103e:	08 95       	ret

00001040 <wifiConnectTCPServer>:


uint8_t wifiConnectTCPServer(char* remoteIP,uint32_t remotePort)
{
	wifiprint("AT+CIPSTART=\"TCP\",\"%s\",%u\r\n",remoteIP, remotePort);
    1040:	2d b7       	in	r18, 0x3d	; 61
    1042:	3e b7       	in	r19, 0x3e	; 62
    1044:	28 50       	subi	r18, 0x08	; 8
    1046:	30 40       	sbci	r19, 0x00	; 0
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	3e bf       	out	0x3e, r19	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	2d bf       	out	0x3d, r18	; 61
    1052:	ed b7       	in	r30, 0x3d	; 61
    1054:	fe b7       	in	r31, 0x3e	; 62
    1056:	31 96       	adiw	r30, 0x01	; 1
    1058:	23 ed       	ldi	r18, 0xD3	; 211
    105a:	32 e0       	ldi	r19, 0x02	; 2
    105c:	ad b7       	in	r26, 0x3d	; 61
    105e:	be b7       	in	r27, 0x3e	; 62
    1060:	12 96       	adiw	r26, 0x02	; 2
    1062:	3c 93       	st	X, r19
    1064:	2e 93       	st	-X, r18
    1066:	11 97       	sbiw	r26, 0x01	; 1
    1068:	93 83       	std	Z+3, r25	; 0x03
    106a:	82 83       	std	Z+2, r24	; 0x02
    106c:	44 83       	std	Z+4, r20	; 0x04
    106e:	55 83       	std	Z+5, r21	; 0x05
    1070:	66 83       	std	Z+6, r22	; 0x06
    1072:	77 83       	std	Z+7, r23	; 0x07
    1074:	0e 94 8a 02 	call	0x514	; 0x514 <wifiprint>
	
	return WaitOKWithPrint();
    1078:	2d b7       	in	r18, 0x3d	; 61
    107a:	3e b7       	in	r19, 0x3e	; 62
    107c:	28 5f       	subi	r18, 0xF8	; 248
    107e:	3f 4f       	sbci	r19, 0xFF	; 255
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	3e bf       	out	0x3e, r19	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	2d bf       	out	0x3d, r18	; 61
    108a:	0e 94 8c 05 	call	0xb18	; 0xb18 <WaitOKWithPrint>
}
    108e:	08 95       	ret

00001090 <wifiSetEventCallback>:


uint8_t wifiSetEventCallback(void* func)
{
	callbackFnc = func;
    1090:	90 93 9e 0a 	sts	0x0A9E, r25
    1094:	80 93 9d 0a 	sts	0x0A9D, r24
	return 0;
}
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	08 95       	ret

0000109c <wifiSendData>:

int wifiSendData(uint8_t* buff, int dataSize)
{
    109c:	ef 92       	push	r14
    109e:	ff 92       	push	r15
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	08 2f       	mov	r16, r24
    10aa:	19 2f       	mov	r17, r25
    10ac:	eb 01       	movw	r28, r22
	if (0 )
	{
		debugprint("wifiSendData err. rx processing ,g_wifiRxCurrentIndex:%d\r\n",g_wifiRxCurrentIndex);
		return -1;
	}
	wifiprint("AT+CIPSEND=%d\r\n",dataSize);
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <wifiSendData+0x14>
    10b0:	0f 92       	push	r0
    10b2:	8f ee       	ldi	r24, 0xEF	; 239
    10b4:	92 e0       	ldi	r25, 0x02	; 2
    10b6:	ad b7       	in	r26, 0x3d	; 61
    10b8:	be b7       	in	r27, 0x3e	; 62
    10ba:	12 96       	adiw	r26, 0x02	; 2
    10bc:	9c 93       	st	X, r25
    10be:	8e 93       	st	-X, r24
    10c0:	11 97       	sbiw	r26, 0x01	; 1
    10c2:	14 96       	adiw	r26, 0x04	; 4
    10c4:	7c 93       	st	X, r23
    10c6:	6e 93       	st	-X, r22
    10c8:	13 97       	sbiw	r26, 0x03	; 3
    10ca:	0e 94 8a 02 	call	0x514	; 0x514 <wifiprint>
	if ( WaitSendReadyWithoutPrint() < 0 )
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0e 94 90 06 	call	0xd20	; 0xd20 <WaitSendReadyWithoutPrint>
    10da:	99 23       	and	r25, r25
    10dc:	2c f0       	brlt	.+10     	; 0x10e8 <wifiSendData+0x4c>
		}
		#endif
		return -1;
	}
	
	for(int i = 0; i < dataSize ; i++ )
    10de:	1c 16       	cp	r1, r28
    10e0:	1d 06       	cpc	r1, r29
    10e2:	0c f4       	brge	.+2      	; 0x10e6 <wifiSendData+0x4a>
    10e4:	4a c0       	rjmp	.+148    	; 0x117a <wifiSendData+0xde>
    10e6:	57 c0       	rjmp	.+174    	; 0x1196 <wifiSendData+0xfa>
		return -1;
	}
	wifiprint("AT+CIPSEND=%d\r\n",dataSize);
	if ( WaitSendReadyWithoutPrint() < 0 )
	{
		debugprint("wifiSendData wait err -0");
    10e8:	0f 92       	push	r0
    10ea:	0f 92       	push	r0
    10ec:	8f ef       	ldi	r24, 0xFF	; 255
    10ee:	92 e0       	ldi	r25, 0x02	; 2
    10f0:	ed b7       	in	r30, 0x3d	; 61
    10f2:	fe b7       	in	r31, 0x3e	; 62
    10f4:	92 83       	std	Z+2, r25	; 0x02
    10f6:	81 83       	std	Z+1, r24	; 0x01
    10f8:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
		#if 1 // test
		debugprint("&:");
    10fc:	88 e1       	ldi	r24, 0x18	; 24
    10fe:	93 e0       	ldi	r25, 0x03	; 3
    1100:	ad b7       	in	r26, 0x3d	; 61
    1102:	be b7       	in	r27, 0x3e	; 62
    1104:	12 96       	adiw	r26, 0x02	; 2
    1106:	9c 93       	st	X, r25
    1108:	8e 93       	st	-X, r24
    110a:	11 97       	sbiw	r26, 0x01	; 1
    110c:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
		for(int i = 0; i <g_rxDataLen;i++)
    1110:	80 91 4c 04 	lds	r24, 0x044C
    1114:	90 91 4d 04 	lds	r25, 0x044D
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	18 16       	cp	r1, r24
    111e:	19 06       	cpc	r1, r25
    1120:	ec f5       	brge	.+122    	; 0x119c <wifiSendData+0x100>
    1122:	c0 e0       	ldi	r28, 0x00	; 0
    1124:	d0 e0       	ldi	r29, 0x00	; 0
		{
			//putCh2(g_wifiRxData[i]);
			debugprint("[%02X]",g_rxDataBuff[i]);
    1126:	0d e9       	ldi	r16, 0x9D	; 157
    1128:	18 e0       	ldi	r17, 0x08	; 8
    112a:	0f 2e       	mov	r0, r31
    112c:	fb e1       	ldi	r31, 0x1B	; 27
    112e:	ef 2e       	mov	r14, r31
    1130:	f3 e0       	ldi	r31, 0x03	; 3
    1132:	ff 2e       	mov	r15, r31
    1134:	f0 2d       	mov	r31, r0
    1136:	f8 01       	movw	r30, r16
    1138:	ec 0f       	add	r30, r28
    113a:	fd 1f       	adc	r31, r29
    113c:	80 81       	ld	r24, Z
    113e:	00 d0       	rcall	.+0      	; 0x1140 <wifiSendData+0xa4>
    1140:	0f 92       	push	r0
    1142:	ed b7       	in	r30, 0x3d	; 61
    1144:	fe b7       	in	r31, 0x3e	; 62
    1146:	31 96       	adiw	r30, 0x01	; 1
    1148:	ad b7       	in	r26, 0x3d	; 61
    114a:	be b7       	in	r27, 0x3e	; 62
    114c:	12 96       	adiw	r26, 0x02	; 2
    114e:	fc 92       	st	X, r15
    1150:	ee 92       	st	-X, r14
    1152:	11 97       	sbiw	r26, 0x01	; 1
    1154:	82 83       	std	Z+2, r24	; 0x02
    1156:	13 82       	std	Z+3, r1	; 0x03
    1158:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
	if ( WaitSendReadyWithoutPrint() < 0 )
	{
		debugprint("wifiSendData wait err -0");
		#if 1 // test
		debugprint("&:");
		for(int i = 0; i <g_rxDataLen;i++)
    115c:	21 96       	adiw	r28, 0x01	; 1
    115e:	80 91 4c 04 	lds	r24, 0x044C
    1162:	90 91 4d 04 	lds	r25, 0x044D
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	c8 17       	cp	r28, r24
    1170:	d9 07       	cpc	r29, r25
    1172:	0c f3       	brlt	.-62     	; 0x1136 <wifiSendData+0x9a>
		{
			//putCh2(g_wifiRxData[i]);
			debugprint("[%02X]",g_rxDataBuff[i]);
		}
		#endif
		return -1;
    1174:	8f ef       	ldi	r24, 0xFF	; 255
    1176:	9f ef       	ldi	r25, 0xFF	; 255
    1178:	13 c0       	rjmp	.+38     	; 0x11a0 <wifiSendData+0x104>
	if ( WaitSendReadyWithoutPrint() < 0 )
	{
		debugprint("wifiSendData wait err -0");
		#if 1 // test
		debugprint("&:");
		for(int i = 0; i <g_rxDataLen;i++)
    117a:	e0 2e       	mov	r14, r16
    117c:	f1 2e       	mov	r15, r17
		}
		#endif
		return -1;
	}
	
	for(int i = 0; i < dataSize ; i++ )
    117e:	00 e0       	ldi	r16, 0x00	; 0
    1180:	10 e0       	ldi	r17, 0x00	; 0
	{
		
		putCh0(buff[i]);
    1182:	f7 01       	movw	r30, r14
    1184:	81 91       	ld	r24, Z+
    1186:	7f 01       	movw	r14, r30
    1188:	0e 94 06 02 	call	0x40c	; 0x40c <putCh0>
		}
		#endif
		return -1;
	}
	
	for(int i = 0; i < dataSize ; i++ )
    118c:	0f 5f       	subi	r16, 0xFF	; 255
    118e:	1f 4f       	sbci	r17, 0xFF	; 255
    1190:	0c 17       	cp	r16, r28
    1192:	1d 07       	cpc	r17, r29
    1194:	b1 f7       	brne	.-20     	; 0x1182 <wifiSendData+0xe6>
	{
		
		putCh0(buff[i]);
	}
	
	return WaitSendOKWithoutPrint();
    1196:	0e 94 ef 06 	call	0xdde	; 0xdde <WaitSendOKWithoutPrint>
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <wifiSendData+0x104>
		{
			//putCh2(g_wifiRxData[i]);
			debugprint("[%02X]",g_rxDataBuff[i]);
		}
		#endif
		return -1;
    119c:	8f ef       	ldi	r24, 0xFF	; 255
    119e:	9f ef       	ldi	r25, 0xFF	; 255
		putCh0(buff[i]);
	}
	
	return WaitSendOKWithoutPrint();
	
}
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	08 95       	ret

000011ae <wificlearUartBuff>:

void wificlearUartBuff()
{
	g_wifiRxCurrentIndex = 0;
    11ae:	10 92 51 04 	sts	0x0451, r1
	g_rxDataLen = 0;
    11b2:	10 92 4d 04 	sts	0x044D, r1
    11b6:	10 92 4c 04 	sts	0x044C, r1
}
    11ba:	08 95       	ret

000011bc <wifiAutoConnectDisable>:

void wifiAutoConnectDisable()
{
	wifiprint("AT+CWAUTOCONN=0\r\n");
    11bc:	0f 92       	push	r0
    11be:	0f 92       	push	r0
    11c0:	82 e2       	ldi	r24, 0x22	; 34
    11c2:	93 e0       	ldi	r25, 0x03	; 3
    11c4:	ad b7       	in	r26, 0x3d	; 61
    11c6:	be b7       	in	r27, 0x3e	; 62
    11c8:	12 96       	adiw	r26, 0x02	; 2
    11ca:	9c 93       	st	X, r25
    11cc:	8e 93       	st	-X, r24
    11ce:	11 97       	sbiw	r26, 0x01	; 1
    11d0:	0e 94 8a 02 	call	0x514	; 0x514 <wifiprint>
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	9f e3       	ldi	r25, 0x3F	; 63
    11d8:	a2 e0       	ldi	r26, 0x02	; 2
    11da:	81 50       	subi	r24, 0x01	; 1
    11dc:	90 40       	sbci	r25, 0x00	; 0
    11de:	a0 40       	sbci	r26, 0x00	; 0
    11e0:	e1 f7       	brne	.-8      	; 0x11da <wifiAutoConnectDisable+0x1e>
    11e2:	00 c0       	rjmp	.+0      	; 0x11e4 <wifiAutoConnectDisable+0x28>
    11e4:	00 00       	nop

	_delay_ms(50);
	WaitOk();
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0e 94 44 07 	call	0xe88	; 0xe88 <WaitOk>
}
    11ee:	08 95       	ret

000011f0 <wifiEchoDisable>:

void wifiEchoDisable()
{
	wifiprint("ATE0\r\n");
    11f0:	0f 92       	push	r0
    11f2:	0f 92       	push	r0
    11f4:	84 e3       	ldi	r24, 0x34	; 52
    11f6:	93 e0       	ldi	r25, 0x03	; 3
    11f8:	ad b7       	in	r26, 0x3d	; 61
    11fa:	be b7       	in	r27, 0x3e	; 62
    11fc:	12 96       	adiw	r26, 0x02	; 2
    11fe:	9c 93       	st	X, r25
    1200:	8e 93       	st	-X, r24
    1202:	11 97       	sbiw	r26, 0x01	; 1
    1204:	0e 94 8a 02 	call	0x514	; 0x514 <wifiprint>
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	9f e7       	ldi	r25, 0x7F	; 127
    120c:	a4 e0       	ldi	r26, 0x04	; 4
    120e:	81 50       	subi	r24, 0x01	; 1
    1210:	90 40       	sbci	r25, 0x00	; 0
    1212:	a0 40       	sbci	r26, 0x00	; 0
    1214:	e1 f7       	brne	.-8      	; 0x120e <wifiEchoDisable+0x1e>
    1216:	00 c0       	rjmp	.+0      	; 0x1218 <wifiEchoDisable+0x28>
    1218:	00 00       	nop
	_delay_ms(100);
	
	wificlearUartBuff();
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <wificlearUartBuff>
	
}
    1222:	08 95       	ret

00001224 <pinMode>:
//	G (PORTG), H (PORTH), J (PORTJ), K (PORTK), L (PORTL),
// pin  = 0~7
// mode = 0(Input), 1(OutPut)
void pinMode(uint8_t port,uint8_t pin,uint8_t mode)
{
	if(port == A) {
    1224:	88 23       	and	r24, r24
    1226:	e9 f4       	brne	.+58     	; 0x1262 <pinMode+0x3e>
		if(mode) {
    1228:	44 23       	and	r20, r20
    122a:	69 f0       	breq	.+26     	; 0x1246 <pinMode+0x22>
			sbit(DDRA,pin);	
    122c:	21 b1       	in	r18, 0x01	; 1
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	ac 01       	movw	r20, r24
    1234:	02 c0       	rjmp	.+4      	; 0x123a <pinMode+0x16>
    1236:	44 0f       	add	r20, r20
    1238:	55 1f       	adc	r21, r21
    123a:	6a 95       	dec	r22
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <pinMode+0x12>
    123e:	ba 01       	movw	r22, r20
    1240:	62 2b       	or	r22, r18
    1242:	61 b9       	out	0x01, r22	; 1
    1244:	08 95       	ret
		}
		else {
			cbit(DDRA,pin);
    1246:	21 b1       	in	r18, 0x01	; 1
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	ac 01       	movw	r20, r24
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <pinMode+0x30>
    1250:	44 0f       	add	r20, r20
    1252:	55 1f       	adc	r21, r21
    1254:	6a 95       	dec	r22
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <pinMode+0x2c>
    1258:	ba 01       	movw	r22, r20
    125a:	60 95       	com	r22
    125c:	62 23       	and	r22, r18
    125e:	61 b9       	out	0x01, r22	; 1
    1260:	08 95       	ret
		}	
	}
	else if(port == B) {
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	e9 f4       	brne	.+58     	; 0x12a0 <pinMode+0x7c>
		if(mode) {
    1266:	44 23       	and	r20, r20
    1268:	69 f0       	breq	.+26     	; 0x1284 <pinMode+0x60>
			sbit(DDRB,pin);	
    126a:	24 b1       	in	r18, 0x04	; 4
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	ac 01       	movw	r20, r24
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <pinMode+0x54>
    1274:	44 0f       	add	r20, r20
    1276:	55 1f       	adc	r21, r21
    1278:	6a 95       	dec	r22
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <pinMode+0x50>
    127c:	ba 01       	movw	r22, r20
    127e:	62 2b       	or	r22, r18
    1280:	64 b9       	out	0x04, r22	; 4
    1282:	08 95       	ret
		}
		else {
			cbit(DDRB,pin);
    1284:	24 b1       	in	r18, 0x04	; 4
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	ac 01       	movw	r20, r24
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <pinMode+0x6e>
    128e:	44 0f       	add	r20, r20
    1290:	55 1f       	adc	r21, r21
    1292:	6a 95       	dec	r22
    1294:	e2 f7       	brpl	.-8      	; 0x128e <pinMode+0x6a>
    1296:	ba 01       	movw	r22, r20
    1298:	60 95       	com	r22
    129a:	62 23       	and	r22, r18
    129c:	64 b9       	out	0x04, r22	; 4
    129e:	08 95       	ret
		}	
	}
	else if(port == C) {
    12a0:	82 30       	cpi	r24, 0x02	; 2
    12a2:	e9 f4       	brne	.+58     	; 0x12de <pinMode+0xba>
		if(mode) {
    12a4:	44 23       	and	r20, r20
    12a6:	69 f0       	breq	.+26     	; 0x12c2 <pinMode+0x9e>
			sbit(DDRC,pin);	
    12a8:	27 b1       	in	r18, 0x07	; 7
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	ac 01       	movw	r20, r24
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <pinMode+0x92>
    12b2:	44 0f       	add	r20, r20
    12b4:	55 1f       	adc	r21, r21
    12b6:	6a 95       	dec	r22
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <pinMode+0x8e>
    12ba:	ba 01       	movw	r22, r20
    12bc:	62 2b       	or	r22, r18
    12be:	67 b9       	out	0x07, r22	; 7
    12c0:	08 95       	ret
		}
		else {
			cbit(DDRC,pin);
    12c2:	27 b1       	in	r18, 0x07	; 7
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	ac 01       	movw	r20, r24
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <pinMode+0xac>
    12cc:	44 0f       	add	r20, r20
    12ce:	55 1f       	adc	r21, r21
    12d0:	6a 95       	dec	r22
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <pinMode+0xa8>
    12d4:	ba 01       	movw	r22, r20
    12d6:	60 95       	com	r22
    12d8:	62 23       	and	r22, r18
    12da:	67 b9       	out	0x07, r22	; 7
    12dc:	08 95       	ret
		}
	}	
	else if(port == D) {
    12de:	83 30       	cpi	r24, 0x03	; 3
    12e0:	e9 f4       	brne	.+58     	; 0x131c <pinMode+0xf8>
		if(mode) {
    12e2:	44 23       	and	r20, r20
    12e4:	69 f0       	breq	.+26     	; 0x1300 <pinMode+0xdc>
			sbit(DDRD,pin);	
    12e6:	2a b1       	in	r18, 0x0a	; 10
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	ac 01       	movw	r20, r24
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <pinMode+0xd0>
    12f0:	44 0f       	add	r20, r20
    12f2:	55 1f       	adc	r21, r21
    12f4:	6a 95       	dec	r22
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <pinMode+0xcc>
    12f8:	ba 01       	movw	r22, r20
    12fa:	62 2b       	or	r22, r18
    12fc:	6a b9       	out	0x0a, r22	; 10
    12fe:	08 95       	ret
		}
		else {
			cbit(DDRD,pin);
    1300:	2a b1       	in	r18, 0x0a	; 10
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	ac 01       	movw	r20, r24
    1308:	02 c0       	rjmp	.+4      	; 0x130e <pinMode+0xea>
    130a:	44 0f       	add	r20, r20
    130c:	55 1f       	adc	r21, r21
    130e:	6a 95       	dec	r22
    1310:	e2 f7       	brpl	.-8      	; 0x130a <pinMode+0xe6>
    1312:	ba 01       	movw	r22, r20
    1314:	60 95       	com	r22
    1316:	62 23       	and	r22, r18
    1318:	6a b9       	out	0x0a, r22	; 10
    131a:	08 95       	ret
		}
	}
	else if(port == E) {
    131c:	84 30       	cpi	r24, 0x04	; 4
    131e:	e9 f4       	brne	.+58     	; 0x135a <pinMode+0x136>
		if(mode) {
    1320:	44 23       	and	r20, r20
    1322:	69 f0       	breq	.+26     	; 0x133e <pinMode+0x11a>
			sbit(DDRE,pin);	
    1324:	2d b1       	in	r18, 0x0d	; 13
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	ac 01       	movw	r20, r24
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <pinMode+0x10e>
    132e:	44 0f       	add	r20, r20
    1330:	55 1f       	adc	r21, r21
    1332:	6a 95       	dec	r22
    1334:	e2 f7       	brpl	.-8      	; 0x132e <pinMode+0x10a>
    1336:	ba 01       	movw	r22, r20
    1338:	62 2b       	or	r22, r18
    133a:	6d b9       	out	0x0d, r22	; 13
    133c:	08 95       	ret
		}
		else {
			cbit(DDRE,pin);
    133e:	2d b1       	in	r18, 0x0d	; 13
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	ac 01       	movw	r20, r24
    1346:	02 c0       	rjmp	.+4      	; 0x134c <pinMode+0x128>
    1348:	44 0f       	add	r20, r20
    134a:	55 1f       	adc	r21, r21
    134c:	6a 95       	dec	r22
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <pinMode+0x124>
    1350:	ba 01       	movw	r22, r20
    1352:	60 95       	com	r22
    1354:	62 23       	and	r22, r18
    1356:	6d b9       	out	0x0d, r22	; 13
    1358:	08 95       	ret
		}
	}
	else if(port == F) {
    135a:	85 30       	cpi	r24, 0x05	; 5
    135c:	e9 f4       	brne	.+58     	; 0x1398 <pinMode+0x174>
		if(mode) {
    135e:	44 23       	and	r20, r20
    1360:	69 f0       	breq	.+26     	; 0x137c <pinMode+0x158>
			sbit(DDRF,pin);	
    1362:	20 b3       	in	r18, 0x10	; 16
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	ac 01       	movw	r20, r24
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <pinMode+0x14c>
    136c:	44 0f       	add	r20, r20
    136e:	55 1f       	adc	r21, r21
    1370:	6a 95       	dec	r22
    1372:	e2 f7       	brpl	.-8      	; 0x136c <pinMode+0x148>
    1374:	ba 01       	movw	r22, r20
    1376:	62 2b       	or	r22, r18
    1378:	60 bb       	out	0x10, r22	; 16
    137a:	08 95       	ret
		}
		else {
			cbit(DDRF,pin);
    137c:	20 b3       	in	r18, 0x10	; 16
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	ac 01       	movw	r20, r24
    1384:	02 c0       	rjmp	.+4      	; 0x138a <pinMode+0x166>
    1386:	44 0f       	add	r20, r20
    1388:	55 1f       	adc	r21, r21
    138a:	6a 95       	dec	r22
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <pinMode+0x162>
    138e:	ba 01       	movw	r22, r20
    1390:	60 95       	com	r22
    1392:	62 23       	and	r22, r18
    1394:	60 bb       	out	0x10, r22	; 16
    1396:	08 95       	ret
		}
	}
	else if(port == G) {
    1398:	86 30       	cpi	r24, 0x06	; 6
    139a:	e9 f4       	brne	.+58     	; 0x13d6 <pinMode+0x1b2>
		if(mode) {
    139c:	44 23       	and	r20, r20
    139e:	69 f0       	breq	.+26     	; 0x13ba <pinMode+0x196>
			sbit(DDRG,pin);	
    13a0:	23 b3       	in	r18, 0x13	; 19
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	ac 01       	movw	r20, r24
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <pinMode+0x18a>
    13aa:	44 0f       	add	r20, r20
    13ac:	55 1f       	adc	r21, r21
    13ae:	6a 95       	dec	r22
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <pinMode+0x186>
    13b2:	ba 01       	movw	r22, r20
    13b4:	62 2b       	or	r22, r18
    13b6:	63 bb       	out	0x13, r22	; 19
    13b8:	08 95       	ret
		}
		else {
			cbit(DDRG,pin);
    13ba:	23 b3       	in	r18, 0x13	; 19
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	ac 01       	movw	r20, r24
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <pinMode+0x1a4>
    13c4:	44 0f       	add	r20, r20
    13c6:	55 1f       	adc	r21, r21
    13c8:	6a 95       	dec	r22
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <pinMode+0x1a0>
    13cc:	ba 01       	movw	r22, r20
    13ce:	60 95       	com	r22
    13d0:	62 23       	and	r22, r18
    13d2:	63 bb       	out	0x13, r22	; 19
    13d4:	08 95       	ret
		}
	}
	else if(port == H) {
    13d6:	87 30       	cpi	r24, 0x07	; 7
    13d8:	09 f5       	brne	.+66     	; 0x141c <pinMode+0x1f8>
		if(mode) {
    13da:	44 23       	and	r20, r20
    13dc:	79 f0       	breq	.+30     	; 0x13fc <pinMode+0x1d8>
			sbit(DDRH,pin);	
    13de:	e1 e0       	ldi	r30, 0x01	; 1
    13e0:	f1 e0       	ldi	r31, 0x01	; 1
    13e2:	20 81       	ld	r18, Z
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	ac 01       	movw	r20, r24
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <pinMode+0x1cc>
    13ec:	44 0f       	add	r20, r20
    13ee:	55 1f       	adc	r21, r21
    13f0:	6a 95       	dec	r22
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <pinMode+0x1c8>
    13f4:	ba 01       	movw	r22, r20
    13f6:	62 2b       	or	r22, r18
    13f8:	60 83       	st	Z, r22
    13fa:	08 95       	ret
		}
		else {
			cbit(DDRH,pin);
    13fc:	e1 e0       	ldi	r30, 0x01	; 1
    13fe:	f1 e0       	ldi	r31, 0x01	; 1
    1400:	20 81       	ld	r18, Z
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	ac 01       	movw	r20, r24
    1408:	02 c0       	rjmp	.+4      	; 0x140e <pinMode+0x1ea>
    140a:	44 0f       	add	r20, r20
    140c:	55 1f       	adc	r21, r21
    140e:	6a 95       	dec	r22
    1410:	e2 f7       	brpl	.-8      	; 0x140a <pinMode+0x1e6>
    1412:	ba 01       	movw	r22, r20
    1414:	60 95       	com	r22
    1416:	62 23       	and	r22, r18
    1418:	60 83       	st	Z, r22
    141a:	08 95       	ret
		}
	}
	// PORTI is not present
	else if(port == J) {
    141c:	89 30       	cpi	r24, 0x09	; 9
    141e:	09 f5       	brne	.+66     	; 0x1462 <pinMode+0x23e>
		if(mode) {
    1420:	44 23       	and	r20, r20
    1422:	79 f0       	breq	.+30     	; 0x1442 <pinMode+0x21e>
			sbit(DDRJ,pin);	
    1424:	e4 e0       	ldi	r30, 0x04	; 4
    1426:	f1 e0       	ldi	r31, 0x01	; 1
    1428:	20 81       	ld	r18, Z
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	ac 01       	movw	r20, r24
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <pinMode+0x212>
    1432:	44 0f       	add	r20, r20
    1434:	55 1f       	adc	r21, r21
    1436:	6a 95       	dec	r22
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <pinMode+0x20e>
    143a:	ba 01       	movw	r22, r20
    143c:	62 2b       	or	r22, r18
    143e:	60 83       	st	Z, r22
    1440:	08 95       	ret
		}
		else {
			cbit(DDRJ,pin);
    1442:	e4 e0       	ldi	r30, 0x04	; 4
    1444:	f1 e0       	ldi	r31, 0x01	; 1
    1446:	20 81       	ld	r18, Z
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	ac 01       	movw	r20, r24
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <pinMode+0x230>
    1450:	44 0f       	add	r20, r20
    1452:	55 1f       	adc	r21, r21
    1454:	6a 95       	dec	r22
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <pinMode+0x22c>
    1458:	ba 01       	movw	r22, r20
    145a:	60 95       	com	r22
    145c:	62 23       	and	r22, r18
    145e:	60 83       	st	Z, r22
    1460:	08 95       	ret
		}
	}
	else if(port == K) {
    1462:	8a 30       	cpi	r24, 0x0A	; 10
    1464:	09 f5       	brne	.+66     	; 0x14a8 <pinMode+0x284>
		if(mode) {
    1466:	44 23       	and	r20, r20
    1468:	79 f0       	breq	.+30     	; 0x1488 <pinMode+0x264>
			sbit(DDRK,pin);
    146a:	e7 e0       	ldi	r30, 0x07	; 7
    146c:	f1 e0       	ldi	r31, 0x01	; 1
    146e:	20 81       	ld	r18, Z
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	ac 01       	movw	r20, r24
    1476:	02 c0       	rjmp	.+4      	; 0x147c <pinMode+0x258>
    1478:	44 0f       	add	r20, r20
    147a:	55 1f       	adc	r21, r21
    147c:	6a 95       	dec	r22
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <pinMode+0x254>
    1480:	ba 01       	movw	r22, r20
    1482:	62 2b       	or	r22, r18
    1484:	60 83       	st	Z, r22
    1486:	08 95       	ret
		}
		else {
			cbit(DDRK,pin);
    1488:	e7 e0       	ldi	r30, 0x07	; 7
    148a:	f1 e0       	ldi	r31, 0x01	; 1
    148c:	20 81       	ld	r18, Z
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	ac 01       	movw	r20, r24
    1494:	02 c0       	rjmp	.+4      	; 0x149a <pinMode+0x276>
    1496:	44 0f       	add	r20, r20
    1498:	55 1f       	adc	r21, r21
    149a:	6a 95       	dec	r22
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <pinMode+0x272>
    149e:	ba 01       	movw	r22, r20
    14a0:	60 95       	com	r22
    14a2:	62 23       	and	r22, r18
    14a4:	60 83       	st	Z, r22
    14a6:	08 95       	ret
		}
	}
	else if(port == L) {
    14a8:	8b 30       	cpi	r24, 0x0B	; 11
    14aa:	01 f5       	brne	.+64     	; 0x14ec <pinMode+0x2c8>
		if(mode) {
    14ac:	44 23       	and	r20, r20
    14ae:	79 f0       	breq	.+30     	; 0x14ce <pinMode+0x2aa>
			sbit(DDRL,pin);
    14b0:	ea e0       	ldi	r30, 0x0A	; 10
    14b2:	f1 e0       	ldi	r31, 0x01	; 1
    14b4:	20 81       	ld	r18, Z
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	ac 01       	movw	r20, r24
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <pinMode+0x29e>
    14be:	44 0f       	add	r20, r20
    14c0:	55 1f       	adc	r21, r21
    14c2:	6a 95       	dec	r22
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <pinMode+0x29a>
    14c6:	ba 01       	movw	r22, r20
    14c8:	62 2b       	or	r22, r18
    14ca:	60 83       	st	Z, r22
    14cc:	08 95       	ret
		}
		else {
			cbit(DDRL,pin);
    14ce:	ea e0       	ldi	r30, 0x0A	; 10
    14d0:	f1 e0       	ldi	r31, 0x01	; 1
    14d2:	20 81       	ld	r18, Z
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	ac 01       	movw	r20, r24
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <pinMode+0x2bc>
    14dc:	44 0f       	add	r20, r20
    14de:	55 1f       	adc	r21, r21
    14e0:	6a 95       	dec	r22
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <pinMode+0x2b8>
    14e4:	ba 01       	movw	r22, r20
    14e6:	60 95       	com	r22
    14e8:	62 23       	and	r22, r18
    14ea:	60 83       	st	Z, r22
    14ec:	08 95       	ret

000014ee <digitalWrite>:
//	G (PORTG), H (PORTH), J (PORTJ), K (PORTK), L (PORTL),
// pin  = 0~7
// signal = 0(LOW), 1(HIGH)
void digitalWrite(uint8_t port, uint8_t pin, uint8_t signal)
{
	if(port == A) {
    14ee:	88 23       	and	r24, r24
    14f0:	e9 f4       	brne	.+58     	; 0x152c <digitalWrite+0x3e>
		if(signal) {
    14f2:	44 23       	and	r20, r20
    14f4:	69 f0       	breq	.+26     	; 0x1510 <digitalWrite+0x22>
			sbit(PORTA,pin);
    14f6:	22 b1       	in	r18, 0x02	; 2
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	ac 01       	movw	r20, r24
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <digitalWrite+0x16>
    1500:	44 0f       	add	r20, r20
    1502:	55 1f       	adc	r21, r21
    1504:	6a 95       	dec	r22
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <digitalWrite+0x12>
    1508:	ba 01       	movw	r22, r20
    150a:	62 2b       	or	r22, r18
    150c:	62 b9       	out	0x02, r22	; 2
    150e:	08 95       	ret
		}
		else {
			cbit(PORTA,pin);
    1510:	22 b1       	in	r18, 0x02	; 2
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	ac 01       	movw	r20, r24
    1518:	02 c0       	rjmp	.+4      	; 0x151e <digitalWrite+0x30>
    151a:	44 0f       	add	r20, r20
    151c:	55 1f       	adc	r21, r21
    151e:	6a 95       	dec	r22
    1520:	e2 f7       	brpl	.-8      	; 0x151a <digitalWrite+0x2c>
    1522:	ba 01       	movw	r22, r20
    1524:	60 95       	com	r22
    1526:	62 23       	and	r22, r18
    1528:	62 b9       	out	0x02, r22	; 2
    152a:	08 95       	ret
		}
	}
	else if(port == B) {
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	e9 f4       	brne	.+58     	; 0x156a <digitalWrite+0x7c>
		if(signal) {
    1530:	44 23       	and	r20, r20
    1532:	69 f0       	breq	.+26     	; 0x154e <digitalWrite+0x60>
			sbit(PORTB,pin);
    1534:	25 b1       	in	r18, 0x05	; 5
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	ac 01       	movw	r20, r24
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <digitalWrite+0x54>
    153e:	44 0f       	add	r20, r20
    1540:	55 1f       	adc	r21, r21
    1542:	6a 95       	dec	r22
    1544:	e2 f7       	brpl	.-8      	; 0x153e <digitalWrite+0x50>
    1546:	ba 01       	movw	r22, r20
    1548:	62 2b       	or	r22, r18
    154a:	65 b9       	out	0x05, r22	; 5
    154c:	08 95       	ret
		}
		else {
			cbit(PORTB,pin);
    154e:	25 b1       	in	r18, 0x05	; 5
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	ac 01       	movw	r20, r24
    1556:	02 c0       	rjmp	.+4      	; 0x155c <digitalWrite+0x6e>
    1558:	44 0f       	add	r20, r20
    155a:	55 1f       	adc	r21, r21
    155c:	6a 95       	dec	r22
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <digitalWrite+0x6a>
    1560:	ba 01       	movw	r22, r20
    1562:	60 95       	com	r22
    1564:	62 23       	and	r22, r18
    1566:	65 b9       	out	0x05, r22	; 5
    1568:	08 95       	ret
		}
	}
	else if(port == C) {
    156a:	82 30       	cpi	r24, 0x02	; 2
    156c:	e9 f4       	brne	.+58     	; 0x15a8 <digitalWrite+0xba>
		if(signal) {
    156e:	44 23       	and	r20, r20
    1570:	69 f0       	breq	.+26     	; 0x158c <digitalWrite+0x9e>
			sbit(PORTC,pin);
    1572:	28 b1       	in	r18, 0x08	; 8
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	ac 01       	movw	r20, r24
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <digitalWrite+0x92>
    157c:	44 0f       	add	r20, r20
    157e:	55 1f       	adc	r21, r21
    1580:	6a 95       	dec	r22
    1582:	e2 f7       	brpl	.-8      	; 0x157c <digitalWrite+0x8e>
    1584:	ba 01       	movw	r22, r20
    1586:	62 2b       	or	r22, r18
    1588:	68 b9       	out	0x08, r22	; 8
    158a:	08 95       	ret
		}
		else {
			cbit(PORTC,pin);
    158c:	28 b1       	in	r18, 0x08	; 8
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	ac 01       	movw	r20, r24
    1594:	02 c0       	rjmp	.+4      	; 0x159a <digitalWrite+0xac>
    1596:	44 0f       	add	r20, r20
    1598:	55 1f       	adc	r21, r21
    159a:	6a 95       	dec	r22
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <digitalWrite+0xa8>
    159e:	ba 01       	movw	r22, r20
    15a0:	60 95       	com	r22
    15a2:	62 23       	and	r22, r18
    15a4:	68 b9       	out	0x08, r22	; 8
    15a6:	08 95       	ret
		}
	}
	else if(port == D) {
    15a8:	83 30       	cpi	r24, 0x03	; 3
    15aa:	e9 f4       	brne	.+58     	; 0x15e6 <digitalWrite+0xf8>
		if(signal) {
    15ac:	44 23       	and	r20, r20
    15ae:	69 f0       	breq	.+26     	; 0x15ca <digitalWrite+0xdc>
			sbit(PORTD,pin);
    15b0:	2b b1       	in	r18, 0x0b	; 11
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	ac 01       	movw	r20, r24
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <digitalWrite+0xd0>
    15ba:	44 0f       	add	r20, r20
    15bc:	55 1f       	adc	r21, r21
    15be:	6a 95       	dec	r22
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <digitalWrite+0xcc>
    15c2:	ba 01       	movw	r22, r20
    15c4:	62 2b       	or	r22, r18
    15c6:	6b b9       	out	0x0b, r22	; 11
    15c8:	08 95       	ret
		}
		else {
			cbit(PORTD,pin);
    15ca:	2b b1       	in	r18, 0x0b	; 11
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	ac 01       	movw	r20, r24
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <digitalWrite+0xea>
    15d4:	44 0f       	add	r20, r20
    15d6:	55 1f       	adc	r21, r21
    15d8:	6a 95       	dec	r22
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <digitalWrite+0xe6>
    15dc:	ba 01       	movw	r22, r20
    15de:	60 95       	com	r22
    15e0:	62 23       	and	r22, r18
    15e2:	6b b9       	out	0x0b, r22	; 11
    15e4:	08 95       	ret
		}
	}
	else if(port == E) {
    15e6:	84 30       	cpi	r24, 0x04	; 4
    15e8:	e9 f4       	brne	.+58     	; 0x1624 <digitalWrite+0x136>
		if(signal) {
    15ea:	44 23       	and	r20, r20
    15ec:	69 f0       	breq	.+26     	; 0x1608 <digitalWrite+0x11a>
			sbit(PORTE,pin);
    15ee:	2e b1       	in	r18, 0x0e	; 14
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	ac 01       	movw	r20, r24
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <digitalWrite+0x10e>
    15f8:	44 0f       	add	r20, r20
    15fa:	55 1f       	adc	r21, r21
    15fc:	6a 95       	dec	r22
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <digitalWrite+0x10a>
    1600:	ba 01       	movw	r22, r20
    1602:	62 2b       	or	r22, r18
    1604:	6e b9       	out	0x0e, r22	; 14
    1606:	08 95       	ret
		}
		else {
			cbit(PORTE,pin);
    1608:	2e b1       	in	r18, 0x0e	; 14
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	ac 01       	movw	r20, r24
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <digitalWrite+0x128>
    1612:	44 0f       	add	r20, r20
    1614:	55 1f       	adc	r21, r21
    1616:	6a 95       	dec	r22
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <digitalWrite+0x124>
    161a:	ba 01       	movw	r22, r20
    161c:	60 95       	com	r22
    161e:	62 23       	and	r22, r18
    1620:	6e b9       	out	0x0e, r22	; 14
    1622:	08 95       	ret
		}
	}
	else if(port == F) {
    1624:	85 30       	cpi	r24, 0x05	; 5
    1626:	e9 f4       	brne	.+58     	; 0x1662 <digitalWrite+0x174>
		if(signal) {
    1628:	44 23       	and	r20, r20
    162a:	69 f0       	breq	.+26     	; 0x1646 <digitalWrite+0x158>
			sbit(PORTF,pin);
    162c:	21 b3       	in	r18, 0x11	; 17
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	ac 01       	movw	r20, r24
    1634:	02 c0       	rjmp	.+4      	; 0x163a <digitalWrite+0x14c>
    1636:	44 0f       	add	r20, r20
    1638:	55 1f       	adc	r21, r21
    163a:	6a 95       	dec	r22
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <digitalWrite+0x148>
    163e:	ba 01       	movw	r22, r20
    1640:	62 2b       	or	r22, r18
    1642:	61 bb       	out	0x11, r22	; 17
    1644:	08 95       	ret
		}
		else {
			cbit(PORTF,pin);
    1646:	21 b3       	in	r18, 0x11	; 17
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	ac 01       	movw	r20, r24
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <digitalWrite+0x166>
    1650:	44 0f       	add	r20, r20
    1652:	55 1f       	adc	r21, r21
    1654:	6a 95       	dec	r22
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <digitalWrite+0x162>
    1658:	ba 01       	movw	r22, r20
    165a:	60 95       	com	r22
    165c:	62 23       	and	r22, r18
    165e:	61 bb       	out	0x11, r22	; 17
    1660:	08 95       	ret
		}
	}
	else if(port == G) {
    1662:	86 30       	cpi	r24, 0x06	; 6
    1664:	e9 f4       	brne	.+58     	; 0x16a0 <digitalWrite+0x1b2>
		if(signal) {
    1666:	44 23       	and	r20, r20
    1668:	69 f0       	breq	.+26     	; 0x1684 <digitalWrite+0x196>
			sbit(PORTG,pin);
    166a:	24 b3       	in	r18, 0x14	; 20
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	ac 01       	movw	r20, r24
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <digitalWrite+0x18a>
    1674:	44 0f       	add	r20, r20
    1676:	55 1f       	adc	r21, r21
    1678:	6a 95       	dec	r22
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <digitalWrite+0x186>
    167c:	ba 01       	movw	r22, r20
    167e:	62 2b       	or	r22, r18
    1680:	64 bb       	out	0x14, r22	; 20
    1682:	08 95       	ret
		}
		else {
			cbit(PORTG,pin);
    1684:	24 b3       	in	r18, 0x14	; 20
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	ac 01       	movw	r20, r24
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <digitalWrite+0x1a4>
    168e:	44 0f       	add	r20, r20
    1690:	55 1f       	adc	r21, r21
    1692:	6a 95       	dec	r22
    1694:	e2 f7       	brpl	.-8      	; 0x168e <digitalWrite+0x1a0>
    1696:	ba 01       	movw	r22, r20
    1698:	60 95       	com	r22
    169a:	62 23       	and	r22, r18
    169c:	64 bb       	out	0x14, r22	; 20
    169e:	08 95       	ret
		}
	}
	else if(port == H) {
    16a0:	87 30       	cpi	r24, 0x07	; 7
    16a2:	09 f5       	brne	.+66     	; 0x16e6 <digitalWrite+0x1f8>
		if(signal) {
    16a4:	44 23       	and	r20, r20
    16a6:	79 f0       	breq	.+30     	; 0x16c6 <digitalWrite+0x1d8>
			sbit(PORTH,pin);
    16a8:	e2 e0       	ldi	r30, 0x02	; 2
    16aa:	f1 e0       	ldi	r31, 0x01	; 1
    16ac:	20 81       	ld	r18, Z
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	ac 01       	movw	r20, r24
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <digitalWrite+0x1cc>
    16b6:	44 0f       	add	r20, r20
    16b8:	55 1f       	adc	r21, r21
    16ba:	6a 95       	dec	r22
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <digitalWrite+0x1c8>
    16be:	ba 01       	movw	r22, r20
    16c0:	62 2b       	or	r22, r18
    16c2:	60 83       	st	Z, r22
    16c4:	08 95       	ret
		}
		else {
			cbit(PORTH,pin);
    16c6:	e2 e0       	ldi	r30, 0x02	; 2
    16c8:	f1 e0       	ldi	r31, 0x01	; 1
    16ca:	20 81       	ld	r18, Z
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	ac 01       	movw	r20, r24
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <digitalWrite+0x1ea>
    16d4:	44 0f       	add	r20, r20
    16d6:	55 1f       	adc	r21, r21
    16d8:	6a 95       	dec	r22
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <digitalWrite+0x1e6>
    16dc:	ba 01       	movw	r22, r20
    16de:	60 95       	com	r22
    16e0:	62 23       	and	r22, r18
    16e2:	60 83       	st	Z, r22
    16e4:	08 95       	ret
		}
	}
	// PORTI is not present
	else if(port == J) {
    16e6:	89 30       	cpi	r24, 0x09	; 9
    16e8:	09 f5       	brne	.+66     	; 0x172c <digitalWrite+0x23e>
		if(signal) {
    16ea:	44 23       	and	r20, r20
    16ec:	79 f0       	breq	.+30     	; 0x170c <digitalWrite+0x21e>
			sbit(PORTJ,pin);
    16ee:	e5 e0       	ldi	r30, 0x05	; 5
    16f0:	f1 e0       	ldi	r31, 0x01	; 1
    16f2:	20 81       	ld	r18, Z
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	ac 01       	movw	r20, r24
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <digitalWrite+0x212>
    16fc:	44 0f       	add	r20, r20
    16fe:	55 1f       	adc	r21, r21
    1700:	6a 95       	dec	r22
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <digitalWrite+0x20e>
    1704:	ba 01       	movw	r22, r20
    1706:	62 2b       	or	r22, r18
    1708:	60 83       	st	Z, r22
    170a:	08 95       	ret
		}
		else {
			cbit(PORTJ,pin);
    170c:	e5 e0       	ldi	r30, 0x05	; 5
    170e:	f1 e0       	ldi	r31, 0x01	; 1
    1710:	20 81       	ld	r18, Z
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	ac 01       	movw	r20, r24
    1718:	02 c0       	rjmp	.+4      	; 0x171e <digitalWrite+0x230>
    171a:	44 0f       	add	r20, r20
    171c:	55 1f       	adc	r21, r21
    171e:	6a 95       	dec	r22
    1720:	e2 f7       	brpl	.-8      	; 0x171a <digitalWrite+0x22c>
    1722:	ba 01       	movw	r22, r20
    1724:	60 95       	com	r22
    1726:	62 23       	and	r22, r18
    1728:	60 83       	st	Z, r22
    172a:	08 95       	ret
		}
	}
	else if(port == K) {
    172c:	8a 30       	cpi	r24, 0x0A	; 10
    172e:	09 f5       	brne	.+66     	; 0x1772 <digitalWrite+0x284>
		if(signal) {
    1730:	44 23       	and	r20, r20
    1732:	79 f0       	breq	.+30     	; 0x1752 <digitalWrite+0x264>
			sbit(PORTK,pin);
    1734:	e8 e0       	ldi	r30, 0x08	; 8
    1736:	f1 e0       	ldi	r31, 0x01	; 1
    1738:	20 81       	ld	r18, Z
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	ac 01       	movw	r20, r24
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <digitalWrite+0x258>
    1742:	44 0f       	add	r20, r20
    1744:	55 1f       	adc	r21, r21
    1746:	6a 95       	dec	r22
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <digitalWrite+0x254>
    174a:	ba 01       	movw	r22, r20
    174c:	62 2b       	or	r22, r18
    174e:	60 83       	st	Z, r22
    1750:	08 95       	ret
		}
		else {
			cbit(PORTK,pin);
    1752:	e8 e0       	ldi	r30, 0x08	; 8
    1754:	f1 e0       	ldi	r31, 0x01	; 1
    1756:	20 81       	ld	r18, Z
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	ac 01       	movw	r20, r24
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <digitalWrite+0x276>
    1760:	44 0f       	add	r20, r20
    1762:	55 1f       	adc	r21, r21
    1764:	6a 95       	dec	r22
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <digitalWrite+0x272>
    1768:	ba 01       	movw	r22, r20
    176a:	60 95       	com	r22
    176c:	62 23       	and	r22, r18
    176e:	60 83       	st	Z, r22
    1770:	08 95       	ret
		}
	}
	else if(port == L) {
    1772:	8b 30       	cpi	r24, 0x0B	; 11
    1774:	01 f5       	brne	.+64     	; 0x17b6 <digitalWrite+0x2c8>
		if(signal) {
    1776:	44 23       	and	r20, r20
    1778:	79 f0       	breq	.+30     	; 0x1798 <digitalWrite+0x2aa>
			sbit(PORTL,pin);
    177a:	eb e0       	ldi	r30, 0x0B	; 11
    177c:	f1 e0       	ldi	r31, 0x01	; 1
    177e:	20 81       	ld	r18, Z
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	ac 01       	movw	r20, r24
    1786:	02 c0       	rjmp	.+4      	; 0x178c <digitalWrite+0x29e>
    1788:	44 0f       	add	r20, r20
    178a:	55 1f       	adc	r21, r21
    178c:	6a 95       	dec	r22
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <digitalWrite+0x29a>
    1790:	ba 01       	movw	r22, r20
    1792:	62 2b       	or	r22, r18
    1794:	60 83       	st	Z, r22
    1796:	08 95       	ret
		}
		else {
			cbit(PORTL,pin);
    1798:	eb e0       	ldi	r30, 0x0B	; 11
    179a:	f1 e0       	ldi	r31, 0x01	; 1
    179c:	20 81       	ld	r18, Z
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	ac 01       	movw	r20, r24
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <digitalWrite+0x2bc>
    17a6:	44 0f       	add	r20, r20
    17a8:	55 1f       	adc	r21, r21
    17aa:	6a 95       	dec	r22
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <digitalWrite+0x2b8>
    17ae:	ba 01       	movw	r22, r20
    17b0:	60 95       	com	r22
    17b2:	62 23       	and	r22, r18
    17b4:	60 83       	st	Z, r22
    17b6:	08 95       	ret

000017b8 <digitalRead>:
//	G (PORTG), H (PORTH), J (PORTJ), K (PORTK), L (PORTL),
// pin  = 0~7
int digitalRead(uint8_t port, uint8_t pin)
{
	unsigned char ucReadValue;
	if(port == A)
    17b8:	88 23       	and	r24, r24
    17ba:	59 f4       	brne	.+22     	; 0x17d2 <digitalRead+0x1a>
	{
		ucReadValue = (PINA>>pin)&0x01;
    17bc:	20 b1       	in	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	c9 01       	movw	r24, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <digitalRead+0x10>
    17c4:	95 95       	asr	r25
    17c6:	87 95       	ror	r24
    17c8:	6a 95       	dec	r22
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <digitalRead+0xc>
    17cc:	98 2f       	mov	r25, r24
    17ce:	91 70       	andi	r25, 0x01	; 1
    17d0:	7b c0       	rjmp	.+246    	; 0x18c8 <digitalRead+0x110>
	}
	else if(port == B)
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	59 f4       	brne	.+22     	; 0x17ec <digitalRead+0x34>
	{
		ucReadValue = (PINB>>pin)&0x01;
    17d6:	23 b1       	in	r18, 0x03	; 3
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	c9 01       	movw	r24, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <digitalRead+0x2a>
    17de:	95 95       	asr	r25
    17e0:	87 95       	ror	r24
    17e2:	6a 95       	dec	r22
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <digitalRead+0x26>
    17e6:	98 2f       	mov	r25, r24
    17e8:	91 70       	andi	r25, 0x01	; 1
    17ea:	6e c0       	rjmp	.+220    	; 0x18c8 <digitalRead+0x110>
	}
	else if(port == C)
    17ec:	82 30       	cpi	r24, 0x02	; 2
    17ee:	59 f4       	brne	.+22     	; 0x1806 <digitalRead+0x4e>
	{
		ucReadValue = (PINC>>pin)&0x01;
    17f0:	26 b1       	in	r18, 0x06	; 6
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	c9 01       	movw	r24, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <digitalRead+0x44>
    17f8:	95 95       	asr	r25
    17fa:	87 95       	ror	r24
    17fc:	6a 95       	dec	r22
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <digitalRead+0x40>
    1800:	98 2f       	mov	r25, r24
    1802:	91 70       	andi	r25, 0x01	; 1
    1804:	61 c0       	rjmp	.+194    	; 0x18c8 <digitalRead+0x110>
	}
	else if(port == D)
    1806:	83 30       	cpi	r24, 0x03	; 3
    1808:	39 f4       	brne	.+14     	; 0x1818 <digitalRead+0x60>
	{
		ucReadValue = (PIND>pin)&0x01;
    180a:	89 b1       	in	r24, 0x09	; 9
    180c:	91 e0       	ldi	r25, 0x01	; 1
    180e:	68 17       	cp	r22, r24
    1810:	08 f4       	brcc	.+2      	; 0x1814 <digitalRead+0x5c>
    1812:	5a c0       	rjmp	.+180    	; 0x18c8 <digitalRead+0x110>
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	58 c0       	rjmp	.+176    	; 0x18c8 <digitalRead+0x110>
	}
	else if(port == E)
    1818:	84 30       	cpi	r24, 0x04	; 4
    181a:	59 f4       	brne	.+22     	; 0x1832 <digitalRead+0x7a>
	{
		ucReadValue = (PINE>>pin)&0x01;
    181c:	2c b1       	in	r18, 0x0c	; 12
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	c9 01       	movw	r24, r18
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <digitalRead+0x70>
    1824:	95 95       	asr	r25
    1826:	87 95       	ror	r24
    1828:	6a 95       	dec	r22
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <digitalRead+0x6c>
    182c:	98 2f       	mov	r25, r24
    182e:	91 70       	andi	r25, 0x01	; 1
    1830:	4b c0       	rjmp	.+150    	; 0x18c8 <digitalRead+0x110>
	}
	else if(port == F)
    1832:	85 30       	cpi	r24, 0x05	; 5
    1834:	51 f4       	brne	.+20     	; 0x184a <digitalRead+0x92>
	{
		ucReadValue = (PINF>>pin)&0x01;
    1836:	8f b1       	in	r24, 0x0f	; 15
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <digitalRead+0x88>
    183c:	95 95       	asr	r25
    183e:	87 95       	ror	r24
    1840:	6a 95       	dec	r22
    1842:	e2 f7       	brpl	.-8      	; 0x183c <digitalRead+0x84>
    1844:	98 2f       	mov	r25, r24
    1846:	91 70       	andi	r25, 0x01	; 1
    1848:	3f c0       	rjmp	.+126    	; 0x18c8 <digitalRead+0x110>
	}
	else if(port == G)
    184a:	86 30       	cpi	r24, 0x06	; 6
    184c:	51 f4       	brne	.+20     	; 0x1862 <digitalRead+0xaa>
	{
		ucReadValue = (PING>>pin)&0x01;
    184e:	82 b3       	in	r24, 0x12	; 18
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <digitalRead+0xa0>
    1854:	95 95       	asr	r25
    1856:	87 95       	ror	r24
    1858:	6a 95       	dec	r22
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <digitalRead+0x9c>
    185c:	98 2f       	mov	r25, r24
    185e:	91 70       	andi	r25, 0x01	; 1
    1860:	33 c0       	rjmp	.+102    	; 0x18c8 <digitalRead+0x110>
	}
	else if(port == H)
    1862:	87 30       	cpi	r24, 0x07	; 7
    1864:	59 f4       	brne	.+22     	; 0x187c <digitalRead+0xc4>
	{
		ucReadValue = (PINH>>pin)&0x01;
    1866:	80 91 00 01 	lds	r24, 0x0100
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <digitalRead+0xba>
    186e:	95 95       	asr	r25
    1870:	87 95       	ror	r24
    1872:	6a 95       	dec	r22
    1874:	e2 f7       	brpl	.-8      	; 0x186e <digitalRead+0xb6>
    1876:	98 2f       	mov	r25, r24
    1878:	91 70       	andi	r25, 0x01	; 1
    187a:	26 c0       	rjmp	.+76     	; 0x18c8 <digitalRead+0x110>
	}
	// PORTI is not present
	else if(port == J)
    187c:	89 30       	cpi	r24, 0x09	; 9
    187e:	59 f4       	brne	.+22     	; 0x1896 <digitalRead+0xde>
	{
		ucReadValue = (PINJ>>pin)&0x01;
    1880:	80 91 03 01 	lds	r24, 0x0103
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 c0       	rjmp	.+4      	; 0x188c <digitalRead+0xd4>
    1888:	95 95       	asr	r25
    188a:	87 95       	ror	r24
    188c:	6a 95       	dec	r22
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <digitalRead+0xd0>
    1890:	98 2f       	mov	r25, r24
    1892:	91 70       	andi	r25, 0x01	; 1
    1894:	19 c0       	rjmp	.+50     	; 0x18c8 <digitalRead+0x110>
	}
	else if(port == K)
    1896:	8a 30       	cpi	r24, 0x0A	; 10
    1898:	59 f4       	brne	.+22     	; 0x18b0 <digitalRead+0xf8>
	{
		ucReadValue = (PINK>>pin)&0x01;
    189a:	80 91 06 01 	lds	r24, 0x0106
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <digitalRead+0xee>
    18a2:	95 95       	asr	r25
    18a4:	87 95       	ror	r24
    18a6:	6a 95       	dec	r22
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <digitalRead+0xea>
    18aa:	98 2f       	mov	r25, r24
    18ac:	91 70       	andi	r25, 0x01	; 1
    18ae:	0c c0       	rjmp	.+24     	; 0x18c8 <digitalRead+0x110>
	}
	else if(port == L)
    18b0:	8b 30       	cpi	r24, 0x0B	; 11
    18b2:	51 f4       	brne	.+20     	; 0x18c8 <digitalRead+0x110>
	{
		ucReadValue = (PINL>>pin)&0x01;
    18b4:	80 91 09 01 	lds	r24, 0x0109
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <digitalRead+0x108>
    18bc:	95 95       	asr	r25
    18be:	87 95       	ror	r24
    18c0:	6a 95       	dec	r22
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <digitalRead+0x104>
    18c4:	98 2f       	mov	r25, r24
    18c6:	91 70       	andi	r25, 0x01	; 1
	}
	
	return ucReadValue;
}
    18c8:	89 2f       	mov	r24, r25
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	08 95       	ret

000018ce <I2C_data_input>:


static void I2C_data_output (void)
{	pinMode(TEMP_PORT, DATA, OUTPUT);}
static void I2C_data_input()
{	pinMode(TEMP_PORT, DATA, INPUT);}
    18ce:	85 e0       	ldi	r24, 0x05	; 5
    18d0:	65 e0       	ldi	r22, 0x05	; 5
    18d2:	40 e0       	ldi	r20, 0x00	; 0
    18d4:	0e 94 12 09 	call	0x1224	; 0x1224 <pinMode>
    18d8:	08 95       	ret

000018da <I2C_data_output>:
unsigned short error, checksum;
unsigned char sensing_type;


static void I2C_data_output (void)
{	pinMode(TEMP_PORT, DATA, OUTPUT);}
    18da:	85 e0       	ldi	r24, 0x05	; 5
    18dc:	65 e0       	ldi	r22, 0x05	; 5
    18de:	41 e0       	ldi	r20, 0x01	; 1
    18e0:	0e 94 12 09 	call	0x1224	; 0x1224 <pinMode>
    18e4:	08 95       	ret

000018e6 <READ_DATA>:
static void SET_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, HIGH);}
static void CLR_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, LOW);}
static int READ_DATA (void)
{	return digitalRead(TEMP_PORT, DATA);}
    18e6:	85 e0       	ldi	r24, 0x05	; 5
    18e8:	65 e0       	ldi	r22, 0x05	; 5
    18ea:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <digitalRead>
    18ee:	08 95       	ret

000018f0 <CLR_DATA>:
static void I2C_sck_input (void)
{	pinMode(TEMP_PORT, SCK, INPUT);}
static void SET_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, HIGH);}
static void CLR_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, LOW);}
    18f0:	85 e0       	ldi	r24, 0x05	; 5
    18f2:	65 e0       	ldi	r22, 0x05	; 5
    18f4:	40 e0       	ldi	r20, 0x00	; 0
    18f6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
    18fa:	08 95       	ret

000018fc <SET_SCK>:
static int READ_DATA (void)
{	return digitalRead(TEMP_PORT, DATA);}
static void SET_SCK()
{	digitalWrite(TEMP_PORT, SCK, HIGH);}
    18fc:	85 e0       	ldi	r24, 0x05	; 5
    18fe:	62 e0       	ldi	r22, 0x02	; 2
    1900:	41 e0       	ldi	r20, 0x01	; 1
    1902:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
    1906:	08 95       	ret

00001908 <CLR_SCK>:
static void CLR_SCK()
{	digitalWrite(TEMP_PORT, SCK, LOW);}
    1908:	85 e0       	ldi	r24, 0x05	; 5
    190a:	62 e0       	ldi	r22, 0x02	; 2
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
    1912:	08 95       	ret

00001914 <SET_DATA>:
static void I2C_sck_output (void)
{	pinMode(TEMP_PORT, SCK, OUTPUT);}
static void I2C_sck_input (void)
{	pinMode(TEMP_PORT, SCK, INPUT);}
static void SET_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, HIGH);}
    1914:	85 e0       	ldi	r24, 0x05	; 5
    1916:	65 e0       	ldi	r22, 0x05	; 5
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
    191e:	08 95       	ret

00001920 <Transmission_start>:
  	Transmission_start();	// transmission start
}

void Transmission_start (void)
{  
	SET_DATA();                   //Initial state
    1920:	0e 94 8a 0c 	call	0x1914	; 0x1914 <SET_DATA>
	CLR_SCK();                    //Initial state
    1924:	0e 94 84 0c 	call	0x1908	; 0x1908 <CLR_SCK>
	asm("nop");asm("nop");
    1928:	00 00       	nop
    192a:	00 00       	nop

	SET_SCK();
    192c:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <SET_SCK>
	asm("nop");asm("nop");
    1930:	00 00       	nop
    1932:	00 00       	nop

	CLR_DATA();
    1934:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <CLR_DATA>
	asm("nop");asm("nop");
    1938:	00 00       	nop
    193a:	00 00       	nop

	CLR_SCK();  
    193c:	0e 94 84 0c 	call	0x1908	; 0x1908 <CLR_SCK>
	asm("nop");asm("nop");
    1940:	00 00       	nop
    1942:	00 00       	nop

	SET_SCK();
    1944:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <SET_SCK>
	asm("nop");asm("nop");
    1948:	00 00       	nop
    194a:	00 00       	nop

	SET_DATA();		   
    194c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <SET_DATA>
	asm("nop");asm("nop");
    1950:	00 00       	nop
    1952:	00 00       	nop

	CLR_SCK();
    1954:	0e 94 84 0c 	call	0x1908	; 0x1908 <CLR_SCK>
}
    1958:	08 95       	ret

0000195a <Connection_reset>:
	I2C_sck_output ();		// DDRF |= 0x01;
	Connection_reset ();
}

void Connection_reset (void)
{
    195a:	cf 93       	push	r28
	unsigned char i; 
  	SET_DATA();				// Initial state
    195c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <SET_DATA>
	CLR_SCK();				// Initial state
    1960:	0e 94 84 0c 	call	0x1908	; 0x1908 <CLR_SCK>
    1964:	c9 e0       	ldi	r28, 0x09	; 9
  	for (i=0; i<9; i++)		// 9 SCK cycles
  	{
  		SET_SCK();
    1966:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <SET_SCK>
    	CLR_SCK();
    196a:	0e 94 84 0c 	call	0x1908	; 0x1908 <CLR_SCK>
    196e:	c1 50       	subi	r28, 0x01	; 1
void Connection_reset (void)
{
	unsigned char i; 
  	SET_DATA();				// Initial state
	CLR_SCK();				// Initial state
  	for (i=0; i<9; i++)		// 9 SCK cycles
    1970:	d1 f7       	brne	.-12     	; 0x1966 <Connection_reset+0xc>
  	{
  		SET_SCK();
    	CLR_SCK();
  	}
  	Transmission_start();	// transmission start
    1972:	0e 94 90 0c 	call	0x1920	; 0x1920 <Transmission_start>
}
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <SHT11_Init>:
{	return digitalRead(TEMP_PORT, SCK);}


void SHT11_Init (void)
{
	I2C_data_output ();		// DDRF |= 0x02;
    197a:	0e 94 6d 0c 	call	0x18da	; 0x18da <I2C_data_output>
static void I2C_data_output (void)
{	pinMode(TEMP_PORT, DATA, OUTPUT);}
static void I2C_data_input()
{	pinMode(TEMP_PORT, DATA, INPUT);}
static void I2C_sck_output (void)
{	pinMode(TEMP_PORT, SCK, OUTPUT);}
    197e:	85 e0       	ldi	r24, 0x05	; 5
    1980:	62 e0       	ldi	r22, 0x02	; 2
    1982:	41 e0       	ldi	r20, 0x01	; 1
    1984:	0e 94 12 09 	call	0x1224	; 0x1224 <pinMode>

void SHT11_Init (void)
{
	I2C_data_output ();		// DDRF |= 0x02;
	I2C_sck_output ();		// DDRF |= 0x01;
	Connection_reset ();
    1988:	0e 94 ad 0c 	call	0x195a	; 0x195a <Connection_reset>
}
    198c:	08 95       	ret

0000198e <Write_byte>:

	return error;
}

unsigned char Write_byte (unsigned char value)
{ 
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	08 2f       	mov	r16, r24
	unsigned char i, error	=	0;
	I2C_data_output ();
    1998:	0e 94 6d 0c 	call	0x18da	; 0x18da <I2C_data_output>
    199c:	c8 e0       	ldi	r28, 0x08	; 8
    199e:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0x80; i>0; i/=2)
    19a0:	10 e8       	ldi	r17, 0x80	; 128
	{
		if (i & value)	SET_DATA ();
    19a2:	81 2f       	mov	r24, r17
    19a4:	80 23       	and	r24, r16
    19a6:	19 f0       	breq	.+6      	; 0x19ae <Write_byte+0x20>
    19a8:	0e 94 8a 0c 	call	0x1914	; 0x1914 <SET_DATA>
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <Write_byte+0x24>
		else		CLR_DATA ();
    19ae:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <CLR_DATA>

		SET_SCK ();
    19b2:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <SET_SCK>
		asm("nop");asm("nop");
    19b6:	00 00       	nop
    19b8:	00 00       	nop
		CLR_SCK ();
    19ba:	0e 94 84 0c 	call	0x1908	; 0x1908 <CLR_SCK>

unsigned char Write_byte (unsigned char value)
{ 
	unsigned char i, error	=	0;
	I2C_data_output ();
	for (i=0x80; i>0; i/=2)
    19be:	16 95       	lsr	r17
    19c0:	21 97       	sbiw	r28, 0x01	; 1
    19c2:	79 f7       	brne	.-34     	; 0x19a2 <Write_byte+0x14>

		SET_SCK ();
		asm("nop");asm("nop");
		CLR_SCK ();
	}
	SET_DATA ();
    19c4:	0e 94 8a 0c 	call	0x1914	; 0x1914 <SET_DATA>
	I2C_data_input ();
    19c8:	0e 94 67 0c 	call	0x18ce	; 0x18ce <I2C_data_input>
	asm("nop");asm("nop");
    19cc:	00 00       	nop
    19ce:	00 00       	nop
	SET_SCK (); 
    19d0:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <SET_SCK>
	error	=	READ_DATA ();
    19d4:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <READ_DATA>
    19d8:	c8 2f       	mov	r28, r24

	CLR_SCK ();
    19da:	0e 94 84 0c 	call	0x1908	; 0x1908 <CLR_SCK>
	I2C_data_output ();
    19de:	0e 94 6d 0c 	call	0x18da	; 0x18da <I2C_data_output>

	return error;
}
    19e2:	8c 2f       	mov	r24, r28
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	1f 91       	pop	r17
    19ea:	0f 91       	pop	r16
    19ec:	08 95       	ret

000019ee <Read_byte>:

unsigned char Read_byte(unsigned char ack)
{ 
    19ee:	ff 92       	push	r15
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	f8 2e       	mov	r15, r24
	unsigned char i, val	=	0;
	I2C_data_input ();
    19fa:	0e 94 67 0c 	call	0x18ce	; 0x18ce <I2C_data_input>
	SET_DATA();
    19fe:	0e 94 8a 0c 	call	0x1914	; 0x1914 <SET_DATA>
	asm("nop");asm("nop");
    1a02:	00 00       	nop
    1a04:	00 00       	nop
    1a06:	c8 e0       	ldi	r28, 0x08	; 8
    1a08:	d0 e0       	ldi	r29, 0x00	; 0
	return error;
}

unsigned char Read_byte(unsigned char ack)
{ 
	unsigned char i, val	=	0;
    1a0a:	00 e0       	ldi	r16, 0x00	; 0
	I2C_data_input ();
	SET_DATA();
	asm("nop");asm("nop");

	for (i=0x80; i>0; i/=2)
    1a0c:	10 e8       	ldi	r17, 0x80	; 128
	{
		SET_SCK();
    1a0e:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <SET_SCK>
		asm("nop");asm("nop");
    1a12:	00 00       	nop
    1a14:	00 00       	nop
		if (READ_DATA())
    1a16:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <READ_DATA>
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <Read_byte+0x32>
			val = (val | i); 
    1a1e:	01 2b       	or	r16, r17
		CLR_SCK();
    1a20:	0e 94 84 0c 	call	0x1908	; 0x1908 <CLR_SCK>
		asm("nop");asm("nop");
    1a24:	00 00       	nop
    1a26:	00 00       	nop
	unsigned char i, val	=	0;
	I2C_data_input ();
	SET_DATA();
	asm("nop");asm("nop");

	for (i=0x80; i>0; i/=2)
    1a28:	16 95       	lsr	r17
    1a2a:	21 97       	sbiw	r28, 0x01	; 1
    1a2c:	81 f7       	brne	.-32     	; 0x1a0e <Read_byte+0x20>
		if (READ_DATA())
			val = (val | i); 
		CLR_SCK();
		asm("nop");asm("nop");
	}
	I2C_data_output();
    1a2e:	0e 94 6d 0c 	call	0x18da	; 0x18da <I2C_data_output>

	if (ack)	CLR_DATA();
    1a32:	ff 20       	and	r15, r15
    1a34:	19 f0       	breq	.+6      	; 0x1a3c <Read_byte+0x4e>
    1a36:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <CLR_DATA>
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <Read_byte+0x52>
	else		SET_DATA();
    1a3c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <SET_DATA>

	SET_SCK();
    1a40:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <SET_SCK>
	asm("nop");asm("nop"); 
    1a44:	00 00       	nop
    1a46:	00 00       	nop
	CLR_SCK();
    1a48:	0e 94 84 0c 	call	0x1908	; 0x1908 <CLR_SCK>
	asm("nop");asm("nop"); 
    1a4c:	00 00       	nop
    1a4e:	00 00       	nop
	SET_DATA();
    1a50:	0e 94 8a 0c 	call	0x1914	; 0x1914 <SET_DATA>

	return val;
}
    1a54:	80 2f       	mov	r24, r16
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	1f 91       	pop	r17
    1a5c:	0f 91       	pop	r16
    1a5e:	ff 90       	pop	r15
    1a60:	08 95       	ret

00001a62 <Measure>:
	else 							return	0;
}

unsigned char Measure (unsigned short *p_value, unsigned short *p_checksum,
			unsigned char mode)
{ 
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	7c 01       	movw	r14, r24
    1a6e:	8b 01       	movw	r16, r22
    1a70:	c4 2f       	mov	r28, r20
	unsigned short error	=	0;
	unsigned short SHT11_msb, SHT11_lsb;

	Transmission_start ();		//transmission start
    1a72:	0e 94 90 0c 	call	0x1920	; 0x1920 <Transmission_start>
	switch (mode)				//send command to sensor
    1a76:	cc 23       	and	r28, r28
    1a78:	19 f0       	breq	.+6      	; 0x1a80 <Measure+0x1e>
    1a7a:	c1 30       	cpi	r28, 0x01	; 1
    1a7c:	59 f4       	brne	.+22     	; 0x1a94 <Measure+0x32>
    1a7e:	05 c0       	rjmp	.+10     	; 0x1a8a <Measure+0x28>
	{
		case TEMP :
			error	+=	Write_byte (MEASURE_TEMP);
    1a80:	83 e0       	ldi	r24, 0x03	; 3
    1a82:	0e 94 c7 0c 	call	0x198e	; 0x198e <Write_byte>
    1a86:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1a88:	07 c0       	rjmp	.+14     	; 0x1a98 <Measure+0x36>
		case HUMI :
			error	+=	Write_byte (MEASURE_HUMI);
    1a8a:	85 e0       	ldi	r24, 0x05	; 5
    1a8c:	0e 94 c7 0c 	call	0x198e	; 0x198e <Write_byte>
    1a90:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <Measure+0x36>
}

unsigned char Measure (unsigned short *p_value, unsigned short *p_checksum,
			unsigned char mode)
{ 
	unsigned short error	=	0;
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
			error	+=	Write_byte (MEASURE_HUMI);
			break;
		default :
			break;	 
	}
	if (error != 0)
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	e9 f4       	brne	.+58     	; 0x1ad6 <Measure+0x74>
		return	error;

	I2C_data_input ();
    1a9c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <I2C_data_input>

	while (READ_DATA());
    1aa0:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <READ_DATA>
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	e1 f7       	brne	.-8      	; 0x1aa0 <Measure+0x3e>

	I2C_data_input();
    1aa8:	0e 94 67 0c 	call	0x18ce	; 0x18ce <I2C_data_input>

	SHT11_msb	=	Read_byte (ACK);		// read the first byte (MSB)
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <Read_byte>
    1ab2:	c8 2f       	mov	r28, r24
	SHT11_lsb	=	Read_byte (ACK);		// read the second byte (LSB)
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <Read_byte>
	*p_value	=	(SHT11_msb * 256) + SHT11_lsb;
    1aba:	3c 2f       	mov	r19, r28
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	28 0f       	add	r18, r24
    1ac0:	31 1d       	adc	r19, r1
    1ac2:	f7 01       	movw	r30, r14
    1ac4:	31 83       	std	Z+1, r19	; 0x01
    1ac6:	20 83       	st	Z, r18
	*p_checksum	=	Read_byte (NOACK);	// read checksum
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <Read_byte>
    1ace:	f8 01       	movw	r30, r16
    1ad0:	80 83       	st	Z, r24
    1ad2:	11 82       	std	Z+1, r1	; 0x01

	return error;
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
}
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	ff 90       	pop	r15
    1ade:	ef 90       	pop	r14
    1ae0:	08 95       	ret

00001ae2 <calc_SHT11>:

	return val;
}

void calc_SHT11 (unsigned short humidity, unsigned short temperature)
{ 
    1ae2:	2f 92       	push	r2
    1ae4:	3f 92       	push	r3
    1ae6:	4f 92       	push	r4
    1ae8:	5f 92       	push	r5
    1aea:	6f 92       	push	r6
    1aec:	7f 92       	push	r7
    1aee:	8f 92       	push	r8
    1af0:	9f 92       	push	r9
    1af2:	af 92       	push	r10
    1af4:	bf 92       	push	r11
    1af6:	cf 92       	push	r12
    1af8:	df 92       	push	r13
    1afa:	ef 92       	push	r14
    1afc:	ff 92       	push	r15
    1afe:	0f 93       	push	r16
    1b00:	1f 93       	push	r17
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	0f 92       	push	r0
    1b08:	0f 92       	push	r0
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	8b 01       	movw	r16, r22
	const float T2	=	0.00008; 		// for 12 Bit
 
	float rh_lin;		// Relative Humidity
	float rh_true; 		// Humidity Sensor RH/Temperature compensation
	float t_C; 			// Temperature
	float rh	=	(float)humidity;
    1b10:	bc 01       	movw	r22, r24
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__floatunsisf>
    1b1a:	c6 2e       	mov	r12, r22
    1b1c:	d7 2e       	mov	r13, r23
    1b1e:	f8 2e       	mov	r15, r24
    1b20:	e9 2e       	mov	r14, r25
	float t		=	(float)temperature;
    1b22:	b8 01       	movw	r22, r16
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__floatunsisf>
    
	t_C			=	((t * 0.01) - 40) - 5;
    1b2c:	2a e0       	ldi	r18, 0x0A	; 10
    1b2e:	37 ed       	ldi	r19, 0xD7	; 215
    1b30:	43 e2       	ldi	r20, 0x23	; 35
    1b32:	5c e3       	ldi	r21, 0x3C	; 60
    1b34:	0e 94 2a 13 	call	0x2654	; 0x2654 <__mulsf3>
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e2       	ldi	r20, 0x20	; 32
    1b3e:	52 e4       	ldi	r21, 0x42	; 66
    1b40:	0e 94 df 11 	call	0x23be	; 0x23be <__subsf3>
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 ea       	ldi	r20, 0xA0	; 160
    1b4a:	50 e4       	ldi	r21, 0x40	; 64
    1b4c:	0e 94 df 11 	call	0x23be	; 0x23be <__subsf3>
    1b50:	36 2e       	mov	r3, r22
    1b52:	27 2e       	mov	r2, r23
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	9a 83       	std	Y+2, r25	; 0x02
	rh_lin		=	(C3 * rh * rh) + (C2 * rh) + C1;
	rh_true 	=	(t_C - 25) * (T1 + (T2 * rh)) + rh_lin;
    1b58:	38 2f       	mov	r19, r24
    1b5a:	29 2f       	mov	r18, r25
    1b5c:	86 2f       	mov	r24, r22
    1b5e:	92 2d       	mov	r25, r2
    1b60:	a3 2f       	mov	r26, r19
    1b62:	b2 2f       	mov	r27, r18
    1b64:	bc 01       	movw	r22, r24
    1b66:	cd 01       	movw	r24, r26
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	48 ec       	ldi	r20, 0xC8	; 200
    1b6e:	51 e4       	ldi	r21, 0x41	; 65
    1b70:	0e 94 df 11 	call	0x23be	; 0x23be <__subsf3>
    1b74:	4b 01       	movw	r8, r22
    1b76:	5c 01       	movw	r10, r24
    1b78:	8c 2d       	mov	r24, r12
    1b7a:	9d 2d       	mov	r25, r13
    1b7c:	af 2d       	mov	r26, r15
    1b7e:	be 2d       	mov	r27, r14
    1b80:	bc 01       	movw	r22, r24
    1b82:	cd 01       	movw	r24, r26
    1b84:	2c ea       	ldi	r18, 0xAC	; 172
    1b86:	35 ec       	ldi	r19, 0xC5	; 197
    1b88:	47 ea       	ldi	r20, 0xA7	; 167
    1b8a:	58 e3       	ldi	r21, 0x38	; 56
    1b8c:	0e 94 2a 13 	call	0x2654	; 0x2654 <__mulsf3>
    1b90:	2a e0       	ldi	r18, 0x0A	; 10
    1b92:	37 ed       	ldi	r19, 0xD7	; 215
    1b94:	43 e2       	ldi	r20, 0x23	; 35
    1b96:	5c e3       	ldi	r21, 0x3C	; 60
    1b98:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__addsf3>
    1b9c:	9b 01       	movw	r18, r22
    1b9e:	ac 01       	movw	r20, r24
    1ba0:	c5 01       	movw	r24, r10
    1ba2:	b4 01       	movw	r22, r8
    1ba4:	0e 94 2a 13 	call	0x2654	; 0x2654 <__mulsf3>
    1ba8:	2b 01       	movw	r4, r22
    1baa:	3c 01       	movw	r6, r24
	float t_C; 			// Temperature
	float rh	=	(float)humidity;
	float t		=	(float)temperature;
    
	t_C			=	((t * 0.01) - 40) - 5;
	rh_lin		=	(C3 * rh * rh) + (C2 * rh) + C1;
    1bac:	8c 2d       	mov	r24, r12
    1bae:	9d 2d       	mov	r25, r13
    1bb0:	af 2d       	mov	r26, r15
    1bb2:	be 2d       	mov	r27, r14
    1bb4:	bc 01       	movw	r22, r24
    1bb6:	cd 01       	movw	r24, r26
    1bb8:	22 ea       	ldi	r18, 0xA2	; 162
    1bba:	37 ee       	ldi	r19, 0xE7	; 231
    1bbc:	4b e3       	ldi	r20, 0x3B	; 59
    1bbe:	56 eb       	ldi	r21, 0xB6	; 182
    1bc0:	0e 94 2a 13 	call	0x2654	; 0x2654 <__mulsf3>
    1bc4:	0c 2d       	mov	r16, r12
    1bc6:	1d 2d       	mov	r17, r13
    1bc8:	2f 2d       	mov	r18, r15
    1bca:	3e 2d       	mov	r19, r14
    1bcc:	a9 01       	movw	r20, r18
    1bce:	98 01       	movw	r18, r16
    1bd0:	0e 94 2a 13 	call	0x2654	; 0x2654 <__mulsf3>
    1bd4:	4b 01       	movw	r8, r22
    1bd6:	5c 01       	movw	r10, r24
    1bd8:	80 2f       	mov	r24, r16
    1bda:	91 2f       	mov	r25, r17
    1bdc:	af 2d       	mov	r26, r15
    1bde:	be 2d       	mov	r27, r14
    1be0:	bc 01       	movw	r22, r24
    1be2:	cd 01       	movw	r24, r26
    1be4:	24 e5       	ldi	r18, 0x54	; 84
    1be6:	33 ee       	ldi	r19, 0xE3	; 227
    1be8:	45 e2       	ldi	r20, 0x25	; 37
    1bea:	5d e3       	ldi	r21, 0x3D	; 61
    1bec:	0e 94 2a 13 	call	0x2654	; 0x2654 <__mulsf3>
    1bf0:	9b 01       	movw	r18, r22
    1bf2:	ac 01       	movw	r20, r24
    1bf4:	c5 01       	movw	r24, r10
    1bf6:	b4 01       	movw	r22, r8
    1bf8:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__addsf3>
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e8       	ldi	r20, 0x80	; 128
    1c02:	50 e4       	ldi	r21, 0x40	; 64
    1c04:	0e 94 df 11 	call	0x23be	; 0x23be <__subsf3>
    1c08:	9b 01       	movw	r18, r22
    1c0a:	ac 01       	movw	r20, r24
	rh_true 	=	(t_C - 25) * (T1 + (T2 * rh)) + rh_lin;
    1c0c:	c3 01       	movw	r24, r6
    1c0e:	b2 01       	movw	r22, r4
    1c10:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__addsf3>
    1c14:	f6 2e       	mov	r15, r22
    1c16:	07 2f       	mov	r16, r23
    1c18:	48 2e       	mov	r4, r24
    1c1a:	89 2e       	mov	r8, r25
    1c1c:	e6 2e       	mov	r14, r22
    1c1e:	17 2f       	mov	r17, r23
    1c20:	d8 2e       	mov	r13, r24
    1c22:	c9 2e       	mov	r12, r25

	if (rh_true > 100)	rh_true = 100;
    1c24:	86 2f       	mov	r24, r22
    1c26:	90 2f       	mov	r25, r16
    1c28:	a4 2d       	mov	r26, r4
    1c2a:	b8 2d       	mov	r27, r8
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	cd 01       	movw	r24, r26
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	48 ec       	ldi	r20, 0xC8	; 200
    1c36:	52 e4       	ldi	r21, 0x42	; 66
    1c38:	0e 94 26 13 	call	0x264c	; 0x264c <__gesf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	7c f0       	brlt	.+30     	; 0x1c5e <calc_SHT11+0x17c>
	if (rh_true < 0.1)	rh_true = 0.1;
    1c40:	8f 2d       	mov	r24, r15
    1c42:	90 2f       	mov	r25, r16
    1c44:	a4 2d       	mov	r26, r4
    1c46:	b8 2d       	mov	r27, r8
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	2d ec       	ldi	r18, 0xCD	; 205
    1c4e:	3c ec       	ldi	r19, 0xCC	; 204
    1c50:	4c ec       	ldi	r20, 0xCC	; 204
    1c52:	5d e3       	ldi	r21, 0x3D	; 61
    1c54:	0e 94 44 12 	call	0x2488	; 0x2488 <__cmpsf2>
    1c58:	88 23       	and	r24, r24
    1c5a:	64 f0       	brlt	.+24     	; 0x1c74 <calc_SHT11+0x192>
    1c5c:	18 c0       	rjmp	.+48     	; 0x1c8e <calc_SHT11+0x1ac>
    
	t_C			=	((t * 0.01) - 40) - 5;
	rh_lin		=	(C3 * rh * rh) + (C2 * rh) + C1;
	rh_true 	=	(t_C - 25) * (T1 + (T2 * rh)) + rh_lin;

	if (rh_true > 100)	rh_true = 100;
    1c5e:	ee 24       	eor	r14, r14
    1c60:	10 e0       	ldi	r17, 0x00	; 0
    1c62:	0f 2e       	mov	r0, r31
    1c64:	f8 ec       	ldi	r31, 0xC8	; 200
    1c66:	df 2e       	mov	r13, r31
    1c68:	f0 2d       	mov	r31, r0
    1c6a:	0f 2e       	mov	r0, r31
    1c6c:	f2 e4       	ldi	r31, 0x42	; 66
    1c6e:	cf 2e       	mov	r12, r31
    1c70:	f0 2d       	mov	r31, r0
    1c72:	0d c0       	rjmp	.+26     	; 0x1c8e <calc_SHT11+0x1ac>
	if (rh_true < 0.1)	rh_true = 0.1;
    1c74:	0f 2e       	mov	r0, r31
    1c76:	fd ec       	ldi	r31, 0xCD	; 205
    1c78:	ef 2e       	mov	r14, r31
    1c7a:	f0 2d       	mov	r31, r0
    1c7c:	1c ec       	ldi	r17, 0xCC	; 204
    1c7e:	0f 2e       	mov	r0, r31
    1c80:	fc ec       	ldi	r31, 0xCC	; 204
    1c82:	df 2e       	mov	r13, r31
    1c84:	f0 2d       	mov	r31, r0
    1c86:	0f 2e       	mov	r0, r31
    1c88:	fd e3       	ldi	r31, 0x3D	; 61
    1c8a:	cf 2e       	mov	r12, r31
    1c8c:	f0 2d       	mov	r31, r0

	val_temp	=	(unsigned short)(t_C*10);
    1c8e:	39 81       	ldd	r19, Y+1	; 0x01
    1c90:	2a 81       	ldd	r18, Y+2	; 0x02
    1c92:	83 2d       	mov	r24, r3
    1c94:	92 2d       	mov	r25, r2
    1c96:	a3 2f       	mov	r26, r19
    1c98:	b2 2f       	mov	r27, r18
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	cd 01       	movw	r24, r26
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e2       	ldi	r20, 0x20	; 32
    1ca4:	51 e4       	ldi	r21, 0x41	; 65
    1ca6:	0e 94 2a 13 	call	0x2654	; 0x2654 <__mulsf3>
    1caa:	0e 94 48 12 	call	0x2490	; 0x2490 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	90 93 a2 0a 	sts	0x0AA2, r25
    1cb6:	80 93 a1 0a 	sts	0x0AA1, r24
	val_humi	=	(unsigned short)(rh_true*10);
    1cba:	8e 2d       	mov	r24, r14
    1cbc:	91 2f       	mov	r25, r17
    1cbe:	ad 2d       	mov	r26, r13
    1cc0:	bc 2d       	mov	r27, r12
    1cc2:	bc 01       	movw	r22, r24
    1cc4:	cd 01       	movw	r24, r26
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e2       	ldi	r20, 0x20	; 32
    1ccc:	51 e4       	ldi	r21, 0x41	; 65
    1cce:	0e 94 2a 13 	call	0x2654	; 0x2654 <__mulsf3>
    1cd2:	0e 94 48 12 	call	0x2490	; 0x2490 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	90 93 a4 0a 	sts	0x0AA4, r25
    1cde:	80 93 a3 0a 	sts	0x0AA3, r24
}
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	1f 91       	pop	r17
    1cec:	0f 91       	pop	r16
    1cee:	ff 90       	pop	r15
    1cf0:	ef 90       	pop	r14
    1cf2:	df 90       	pop	r13
    1cf4:	cf 90       	pop	r12
    1cf6:	bf 90       	pop	r11
    1cf8:	af 90       	pop	r10
    1cfa:	9f 90       	pop	r9
    1cfc:	8f 90       	pop	r8
    1cfe:	7f 90       	pop	r7
    1d00:	6f 90       	pop	r6
    1d02:	5f 90       	pop	r5
    1d04:	4f 90       	pop	r4
    1d06:	3f 90       	pop	r3
    1d08:	2f 90       	pop	r2
    1d0a:	08 95       	ret

00001d0c <get_SHT11_data>:

	CLR_SCK();
}

unsigned short get_SHT11_data (unsigned char type)
{
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
	sensing_type	=	type;
    1d10:	80 93 a9 0a 	sts	0x0AA9, r24

	error	=	0;
    1d14:	10 92 a8 0a 	sts	0x0AA8, r1
    1d18:	10 92 a7 0a 	sts	0x0AA7, r1
	// measure humidity
	error	+=	Measure (&SHT11_humi, &checksum, HUMI);
    1d1c:	ca ea       	ldi	r28, 0xAA	; 170
    1d1e:	da e0       	ldi	r29, 0x0A	; 10
    1d20:	8f e9       	ldi	r24, 0x9F	; 159
    1d22:	9a e0       	ldi	r25, 0x0A	; 10
    1d24:	be 01       	movw	r22, r28
    1d26:	41 e0       	ldi	r20, 0x01	; 1
    1d28:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <Measure>
    1d2c:	20 91 a7 0a 	lds	r18, 0x0AA7
    1d30:	30 91 a8 0a 	lds	r19, 0x0AA8
    1d34:	28 0f       	add	r18, r24
    1d36:	31 1d       	adc	r19, r1
    1d38:	30 93 a8 0a 	sts	0x0AA8, r19
    1d3c:	20 93 a7 0a 	sts	0x0AA7, r18
	// measure temperature
	error	+=	Measure (&SHT11_temp, &checksum, TEMP);
    1d40:	85 ea       	ldi	r24, 0xA5	; 165
    1d42:	9a e0       	ldi	r25, 0x0A	; 10
    1d44:	be 01       	movw	r22, r28
    1d46:	40 e0       	ldi	r20, 0x00	; 0
    1d48:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <Measure>
    1d4c:	20 91 a7 0a 	lds	r18, 0x0AA7
    1d50:	30 91 a8 0a 	lds	r19, 0x0AA8
    1d54:	28 0f       	add	r18, r24
    1d56:	31 1d       	adc	r19, r1
    1d58:	30 93 a8 0a 	sts	0x0AA8, r19
    1d5c:	20 93 a7 0a 	sts	0x0AA7, r18

	if (error != 0)		// [Error] connection reset
    1d60:	21 15       	cp	r18, r1
    1d62:	31 05       	cpc	r19, r1
    1d64:	19 f0       	breq	.+6      	; 0x1d6c <get_SHT11_data+0x60>
		Connection_reset ();
    1d66:	0e 94 ad 0c 	call	0x195a	; 0x195a <Connection_reset>
    1d6a:	0a c0       	rjmp	.+20     	; 0x1d80 <get_SHT11_data+0x74>
	else				// Calculate humidity, temperature
		calc_SHT11 (SHT11_humi, SHT11_temp);
    1d6c:	60 91 a5 0a 	lds	r22, 0x0AA5
    1d70:	70 91 a6 0a 	lds	r23, 0x0AA6
    1d74:	80 91 9f 0a 	lds	r24, 0x0A9F
    1d78:	90 91 a0 0a 	lds	r25, 0x0AA0
    1d7c:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <calc_SHT11>

	if (sensing_type == HUMI)		return	val_humi;
    1d80:	80 91 a9 0a 	lds	r24, 0x0AA9
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	29 f4       	brne	.+10     	; 0x1d92 <get_SHT11_data+0x86>
    1d88:	80 91 a3 0a 	lds	r24, 0x0AA3
    1d8c:	90 91 a4 0a 	lds	r25, 0x0AA4
    1d90:	09 c0       	rjmp	.+18     	; 0x1da4 <get_SHT11_data+0x98>
	else if (sensing_type == TEMP)	return	val_temp;
    1d92:	88 23       	and	r24, r24
    1d94:	29 f4       	brne	.+10     	; 0x1da0 <get_SHT11_data+0x94>
    1d96:	80 91 a1 0a 	lds	r24, 0x0AA1
    1d9a:	90 91 a2 0a 	lds	r25, 0x0AA2
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <get_SHT11_data+0x98>
	else 							return	0;
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
}
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	08 95       	ret

00001daa <printValue>:
}
unsigned char printValue (unsigned char sense, unsigned short senseVal)  //humi temp µ•¿Ã≈Õ ∞°∞¯ «‘ºˆ
{
	unsigned char tens;
	tens		=	senseVal / 10;			// Ω ¿« ¿⁄∏Æ ¿œ¿« ¿⁄∏Æ
	if (sense == TEMP)
    1daa:	88 23       	and	r24, r24
    1dac:	19 f0       	breq	.+6      	; 0x1db4 <printValue+0xa>
	{
		return tens;
	}
	else if (sense == HUMI)
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <printValue+0xa>
    1db2:	08 95       	ret
	val_humi	=	(unsigned short)(rh_true*10);
}
unsigned char printValue (unsigned char sense, unsigned short senseVal)  //humi temp µ•¿Ã≈Õ ∞°∞¯ «‘ºˆ
{
	unsigned char tens;
	tens		=	senseVal / 10;			// Ω ¿« ¿⁄∏Æ ¿œ¿« ¿⁄∏Æ
    1db4:	cb 01       	movw	r24, r22
    1db6:	6a e0       	ldi	r22, 0x0A	; 10
    1db8:	70 e0       	ldi	r23, 0x00	; 0
    1dba:	0e 94 8d 13 	call	0x271a	; 0x271a <__udivmodhi4>
	}
	else if (sense == HUMI)
	{
		return tens;
	}
    1dbe:	86 2f       	mov	r24, r22
    1dc0:	08 95       	ret

00001dc2 <Motor_Action>:



void Motor_Action (int motion, int direction)
{
	if (motion == ON)			// turn on
    1dc2:	81 30       	cpi	r24, 0x01	; 1
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	e1 f4       	brne	.+56     	; 0x1e00 <Motor_Action+0x3e>
	{
		if (direction == CLOCKWISE)
    1dc8:	61 30       	cpi	r22, 0x01	; 1
    1dca:	71 05       	cpc	r23, r1
    1dcc:	59 f4       	brne	.+22     	; 0x1de4 <Motor_Action+0x22>
		{
			digitalWrite(MOTOR_PORT, MT_P, HIGH);
    1dce:	85 e0       	ldi	r24, 0x05	; 5
    1dd0:	66 e0       	ldi	r22, 0x06	; 6
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
			digitalWrite(MOTOR_PORT, MT_N, LOW);
    1dd8:	85 e0       	ldi	r24, 0x05	; 5
    1dda:	63 e0       	ldi	r22, 0x03	; 3
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
    1de2:	08 95       	ret
		}
		else if (direction == COUNTERCLOCKWISE)
    1de4:	61 15       	cp	r22, r1
    1de6:	71 05       	cpc	r23, r1
    1de8:	b9 f4       	brne	.+46     	; 0x1e18 <Motor_Action+0x56>
		{
			digitalWrite(MOTOR_PORT, MT_P, LOW);
    1dea:	85 e0       	ldi	r24, 0x05	; 5
    1dec:	66 e0       	ldi	r22, 0x06	; 6
    1dee:	40 e0       	ldi	r20, 0x00	; 0
    1df0:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
			digitalWrite(MOTOR_PORT, MT_N, HIGH);
    1df4:	85 e0       	ldi	r24, 0x05	; 5
    1df6:	63 e0       	ldi	r22, 0x03	; 3
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
    1dfe:	08 95       	ret
		}
	}
	else if(motion == OFF) 		// turn off
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	51 f4       	brne	.+20     	; 0x1e18 <Motor_Action+0x56>
	{
		digitalWrite(MOTOR_PORT, MT_P, LOW);
    1e04:	85 e0       	ldi	r24, 0x05	; 5
    1e06:	66 e0       	ldi	r22, 0x06	; 6
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
		digitalWrite(MOTOR_PORT, MT_N, LOW);
    1e0e:	85 e0       	ldi	r24, 0x05	; 5
    1e10:	63 e0       	ldi	r22, 0x03	; 3
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
    1e18:	08 95       	ret

00001e1a <TIMER_100mSInit>:
  
void TIMER_100mSInit (void)
{
	// Timer/Count0 ÏÇ¨Ïö©
	// ÎèôÏûëÎ™®ÎìúÏôÄ ÌÅ¥Îü≠ÏÜåÏä§ Î∞è ÌîÑÎ¶¨Ïä§ÏºÄÏùºÎü¨ Í≤∞Ï†ï
	TCCR0B	=	0x05;  //  fclk_io / 1024   
    1e1a:	85 e0       	ldi	r24, 0x05	; 5
    1e1c:	85 bd       	out	0x25, r24	; 37
	// 0.01sÏóê Ïò§Î≤ÑÌîåÎ°úÏö∞ Î∞úÏÉù, 1/(14745600Hz/1024)‚Öπ144 = 0.01s
	// Ïò§Î≤ÑÌîåÎ°úÏö∞ÍπåÏßÄ Ïπ¥Ïö¥Ìä∏Î•º 144Î°ú ÏÑ§Ï†ï
	TCNT0	=	0xff - 144;
    1e1e:	8f e6       	ldi	r24, 0x6F	; 111
    1e20:	86 bd       	out	0x26, r24	; 38
	TIMSK0	|=	1 << TOIE0;	// Overflow Interupt Enable
    1e22:	ee e6       	ldi	r30, 0x6E	; 110
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	81 60       	ori	r24, 0x01	; 1
    1e2a:	80 83       	st	Z, r24
	TIFR0	|=	1 << TOV0;	// set Overflow Interupt Flag
    1e2c:	a8 9a       	sbi	0x15, 0	; 21
}
    1e2e:	08 95       	ret

00001e30 <setElapsedTime100mSUnit>:


void setElapsedTime100mSUnit(uint32_t Counter)
{
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
	setTimerCheckCounter = Counter;
    1e34:	80 93 53 04 	sts	0x0453, r24
    1e38:	90 93 54 04 	sts	0x0454, r25
    1e3c:	a0 93 55 04 	sts	0x0455, r26
    1e40:	b0 93 56 04 	sts	0x0456, r27
	timerCouter = 0;
    1e44:	10 92 57 04 	sts	0x0457, r1
    1e48:	10 92 58 04 	sts	0x0458, r1
    1e4c:	10 92 59 04 	sts	0x0459, r1
    1e50:	10 92 5a 04 	sts	0x045A, r1
}
    1e54:	08 95       	ret

00001e56 <isElapsed>:

uint8_t isElapsed()
{
	if (flagOverflowSetTimer )
    1e56:	80 91 52 04 	lds	r24, 0x0452
    1e5a:	88 23       	and	r24, r24
    1e5c:	21 f0       	breq	.+8      	; 0x1e66 <isElapsed+0x10>
	{
		flagOverflowSetTimer = 0;
    1e5e:	10 92 52 04 	sts	0x0452, r1
		return 1;
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	08 95       	ret
	}
	
	return 0;
    1e66:	80 e0       	ldi	r24, 0x00	; 0
}
    1e68:	08 95       	ret

00001e6a <eventCallback>:
volatile unsigned short humi;
extern int n_flag_getADC;//--------------^ºˆ¡§∫Œ∫–

static void eventCallback(int eventType,uint8_t* rxBuff, int rxSize)
{
	if (eventType == EVENT_RX_DATA) 
    1e6a:	81 30       	cpi	r24, 0x01	; 1
    1e6c:	91 05       	cpc	r25, r1
    1e6e:	81 f4       	brne	.+32     	; 0x1e90 <eventCallback+0x26>
	{
		debugprint("\r\nRX:%s\r\n", rxBuff);
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <eventCallback+0x8>
    1e72:	0f 92       	push	r0
    1e74:	8b e3       	ldi	r24, 0x3B	; 59
    1e76:	93 e0       	ldi	r25, 0x03	; 3
    1e78:	ed b7       	in	r30, 0x3d	; 61
    1e7a:	fe b7       	in	r31, 0x3e	; 62
    1e7c:	92 83       	std	Z+2, r25	; 0x02
    1e7e:	81 83       	std	Z+1, r24	; 0x01
    1e80:	74 83       	std	Z+4, r23	; 0x04
    1e82:	63 83       	std	Z+3, r22	; 0x03
    1e84:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	08 95       	ret

00001e92 <main>:
	}
}


int main(void)
{
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	c0 50       	subi	r28, 0x00	; 0
    1e9c:	d1 40       	sbci	r29, 0x01	; 1
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
	uint8_t strTemp[256];
	unsigned char tempc, humic;   //∫Ø»Øµ» ø¬µµ Ω¿µµ ¿˙¿Â «œ¥¬ ∫Øºˆ
	
	debugInit();
    1ea8:	0e 94 aa 01 	call	0x354	; 0x354 <debugInit>
	wifiInit();
    1eac:	0e 94 63 02 	call	0x4c6	; 0x4c6 <wifiInit>
	
	sei();
    1eb0:	78 94       	sei
		
	debugprint("wifi test start\r\n");
    1eb2:	0f 92       	push	r0
    1eb4:	0f 92       	push	r0
    1eb6:	85 e4       	ldi	r24, 0x45	; 69
    1eb8:	93 e0       	ldi	r25, 0x03	; 3
    1eba:	ad b7       	in	r26, 0x3d	; 61
    1ebc:	be b7       	in	r27, 0x3e	; 62
    1ebe:	12 96       	adiw	r26, 0x02	; 2
    1ec0:	9c 93       	st	X, r25
    1ec2:	8e 93       	st	-X, r24
    1ec4:	11 97       	sbiw	r26, 0x01	; 1
    1ec6:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
    1eca:	8f ef       	ldi	r24, 0xFF	; 255
    1ecc:	9f ef       	ldi	r25, 0xFF	; 255
    1ece:	ac e2       	ldi	r26, 0x2C	; 44
    1ed0:	81 50       	subi	r24, 0x01	; 1
    1ed2:	90 40       	sbci	r25, 0x00	; 0
    1ed4:	a0 40       	sbci	r26, 0x00	; 0
    1ed6:	e1 f7       	brne	.-8      	; 0x1ed0 <main+0x3e>
    1ed8:	00 c0       	rjmp	.+0      	; 0x1eda <main+0x48>
    1eda:	00 00       	nop
	_delay_ms(1000);
	
	wificlearUartBuff();
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0e 94 d7 08 	call	0x11ae	; 0x11ae <wificlearUartBuff>
	
	// UART echo disable 
	wifiEchoDisable();
    1ee4:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <wifiEchoDisable>
	wificlearUartBuff();
    1ee8:	0e 94 d7 08 	call	0x11ae	; 0x11ae <wificlearUartBuff>
	
	// register callback function 
	wifiSetEventCallback(eventCallback);
    1eec:	85 e3       	ldi	r24, 0x35	; 53
    1eee:	9f e0       	ldi	r25, 0x0F	; 15
    1ef0:	0e 94 48 08 	call	0x1090	; 0x1090 <wifiSetEventCallback>
	
	// Auto connection disable
	wifiAutoConnectDisable();
    1ef4:	0e 94 de 08 	call	0x11bc	; 0x11bc <wifiAutoConnectDisable>
	wificlearUartBuff();
    1ef8:	0e 94 d7 08 	call	0x11ae	; 0x11ae <wificlearUartBuff>
	
	wifiModeSet();
    1efc:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <wifiModeSet>
	
	wifiEnableDHCP();
    1f00:	0e 94 11 08 	call	0x1022	; 0x1022 <wifiEnableDHCP>
	
	debugprint("\r\nAP list display:\r\n");
    1f04:	0f 92       	push	r0
    1f06:	0f 92       	push	r0
    1f08:	87 e5       	ldi	r24, 0x57	; 87
    1f0a:	93 e0       	ldi	r25, 0x03	; 3
    1f0c:	ad b7       	in	r26, 0x3d	; 61
    1f0e:	be b7       	in	r27, 0x3e	; 62
    1f10:	12 96       	adiw	r26, 0x02	; 2
    1f12:	9c 93       	st	X, r25
    1f14:	8e 93       	st	-X, r24
    1f16:	11 97       	sbiw	r26, 0x01	; 1
    1f18:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
	wifiDisplayAPlist();
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	0e 94 bb 07 	call	0xf76	; 0xf76 <wifiDisplayAPlist>
	
	// connect  AP 
	debugprint("\r\n");
    1f24:	0f 92       	push	r0
    1f26:	0f 92       	push	r0
    1f28:	8c e6       	ldi	r24, 0x6C	; 108
    1f2a:	93 e0       	ldi	r25, 0x03	; 3
    1f2c:	ed b7       	in	r30, 0x3d	; 61
    1f2e:	fe b7       	in	r31, 0x3e	; 62
    1f30:	92 83       	std	Z+2, r25	; 0x02
    1f32:	81 83       	std	Z+1, r24	; 0x01
    1f34:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
	if ( !wifiConnectAP("CSNET-301", "gwnucomse"))
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	8f e6       	ldi	r24, 0x6F	; 111
    1f3e:	93 e0       	ldi	r25, 0x03	; 3
    1f40:	69 e7       	ldi	r22, 0x79	; 121
    1f42:	73 e0       	ldi	r23, 0x03	; 3
    1f44:	0e 94 d5 07 	call	0xfaa	; 0xfaa <wifiConnectAP>
    1f48:	88 23       	and	r24, r24
    1f4a:	79 f4       	brne	.+30     	; 0x1f6a <main+0xd8>
	{
		debugprint("AP connected.\r\n");
    1f4c:	0f 92       	push	r0
    1f4e:	0f 92       	push	r0
    1f50:	83 e8       	ldi	r24, 0x83	; 131
    1f52:	93 e0       	ldi	r25, 0x03	; 3
    1f54:	ad b7       	in	r26, 0x3d	; 61
    1f56:	be b7       	in	r27, 0x3e	; 62
    1f58:	12 96       	adiw	r26, 0x02	; 2
    1f5a:	9c 93       	st	X, r25
    1f5c:	8e 93       	st	-X, r24
    1f5e:	11 97       	sbiw	r26, 0x01	; 1
    1f60:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0c c0       	rjmp	.+24     	; 0x1f82 <main+0xf0>
	}
	else
	{
		debugprint("AP connection fail.\r\n");
    1f6a:	0f 92       	push	r0
    1f6c:	0f 92       	push	r0
    1f6e:	83 e9       	ldi	r24, 0x93	; 147
    1f70:	93 e0       	ldi	r25, 0x03	; 3
    1f72:	ed b7       	in	r30, 0x3d	; 61
    1f74:	fe b7       	in	r31, 0x3e	; 62
    1f76:	92 83       	std	Z+2, r25	; 0x02
    1f78:	81 83       	std	Z+1, r24	; 0x01
    1f7a:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
	}
	// display  local allocated IP 
	debugprint("\r\n Allocated local IP:\r\n");
    1f82:	0f 92       	push	r0
    1f84:	0f 92       	push	r0
    1f86:	89 ea       	ldi	r24, 0xA9	; 169
    1f88:	93 e0       	ldi	r25, 0x03	; 3
    1f8a:	ad b7       	in	r26, 0x3d	; 61
    1f8c:	be b7       	in	r27, 0x3e	; 62
    1f8e:	12 96       	adiw	r26, 0x02	; 2
    1f90:	9c 93       	st	X, r25
    1f92:	8e 93       	st	-X, r24
    1f94:	11 97       	sbiw	r26, 0x01	; 1
    1f96:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
	wifiDisplayLocalIP();
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	0e 94 02 08 	call	0x1004	; 0x1004 <wifiDisplayLocalIP>
	debugprint("\r\n");
    1fa2:	0f 92       	push	r0
    1fa4:	0f 92       	push	r0
    1fa6:	8c e6       	ldi	r24, 0x6C	; 108
    1fa8:	93 e0       	ldi	r25, 0x03	; 3
    1faa:	ed b7       	in	r30, 0x3d	; 61
    1fac:	fe b7       	in	r31, 0x3e	; 62
    1fae:	92 83       	std	Z+2, r25	; 0x02
    1fb0:	81 83       	std	Z+1, r24	; 0x01
    1fb2:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>

	// TCP remote server connection
	if( !wifiConnectTCPServer(SERVER_IP_STR,SERVER_PORT))
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	82 ec       	ldi	r24, 0xC2	; 194
    1fbc:	93 e0       	ldi	r25, 0x03	; 3
    1fbe:	41 e5       	ldi	r20, 0x51	; 81
    1fc0:	53 ec       	ldi	r21, 0xC3	; 195
    1fc2:	60 e0       	ldi	r22, 0x00	; 0
    1fc4:	70 e0       	ldi	r23, 0x00	; 0
    1fc6:	0e 94 20 08 	call	0x1040	; 0x1040 <wifiConnectTCPServer>
    1fca:	88 23       	and	r24, r24
    1fcc:	79 f4       	brne	.+30     	; 0x1fec <main+0x15a>
	{
		debugprint("Connected Server.\r\n");
    1fce:	0f 92       	push	r0
    1fd0:	0f 92       	push	r0
    1fd2:	8f ec       	ldi	r24, 0xCF	; 207
    1fd4:	93 e0       	ldi	r25, 0x03	; 3
    1fd6:	ad b7       	in	r26, 0x3d	; 61
    1fd8:	be b7       	in	r27, 0x3e	; 62
    1fda:	12 96       	adiw	r26, 0x02	; 2
    1fdc:	9c 93       	st	X, r25
    1fde:	8e 93       	st	-X, r24
    1fe0:	11 97       	sbiw	r26, 0x01	; 1
    1fe2:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0c c0       	rjmp	.+24     	; 0x2004 <main+0x172>
	}
	else
	{
		debugprint("Server connection fail.\r\n");
    1fec:	0f 92       	push	r0
    1fee:	0f 92       	push	r0
    1ff0:	83 ee       	ldi	r24, 0xE3	; 227
    1ff2:	93 e0       	ldi	r25, 0x03	; 3
    1ff4:	ed b7       	in	r30, 0x3d	; 61
    1ff6:	fe b7       	in	r31, 0x3e	; 62
    1ff8:	92 83       	std	Z+2, r25	; 0x02
    1ffa:	81 83       	std	Z+1, r24	; 0x01
    1ffc:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
	}				
	debugprint("\r\n");
    2004:	0f 92       	push	r0
    2006:	0f 92       	push	r0
    2008:	8c e6       	ldi	r24, 0x6C	; 108
    200a:	93 e0       	ldi	r25, 0x03	; 3
    200c:	ad b7       	in	r26, 0x3d	; 61
    200e:	be b7       	in	r27, 0x3e	; 62
    2010:	12 96       	adiw	r26, 0x02	; 2
    2012:	9c 93       	st	X, r25
    2014:	8e 93       	st	-X, r24
    2016:	11 97       	sbiw	r26, 0x01	; 1
    2018:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
	
	// Send Test message 
	strcpy(strTemp,"test msessage: hello\r\n");
    201c:	de 01       	movw	r26, r28
    201e:	11 96       	adiw	r26, 0x01	; 1
    2020:	ed ef       	ldi	r30, 0xFD	; 253
    2022:	f3 e0       	ldi	r31, 0x03	; 3
    2024:	87 e1       	ldi	r24, 0x17	; 23
    2026:	01 90       	ld	r0, Z+
    2028:	0d 92       	st	X+, r0
    202a:	81 50       	subi	r24, 0x01	; 1
    202c:	e1 f7       	brne	.-8      	; 0x2026 <main+0x194>
//	wifiSendData(strTemp, sizeof("test msessage: hello\r\n"));
	
	 //ø©±‚º≠∫Œ≈Õ Ω«¡¶ µ•¿Ã≈Õ∞° ∞°∞¯µ»¥Ÿ. 
	TIMER_100mSInit ();
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <TIMER_100mSInit>
	setElapsedTime100mSUnit(100);
    2036:	64 e6       	ldi	r22, 0x64	; 100
    2038:	70 e0       	ldi	r23, 0x00	; 0
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <setElapsedTime100mSUnit>

	debugprint("start Loop\r\n");	
    2042:	0f 92       	push	r0
    2044:	0f 92       	push	r0
    2046:	84 e1       	ldi	r24, 0x14	; 20
    2048:	94 e0       	ldi	r25, 0x04	; 4
    204a:	ed b7       	in	r30, 0x3d	; 61
    204c:	fe b7       	in	r31, 0x3e	; 62
    204e:	92 83       	std	Z+2, r25	; 0x02
    2050:	81 83       	std	Z+1, r24	; 0x01
    2052:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
	
	int counter = 0;
/*----------------led∫Œ∫–¡¶∞≈*/
	debugInit();
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0e 94 aa 01 	call	0x354	; 0x354 <debugInit>
	LED_Init ();		// PORTB = GREEN, PORTE = RED------------------------vºˆ¡§ ∫Œ∫– LED CDS º≥¡§
    205e:	0e 94 1b 01 	call	0x236	; 0x236 <LED_Init>
	AdcInit(1);			// PORTF = ADC1
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	0e 94 96 00 	call	0x12c	; 0x12c <AdcInit>
//	AdcInit(0);			// PORTF = ADC0
	TIMER_Init();
    2068:	0e 94 10 01 	call	0x220	; 0x220 <TIMER_Init>
		
	sei();//-------------------------------------------^ºˆ¡§∫Œ∫–
    206c:	78 94       	sei
	
	SHT11_Init();  //humi temp º≥¡§
    206e:	0e 94 bd 0c 	call	0x197a	; 0x197a <SHT11_Init>
        
		wifiMain();
		
		if ( isElapsed())
		{
			sprintf(strTemp,"CDS : %d temp : %d humi : %d \n", cds_gun_AdcValue, tempc, humic);		//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫– 
    2072:	7e 01       	movw	r14, r28
    2074:	08 94       	sec
    2076:	e1 1c       	adc	r14, r1
    2078:	f1 1c       	adc	r15, r1
    207a:	0f 2e       	mov	r0, r31
    207c:	f1 e2       	ldi	r31, 0x21	; 33
    207e:	cf 2e       	mov	r12, r31
    2080:	f4 e0       	ldi	r31, 0x04	; 4
    2082:	df 2e       	mov	r13, r31
    2084:	f0 2d       	mov	r31, r0
			//sprintf(strTemp,"CDS : %d temp : %d humi : %d soil : %d \n", cds_gun_AdcValue, tempc, humic, soil_gun_AdcValue);		//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫– 
			wifiSendData(strTemp, strlen(strTemp));			//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
			debugprint("TX:%s\r\n",strTemp);				//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
    2086:	0f 2e       	mov	r0, r31
    2088:	f0 e4       	ldi	r31, 0x40	; 64
    208a:	af 2e       	mov	r10, r31
    208c:	f4 e0       	ldi	r31, 0x04	; 4
    208e:	bf 2e       	mov	r11, r31
    2090:	f0 2d       	mov	r31, r0
	SHT11_Init();  //humi temp º≥¡§
	
    while(1)
    {//TODO:: Please write your application code 
		
		temp = get_SHT11_data (TEMP);	
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <get_SHT11_data>
    2098:	90 93 af 0a 	sts	0x0AAF, r25
    209c:	80 93 ae 0a 	sts	0x0AAE, r24
		
		humi = get_SHT11_data (HUMI); 	
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <get_SHT11_data>
    20a6:	90 93 ad 0a 	sts	0x0AAD, r25
    20aa:	80 93 ac 0a 	sts	0x0AAC, r24
		
		tempc = printValue (TEMP, temp);
    20ae:	60 91 ae 0a 	lds	r22, 0x0AAE
    20b2:	70 91 af 0a 	lds	r23, 0x0AAF
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <printValue>
    20bc:	08 2f       	mov	r16, r24
		humic = printValue (HUMI, humi);
    20be:	60 91 ac 0a 	lds	r22, 0x0AAC
    20c2:	70 91 ad 0a 	lds	r23, 0x0AAD
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <printValue>
    20cc:	18 2f       	mov	r17, r24
		
	/*--------led∫Œ∫– ¡¶∞≈*/
		if(n_flag_getADC == 1)			//---------------------------------v¡∂µµ ºæº≠, ledµø¿€ºˆ¡§∫Œ∫–
    20ce:	80 91 48 04 	lds	r24, 0x0448
    20d2:	90 91 49 04 	lds	r25, 0x0449
    20d6:	81 30       	cpi	r24, 0x01	; 1
    20d8:	91 05       	cpc	r25, r1
    20da:	51 f4       	brne	.+20     	; 0x20f0 <main+0x25e>
		{
			n_flag_getADC = 0;
    20dc:	10 92 49 04 	sts	0x0449, r1
    20e0:	10 92 48 04 	sts	0x0448, r1
			
			cds_gun_AdcValue	=	AdcRead();		//¡∂µµ∞™¡ﬂø‰!!!!!!
    20e4:	0e 94 a1 00 	call	0x142	; 0x142 <AdcRead>
    20e8:	90 93 5c 04 	sts	0x045C, r25
    20ec:	80 93 5b 04 	sts	0x045B, r24
		else if(soil_gun_AdcValue > 50) {
			continue;
		}//---------------------------------------------soil*/
		
		
		if (cds_gun_AdcValue < 640 && cds_gun_AdcValue >= 600)
    20f0:	20 91 5b 04 	lds	r18, 0x045B
    20f4:	30 91 5c 04 	lds	r19, 0x045C
    20f8:	c9 01       	movw	r24, r18
    20fa:	88 55       	subi	r24, 0x58	; 88
    20fc:	92 40       	sbci	r25, 0x02	; 2
    20fe:	88 32       	cpi	r24, 0x28	; 40
    2100:	91 05       	cpc	r25, r1
    2102:	58 f4       	brcc	.+22     	; 0x211a <main+0x288>
		{	controlLED (GREEN, 0x80);	controlLED (RED, 0x00);	}
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	60 e8       	ldi	r22, 0x80	; 128
    210a:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	60 e0       	ldi	r22, 0x00	; 0
    2114:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    2118:	05 c1       	rjmp	.+522    	; 0x2324 <__stack+0x125>
		else if (cds_gun_AdcValue < 600 && cds_gun_AdcValue >= 560)
    211a:	c9 01       	movw	r24, r18
    211c:	80 53       	subi	r24, 0x30	; 48
    211e:	92 40       	sbci	r25, 0x02	; 2
    2120:	88 32       	cpi	r24, 0x28	; 40
    2122:	91 05       	cpc	r25, r1
    2124:	58 f4       	brcc	.+22     	; 0x213c <main+0x2aa>
		{	controlLED (GREEN, 0xC0);	controlLED (RED, 0x00);	}
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	60 ec       	ldi	r22, 0xC0	; 192
    212c:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    213a:	f4 c0       	rjmp	.+488    	; 0x2324 <__stack+0x125>
		else if (cds_gun_AdcValue < 560 && cds_gun_AdcValue >= 520)
    213c:	c9 01       	movw	r24, r18
    213e:	88 50       	subi	r24, 0x08	; 8
    2140:	92 40       	sbci	r25, 0x02	; 2
    2142:	88 32       	cpi	r24, 0x28	; 40
    2144:	91 05       	cpc	r25, r1
    2146:	58 f4       	brcc	.+22     	; 0x215e <main+0x2cc>
		{	controlLED (GREEN, 0xE0);	controlLED (RED, 0x00);	}
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	60 ee       	ldi	r22, 0xE0	; 224
    214e:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	60 e0       	ldi	r22, 0x00	; 0
    2158:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    215c:	e3 c0       	rjmp	.+454    	; 0x2324 <__stack+0x125>
		else if (cds_gun_AdcValue < 520 && cds_gun_AdcValue >= 480)
    215e:	c9 01       	movw	r24, r18
    2160:	80 5e       	subi	r24, 0xE0	; 224
    2162:	91 40       	sbci	r25, 0x01	; 1
    2164:	88 32       	cpi	r24, 0x28	; 40
    2166:	91 05       	cpc	r25, r1
    2168:	58 f4       	brcc	.+22     	; 0x2180 <main+0x2ee>
		{	controlLED (GREEN, 0xF0);	controlLED (RED, 0x00);	}
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	60 ef       	ldi	r22, 0xF0	; 240
    2170:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    217e:	d2 c0       	rjmp	.+420    	; 0x2324 <__stack+0x125>
		else if (cds_gun_AdcValue < 480 && cds_gun_AdcValue >= 440)
    2180:	c9 01       	movw	r24, r18
    2182:	88 5b       	subi	r24, 0xB8	; 184
    2184:	91 40       	sbci	r25, 0x01	; 1
    2186:	88 32       	cpi	r24, 0x28	; 40
    2188:	91 05       	cpc	r25, r1
    218a:	58 f4       	brcc	.+22     	; 0x21a2 <main+0x310>
		{	controlLED (GREEN, 0xF8);	controlLED (RED, 0x00);	}
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	68 ef       	ldi	r22, 0xF8	; 248
    2192:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	60 e0       	ldi	r22, 0x00	; 0
    219c:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    21a0:	c1 c0       	rjmp	.+386    	; 0x2324 <__stack+0x125>
		else if (cds_gun_AdcValue < 440 && cds_gun_AdcValue >= 400)
    21a2:	c9 01       	movw	r24, r18
    21a4:	80 59       	subi	r24, 0x90	; 144
    21a6:	91 40       	sbci	r25, 0x01	; 1
    21a8:	88 32       	cpi	r24, 0x28	; 40
    21aa:	91 05       	cpc	r25, r1
    21ac:	58 f4       	brcc	.+22     	; 0x21c4 <main+0x332>
		{	controlLED (GREEN, 0xFC);	controlLED (RED, 0x00);	}
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	6c ef       	ldi	r22, 0xFC	; 252
    21b4:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	60 e0       	ldi	r22, 0x00	; 0
    21be:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    21c2:	b0 c0       	rjmp	.+352    	; 0x2324 <__stack+0x125>
		else if (cds_gun_AdcValue < 400 && cds_gun_AdcValue >= 360)
    21c4:	c9 01       	movw	r24, r18
    21c6:	88 56       	subi	r24, 0x68	; 104
    21c8:	91 40       	sbci	r25, 0x01	; 1
    21ca:	88 32       	cpi	r24, 0x28	; 40
    21cc:	91 05       	cpc	r25, r1
    21ce:	58 f4       	brcc	.+22     	; 0x21e6 <main+0x354>
		{	controlLED (GREEN, 0xFE);	controlLED (RED, 0x00);	}
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	6e ef       	ldi	r22, 0xFE	; 254
    21d6:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	60 e0       	ldi	r22, 0x00	; 0
    21e0:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    21e4:	9f c0       	rjmp	.+318    	; 0x2324 <__stack+0x125>
		else if (cds_gun_AdcValue < 360 && cds_gun_AdcValue >= 320)
    21e6:	c9 01       	movw	r24, r18
    21e8:	80 54       	subi	r24, 0x40	; 64
    21ea:	91 40       	sbci	r25, 0x01	; 1
    21ec:	88 32       	cpi	r24, 0x28	; 40
    21ee:	91 05       	cpc	r25, r1
    21f0:	58 f4       	brcc	.+22     	; 0x2208 <__stack+0x9>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0x00);	}
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	6f ef       	ldi	r22, 0xFF	; 255
    21f8:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    2206:	8e c0       	rjmp	.+284    	; 0x2324 <__stack+0x125>
		else if (cds_gun_AdcValue < 320 && cds_gun_AdcValue >= 280)
    2208:	c9 01       	movw	r24, r18
    220a:	88 51       	subi	r24, 0x18	; 24
    220c:	91 40       	sbci	r25, 0x01	; 1
    220e:	88 32       	cpi	r24, 0x28	; 40
    2210:	91 05       	cpc	r25, r1
    2212:	58 f4       	brcc	.+22     	; 0x222a <__stack+0x2b>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0x80);	}
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	6f ef       	ldi	r22, 0xFF	; 255
    221a:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	60 e8       	ldi	r22, 0x80	; 128
    2224:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    2228:	7d c0       	rjmp	.+250    	; 0x2324 <__stack+0x125>
		else if (cds_gun_AdcValue < 280 && cds_gun_AdcValue >= 240)
    222a:	c9 01       	movw	r24, r18
    222c:	80 5f       	subi	r24, 0xF0	; 240
    222e:	90 40       	sbci	r25, 0x00	; 0
    2230:	88 32       	cpi	r24, 0x28	; 40
    2232:	91 05       	cpc	r25, r1
    2234:	58 f4       	brcc	.+22     	; 0x224c <__stack+0x4d>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xC0);	}	
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	6f ef       	ldi	r22, 0xFF	; 255
    223c:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	60 ec       	ldi	r22, 0xC0	; 192
    2246:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    224a:	6c c0       	rjmp	.+216    	; 0x2324 <__stack+0x125>
		else if (cds_gun_AdcValue < 240 && cds_gun_AdcValue >= 200)
    224c:	c9 01       	movw	r24, r18
    224e:	88 5c       	subi	r24, 0xC8	; 200
    2250:	90 40       	sbci	r25, 0x00	; 0
    2252:	88 32       	cpi	r24, 0x28	; 40
    2254:	91 05       	cpc	r25, r1
    2256:	58 f4       	brcc	.+22     	; 0x226e <__stack+0x6f>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xE0);	}
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	6f ef       	ldi	r22, 0xFF	; 255
    225e:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	60 ee       	ldi	r22, 0xE0	; 224
    2268:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    226c:	5b c0       	rjmp	.+182    	; 0x2324 <__stack+0x125>
		else if (cds_gun_AdcValue < 200 && cds_gun_AdcValue >= 160)
    226e:	c9 01       	movw	r24, r18
    2270:	80 5a       	subi	r24, 0xA0	; 160
    2272:	90 40       	sbci	r25, 0x00	; 0
    2274:	88 32       	cpi	r24, 0x28	; 40
    2276:	91 05       	cpc	r25, r1
    2278:	58 f4       	brcc	.+22     	; 0x2290 <__stack+0x91>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xF0);	}
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	6f ef       	ldi	r22, 0xFF	; 255
    2280:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	60 ef       	ldi	r22, 0xF0	; 240
    228a:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    228e:	4a c0       	rjmp	.+148    	; 0x2324 <__stack+0x125>
		else if (cds_gun_AdcValue < 160 && cds_gun_AdcValue >= 120)
    2290:	c9 01       	movw	r24, r18
    2292:	88 57       	subi	r24, 0x78	; 120
    2294:	90 40       	sbci	r25, 0x00	; 0
    2296:	88 32       	cpi	r24, 0x28	; 40
    2298:	91 05       	cpc	r25, r1
    229a:	58 f4       	brcc	.+22     	; 0x22b2 <__stack+0xb3>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xF8);	}
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	6f ef       	ldi	r22, 0xFF	; 255
    22a2:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	68 ef       	ldi	r22, 0xF8	; 248
    22ac:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    22b0:	39 c0       	rjmp	.+114    	; 0x2324 <__stack+0x125>
		else if (cds_gun_AdcValue < 120 && cds_gun_AdcValue >= 80)
    22b2:	c9 01       	movw	r24, r18
    22b4:	80 55       	subi	r24, 0x50	; 80
    22b6:	90 40       	sbci	r25, 0x00	; 0
    22b8:	88 32       	cpi	r24, 0x28	; 40
    22ba:	91 05       	cpc	r25, r1
    22bc:	58 f4       	brcc	.+22     	; 0x22d4 <__stack+0xd5>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xFC);	}
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	6f ef       	ldi	r22, 0xFF	; 255
    22c4:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	6c ef       	ldi	r22, 0xFC	; 252
    22ce:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    22d2:	28 c0       	rjmp	.+80     	; 0x2324 <__stack+0x125>
		else if (cds_gun_AdcValue < 80 && cds_gun_AdcValue >= 40)
    22d4:	c9 01       	movw	r24, r18
    22d6:	88 97       	sbiw	r24, 0x28	; 40
    22d8:	88 32       	cpi	r24, 0x28	; 40
    22da:	91 05       	cpc	r25, r1
    22dc:	58 f4       	brcc	.+22     	; 0x22f4 <__stack+0xf5>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xFE);	}
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	6f ef       	ldi	r22, 0xFF	; 255
    22e4:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	6e ef       	ldi	r22, 0xFE	; 254
    22ee:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    22f2:	18 c0       	rjmp	.+48     	; 0x2324 <__stack+0x125>
		else if (cds_gun_AdcValue < 40 && cds_gun_AdcValue >= 0)
    22f4:	28 32       	cpi	r18, 0x28	; 40
    22f6:	31 05       	cpc	r19, r1
    22f8:	58 f4       	brcc	.+22     	; 0x2310 <__stack+0x111>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xFF);	}
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	6f ef       	ldi	r22, 0xFF	; 255
    2300:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	6f ef       	ldi	r22, 0xFF	; 255
    230a:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    230e:	0a c0       	rjmp	.+20     	; 0x2324 <__stack+0x125>
		else
		{	controlLED (GREEN, 0x00);	controlLED (RED, 0x00);	}//-------------------------^ºˆ¡§∫Œ∫–
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	60 e0       	ldi	r22, 0x00	; 0
    2320:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>

		//µ•¿Ã≈Õ ¿¸º€ ∫Œ∫–
        
		wifiMain();
    2324:	0e 94 44 05 	call	0xa88	; 0xa88 <wifiMain>
		
		if ( isElapsed())
    2328:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <isElapsed>
    232c:	88 23       	and	r24, r24
    232e:	09 f4       	brne	.+2      	; 0x2332 <__stack+0x133>
    2330:	b0 ce       	rjmp	.-672    	; 0x2092 <main+0x200>
		{
			sprintf(strTemp,"CDS : %d temp : %d humi : %d \n", cds_gun_AdcValue, tempc, humic);		//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫– 
    2332:	8d b7       	in	r24, 0x3d	; 61
    2334:	9e b7       	in	r25, 0x3e	; 62
    2336:	0a 97       	sbiw	r24, 0x0a	; 10
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	9e bf       	out	0x3e, r25	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	8d bf       	out	0x3d, r24	; 61
    2342:	ed b7       	in	r30, 0x3d	; 61
    2344:	fe b7       	in	r31, 0x3e	; 62
    2346:	31 96       	adiw	r30, 0x01	; 1
    2348:	ad b7       	in	r26, 0x3d	; 61
    234a:	be b7       	in	r27, 0x3e	; 62
    234c:	12 96       	adiw	r26, 0x02	; 2
    234e:	fc 92       	st	X, r15
    2350:	ee 92       	st	-X, r14
    2352:	11 97       	sbiw	r26, 0x01	; 1
    2354:	d3 82       	std	Z+3, r13	; 0x03
    2356:	c2 82       	std	Z+2, r12	; 0x02
    2358:	80 91 5b 04 	lds	r24, 0x045B
    235c:	90 91 5c 04 	lds	r25, 0x045C
    2360:	95 83       	std	Z+5, r25	; 0x05
    2362:	84 83       	std	Z+4, r24	; 0x04
    2364:	06 83       	std	Z+6, r16	; 0x06
    2366:	17 82       	std	Z+7, r1	; 0x07
    2368:	10 87       	std	Z+8, r17	; 0x08
    236a:	11 86       	std	Z+9, r1	; 0x09
    236c:	0e 94 de 13 	call	0x27bc	; 0x27bc <sprintf>
			//sprintf(strTemp,"CDS : %d temp : %d humi : %d soil : %d \n", cds_gun_AdcValue, tempc, humic, soil_gun_AdcValue);		//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫– 
			wifiSendData(strTemp, strlen(strTemp));			//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
    2370:	f7 01       	movw	r30, r14
    2372:	01 90       	ld	r0, Z+
    2374:	00 20       	and	r0, r0
    2376:	e9 f7       	brne	.-6      	; 0x2372 <__stack+0x173>
    2378:	bf 01       	movw	r22, r30
    237a:	61 50       	subi	r22, 0x01	; 1
    237c:	70 40       	sbci	r23, 0x00	; 0
    237e:	6e 19       	sub	r22, r14
    2380:	7f 09       	sbc	r23, r15
    2382:	8d b7       	in	r24, 0x3d	; 61
    2384:	9e b7       	in	r25, 0x3e	; 62
    2386:	0a 96       	adiw	r24, 0x0a	; 10
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	9e bf       	out	0x3e, r25	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	8d bf       	out	0x3d, r24	; 61
    2392:	c7 01       	movw	r24, r14
    2394:	0e 94 4e 08 	call	0x109c	; 0x109c <wifiSendData>
			debugprint("TX:%s\r\n",strTemp);				//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
    2398:	00 d0       	rcall	.+0      	; 0x239a <__stack+0x19b>
    239a:	0f 92       	push	r0
    239c:	ad b7       	in	r26, 0x3d	; 61
    239e:	be b7       	in	r27, 0x3e	; 62
    23a0:	12 96       	adiw	r26, 0x02	; 2
    23a2:	bc 92       	st	X, r11
    23a4:	ae 92       	st	-X, r10
    23a6:	11 97       	sbiw	r26, 0x01	; 1
    23a8:	14 96       	adiw	r26, 0x04	; 4
    23aa:	fc 92       	st	X, r15
    23ac:	ee 92       	st	-X, r14
    23ae:	13 97       	sbiw	r26, 0x03	; 3
    23b0:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	6a ce       	rjmp	.-812    	; 0x2092 <main+0x200>

000023be <__subsf3>:
    23be:	50 58       	subi	r21, 0x80	; 128

000023c0 <__addsf3>:
    23c0:	bb 27       	eor	r27, r27
    23c2:	aa 27       	eor	r26, r26
    23c4:	0e d0       	rcall	.+28     	; 0x23e2 <__addsf3x>
    23c6:	08 c1       	rjmp	.+528    	; 0x25d8 <__fp_round>
    23c8:	f9 d0       	rcall	.+498    	; 0x25bc <__fp_pscA>
    23ca:	30 f0       	brcs	.+12     	; 0x23d8 <__addsf3+0x18>
    23cc:	fe d0       	rcall	.+508    	; 0x25ca <__fp_pscB>
    23ce:	20 f0       	brcs	.+8      	; 0x23d8 <__addsf3+0x18>
    23d0:	31 f4       	brne	.+12     	; 0x23de <__addsf3+0x1e>
    23d2:	9f 3f       	cpi	r25, 0xFF	; 255
    23d4:	11 f4       	brne	.+4      	; 0x23da <__addsf3+0x1a>
    23d6:	1e f4       	brtc	.+6      	; 0x23de <__addsf3+0x1e>
    23d8:	ee c0       	rjmp	.+476    	; 0x25b6 <__fp_nan>
    23da:	0e f4       	brtc	.+2      	; 0x23de <__addsf3+0x1e>
    23dc:	e0 95       	com	r30
    23de:	e7 fb       	bst	r30, 7
    23e0:	e4 c0       	rjmp	.+456    	; 0x25aa <__fp_inf>

000023e2 <__addsf3x>:
    23e2:	e9 2f       	mov	r30, r25
    23e4:	0a d1       	rcall	.+532    	; 0x25fa <__fp_split3>
    23e6:	80 f3       	brcs	.-32     	; 0x23c8 <__addsf3+0x8>
    23e8:	ba 17       	cp	r27, r26
    23ea:	62 07       	cpc	r22, r18
    23ec:	73 07       	cpc	r23, r19
    23ee:	84 07       	cpc	r24, r20
    23f0:	95 07       	cpc	r25, r21
    23f2:	18 f0       	brcs	.+6      	; 0x23fa <__addsf3x+0x18>
    23f4:	71 f4       	brne	.+28     	; 0x2412 <__addsf3x+0x30>
    23f6:	9e f5       	brtc	.+102    	; 0x245e <__addsf3x+0x7c>
    23f8:	22 c1       	rjmp	.+580    	; 0x263e <__fp_zero>
    23fa:	0e f4       	brtc	.+2      	; 0x23fe <__addsf3x+0x1c>
    23fc:	e0 95       	com	r30
    23fe:	0b 2e       	mov	r0, r27
    2400:	ba 2f       	mov	r27, r26
    2402:	a0 2d       	mov	r26, r0
    2404:	0b 01       	movw	r0, r22
    2406:	b9 01       	movw	r22, r18
    2408:	90 01       	movw	r18, r0
    240a:	0c 01       	movw	r0, r24
    240c:	ca 01       	movw	r24, r20
    240e:	a0 01       	movw	r20, r0
    2410:	11 24       	eor	r1, r1
    2412:	ff 27       	eor	r31, r31
    2414:	59 1b       	sub	r21, r25
    2416:	99 f0       	breq	.+38     	; 0x243e <__addsf3x+0x5c>
    2418:	59 3f       	cpi	r21, 0xF9	; 249
    241a:	50 f4       	brcc	.+20     	; 0x2430 <__addsf3x+0x4e>
    241c:	50 3e       	cpi	r21, 0xE0	; 224
    241e:	68 f1       	brcs	.+90     	; 0x247a <__addsf3x+0x98>
    2420:	1a 16       	cp	r1, r26
    2422:	f0 40       	sbci	r31, 0x00	; 0
    2424:	a2 2f       	mov	r26, r18
    2426:	23 2f       	mov	r18, r19
    2428:	34 2f       	mov	r19, r20
    242a:	44 27       	eor	r20, r20
    242c:	58 5f       	subi	r21, 0xF8	; 248
    242e:	f3 cf       	rjmp	.-26     	; 0x2416 <__addsf3x+0x34>
    2430:	46 95       	lsr	r20
    2432:	37 95       	ror	r19
    2434:	27 95       	ror	r18
    2436:	a7 95       	ror	r26
    2438:	f0 40       	sbci	r31, 0x00	; 0
    243a:	53 95       	inc	r21
    243c:	c9 f7       	brne	.-14     	; 0x2430 <__addsf3x+0x4e>
    243e:	7e f4       	brtc	.+30     	; 0x245e <__addsf3x+0x7c>
    2440:	1f 16       	cp	r1, r31
    2442:	ba 0b       	sbc	r27, r26
    2444:	62 0b       	sbc	r22, r18
    2446:	73 0b       	sbc	r23, r19
    2448:	84 0b       	sbc	r24, r20
    244a:	ba f0       	brmi	.+46     	; 0x247a <__addsf3x+0x98>
    244c:	91 50       	subi	r25, 0x01	; 1
    244e:	a1 f0       	breq	.+40     	; 0x2478 <__addsf3x+0x96>
    2450:	ff 0f       	add	r31, r31
    2452:	bb 1f       	adc	r27, r27
    2454:	66 1f       	adc	r22, r22
    2456:	77 1f       	adc	r23, r23
    2458:	88 1f       	adc	r24, r24
    245a:	c2 f7       	brpl	.-16     	; 0x244c <__addsf3x+0x6a>
    245c:	0e c0       	rjmp	.+28     	; 0x247a <__addsf3x+0x98>
    245e:	ba 0f       	add	r27, r26
    2460:	62 1f       	adc	r22, r18
    2462:	73 1f       	adc	r23, r19
    2464:	84 1f       	adc	r24, r20
    2466:	48 f4       	brcc	.+18     	; 0x247a <__addsf3x+0x98>
    2468:	87 95       	ror	r24
    246a:	77 95       	ror	r23
    246c:	67 95       	ror	r22
    246e:	b7 95       	ror	r27
    2470:	f7 95       	ror	r31
    2472:	9e 3f       	cpi	r25, 0xFE	; 254
    2474:	08 f0       	brcs	.+2      	; 0x2478 <__addsf3x+0x96>
    2476:	b3 cf       	rjmp	.-154    	; 0x23de <__addsf3+0x1e>
    2478:	93 95       	inc	r25
    247a:	88 0f       	add	r24, r24
    247c:	08 f0       	brcs	.+2      	; 0x2480 <__addsf3x+0x9e>
    247e:	99 27       	eor	r25, r25
    2480:	ee 0f       	add	r30, r30
    2482:	97 95       	ror	r25
    2484:	87 95       	ror	r24
    2486:	08 95       	ret

00002488 <__cmpsf2>:
    2488:	6c d0       	rcall	.+216    	; 0x2562 <__fp_cmp>
    248a:	08 f4       	brcc	.+2      	; 0x248e <__cmpsf2+0x6>
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	08 95       	ret

00002490 <__fixunssfsi>:
    2490:	bc d0       	rcall	.+376    	; 0x260a <__fp_splitA>
    2492:	88 f0       	brcs	.+34     	; 0x24b6 <__fixunssfsi+0x26>
    2494:	9f 57       	subi	r25, 0x7F	; 127
    2496:	90 f0       	brcs	.+36     	; 0x24bc <__fixunssfsi+0x2c>
    2498:	b9 2f       	mov	r27, r25
    249a:	99 27       	eor	r25, r25
    249c:	b7 51       	subi	r27, 0x17	; 23
    249e:	a0 f0       	brcs	.+40     	; 0x24c8 <__fixunssfsi+0x38>
    24a0:	d1 f0       	breq	.+52     	; 0x24d6 <__fixunssfsi+0x46>
    24a2:	66 0f       	add	r22, r22
    24a4:	77 1f       	adc	r23, r23
    24a6:	88 1f       	adc	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	1a f0       	brmi	.+6      	; 0x24b2 <__fixunssfsi+0x22>
    24ac:	ba 95       	dec	r27
    24ae:	c9 f7       	brne	.-14     	; 0x24a2 <__fixunssfsi+0x12>
    24b0:	12 c0       	rjmp	.+36     	; 0x24d6 <__fixunssfsi+0x46>
    24b2:	b1 30       	cpi	r27, 0x01	; 1
    24b4:	81 f0       	breq	.+32     	; 0x24d6 <__fixunssfsi+0x46>
    24b6:	c3 d0       	rcall	.+390    	; 0x263e <__fp_zero>
    24b8:	b1 e0       	ldi	r27, 0x01	; 1
    24ba:	08 95       	ret
    24bc:	c0 c0       	rjmp	.+384    	; 0x263e <__fp_zero>
    24be:	67 2f       	mov	r22, r23
    24c0:	78 2f       	mov	r23, r24
    24c2:	88 27       	eor	r24, r24
    24c4:	b8 5f       	subi	r27, 0xF8	; 248
    24c6:	39 f0       	breq	.+14     	; 0x24d6 <__fixunssfsi+0x46>
    24c8:	b9 3f       	cpi	r27, 0xF9	; 249
    24ca:	cc f3       	brlt	.-14     	; 0x24be <__fixunssfsi+0x2e>
    24cc:	86 95       	lsr	r24
    24ce:	77 95       	ror	r23
    24d0:	67 95       	ror	r22
    24d2:	b3 95       	inc	r27
    24d4:	d9 f7       	brne	.-10     	; 0x24cc <__fixunssfsi+0x3c>
    24d6:	3e f4       	brtc	.+14     	; 0x24e6 <__fixunssfsi+0x56>
    24d8:	90 95       	com	r25
    24da:	80 95       	com	r24
    24dc:	70 95       	com	r23
    24de:	61 95       	neg	r22
    24e0:	7f 4f       	sbci	r23, 0xFF	; 255
    24e2:	8f 4f       	sbci	r24, 0xFF	; 255
    24e4:	9f 4f       	sbci	r25, 0xFF	; 255
    24e6:	08 95       	ret

000024e8 <__floatunsisf>:
    24e8:	e8 94       	clt
    24ea:	09 c0       	rjmp	.+18     	; 0x24fe <__floatsisf+0x12>

000024ec <__floatsisf>:
    24ec:	97 fb       	bst	r25, 7
    24ee:	3e f4       	brtc	.+14     	; 0x24fe <__floatsisf+0x12>
    24f0:	90 95       	com	r25
    24f2:	80 95       	com	r24
    24f4:	70 95       	com	r23
    24f6:	61 95       	neg	r22
    24f8:	7f 4f       	sbci	r23, 0xFF	; 255
    24fa:	8f 4f       	sbci	r24, 0xFF	; 255
    24fc:	9f 4f       	sbci	r25, 0xFF	; 255
    24fe:	99 23       	and	r25, r25
    2500:	a9 f0       	breq	.+42     	; 0x252c <__floatsisf+0x40>
    2502:	f9 2f       	mov	r31, r25
    2504:	96 e9       	ldi	r25, 0x96	; 150
    2506:	bb 27       	eor	r27, r27
    2508:	93 95       	inc	r25
    250a:	f6 95       	lsr	r31
    250c:	87 95       	ror	r24
    250e:	77 95       	ror	r23
    2510:	67 95       	ror	r22
    2512:	b7 95       	ror	r27
    2514:	f1 11       	cpse	r31, r1
    2516:	f8 cf       	rjmp	.-16     	; 0x2508 <__floatsisf+0x1c>
    2518:	fa f4       	brpl	.+62     	; 0x2558 <__floatsisf+0x6c>
    251a:	bb 0f       	add	r27, r27
    251c:	11 f4       	brne	.+4      	; 0x2522 <__floatsisf+0x36>
    251e:	60 ff       	sbrs	r22, 0
    2520:	1b c0       	rjmp	.+54     	; 0x2558 <__floatsisf+0x6c>
    2522:	6f 5f       	subi	r22, 0xFF	; 255
    2524:	7f 4f       	sbci	r23, 0xFF	; 255
    2526:	8f 4f       	sbci	r24, 0xFF	; 255
    2528:	9f 4f       	sbci	r25, 0xFF	; 255
    252a:	16 c0       	rjmp	.+44     	; 0x2558 <__floatsisf+0x6c>
    252c:	88 23       	and	r24, r24
    252e:	11 f0       	breq	.+4      	; 0x2534 <__floatsisf+0x48>
    2530:	96 e9       	ldi	r25, 0x96	; 150
    2532:	11 c0       	rjmp	.+34     	; 0x2556 <__floatsisf+0x6a>
    2534:	77 23       	and	r23, r23
    2536:	21 f0       	breq	.+8      	; 0x2540 <__floatsisf+0x54>
    2538:	9e e8       	ldi	r25, 0x8E	; 142
    253a:	87 2f       	mov	r24, r23
    253c:	76 2f       	mov	r23, r22
    253e:	05 c0       	rjmp	.+10     	; 0x254a <__floatsisf+0x5e>
    2540:	66 23       	and	r22, r22
    2542:	71 f0       	breq	.+28     	; 0x2560 <__floatsisf+0x74>
    2544:	96 e8       	ldi	r25, 0x86	; 134
    2546:	86 2f       	mov	r24, r22
    2548:	70 e0       	ldi	r23, 0x00	; 0
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	2a f0       	brmi	.+10     	; 0x2558 <__floatsisf+0x6c>
    254e:	9a 95       	dec	r25
    2550:	66 0f       	add	r22, r22
    2552:	77 1f       	adc	r23, r23
    2554:	88 1f       	adc	r24, r24
    2556:	da f7       	brpl	.-10     	; 0x254e <__floatsisf+0x62>
    2558:	88 0f       	add	r24, r24
    255a:	96 95       	lsr	r25
    255c:	87 95       	ror	r24
    255e:	97 f9       	bld	r25, 7
    2560:	08 95       	ret

00002562 <__fp_cmp>:
    2562:	99 0f       	add	r25, r25
    2564:	00 08       	sbc	r0, r0
    2566:	55 0f       	add	r21, r21
    2568:	aa 0b       	sbc	r26, r26
    256a:	e0 e8       	ldi	r30, 0x80	; 128
    256c:	fe ef       	ldi	r31, 0xFE	; 254
    256e:	16 16       	cp	r1, r22
    2570:	17 06       	cpc	r1, r23
    2572:	e8 07       	cpc	r30, r24
    2574:	f9 07       	cpc	r31, r25
    2576:	c0 f0       	brcs	.+48     	; 0x25a8 <__fp_cmp+0x46>
    2578:	12 16       	cp	r1, r18
    257a:	13 06       	cpc	r1, r19
    257c:	e4 07       	cpc	r30, r20
    257e:	f5 07       	cpc	r31, r21
    2580:	98 f0       	brcs	.+38     	; 0x25a8 <__fp_cmp+0x46>
    2582:	62 1b       	sub	r22, r18
    2584:	73 0b       	sbc	r23, r19
    2586:	84 0b       	sbc	r24, r20
    2588:	95 0b       	sbc	r25, r21
    258a:	39 f4       	brne	.+14     	; 0x259a <__fp_cmp+0x38>
    258c:	0a 26       	eor	r0, r26
    258e:	61 f0       	breq	.+24     	; 0x25a8 <__fp_cmp+0x46>
    2590:	23 2b       	or	r18, r19
    2592:	24 2b       	or	r18, r20
    2594:	25 2b       	or	r18, r21
    2596:	21 f4       	brne	.+8      	; 0x25a0 <__fp_cmp+0x3e>
    2598:	08 95       	ret
    259a:	0a 26       	eor	r0, r26
    259c:	09 f4       	brne	.+2      	; 0x25a0 <__fp_cmp+0x3e>
    259e:	a1 40       	sbci	r26, 0x01	; 1
    25a0:	a6 95       	lsr	r26
    25a2:	8f ef       	ldi	r24, 0xFF	; 255
    25a4:	81 1d       	adc	r24, r1
    25a6:	81 1d       	adc	r24, r1
    25a8:	08 95       	ret

000025aa <__fp_inf>:
    25aa:	97 f9       	bld	r25, 7
    25ac:	9f 67       	ori	r25, 0x7F	; 127
    25ae:	80 e8       	ldi	r24, 0x80	; 128
    25b0:	70 e0       	ldi	r23, 0x00	; 0
    25b2:	60 e0       	ldi	r22, 0x00	; 0
    25b4:	08 95       	ret

000025b6 <__fp_nan>:
    25b6:	9f ef       	ldi	r25, 0xFF	; 255
    25b8:	80 ec       	ldi	r24, 0xC0	; 192
    25ba:	08 95       	ret

000025bc <__fp_pscA>:
    25bc:	00 24       	eor	r0, r0
    25be:	0a 94       	dec	r0
    25c0:	16 16       	cp	r1, r22
    25c2:	17 06       	cpc	r1, r23
    25c4:	18 06       	cpc	r1, r24
    25c6:	09 06       	cpc	r0, r25
    25c8:	08 95       	ret

000025ca <__fp_pscB>:
    25ca:	00 24       	eor	r0, r0
    25cc:	0a 94       	dec	r0
    25ce:	12 16       	cp	r1, r18
    25d0:	13 06       	cpc	r1, r19
    25d2:	14 06       	cpc	r1, r20
    25d4:	05 06       	cpc	r0, r21
    25d6:	08 95       	ret

000025d8 <__fp_round>:
    25d8:	09 2e       	mov	r0, r25
    25da:	03 94       	inc	r0
    25dc:	00 0c       	add	r0, r0
    25de:	11 f4       	brne	.+4      	; 0x25e4 <__fp_round+0xc>
    25e0:	88 23       	and	r24, r24
    25e2:	52 f0       	brmi	.+20     	; 0x25f8 <__fp_round+0x20>
    25e4:	bb 0f       	add	r27, r27
    25e6:	40 f4       	brcc	.+16     	; 0x25f8 <__fp_round+0x20>
    25e8:	bf 2b       	or	r27, r31
    25ea:	11 f4       	brne	.+4      	; 0x25f0 <__fp_round+0x18>
    25ec:	60 ff       	sbrs	r22, 0
    25ee:	04 c0       	rjmp	.+8      	; 0x25f8 <__fp_round+0x20>
    25f0:	6f 5f       	subi	r22, 0xFF	; 255
    25f2:	7f 4f       	sbci	r23, 0xFF	; 255
    25f4:	8f 4f       	sbci	r24, 0xFF	; 255
    25f6:	9f 4f       	sbci	r25, 0xFF	; 255
    25f8:	08 95       	ret

000025fa <__fp_split3>:
    25fa:	57 fd       	sbrc	r21, 7
    25fc:	90 58       	subi	r25, 0x80	; 128
    25fe:	44 0f       	add	r20, r20
    2600:	55 1f       	adc	r21, r21
    2602:	59 f0       	breq	.+22     	; 0x261a <__fp_splitA+0x10>
    2604:	5f 3f       	cpi	r21, 0xFF	; 255
    2606:	71 f0       	breq	.+28     	; 0x2624 <__fp_splitA+0x1a>
    2608:	47 95       	ror	r20

0000260a <__fp_splitA>:
    260a:	88 0f       	add	r24, r24
    260c:	97 fb       	bst	r25, 7
    260e:	99 1f       	adc	r25, r25
    2610:	61 f0       	breq	.+24     	; 0x262a <__fp_splitA+0x20>
    2612:	9f 3f       	cpi	r25, 0xFF	; 255
    2614:	79 f0       	breq	.+30     	; 0x2634 <__fp_splitA+0x2a>
    2616:	87 95       	ror	r24
    2618:	08 95       	ret
    261a:	12 16       	cp	r1, r18
    261c:	13 06       	cpc	r1, r19
    261e:	14 06       	cpc	r1, r20
    2620:	55 1f       	adc	r21, r21
    2622:	f2 cf       	rjmp	.-28     	; 0x2608 <__fp_split3+0xe>
    2624:	46 95       	lsr	r20
    2626:	f1 df       	rcall	.-30     	; 0x260a <__fp_splitA>
    2628:	08 c0       	rjmp	.+16     	; 0x263a <__fp_splitA+0x30>
    262a:	16 16       	cp	r1, r22
    262c:	17 06       	cpc	r1, r23
    262e:	18 06       	cpc	r1, r24
    2630:	99 1f       	adc	r25, r25
    2632:	f1 cf       	rjmp	.-30     	; 0x2616 <__fp_splitA+0xc>
    2634:	86 95       	lsr	r24
    2636:	71 05       	cpc	r23, r1
    2638:	61 05       	cpc	r22, r1
    263a:	08 94       	sec
    263c:	08 95       	ret

0000263e <__fp_zero>:
    263e:	e8 94       	clt

00002640 <__fp_szero>:
    2640:	bb 27       	eor	r27, r27
    2642:	66 27       	eor	r22, r22
    2644:	77 27       	eor	r23, r23
    2646:	cb 01       	movw	r24, r22
    2648:	97 f9       	bld	r25, 7
    264a:	08 95       	ret

0000264c <__gesf2>:
    264c:	8a df       	rcall	.-236    	; 0x2562 <__fp_cmp>
    264e:	08 f4       	brcc	.+2      	; 0x2652 <__gesf2+0x6>
    2650:	8f ef       	ldi	r24, 0xFF	; 255
    2652:	08 95       	ret

00002654 <__mulsf3>:
    2654:	0b d0       	rcall	.+22     	; 0x266c <__mulsf3x>
    2656:	c0 cf       	rjmp	.-128    	; 0x25d8 <__fp_round>
    2658:	b1 df       	rcall	.-158    	; 0x25bc <__fp_pscA>
    265a:	28 f0       	brcs	.+10     	; 0x2666 <__mulsf3+0x12>
    265c:	b6 df       	rcall	.-148    	; 0x25ca <__fp_pscB>
    265e:	18 f0       	brcs	.+6      	; 0x2666 <__mulsf3+0x12>
    2660:	95 23       	and	r25, r21
    2662:	09 f0       	breq	.+2      	; 0x2666 <__mulsf3+0x12>
    2664:	a2 cf       	rjmp	.-188    	; 0x25aa <__fp_inf>
    2666:	a7 cf       	rjmp	.-178    	; 0x25b6 <__fp_nan>
    2668:	11 24       	eor	r1, r1
    266a:	ea cf       	rjmp	.-44     	; 0x2640 <__fp_szero>

0000266c <__mulsf3x>:
    266c:	c6 df       	rcall	.-116    	; 0x25fa <__fp_split3>
    266e:	a0 f3       	brcs	.-24     	; 0x2658 <__mulsf3+0x4>

00002670 <__mulsf3_pse>:
    2670:	95 9f       	mul	r25, r21
    2672:	d1 f3       	breq	.-12     	; 0x2668 <__mulsf3+0x14>
    2674:	95 0f       	add	r25, r21
    2676:	50 e0       	ldi	r21, 0x00	; 0
    2678:	55 1f       	adc	r21, r21
    267a:	62 9f       	mul	r22, r18
    267c:	f0 01       	movw	r30, r0
    267e:	72 9f       	mul	r23, r18
    2680:	bb 27       	eor	r27, r27
    2682:	f0 0d       	add	r31, r0
    2684:	b1 1d       	adc	r27, r1
    2686:	63 9f       	mul	r22, r19
    2688:	aa 27       	eor	r26, r26
    268a:	f0 0d       	add	r31, r0
    268c:	b1 1d       	adc	r27, r1
    268e:	aa 1f       	adc	r26, r26
    2690:	64 9f       	mul	r22, r20
    2692:	66 27       	eor	r22, r22
    2694:	b0 0d       	add	r27, r0
    2696:	a1 1d       	adc	r26, r1
    2698:	66 1f       	adc	r22, r22
    269a:	82 9f       	mul	r24, r18
    269c:	22 27       	eor	r18, r18
    269e:	b0 0d       	add	r27, r0
    26a0:	a1 1d       	adc	r26, r1
    26a2:	62 1f       	adc	r22, r18
    26a4:	73 9f       	mul	r23, r19
    26a6:	b0 0d       	add	r27, r0
    26a8:	a1 1d       	adc	r26, r1
    26aa:	62 1f       	adc	r22, r18
    26ac:	83 9f       	mul	r24, r19
    26ae:	a0 0d       	add	r26, r0
    26b0:	61 1d       	adc	r22, r1
    26b2:	22 1f       	adc	r18, r18
    26b4:	74 9f       	mul	r23, r20
    26b6:	33 27       	eor	r19, r19
    26b8:	a0 0d       	add	r26, r0
    26ba:	61 1d       	adc	r22, r1
    26bc:	23 1f       	adc	r18, r19
    26be:	84 9f       	mul	r24, r20
    26c0:	60 0d       	add	r22, r0
    26c2:	21 1d       	adc	r18, r1
    26c4:	82 2f       	mov	r24, r18
    26c6:	76 2f       	mov	r23, r22
    26c8:	6a 2f       	mov	r22, r26
    26ca:	11 24       	eor	r1, r1
    26cc:	9f 57       	subi	r25, 0x7F	; 127
    26ce:	50 40       	sbci	r21, 0x00	; 0
    26d0:	8a f0       	brmi	.+34     	; 0x26f4 <__mulsf3_pse+0x84>
    26d2:	e1 f0       	breq	.+56     	; 0x270c <__mulsf3_pse+0x9c>
    26d4:	88 23       	and	r24, r24
    26d6:	4a f0       	brmi	.+18     	; 0x26ea <__mulsf3_pse+0x7a>
    26d8:	ee 0f       	add	r30, r30
    26da:	ff 1f       	adc	r31, r31
    26dc:	bb 1f       	adc	r27, r27
    26de:	66 1f       	adc	r22, r22
    26e0:	77 1f       	adc	r23, r23
    26e2:	88 1f       	adc	r24, r24
    26e4:	91 50       	subi	r25, 0x01	; 1
    26e6:	50 40       	sbci	r21, 0x00	; 0
    26e8:	a9 f7       	brne	.-22     	; 0x26d4 <__mulsf3_pse+0x64>
    26ea:	9e 3f       	cpi	r25, 0xFE	; 254
    26ec:	51 05       	cpc	r21, r1
    26ee:	70 f0       	brcs	.+28     	; 0x270c <__mulsf3_pse+0x9c>
    26f0:	5c cf       	rjmp	.-328    	; 0x25aa <__fp_inf>
    26f2:	a6 cf       	rjmp	.-180    	; 0x2640 <__fp_szero>
    26f4:	5f 3f       	cpi	r21, 0xFF	; 255
    26f6:	ec f3       	brlt	.-6      	; 0x26f2 <__mulsf3_pse+0x82>
    26f8:	98 3e       	cpi	r25, 0xE8	; 232
    26fa:	dc f3       	brlt	.-10     	; 0x26f2 <__mulsf3_pse+0x82>
    26fc:	86 95       	lsr	r24
    26fe:	77 95       	ror	r23
    2700:	67 95       	ror	r22
    2702:	b7 95       	ror	r27
    2704:	f7 95       	ror	r31
    2706:	e7 95       	ror	r30
    2708:	9f 5f       	subi	r25, 0xFF	; 255
    270a:	c1 f7       	brne	.-16     	; 0x26fc <__mulsf3_pse+0x8c>
    270c:	fe 2b       	or	r31, r30
    270e:	88 0f       	add	r24, r24
    2710:	91 1d       	adc	r25, r1
    2712:	96 95       	lsr	r25
    2714:	87 95       	ror	r24
    2716:	97 f9       	bld	r25, 7
    2718:	08 95       	ret

0000271a <__udivmodhi4>:
    271a:	aa 1b       	sub	r26, r26
    271c:	bb 1b       	sub	r27, r27
    271e:	51 e1       	ldi	r21, 0x11	; 17
    2720:	07 c0       	rjmp	.+14     	; 0x2730 <__udivmodhi4_ep>

00002722 <__udivmodhi4_loop>:
    2722:	aa 1f       	adc	r26, r26
    2724:	bb 1f       	adc	r27, r27
    2726:	a6 17       	cp	r26, r22
    2728:	b7 07       	cpc	r27, r23
    272a:	10 f0       	brcs	.+4      	; 0x2730 <__udivmodhi4_ep>
    272c:	a6 1b       	sub	r26, r22
    272e:	b7 0b       	sbc	r27, r23

00002730 <__udivmodhi4_ep>:
    2730:	88 1f       	adc	r24, r24
    2732:	99 1f       	adc	r25, r25
    2734:	5a 95       	dec	r21
    2736:	a9 f7       	brne	.-22     	; 0x2722 <__udivmodhi4_loop>
    2738:	80 95       	com	r24
    273a:	90 95       	com	r25
    273c:	bc 01       	movw	r22, r24
    273e:	cd 01       	movw	r24, r26
    2740:	08 95       	ret

00002742 <atoi>:
    2742:	fc 01       	movw	r30, r24
    2744:	88 27       	eor	r24, r24
    2746:	99 27       	eor	r25, r25
    2748:	e8 94       	clt
    274a:	21 91       	ld	r18, Z+
    274c:	20 32       	cpi	r18, 0x20	; 32
    274e:	e9 f3       	breq	.-6      	; 0x274a <atoi+0x8>
    2750:	29 30       	cpi	r18, 0x09	; 9
    2752:	10 f0       	brcs	.+4      	; 0x2758 <atoi+0x16>
    2754:	2e 30       	cpi	r18, 0x0E	; 14
    2756:	c8 f3       	brcs	.-14     	; 0x274a <atoi+0x8>
    2758:	2b 32       	cpi	r18, 0x2B	; 43
    275a:	41 f0       	breq	.+16     	; 0x276c <atoi+0x2a>
    275c:	2d 32       	cpi	r18, 0x2D	; 45
    275e:	39 f4       	brne	.+14     	; 0x276e <atoi+0x2c>
    2760:	68 94       	set
    2762:	04 c0       	rjmp	.+8      	; 0x276c <atoi+0x2a>
    2764:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__mulhi_const_10>
    2768:	82 0f       	add	r24, r18
    276a:	91 1d       	adc	r25, r1
    276c:	21 91       	ld	r18, Z+
    276e:	20 53       	subi	r18, 0x30	; 48
    2770:	2a 30       	cpi	r18, 0x0A	; 10
    2772:	c0 f3       	brcs	.-16     	; 0x2764 <atoi+0x22>
    2774:	1e f4       	brtc	.+6      	; 0x277c <atoi+0x3a>
    2776:	90 95       	com	r25
    2778:	81 95       	neg	r24
    277a:	9f 4f       	sbci	r25, 0xFF	; 255
    277c:	08 95       	ret

0000277e <memcpy>:
    277e:	fb 01       	movw	r30, r22
    2780:	dc 01       	movw	r26, r24
    2782:	02 c0       	rjmp	.+4      	; 0x2788 <memcpy+0xa>
    2784:	01 90       	ld	r0, Z+
    2786:	0d 92       	st	X+, r0
    2788:	41 50       	subi	r20, 0x01	; 1
    278a:	50 40       	sbci	r21, 0x00	; 0
    278c:	d8 f7       	brcc	.-10     	; 0x2784 <memcpy+0x6>
    278e:	08 95       	ret

00002790 <strncmp>:
    2790:	fb 01       	movw	r30, r22
    2792:	dc 01       	movw	r26, r24
    2794:	41 50       	subi	r20, 0x01	; 1
    2796:	50 40       	sbci	r21, 0x00	; 0
    2798:	30 f0       	brcs	.+12     	; 0x27a6 <strncmp+0x16>
    279a:	8d 91       	ld	r24, X+
    279c:	01 90       	ld	r0, Z+
    279e:	80 19       	sub	r24, r0
    27a0:	19 f4       	brne	.+6      	; 0x27a8 <strncmp+0x18>
    27a2:	00 20       	and	r0, r0
    27a4:	b9 f7       	brne	.-18     	; 0x2794 <strncmp+0x4>
    27a6:	88 1b       	sub	r24, r24
    27a8:	99 0b       	sbc	r25, r25
    27aa:	08 95       	ret

000027ac <__mulhi_const_10>:
    27ac:	7a e0       	ldi	r23, 0x0A	; 10
    27ae:	97 9f       	mul	r25, r23
    27b0:	90 2d       	mov	r25, r0
    27b2:	87 9f       	mul	r24, r23
    27b4:	80 2d       	mov	r24, r0
    27b6:	91 0d       	add	r25, r1
    27b8:	11 24       	eor	r1, r1
    27ba:	08 95       	ret

000027bc <sprintf>:
    27bc:	0f 93       	push	r16
    27be:	1f 93       	push	r17
    27c0:	cf 93       	push	r28
    27c2:	df 93       	push	r29
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    27c8:	2e 97       	sbiw	r28, 0x0e	; 14
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	0e 89       	ldd	r16, Y+22	; 0x16
    27d6:	1f 89       	ldd	r17, Y+23	; 0x17
    27d8:	86 e0       	ldi	r24, 0x06	; 6
    27da:	8c 83       	std	Y+4, r24	; 0x04
    27dc:	1a 83       	std	Y+2, r17	; 0x02
    27de:	09 83       	std	Y+1, r16	; 0x01
    27e0:	8f ef       	ldi	r24, 0xFF	; 255
    27e2:	9f e7       	ldi	r25, 0x7F	; 127
    27e4:	9e 83       	std	Y+6, r25	; 0x06
    27e6:	8d 83       	std	Y+5, r24	; 0x05
    27e8:	ae 01       	movw	r20, r28
    27ea:	46 5e       	subi	r20, 0xE6	; 230
    27ec:	5f 4f       	sbci	r21, 0xFF	; 255
    27ee:	ce 01       	movw	r24, r28
    27f0:	01 96       	adiw	r24, 0x01	; 1
    27f2:	68 8d       	ldd	r22, Y+24	; 0x18
    27f4:	79 8d       	ldd	r23, Y+25	; 0x19
    27f6:	0e 94 36 14 	call	0x286c	; 0x286c <vfprintf>
    27fa:	ef 81       	ldd	r30, Y+7	; 0x07
    27fc:	f8 85       	ldd	r31, Y+8	; 0x08
    27fe:	e0 0f       	add	r30, r16
    2800:	f1 1f       	adc	r31, r17
    2802:	10 82       	st	Z, r1
    2804:	2e 96       	adiw	r28, 0x0e	; 14
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	f8 94       	cli
    280a:	de bf       	out	0x3e, r29	; 62
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	cd bf       	out	0x3d, r28	; 61
    2810:	df 91       	pop	r29
    2812:	cf 91       	pop	r28
    2814:	1f 91       	pop	r17
    2816:	0f 91       	pop	r16
    2818:	08 95       	ret

0000281a <vsprintf>:
    281a:	0f 93       	push	r16
    281c:	1f 93       	push	r17
    281e:	cf 93       	push	r28
    2820:	df 93       	push	r29
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	2e 97       	sbiw	r28, 0x0e	; 14
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	8c 01       	movw	r16, r24
    2834:	86 e0       	ldi	r24, 0x06	; 6
    2836:	8c 83       	std	Y+4, r24	; 0x04
    2838:	1a 83       	std	Y+2, r17	; 0x02
    283a:	09 83       	std	Y+1, r16	; 0x01
    283c:	8f ef       	ldi	r24, 0xFF	; 255
    283e:	9f e7       	ldi	r25, 0x7F	; 127
    2840:	9e 83       	std	Y+6, r25	; 0x06
    2842:	8d 83       	std	Y+5, r24	; 0x05
    2844:	ce 01       	movw	r24, r28
    2846:	01 96       	adiw	r24, 0x01	; 1
    2848:	0e 94 36 14 	call	0x286c	; 0x286c <vfprintf>
    284c:	ef 81       	ldd	r30, Y+7	; 0x07
    284e:	f8 85       	ldd	r31, Y+8	; 0x08
    2850:	e0 0f       	add	r30, r16
    2852:	f1 1f       	adc	r31, r17
    2854:	10 82       	st	Z, r1
    2856:	2e 96       	adiw	r28, 0x0e	; 14
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	1f 91       	pop	r17
    2868:	0f 91       	pop	r16
    286a:	08 95       	ret

0000286c <vfprintf>:
    286c:	2f 92       	push	r2
    286e:	3f 92       	push	r3
    2870:	4f 92       	push	r4
    2872:	5f 92       	push	r5
    2874:	6f 92       	push	r6
    2876:	7f 92       	push	r7
    2878:	8f 92       	push	r8
    287a:	9f 92       	push	r9
    287c:	af 92       	push	r10
    287e:	bf 92       	push	r11
    2880:	cf 92       	push	r12
    2882:	df 92       	push	r13
    2884:	ef 92       	push	r14
    2886:	ff 92       	push	r15
    2888:	0f 93       	push	r16
    288a:	1f 93       	push	r17
    288c:	cf 93       	push	r28
    288e:	df 93       	push	r29
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	2d 97       	sbiw	r28, 0x0d	; 13
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	3c 01       	movw	r6, r24
    28a2:	7d 87       	std	Y+13, r23	; 0x0d
    28a4:	6c 87       	std	Y+12, r22	; 0x0c
    28a6:	5a 01       	movw	r10, r20
    28a8:	fc 01       	movw	r30, r24
    28aa:	17 82       	std	Z+7, r1	; 0x07
    28ac:	16 82       	std	Z+6, r1	; 0x06
    28ae:	83 81       	ldd	r24, Z+3	; 0x03
    28b0:	81 ff       	sbrs	r24, 1
    28b2:	c8 c1       	rjmp	.+912    	; 0x2c44 <vfprintf+0x3d8>
    28b4:	2e 01       	movw	r4, r28
    28b6:	08 94       	sec
    28b8:	41 1c       	adc	r4, r1
    28ba:	51 1c       	adc	r5, r1
    28bc:	f3 01       	movw	r30, r6
    28be:	93 81       	ldd	r25, Z+3	; 0x03
    28c0:	ec 85       	ldd	r30, Y+12	; 0x0c
    28c2:	fd 85       	ldd	r31, Y+13	; 0x0d
    28c4:	93 fd       	sbrc	r25, 3
    28c6:	85 91       	lpm	r24, Z+
    28c8:	93 ff       	sbrs	r25, 3
    28ca:	81 91       	ld	r24, Z+
    28cc:	fd 87       	std	Y+13, r31	; 0x0d
    28ce:	ec 87       	std	Y+12, r30	; 0x0c
    28d0:	88 23       	and	r24, r24
    28d2:	09 f4       	brne	.+2      	; 0x28d6 <vfprintf+0x6a>
    28d4:	b3 c1       	rjmp	.+870    	; 0x2c3c <vfprintf+0x3d0>
    28d6:	85 32       	cpi	r24, 0x25	; 37
    28d8:	41 f4       	brne	.+16     	; 0x28ea <vfprintf+0x7e>
    28da:	93 fd       	sbrc	r25, 3
    28dc:	85 91       	lpm	r24, Z+
    28de:	93 ff       	sbrs	r25, 3
    28e0:	81 91       	ld	r24, Z+
    28e2:	fd 87       	std	Y+13, r31	; 0x0d
    28e4:	ec 87       	std	Y+12, r30	; 0x0c
    28e6:	85 32       	cpi	r24, 0x25	; 37
    28e8:	29 f4       	brne	.+10     	; 0x28f4 <vfprintf+0x88>
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	b3 01       	movw	r22, r6
    28ee:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <fputc>
    28f2:	e4 cf       	rjmp	.-56     	; 0x28bc <vfprintf+0x50>
    28f4:	ff 24       	eor	r15, r15
    28f6:	ee 24       	eor	r14, r14
    28f8:	10 e0       	ldi	r17, 0x00	; 0
    28fa:	10 32       	cpi	r17, 0x20	; 32
    28fc:	b0 f4       	brcc	.+44     	; 0x292a <vfprintf+0xbe>
    28fe:	8b 32       	cpi	r24, 0x2B	; 43
    2900:	69 f0       	breq	.+26     	; 0x291c <vfprintf+0xb0>
    2902:	8c 32       	cpi	r24, 0x2C	; 44
    2904:	28 f4       	brcc	.+10     	; 0x2910 <vfprintf+0xa4>
    2906:	80 32       	cpi	r24, 0x20	; 32
    2908:	51 f0       	breq	.+20     	; 0x291e <vfprintf+0xb2>
    290a:	83 32       	cpi	r24, 0x23	; 35
    290c:	71 f4       	brne	.+28     	; 0x292a <vfprintf+0xbe>
    290e:	0b c0       	rjmp	.+22     	; 0x2926 <vfprintf+0xba>
    2910:	8d 32       	cpi	r24, 0x2D	; 45
    2912:	39 f0       	breq	.+14     	; 0x2922 <vfprintf+0xb6>
    2914:	80 33       	cpi	r24, 0x30	; 48
    2916:	49 f4       	brne	.+18     	; 0x292a <vfprintf+0xbe>
    2918:	11 60       	ori	r17, 0x01	; 1
    291a:	2c c0       	rjmp	.+88     	; 0x2974 <vfprintf+0x108>
    291c:	12 60       	ori	r17, 0x02	; 2
    291e:	14 60       	ori	r17, 0x04	; 4
    2920:	29 c0       	rjmp	.+82     	; 0x2974 <vfprintf+0x108>
    2922:	18 60       	ori	r17, 0x08	; 8
    2924:	27 c0       	rjmp	.+78     	; 0x2974 <vfprintf+0x108>
    2926:	10 61       	ori	r17, 0x10	; 16
    2928:	25 c0       	rjmp	.+74     	; 0x2974 <vfprintf+0x108>
    292a:	17 fd       	sbrc	r17, 7
    292c:	2e c0       	rjmp	.+92     	; 0x298a <vfprintf+0x11e>
    292e:	28 2f       	mov	r18, r24
    2930:	20 53       	subi	r18, 0x30	; 48
    2932:	2a 30       	cpi	r18, 0x0A	; 10
    2934:	98 f4       	brcc	.+38     	; 0x295c <vfprintf+0xf0>
    2936:	16 ff       	sbrs	r17, 6
    2938:	08 c0       	rjmp	.+16     	; 0x294a <vfprintf+0xde>
    293a:	8f 2d       	mov	r24, r15
    293c:	88 0f       	add	r24, r24
    293e:	f8 2e       	mov	r15, r24
    2940:	ff 0c       	add	r15, r15
    2942:	ff 0c       	add	r15, r15
    2944:	f8 0e       	add	r15, r24
    2946:	f2 0e       	add	r15, r18
    2948:	15 c0       	rjmp	.+42     	; 0x2974 <vfprintf+0x108>
    294a:	8e 2d       	mov	r24, r14
    294c:	88 0f       	add	r24, r24
    294e:	e8 2e       	mov	r14, r24
    2950:	ee 0c       	add	r14, r14
    2952:	ee 0c       	add	r14, r14
    2954:	e8 0e       	add	r14, r24
    2956:	e2 0e       	add	r14, r18
    2958:	10 62       	ori	r17, 0x20	; 32
    295a:	0c c0       	rjmp	.+24     	; 0x2974 <vfprintf+0x108>
    295c:	8e 32       	cpi	r24, 0x2E	; 46
    295e:	21 f4       	brne	.+8      	; 0x2968 <vfprintf+0xfc>
    2960:	16 fd       	sbrc	r17, 6
    2962:	6c c1       	rjmp	.+728    	; 0x2c3c <vfprintf+0x3d0>
    2964:	10 64       	ori	r17, 0x40	; 64
    2966:	06 c0       	rjmp	.+12     	; 0x2974 <vfprintf+0x108>
    2968:	8c 36       	cpi	r24, 0x6C	; 108
    296a:	11 f4       	brne	.+4      	; 0x2970 <vfprintf+0x104>
    296c:	10 68       	ori	r17, 0x80	; 128
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <vfprintf+0x108>
    2970:	88 36       	cpi	r24, 0x68	; 104
    2972:	59 f4       	brne	.+22     	; 0x298a <vfprintf+0x11e>
    2974:	ec 85       	ldd	r30, Y+12	; 0x0c
    2976:	fd 85       	ldd	r31, Y+13	; 0x0d
    2978:	93 fd       	sbrc	r25, 3
    297a:	85 91       	lpm	r24, Z+
    297c:	93 ff       	sbrs	r25, 3
    297e:	81 91       	ld	r24, Z+
    2980:	fd 87       	std	Y+13, r31	; 0x0d
    2982:	ec 87       	std	Y+12, r30	; 0x0c
    2984:	88 23       	and	r24, r24
    2986:	09 f0       	breq	.+2      	; 0x298a <vfprintf+0x11e>
    2988:	b8 cf       	rjmp	.-144    	; 0x28fa <vfprintf+0x8e>
    298a:	98 2f       	mov	r25, r24
    298c:	95 54       	subi	r25, 0x45	; 69
    298e:	93 30       	cpi	r25, 0x03	; 3
    2990:	18 f0       	brcs	.+6      	; 0x2998 <vfprintf+0x12c>
    2992:	90 52       	subi	r25, 0x20	; 32
    2994:	93 30       	cpi	r25, 0x03	; 3
    2996:	38 f4       	brcc	.+14     	; 0x29a6 <vfprintf+0x13a>
    2998:	24 e0       	ldi	r18, 0x04	; 4
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	a2 0e       	add	r10, r18
    299e:	b3 1e       	adc	r11, r19
    29a0:	3f e3       	ldi	r19, 0x3F	; 63
    29a2:	39 83       	std	Y+1, r19	; 0x01
    29a4:	0f c0       	rjmp	.+30     	; 0x29c4 <vfprintf+0x158>
    29a6:	83 36       	cpi	r24, 0x63	; 99
    29a8:	31 f0       	breq	.+12     	; 0x29b6 <vfprintf+0x14a>
    29aa:	83 37       	cpi	r24, 0x73	; 115
    29ac:	81 f0       	breq	.+32     	; 0x29ce <vfprintf+0x162>
    29ae:	83 35       	cpi	r24, 0x53	; 83
    29b0:	09 f0       	breq	.+2      	; 0x29b4 <vfprintf+0x148>
    29b2:	5a c0       	rjmp	.+180    	; 0x2a68 <vfprintf+0x1fc>
    29b4:	22 c0       	rjmp	.+68     	; 0x29fa <vfprintf+0x18e>
    29b6:	f5 01       	movw	r30, r10
    29b8:	80 81       	ld	r24, Z
    29ba:	89 83       	std	Y+1, r24	; 0x01
    29bc:	22 e0       	ldi	r18, 0x02	; 2
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	a2 0e       	add	r10, r18
    29c2:	b3 1e       	adc	r11, r19
    29c4:	21 e0       	ldi	r18, 0x01	; 1
    29c6:	c2 2e       	mov	r12, r18
    29c8:	d1 2c       	mov	r13, r1
    29ca:	42 01       	movw	r8, r4
    29cc:	14 c0       	rjmp	.+40     	; 0x29f6 <vfprintf+0x18a>
    29ce:	92 e0       	ldi	r25, 0x02	; 2
    29d0:	29 2e       	mov	r2, r25
    29d2:	31 2c       	mov	r3, r1
    29d4:	2a 0c       	add	r2, r10
    29d6:	3b 1c       	adc	r3, r11
    29d8:	f5 01       	movw	r30, r10
    29da:	80 80       	ld	r8, Z
    29dc:	91 80       	ldd	r9, Z+1	; 0x01
    29de:	16 ff       	sbrs	r17, 6
    29e0:	03 c0       	rjmp	.+6      	; 0x29e8 <vfprintf+0x17c>
    29e2:	6f 2d       	mov	r22, r15
    29e4:	70 e0       	ldi	r23, 0x00	; 0
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <vfprintf+0x180>
    29e8:	6f ef       	ldi	r22, 0xFF	; 255
    29ea:	7f ef       	ldi	r23, 0xFF	; 255
    29ec:	c4 01       	movw	r24, r8
    29ee:	0e 94 48 16 	call	0x2c90	; 0x2c90 <strnlen>
    29f2:	6c 01       	movw	r12, r24
    29f4:	51 01       	movw	r10, r2
    29f6:	1f 77       	andi	r17, 0x7F	; 127
    29f8:	15 c0       	rjmp	.+42     	; 0x2a24 <vfprintf+0x1b8>
    29fa:	82 e0       	ldi	r24, 0x02	; 2
    29fc:	28 2e       	mov	r2, r24
    29fe:	31 2c       	mov	r3, r1
    2a00:	2a 0c       	add	r2, r10
    2a02:	3b 1c       	adc	r3, r11
    2a04:	f5 01       	movw	r30, r10
    2a06:	80 80       	ld	r8, Z
    2a08:	91 80       	ldd	r9, Z+1	; 0x01
    2a0a:	16 ff       	sbrs	r17, 6
    2a0c:	03 c0       	rjmp	.+6      	; 0x2a14 <vfprintf+0x1a8>
    2a0e:	6f 2d       	mov	r22, r15
    2a10:	70 e0       	ldi	r23, 0x00	; 0
    2a12:	02 c0       	rjmp	.+4      	; 0x2a18 <vfprintf+0x1ac>
    2a14:	6f ef       	ldi	r22, 0xFF	; 255
    2a16:	7f ef       	ldi	r23, 0xFF	; 255
    2a18:	c4 01       	movw	r24, r8
    2a1a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <strnlen_P>
    2a1e:	6c 01       	movw	r12, r24
    2a20:	10 68       	ori	r17, 0x80	; 128
    2a22:	51 01       	movw	r10, r2
    2a24:	13 fd       	sbrc	r17, 3
    2a26:	1c c0       	rjmp	.+56     	; 0x2a60 <vfprintf+0x1f4>
    2a28:	06 c0       	rjmp	.+12     	; 0x2a36 <vfprintf+0x1ca>
    2a2a:	80 e2       	ldi	r24, 0x20	; 32
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	b3 01       	movw	r22, r6
    2a30:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <fputc>
    2a34:	ea 94       	dec	r14
    2a36:	8e 2d       	mov	r24, r14
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	c8 16       	cp	r12, r24
    2a3c:	d9 06       	cpc	r13, r25
    2a3e:	a8 f3       	brcs	.-22     	; 0x2a2a <vfprintf+0x1be>
    2a40:	0f c0       	rjmp	.+30     	; 0x2a60 <vfprintf+0x1f4>
    2a42:	f4 01       	movw	r30, r8
    2a44:	17 fd       	sbrc	r17, 7
    2a46:	85 91       	lpm	r24, Z+
    2a48:	17 ff       	sbrs	r17, 7
    2a4a:	81 91       	ld	r24, Z+
    2a4c:	4f 01       	movw	r8, r30
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	b3 01       	movw	r22, r6
    2a52:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <fputc>
    2a56:	e1 10       	cpse	r14, r1
    2a58:	ea 94       	dec	r14
    2a5a:	08 94       	sec
    2a5c:	c1 08       	sbc	r12, r1
    2a5e:	d1 08       	sbc	r13, r1
    2a60:	c1 14       	cp	r12, r1
    2a62:	d1 04       	cpc	r13, r1
    2a64:	71 f7       	brne	.-36     	; 0x2a42 <vfprintf+0x1d6>
    2a66:	e7 c0       	rjmp	.+462    	; 0x2c36 <vfprintf+0x3ca>
    2a68:	84 36       	cpi	r24, 0x64	; 100
    2a6a:	11 f0       	breq	.+4      	; 0x2a70 <vfprintf+0x204>
    2a6c:	89 36       	cpi	r24, 0x69	; 105
    2a6e:	51 f5       	brne	.+84     	; 0x2ac4 <vfprintf+0x258>
    2a70:	f5 01       	movw	r30, r10
    2a72:	17 ff       	sbrs	r17, 7
    2a74:	07 c0       	rjmp	.+14     	; 0x2a84 <vfprintf+0x218>
    2a76:	80 81       	ld	r24, Z
    2a78:	91 81       	ldd	r25, Z+1	; 0x01
    2a7a:	a2 81       	ldd	r26, Z+2	; 0x02
    2a7c:	b3 81       	ldd	r27, Z+3	; 0x03
    2a7e:	24 e0       	ldi	r18, 0x04	; 4
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	08 c0       	rjmp	.+16     	; 0x2a94 <vfprintf+0x228>
    2a84:	80 81       	ld	r24, Z
    2a86:	91 81       	ldd	r25, Z+1	; 0x01
    2a88:	aa 27       	eor	r26, r26
    2a8a:	97 fd       	sbrc	r25, 7
    2a8c:	a0 95       	com	r26
    2a8e:	ba 2f       	mov	r27, r26
    2a90:	22 e0       	ldi	r18, 0x02	; 2
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	a2 0e       	add	r10, r18
    2a96:	b3 1e       	adc	r11, r19
    2a98:	01 2f       	mov	r16, r17
    2a9a:	0f 76       	andi	r16, 0x6F	; 111
    2a9c:	b7 ff       	sbrs	r27, 7
    2a9e:	08 c0       	rjmp	.+16     	; 0x2ab0 <vfprintf+0x244>
    2aa0:	b0 95       	com	r27
    2aa2:	a0 95       	com	r26
    2aa4:	90 95       	com	r25
    2aa6:	81 95       	neg	r24
    2aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aaa:	af 4f       	sbci	r26, 0xFF	; 255
    2aac:	bf 4f       	sbci	r27, 0xFF	; 255
    2aae:	00 68       	ori	r16, 0x80	; 128
    2ab0:	bc 01       	movw	r22, r24
    2ab2:	cd 01       	movw	r24, r26
    2ab4:	a2 01       	movw	r20, r4
    2ab6:	2a e0       	ldi	r18, 0x0A	; 10
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <__ultoa_invert>
    2abe:	d8 2e       	mov	r13, r24
    2ac0:	d4 18       	sub	r13, r4
    2ac2:	3f c0       	rjmp	.+126    	; 0x2b42 <vfprintf+0x2d6>
    2ac4:	85 37       	cpi	r24, 0x75	; 117
    2ac6:	21 f4       	brne	.+8      	; 0x2ad0 <vfprintf+0x264>
    2ac8:	1f 7e       	andi	r17, 0xEF	; 239
    2aca:	2a e0       	ldi	r18, 0x0A	; 10
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	20 c0       	rjmp	.+64     	; 0x2b10 <vfprintf+0x2a4>
    2ad0:	19 7f       	andi	r17, 0xF9	; 249
    2ad2:	8f 36       	cpi	r24, 0x6F	; 111
    2ad4:	a9 f0       	breq	.+42     	; 0x2b00 <vfprintf+0x294>
    2ad6:	80 37       	cpi	r24, 0x70	; 112
    2ad8:	20 f4       	brcc	.+8      	; 0x2ae2 <vfprintf+0x276>
    2ada:	88 35       	cpi	r24, 0x58	; 88
    2adc:	09 f0       	breq	.+2      	; 0x2ae0 <vfprintf+0x274>
    2ade:	ae c0       	rjmp	.+348    	; 0x2c3c <vfprintf+0x3d0>
    2ae0:	0b c0       	rjmp	.+22     	; 0x2af8 <vfprintf+0x28c>
    2ae2:	80 37       	cpi	r24, 0x70	; 112
    2ae4:	21 f0       	breq	.+8      	; 0x2aee <vfprintf+0x282>
    2ae6:	88 37       	cpi	r24, 0x78	; 120
    2ae8:	09 f0       	breq	.+2      	; 0x2aec <vfprintf+0x280>
    2aea:	a8 c0       	rjmp	.+336    	; 0x2c3c <vfprintf+0x3d0>
    2aec:	01 c0       	rjmp	.+2      	; 0x2af0 <vfprintf+0x284>
    2aee:	10 61       	ori	r17, 0x10	; 16
    2af0:	14 ff       	sbrs	r17, 4
    2af2:	09 c0       	rjmp	.+18     	; 0x2b06 <vfprintf+0x29a>
    2af4:	14 60       	ori	r17, 0x04	; 4
    2af6:	07 c0       	rjmp	.+14     	; 0x2b06 <vfprintf+0x29a>
    2af8:	14 ff       	sbrs	r17, 4
    2afa:	08 c0       	rjmp	.+16     	; 0x2b0c <vfprintf+0x2a0>
    2afc:	16 60       	ori	r17, 0x06	; 6
    2afe:	06 c0       	rjmp	.+12     	; 0x2b0c <vfprintf+0x2a0>
    2b00:	28 e0       	ldi	r18, 0x08	; 8
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	05 c0       	rjmp	.+10     	; 0x2b10 <vfprintf+0x2a4>
    2b06:	20 e1       	ldi	r18, 0x10	; 16
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	02 c0       	rjmp	.+4      	; 0x2b10 <vfprintf+0x2a4>
    2b0c:	20 e1       	ldi	r18, 0x10	; 16
    2b0e:	32 e0       	ldi	r19, 0x02	; 2
    2b10:	f5 01       	movw	r30, r10
    2b12:	17 ff       	sbrs	r17, 7
    2b14:	07 c0       	rjmp	.+14     	; 0x2b24 <vfprintf+0x2b8>
    2b16:	60 81       	ld	r22, Z
    2b18:	71 81       	ldd	r23, Z+1	; 0x01
    2b1a:	82 81       	ldd	r24, Z+2	; 0x02
    2b1c:	93 81       	ldd	r25, Z+3	; 0x03
    2b1e:	44 e0       	ldi	r20, 0x04	; 4
    2b20:	50 e0       	ldi	r21, 0x00	; 0
    2b22:	06 c0       	rjmp	.+12     	; 0x2b30 <vfprintf+0x2c4>
    2b24:	60 81       	ld	r22, Z
    2b26:	71 81       	ldd	r23, Z+1	; 0x01
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	42 e0       	ldi	r20, 0x02	; 2
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	a4 0e       	add	r10, r20
    2b32:	b5 1e       	adc	r11, r21
    2b34:	a2 01       	movw	r20, r4
    2b36:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <__ultoa_invert>
    2b3a:	d8 2e       	mov	r13, r24
    2b3c:	d4 18       	sub	r13, r4
    2b3e:	01 2f       	mov	r16, r17
    2b40:	0f 77       	andi	r16, 0x7F	; 127
    2b42:	06 ff       	sbrs	r16, 6
    2b44:	09 c0       	rjmp	.+18     	; 0x2b58 <vfprintf+0x2ec>
    2b46:	0e 7f       	andi	r16, 0xFE	; 254
    2b48:	df 14       	cp	r13, r15
    2b4a:	30 f4       	brcc	.+12     	; 0x2b58 <vfprintf+0x2ec>
    2b4c:	04 ff       	sbrs	r16, 4
    2b4e:	06 c0       	rjmp	.+12     	; 0x2b5c <vfprintf+0x2f0>
    2b50:	02 fd       	sbrc	r16, 2
    2b52:	04 c0       	rjmp	.+8      	; 0x2b5c <vfprintf+0x2f0>
    2b54:	0f 7e       	andi	r16, 0xEF	; 239
    2b56:	02 c0       	rjmp	.+4      	; 0x2b5c <vfprintf+0x2f0>
    2b58:	1d 2d       	mov	r17, r13
    2b5a:	01 c0       	rjmp	.+2      	; 0x2b5e <vfprintf+0x2f2>
    2b5c:	1f 2d       	mov	r17, r15
    2b5e:	80 2f       	mov	r24, r16
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	04 ff       	sbrs	r16, 4
    2b64:	0c c0       	rjmp	.+24     	; 0x2b7e <vfprintf+0x312>
    2b66:	fe 01       	movw	r30, r28
    2b68:	ed 0d       	add	r30, r13
    2b6a:	f1 1d       	adc	r31, r1
    2b6c:	20 81       	ld	r18, Z
    2b6e:	20 33       	cpi	r18, 0x30	; 48
    2b70:	11 f4       	brne	.+4      	; 0x2b76 <vfprintf+0x30a>
    2b72:	09 7e       	andi	r16, 0xE9	; 233
    2b74:	09 c0       	rjmp	.+18     	; 0x2b88 <vfprintf+0x31c>
    2b76:	02 ff       	sbrs	r16, 2
    2b78:	06 c0       	rjmp	.+12     	; 0x2b86 <vfprintf+0x31a>
    2b7a:	1e 5f       	subi	r17, 0xFE	; 254
    2b7c:	05 c0       	rjmp	.+10     	; 0x2b88 <vfprintf+0x31c>
    2b7e:	86 78       	andi	r24, 0x86	; 134
    2b80:	90 70       	andi	r25, 0x00	; 0
    2b82:	00 97       	sbiw	r24, 0x00	; 0
    2b84:	09 f0       	breq	.+2      	; 0x2b88 <vfprintf+0x31c>
    2b86:	1f 5f       	subi	r17, 0xFF	; 255
    2b88:	80 2e       	mov	r8, r16
    2b8a:	99 24       	eor	r9, r9
    2b8c:	03 fd       	sbrc	r16, 3
    2b8e:	12 c0       	rjmp	.+36     	; 0x2bb4 <vfprintf+0x348>
    2b90:	00 ff       	sbrs	r16, 0
    2b92:	0d c0       	rjmp	.+26     	; 0x2bae <vfprintf+0x342>
    2b94:	fd 2c       	mov	r15, r13
    2b96:	1e 15       	cp	r17, r14
    2b98:	50 f4       	brcc	.+20     	; 0x2bae <vfprintf+0x342>
    2b9a:	fe 0c       	add	r15, r14
    2b9c:	f1 1a       	sub	r15, r17
    2b9e:	1e 2d       	mov	r17, r14
    2ba0:	06 c0       	rjmp	.+12     	; 0x2bae <vfprintf+0x342>
    2ba2:	80 e2       	ldi	r24, 0x20	; 32
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	b3 01       	movw	r22, r6
    2ba8:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <fputc>
    2bac:	1f 5f       	subi	r17, 0xFF	; 255
    2bae:	1e 15       	cp	r17, r14
    2bb0:	c0 f3       	brcs	.-16     	; 0x2ba2 <vfprintf+0x336>
    2bb2:	04 c0       	rjmp	.+8      	; 0x2bbc <vfprintf+0x350>
    2bb4:	1e 15       	cp	r17, r14
    2bb6:	10 f4       	brcc	.+4      	; 0x2bbc <vfprintf+0x350>
    2bb8:	e1 1a       	sub	r14, r17
    2bba:	01 c0       	rjmp	.+2      	; 0x2bbe <vfprintf+0x352>
    2bbc:	ee 24       	eor	r14, r14
    2bbe:	84 fe       	sbrs	r8, 4
    2bc0:	0f c0       	rjmp	.+30     	; 0x2be0 <vfprintf+0x374>
    2bc2:	80 e3       	ldi	r24, 0x30	; 48
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	b3 01       	movw	r22, r6
    2bc8:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <fputc>
    2bcc:	82 fe       	sbrs	r8, 2
    2bce:	1f c0       	rjmp	.+62     	; 0x2c0e <vfprintf+0x3a2>
    2bd0:	81 fe       	sbrs	r8, 1
    2bd2:	03 c0       	rjmp	.+6      	; 0x2bda <vfprintf+0x36e>
    2bd4:	88 e5       	ldi	r24, 0x58	; 88
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	10 c0       	rjmp	.+32     	; 0x2bfa <vfprintf+0x38e>
    2bda:	88 e7       	ldi	r24, 0x78	; 120
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	0d c0       	rjmp	.+26     	; 0x2bfa <vfprintf+0x38e>
    2be0:	c4 01       	movw	r24, r8
    2be2:	86 78       	andi	r24, 0x86	; 134
    2be4:	90 70       	andi	r25, 0x00	; 0
    2be6:	00 97       	sbiw	r24, 0x00	; 0
    2be8:	91 f0       	breq	.+36     	; 0x2c0e <vfprintf+0x3a2>
    2bea:	81 fc       	sbrc	r8, 1
    2bec:	02 c0       	rjmp	.+4      	; 0x2bf2 <vfprintf+0x386>
    2bee:	80 e2       	ldi	r24, 0x20	; 32
    2bf0:	01 c0       	rjmp	.+2      	; 0x2bf4 <vfprintf+0x388>
    2bf2:	8b e2       	ldi	r24, 0x2B	; 43
    2bf4:	07 fd       	sbrc	r16, 7
    2bf6:	8d e2       	ldi	r24, 0x2D	; 45
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	b3 01       	movw	r22, r6
    2bfc:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <fputc>
    2c00:	06 c0       	rjmp	.+12     	; 0x2c0e <vfprintf+0x3a2>
    2c02:	80 e3       	ldi	r24, 0x30	; 48
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	b3 01       	movw	r22, r6
    2c08:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <fputc>
    2c0c:	fa 94       	dec	r15
    2c0e:	df 14       	cp	r13, r15
    2c10:	c0 f3       	brcs	.-16     	; 0x2c02 <vfprintf+0x396>
    2c12:	da 94       	dec	r13
    2c14:	f2 01       	movw	r30, r4
    2c16:	ed 0d       	add	r30, r13
    2c18:	f1 1d       	adc	r31, r1
    2c1a:	80 81       	ld	r24, Z
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	b3 01       	movw	r22, r6
    2c20:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <fputc>
    2c24:	dd 20       	and	r13, r13
    2c26:	a9 f7       	brne	.-22     	; 0x2c12 <vfprintf+0x3a6>
    2c28:	06 c0       	rjmp	.+12     	; 0x2c36 <vfprintf+0x3ca>
    2c2a:	80 e2       	ldi	r24, 0x20	; 32
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	b3 01       	movw	r22, r6
    2c30:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <fputc>
    2c34:	ea 94       	dec	r14
    2c36:	ee 20       	and	r14, r14
    2c38:	c1 f7       	brne	.-16     	; 0x2c2a <vfprintf+0x3be>
    2c3a:	40 ce       	rjmp	.-896    	; 0x28bc <vfprintf+0x50>
    2c3c:	f3 01       	movw	r30, r6
    2c3e:	86 81       	ldd	r24, Z+6	; 0x06
    2c40:	97 81       	ldd	r25, Z+7	; 0x07
    2c42:	02 c0       	rjmp	.+4      	; 0x2c48 <vfprintf+0x3dc>
    2c44:	8f ef       	ldi	r24, 0xFF	; 255
    2c46:	9f ef       	ldi	r25, 0xFF	; 255
    2c48:	2d 96       	adiw	r28, 0x0d	; 13
    2c4a:	0f b6       	in	r0, 0x3f	; 63
    2c4c:	f8 94       	cli
    2c4e:	de bf       	out	0x3e, r29	; 62
    2c50:	0f be       	out	0x3f, r0	; 63
    2c52:	cd bf       	out	0x3d, r28	; 61
    2c54:	df 91       	pop	r29
    2c56:	cf 91       	pop	r28
    2c58:	1f 91       	pop	r17
    2c5a:	0f 91       	pop	r16
    2c5c:	ff 90       	pop	r15
    2c5e:	ef 90       	pop	r14
    2c60:	df 90       	pop	r13
    2c62:	cf 90       	pop	r12
    2c64:	bf 90       	pop	r11
    2c66:	af 90       	pop	r10
    2c68:	9f 90       	pop	r9
    2c6a:	8f 90       	pop	r8
    2c6c:	7f 90       	pop	r7
    2c6e:	6f 90       	pop	r6
    2c70:	5f 90       	pop	r5
    2c72:	4f 90       	pop	r4
    2c74:	3f 90       	pop	r3
    2c76:	2f 90       	pop	r2
    2c78:	08 95       	ret

00002c7a <strnlen_P>:
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	05 90       	lpm	r0, Z+
    2c7e:	61 50       	subi	r22, 0x01	; 1
    2c80:	70 40       	sbci	r23, 0x00	; 0
    2c82:	01 10       	cpse	r0, r1
    2c84:	d8 f7       	brcc	.-10     	; 0x2c7c <strnlen_P+0x2>
    2c86:	80 95       	com	r24
    2c88:	90 95       	com	r25
    2c8a:	8e 0f       	add	r24, r30
    2c8c:	9f 1f       	adc	r25, r31
    2c8e:	08 95       	ret

00002c90 <strnlen>:
    2c90:	fc 01       	movw	r30, r24
    2c92:	61 50       	subi	r22, 0x01	; 1
    2c94:	70 40       	sbci	r23, 0x00	; 0
    2c96:	01 90       	ld	r0, Z+
    2c98:	01 10       	cpse	r0, r1
    2c9a:	d8 f7       	brcc	.-10     	; 0x2c92 <strnlen+0x2>
    2c9c:	80 95       	com	r24
    2c9e:	90 95       	com	r25
    2ca0:	8e 0f       	add	r24, r30
    2ca2:	9f 1f       	adc	r25, r31
    2ca4:	08 95       	ret

00002ca6 <fputc>:
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	8c 01       	movw	r16, r24
    2cb0:	eb 01       	movw	r28, r22
    2cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb4:	81 ff       	sbrs	r24, 1
    2cb6:	1b c0       	rjmp	.+54     	; 0x2cee <fputc+0x48>
    2cb8:	82 ff       	sbrs	r24, 2
    2cba:	0d c0       	rjmp	.+26     	; 0x2cd6 <fputc+0x30>
    2cbc:	2e 81       	ldd	r18, Y+6	; 0x06
    2cbe:	3f 81       	ldd	r19, Y+7	; 0x07
    2cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc2:	9d 81       	ldd	r25, Y+5	; 0x05
    2cc4:	28 17       	cp	r18, r24
    2cc6:	39 07       	cpc	r19, r25
    2cc8:	64 f4       	brge	.+24     	; 0x2ce2 <fputc+0x3c>
    2cca:	e8 81       	ld	r30, Y
    2ccc:	f9 81       	ldd	r31, Y+1	; 0x01
    2cce:	01 93       	st	Z+, r16
    2cd0:	f9 83       	std	Y+1, r31	; 0x01
    2cd2:	e8 83       	st	Y, r30
    2cd4:	06 c0       	rjmp	.+12     	; 0x2ce2 <fputc+0x3c>
    2cd6:	e8 85       	ldd	r30, Y+8	; 0x08
    2cd8:	f9 85       	ldd	r31, Y+9	; 0x09
    2cda:	80 2f       	mov	r24, r16
    2cdc:	19 95       	eicall
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	31 f4       	brne	.+12     	; 0x2cee <fputc+0x48>
    2ce2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ce4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ce6:	01 96       	adiw	r24, 0x01	; 1
    2ce8:	9f 83       	std	Y+7, r25	; 0x07
    2cea:	8e 83       	std	Y+6, r24	; 0x06
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <fputc+0x4c>
    2cee:	0f ef       	ldi	r16, 0xFF	; 255
    2cf0:	1f ef       	ldi	r17, 0xFF	; 255
    2cf2:	c8 01       	movw	r24, r16
    2cf4:	df 91       	pop	r29
    2cf6:	cf 91       	pop	r28
    2cf8:	1f 91       	pop	r17
    2cfa:	0f 91       	pop	r16
    2cfc:	08 95       	ret

00002cfe <__ultoa_invert>:
    2cfe:	fa 01       	movw	r30, r20
    2d00:	aa 27       	eor	r26, r26
    2d02:	28 30       	cpi	r18, 0x08	; 8
    2d04:	51 f1       	breq	.+84     	; 0x2d5a <__ultoa_invert+0x5c>
    2d06:	20 31       	cpi	r18, 0x10	; 16
    2d08:	81 f1       	breq	.+96     	; 0x2d6a <__ultoa_invert+0x6c>
    2d0a:	e8 94       	clt
    2d0c:	6f 93       	push	r22
    2d0e:	6e 7f       	andi	r22, 0xFE	; 254
    2d10:	6e 5f       	subi	r22, 0xFE	; 254
    2d12:	7f 4f       	sbci	r23, 0xFF	; 255
    2d14:	8f 4f       	sbci	r24, 0xFF	; 255
    2d16:	9f 4f       	sbci	r25, 0xFF	; 255
    2d18:	af 4f       	sbci	r26, 0xFF	; 255
    2d1a:	b1 e0       	ldi	r27, 0x01	; 1
    2d1c:	3e d0       	rcall	.+124    	; 0x2d9a <__ultoa_invert+0x9c>
    2d1e:	b4 e0       	ldi	r27, 0x04	; 4
    2d20:	3c d0       	rcall	.+120    	; 0x2d9a <__ultoa_invert+0x9c>
    2d22:	67 0f       	add	r22, r23
    2d24:	78 1f       	adc	r23, r24
    2d26:	89 1f       	adc	r24, r25
    2d28:	9a 1f       	adc	r25, r26
    2d2a:	a1 1d       	adc	r26, r1
    2d2c:	68 0f       	add	r22, r24
    2d2e:	79 1f       	adc	r23, r25
    2d30:	8a 1f       	adc	r24, r26
    2d32:	91 1d       	adc	r25, r1
    2d34:	a1 1d       	adc	r26, r1
    2d36:	6a 0f       	add	r22, r26
    2d38:	71 1d       	adc	r23, r1
    2d3a:	81 1d       	adc	r24, r1
    2d3c:	91 1d       	adc	r25, r1
    2d3e:	a1 1d       	adc	r26, r1
    2d40:	20 d0       	rcall	.+64     	; 0x2d82 <__ultoa_invert+0x84>
    2d42:	09 f4       	brne	.+2      	; 0x2d46 <__ultoa_invert+0x48>
    2d44:	68 94       	set
    2d46:	3f 91       	pop	r19
    2d48:	2a e0       	ldi	r18, 0x0A	; 10
    2d4a:	26 9f       	mul	r18, r22
    2d4c:	11 24       	eor	r1, r1
    2d4e:	30 19       	sub	r19, r0
    2d50:	30 5d       	subi	r19, 0xD0	; 208
    2d52:	31 93       	st	Z+, r19
    2d54:	de f6       	brtc	.-74     	; 0x2d0c <__ultoa_invert+0xe>
    2d56:	cf 01       	movw	r24, r30
    2d58:	08 95       	ret
    2d5a:	46 2f       	mov	r20, r22
    2d5c:	47 70       	andi	r20, 0x07	; 7
    2d5e:	40 5d       	subi	r20, 0xD0	; 208
    2d60:	41 93       	st	Z+, r20
    2d62:	b3 e0       	ldi	r27, 0x03	; 3
    2d64:	0f d0       	rcall	.+30     	; 0x2d84 <__ultoa_invert+0x86>
    2d66:	c9 f7       	brne	.-14     	; 0x2d5a <__ultoa_invert+0x5c>
    2d68:	f6 cf       	rjmp	.-20     	; 0x2d56 <__ultoa_invert+0x58>
    2d6a:	46 2f       	mov	r20, r22
    2d6c:	4f 70       	andi	r20, 0x0F	; 15
    2d6e:	40 5d       	subi	r20, 0xD0	; 208
    2d70:	4a 33       	cpi	r20, 0x3A	; 58
    2d72:	18 f0       	brcs	.+6      	; 0x2d7a <__ultoa_invert+0x7c>
    2d74:	49 5d       	subi	r20, 0xD9	; 217
    2d76:	31 fd       	sbrc	r19, 1
    2d78:	40 52       	subi	r20, 0x20	; 32
    2d7a:	41 93       	st	Z+, r20
    2d7c:	02 d0       	rcall	.+4      	; 0x2d82 <__ultoa_invert+0x84>
    2d7e:	a9 f7       	brne	.-22     	; 0x2d6a <__ultoa_invert+0x6c>
    2d80:	ea cf       	rjmp	.-44     	; 0x2d56 <__ultoa_invert+0x58>
    2d82:	b4 e0       	ldi	r27, 0x04	; 4
    2d84:	a6 95       	lsr	r26
    2d86:	97 95       	ror	r25
    2d88:	87 95       	ror	r24
    2d8a:	77 95       	ror	r23
    2d8c:	67 95       	ror	r22
    2d8e:	ba 95       	dec	r27
    2d90:	c9 f7       	brne	.-14     	; 0x2d84 <__ultoa_invert+0x86>
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	61 05       	cpc	r22, r1
    2d96:	71 05       	cpc	r23, r1
    2d98:	08 95       	ret
    2d9a:	9b 01       	movw	r18, r22
    2d9c:	ac 01       	movw	r20, r24
    2d9e:	0a 2e       	mov	r0, r26
    2da0:	06 94       	lsr	r0
    2da2:	57 95       	ror	r21
    2da4:	47 95       	ror	r20
    2da6:	37 95       	ror	r19
    2da8:	27 95       	ror	r18
    2daa:	ba 95       	dec	r27
    2dac:	c9 f7       	brne	.-14     	; 0x2da0 <__ultoa_invert+0xa2>
    2dae:	62 0f       	add	r22, r18
    2db0:	73 1f       	adc	r23, r19
    2db2:	84 1f       	adc	r24, r20
    2db4:	95 1f       	adc	r25, r21
    2db6:	a0 1d       	adc	r26, r0
    2db8:	08 95       	ret

00002dba <_exit>:
    2dba:	f8 94       	cli

00002dbc <__stop_program>:
    2dbc:	ff cf       	rjmp	.-2      	; 0x2dbc <__stop_program>
