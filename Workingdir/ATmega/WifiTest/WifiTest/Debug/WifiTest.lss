
WifiTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000250  00800200  00002d7e  00002e12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000668  00800450  00800450  00003062  2**0
                  ALLOC
  3 .stab         00002784  00000000  00000000  00003064  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000095a  00000000  00000000  000057e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00006148  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024f7  00000000  00000000  00006348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef9  00000000  00000000  0000883f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015de  00000000  00000000  00009738  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009ac  00000000  00000000  0000ad18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b5  00000000  00000000  0000b6c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027f3  00000000  00000000  0000c079  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000e86c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__vector_51>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e7       	ldi	r30, 0x7E	; 126
      fc:	fd e2       	ldi	r31, 0x2D	; 45
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 35       	cpi	r26, 0x50	; 80
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	1a e0       	ldi	r17, 0x0A	; 10
     110:	a0 e5       	ldi	r26, 0x50	; 80
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a8 3b       	cpi	r26, 0xB8	; 184
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <main>
     122:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <AdcInit>:
// ATmega2560 ADC Channel : 0(ADC0) ~ 7(ADC7), Single Ended Input
void AdcInit(unsigned char ucAdcChannel)
{
	// Internal 2.56V Voltage Reference with external capacitor at AREF pin
//	ADMUX	=	0xC0 | ucAdcChannel;     		// ADC Channel
	ADMUX	=	(1<<REFS1) | (1<<REFS0) | ucAdcChannel;     		// ADC Channel
     12a:	80 6c       	ori	r24, 0xC0	; 192
     12c:	80 93 7c 00 	sts	0x007C, r24

	// ADC Module Enable, Free Running Mode, ADC Prescaler : 64
	// ADC Auto Trigger Enable
//	ADCSRA	=	0xA7;
	ADCSRA	=	(1<<ADEN)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     130:	ea e7       	ldi	r30, 0x7A	; 122
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	87 ea       	ldi	r24, 0xA7	; 167
     136:	80 83       	st	Z, r24
//	ADCSRA	|=	0x40;			// ADC start conversion
	ADCSRA	|=	(1<<ADSC);		// ADC start conversion
     138:	80 81       	ld	r24, Z
     13a:	80 64       	ori	r24, 0x40	; 64
     13c:	80 83       	st	Z, r24
}
     13e:	08 95       	ret

00000140 <AdcRead>:
unsigned int AdcRead(void)
{
	unsigned char ucLowValue = 0;
	unsigned char ucHighValue = 0;
	unsigned int unAdcValue = 0;
	while ((ADCSRA&0x10)==0x00);	// ADC Î≥ÄÌôòÏù¥ ÎÅùÎÇ†ÎñÑ ÍπåÏßÄ ÎåÄÍ∏∞
     140:	ea e7       	ldi	r30, 0x7A	; 122
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	80 81       	ld	r24, Z
     146:	84 ff       	sbrs	r24, 4
     148:	fd cf       	rjmp	.-6      	; 0x144 <AdcRead+0x4>
	
	ucLowValue = ADCL;				//ÌïòÏúÑ 8bit
     14a:	80 91 78 00 	lds	r24, 0x0078
	ucHighValue	= ADCH ;			//ÏÉÅÏúÑ 2bit
     14e:	90 91 79 00 	lds	r25, 0x0079
	
	unAdcValue = (ucHighValue << 8) | ucLowValue;
     152:	39 2f       	mov	r19, r25
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	82 2b       	or	r24, r18
     15a:	93 2b       	or	r25, r19
//	debugprint("unAdcValue : %d\r\n", unAdcValue);
	
	return unAdcValue;
     15c:	08 95       	ret

0000015e <__vector_23>:
//unsigned int gun_AdcValue	=	0;
unsigned char guc_OverflowCnt	=	0;
unsigned int n_flag_getADC = 0;

ISR (TIMER0_OVF_vect)	// Timer0 Overflow0 ISR
{
     15e:	1f 92       	push	r1
     160:	0f 92       	push	r0
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	0f 92       	push	r0
     166:	11 24       	eor	r1, r1
     168:	4f 93       	push	r20
     16a:	5f 93       	push	r21
     16c:	6f 93       	push	r22
     16e:	7f 93       	push	r23
     170:	8f 93       	push	r24
     172:	9f 93       	push	r25
     174:	af 93       	push	r26
     176:	bf 93       	push	r27
	cli();																	//----------------v ±‚¥… ∫π∫Ÿ
     178:	f8 94       	cli
	// 0.01sø° ø¿πˆ«√∑ŒøÏ πﬂª˝, 1/(14745600Hz/1024)•™144 = 0.01s
	TCNT0	=	0xff - 144;
     17a:	8f e6       	ldi	r24, 0x6F	; 111
     17c:	86 bd       	out	0x26, r24	; 38

	timerCouter++;
     17e:	80 91 5f 04 	lds	r24, 0x045F
     182:	90 91 60 04 	lds	r25, 0x0460
     186:	a0 91 61 04 	lds	r26, 0x0461
     18a:	b0 91 62 04 	lds	r27, 0x0462
     18e:	01 96       	adiw	r24, 0x01	; 1
     190:	a1 1d       	adc	r26, r1
     192:	b1 1d       	adc	r27, r1
     194:	80 93 5f 04 	sts	0x045F, r24
     198:	90 93 60 04 	sts	0x0460, r25
     19c:	a0 93 61 04 	sts	0x0461, r26
     1a0:	b0 93 62 04 	sts	0x0462, r27
	
	if ( timerCouter >= setTimerCheckCounter )
     1a4:	40 91 5f 04 	lds	r20, 0x045F
     1a8:	50 91 60 04 	lds	r21, 0x0460
     1ac:	60 91 61 04 	lds	r22, 0x0461
     1b0:	70 91 62 04 	lds	r23, 0x0462
     1b4:	80 91 5b 04 	lds	r24, 0x045B
     1b8:	90 91 5c 04 	lds	r25, 0x045C
     1bc:	a0 91 5d 04 	lds	r26, 0x045D
     1c0:	b0 91 5e 04 	lds	r27, 0x045E
     1c4:	48 17       	cp	r20, r24
     1c6:	59 07       	cpc	r21, r25
     1c8:	6a 07       	cpc	r22, r26
     1ca:	7b 07       	cpc	r23, r27
     1cc:	58 f0       	brcs	.+22     	; 0x1e4 <__vector_23+0x86>
	{
		flagOverflowSetTimer = 1;
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	80 93 5a 04 	sts	0x045A, r24
		timerCouter = 0;
     1d4:	10 92 5f 04 	sts	0x045F, r1
     1d8:	10 92 60 04 	sts	0x0460, r1
     1dc:	10 92 61 04 	sts	0x0461, r1
     1e0:	10 92 62 04 	sts	0x0462, r1
	}
	sei();
     1e4:	78 94       	sei
														//-------------------------------------^±‚¥… ∫π∫Ÿ
	guc_OverflowCnt++;
     1e6:	80 91 52 04 	lds	r24, 0x0452
     1ea:	8f 5f       	subi	r24, 0xFF	; 255
     1ec:	80 93 52 04 	sts	0x0452, r24

	if (guc_OverflowCnt == 100)		// 0.003s * 100 = 0.3s
     1f0:	84 36       	cpi	r24, 0x64	; 100
     1f2:	41 f4       	brne	.+16     	; 0x204 <__vector_23+0xa6>
	{
		guc_OverflowCnt	=	0;
     1f4:	10 92 52 04 	sts	0x0452, r1
		n_flag_getADC = 1;
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	90 93 51 04 	sts	0x0451, r25
     200:	80 93 50 04 	sts	0x0450, r24
	}
}
     204:	bf 91       	pop	r27
     206:	af 91       	pop	r26
     208:	9f 91       	pop	r25
     20a:	8f 91       	pop	r24
     20c:	7f 91       	pop	r23
     20e:	6f 91       	pop	r22
     210:	5f 91       	pop	r21
     212:	4f 91       	pop	r20
     214:	0f 90       	pop	r0
     216:	0f be       	out	0x3f, r0	; 63
     218:	0f 90       	pop	r0
     21a:	1f 90       	pop	r1
     21c:	18 95       	reti

0000021e <TIMER_Init>:
/*-----------------------------led ∫Œ∫–¡¶∞≈*/
void TIMER_Init (void)
{
	
	TCCR0B	=	0x05;
     21e:	85 e0       	ldi	r24, 0x05	; 5
     220:	85 bd       	out	0x25, r24	; 37
	
	TCNT0	=	0xff - 45;		// 0.003s
     222:	82 ed       	ldi	r24, 0xD2	; 210
     224:	86 bd       	out	0x26, r24	; 38
	TIMSK0	|=	1 << TOIE0;		
     226:	ee e6       	ldi	r30, 0x6E	; 110
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	81 60       	ori	r24, 0x01	; 1
     22e:	80 83       	st	Z, r24
	TIFR0	|=	1 << TOV0;	// set Overflow Interupt Flag
     230:	a8 9a       	sbi	0x15, 0	; 21
}
     232:	08 95       	ret

00000234 <LED_Init>:

void LED_Init (void)
{
     234:	cf 93       	push	r28
     236:	c0 e0       	ldi	r28, 0x00	; 0
	int i = 0;
	
	for(i=0; i<MAX_LED_NUM; i++)
	{
		pinMode(RED_PORT, i, OUTPUT);
     238:	82 e0       	ldi	r24, 0x02	; 2
     23a:	6c 2f       	mov	r22, r28
     23c:	41 e0       	ldi	r20, 0x01	; 1
     23e:	0e 94 11 09 	call	0x1222	; 0x1222 <pinMode>
		digitalWrite(RED_PORT, i, LOW);
     242:	82 e0       	ldi	r24, 0x02	; 2
     244:	6c 2f       	mov	r22, r28
     246:	40 e0       	ldi	r20, 0x00	; 0
     248:	0e 94 76 0a 	call	0x14ec	; 0x14ec <digitalWrite>
		pinMode(GREEN_PORT, i, OUTPUT);
     24c:	8a e0       	ldi	r24, 0x0A	; 10
     24e:	6c 2f       	mov	r22, r28
     250:	41 e0       	ldi	r20, 0x01	; 1
     252:	0e 94 11 09 	call	0x1222	; 0x1222 <pinMode>
		digitalWrite(GREEN_PORT, i, LOW);
     256:	8a e0       	ldi	r24, 0x0A	; 10
     258:	6c 2f       	mov	r22, r28
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <digitalWrite>
     260:	cf 5f       	subi	r28, 0xFF	; 255

void LED_Init (void)
{
	int i = 0;
	
	for(i=0; i<MAX_LED_NUM; i++)
     262:	c8 30       	cpi	r28, 0x08	; 8
     264:	49 f7       	brne	.-46     	; 0x238 <LED_Init+0x4>
		pinMode(RED_PORT, i, OUTPUT);
		digitalWrite(RED_PORT, i, LOW);
		pinMode(GREEN_PORT, i, OUTPUT);
		digitalWrite(GREEN_PORT, i, LOW);
	}
}
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <controlLED>:

// color : RED(0), GREEN(1)
void controlLED (int color, unsigned char data)
{
     26a:	ef 92       	push	r14
     26c:	ff 92       	push	r15
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	8c 01       	movw	r16, r24
	int i = 0;
	unsigned char nLedStatus = 0;
	nLedStatus	=	data;
	
	for(i=0; i<MAX_LED_NUM; i++)
     278:	c0 e0       	ldi	r28, 0x00	; 0
     27a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if((nLedStatus & (1<<i)))
     27c:	e6 2e       	mov	r14, r22
     27e:	ff 24       	eor	r15, r15
     280:	c7 01       	movw	r24, r14
     282:	0c 2e       	mov	r0, r28
     284:	02 c0       	rjmp	.+4      	; 0x28a <controlLED+0x20>
     286:	95 95       	asr	r25
     288:	87 95       	ror	r24
     28a:	0a 94       	dec	r0
     28c:	e2 f7       	brpl	.-8      	; 0x286 <controlLED+0x1c>
     28e:	80 ff       	sbrs	r24, 0
     290:	12 c0       	rjmp	.+36     	; 0x2b6 <controlLED+0x4c>
		{
			if (color == RED)
     292:	01 15       	cp	r16, r1
     294:	11 05       	cpc	r17, r1
     296:	31 f4       	brne	.+12     	; 0x2a4 <controlLED+0x3a>
				digitalWrite(RED_PORT, i, HIGH);
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	6c 2f       	mov	r22, r28
     29c:	41 e0       	ldi	r20, 0x01	; 1
     29e:	0e 94 76 0a 	call	0x14ec	; 0x14ec <digitalWrite>
     2a2:	1a c0       	rjmp	.+52     	; 0x2d8 <controlLED+0x6e>
			else if (color == GREEN)
     2a4:	01 30       	cpi	r16, 0x01	; 1
     2a6:	11 05       	cpc	r17, r1
     2a8:	b9 f4       	brne	.+46     	; 0x2d8 <controlLED+0x6e>
				digitalWrite(GREEN_PORT, i, HIGH);
     2aa:	8a e0       	ldi	r24, 0x0A	; 10
     2ac:	6c 2f       	mov	r22, r28
     2ae:	41 e0       	ldi	r20, 0x01	; 1
     2b0:	0e 94 76 0a 	call	0x14ec	; 0x14ec <digitalWrite>
     2b4:	11 c0       	rjmp	.+34     	; 0x2d8 <controlLED+0x6e>
		}
		else
		{
			if (color == RED)
     2b6:	01 15       	cp	r16, r1
     2b8:	11 05       	cpc	r17, r1
     2ba:	31 f4       	brne	.+12     	; 0x2c8 <controlLED+0x5e>
				digitalWrite(RED_PORT, i, LOW);
     2bc:	82 e0       	ldi	r24, 0x02	; 2
     2be:	6c 2f       	mov	r22, r28
     2c0:	40 e0       	ldi	r20, 0x00	; 0
     2c2:	0e 94 76 0a 	call	0x14ec	; 0x14ec <digitalWrite>
     2c6:	08 c0       	rjmp	.+16     	; 0x2d8 <controlLED+0x6e>
			else if (color == GREEN)
     2c8:	01 30       	cpi	r16, 0x01	; 1
     2ca:	11 05       	cpc	r17, r1
     2cc:	29 f4       	brne	.+10     	; 0x2d8 <controlLED+0x6e>
				digitalWrite(GREEN_PORT, i, LOW);
     2ce:	8a e0       	ldi	r24, 0x0A	; 10
     2d0:	6c 2f       	mov	r22, r28
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	0e 94 76 0a 	call	0x14ec	; 0x14ec <digitalWrite>
{
	int i = 0;
	unsigned char nLedStatus = 0;
	nLedStatus	=	data;
	
	for(i=0; i<MAX_LED_NUM; i++)
     2d8:	21 96       	adiw	r28, 0x01	; 1
     2da:	c8 30       	cpi	r28, 0x08	; 8
     2dc:	d1 05       	cpc	r29, r1
     2de:	81 f6       	brne	.-96     	; 0x280 <controlLED+0x16>
				digitalWrite(RED_PORT, i, LOW);
			else if (color == GREEN)
				digitalWrite(GREEN_PORT, i, LOW);
		}
	}
}		
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	08 95       	ret

000002ee <putCh2>:
volatile unsigned char g_debugRxData[MAX_DEBUG_RX_DATA]; // Rx buff
volatile unsigned char g_debugRxCurrentIndex = 0;       // Rx buffer index

void putCh2(char ch)
{
	while (!(UCSR2A & 0x20));
     2ee:	e0 ed       	ldi	r30, 0xD0	; 208
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	90 81       	ld	r25, Z
     2f4:	95 ff       	sbrs	r25, 5
     2f6:	fd cf       	rjmp	.-6      	; 0x2f2 <putCh2+0x4>
		UDR2= ch;
     2f8:	80 93 d6 00 	sts	0x00D6, r24
}
     2fc:	08 95       	ret

000002fe <__vector_51>:

ISR(USART2_RX_vect)
{
     2fe:	1f 92       	push	r1
     300:	0f 92       	push	r0
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	0f 92       	push	r0
     306:	0b b6       	in	r0, 0x3b	; 59
     308:	0f 92       	push	r0
     30a:	11 24       	eor	r1, r1
     30c:	8f 93       	push	r24
     30e:	9f 93       	push	r25
     310:	ef 93       	push	r30
     312:	ff 93       	push	r31
	g_debugRxData[g_debugRxCurrentIndex] = UDR2;
     314:	90 91 53 04 	lds	r25, 0x0453
     318:	80 91 d6 00 	lds	r24, 0x00D6
     31c:	e5 e6       	ldi	r30, 0x65	; 101
     31e:	f4 e0       	ldi	r31, 0x04	; 4
     320:	e9 0f       	add	r30, r25
     322:	f1 1d       	adc	r31, r1
     324:	80 83       	st	Z, r24
	g_debugRxCurrentIndex++;
     326:	80 91 53 04 	lds	r24, 0x0453
     32a:	8f 5f       	subi	r24, 0xFF	; 255
     32c:	80 93 53 04 	sts	0x0453, r24
	if(g_debugRxCurrentIndex >= MAX_DEBUG_RX_DATA)
     330:	80 91 53 04 	lds	r24, 0x0453
     334:	80 34       	cpi	r24, 0x40	; 64
     336:	10 f0       	brcs	.+4      	; 0x33c <__vector_51+0x3e>
		g_debugRxCurrentIndex = 0;
     338:	10 92 53 04 	sts	0x0453, r1
}
     33c:	ff 91       	pop	r31
     33e:	ef 91       	pop	r30
     340:	9f 91       	pop	r25
     342:	8f 91       	pop	r24
     344:	0f 90       	pop	r0
     346:	0b be       	out	0x3b, r0	; 59
     348:	0f 90       	pop	r0
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	0f 90       	pop	r0
     34e:	1f 90       	pop	r1
     350:	18 95       	reti

00000352 <debugInit>:
#define BAUD_RATE 115200L
void debugInit()
{
	// USART2 use
	// PH0 => RX, PH1 => TX
	DDRH  &= 0xFC;										// "0" input, "1" output
     352:	e1 e0       	ldi	r30, 0x01	; 1
     354:	f1 e0       	ldi	r31, 0x01	; 1
     356:	80 81       	ld	r24, Z
     358:	8c 7f       	andi	r24, 0xFC	; 252
     35a:	80 83       	st	Z, r24
	PORTH |= 0x00;
     35c:	e2 e0       	ldi	r30, 0x02	; 2
     35e:	f1 e0       	ldi	r31, 0x01	; 1
     360:	80 81       	ld	r24, Z
     362:	80 83       	st	Z, r24
	
	// Not Double mode, Not multi_communication
	UCSR2A = 0x00;								// x2 Mode
     364:	10 92 d0 00 	sts	0x00D0, r1
	UCSR2B = 0x98;
     368:	88 e9       	ldi	r24, 0x98	; 152
     36a:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C = 0x06;
     36e:	86 e0       	ldi	r24, 0x06	; 6
     370:	80 93 d2 00 	sts	0x00D2, r24
	//	UBRR0L = 0x3F;	// 0b00110011, (14745600 / (16 * 14400)) - 1 = 0x40
	//	UBRR0L = 0x2F;	// 0b00110011, (14745600 / (16 * 19200)) - 1 = 0x2F
	//	UBRR0L = 0x17;	// 0b00110011, (14745600 / (16 * 38400)) - 1 = 0x17
	//	UBRR0L = 0x0F;	// 0b00110011, (14745600 / (16 * 57600)) - 1 = 0x0F

	UBRR2H=(unsigned char) (baud >>8);                            // baud ?????? ??????  H???????? ????
     374:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L=(unsigned char) (baud & 0xFF);                         // baud ?????? ??????  L???????  ????
     378:	87 e0       	ldi	r24, 0x07	; 7
     37a:	80 93 d4 00 	sts	0x00D4, r24
	
	//	UBRR2H = 0x00;
	//	UBRR2L = 16;								// 115200
}
     37e:	08 95       	ret

00000380 <debugprint>:

void debugprint(const char *fmt,...)
{
     380:	0f 93       	push	r16
     382:	1f 93       	push	r17
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
     38c:	c0 58       	subi	r28, 0x80	; 128
     38e:	d0 40       	sbci	r29, 0x00	; 0
     390:	0f b6       	in	r0, 0x3f	; 63
     392:	f8 94       	cli
     394:	de bf       	out	0x3e, r29	; 62
     396:	0f be       	out	0x3f, r0	; 63
     398:	cd bf       	out	0x3d, r28	; 61
     39a:	fe 01       	movw	r30, r28
     39c:	e8 57       	subi	r30, 0x78	; 120
     39e:	ff 4f       	sbci	r31, 0xFF	; 255
     3a0:	61 91       	ld	r22, Z+
     3a2:	71 91       	ld	r23, Z+
	va_list ap;
	char s[128];
	char *p_char = s;
	va_start(ap, fmt);
	vsprintf(s, fmt,ap);
     3a4:	ce 01       	movw	r24, r28
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	4e 2f       	mov	r20, r30
     3aa:	5f 2f       	mov	r21, r31
     3ac:	0e 94 ed 13 	call	0x27da	; 0x27da <vsprintf>
	va_end(ap);
	while(0 != *p_char){
     3b0:	89 81       	ldd	r24, Y+1	; 0x01
     3b2:	88 23       	and	r24, r24
     3b4:	51 f0       	breq	.+20     	; 0x3ca <debugprint+0x4a>
     3b6:	8e 01       	movw	r16, r28
     3b8:	0e 5f       	subi	r16, 0xFE	; 254
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
		putCh2(*p_char++);
     3bc:	0e 94 77 01 	call	0x2ee	; 0x2ee <putCh2>
	char s[128];
	char *p_char = s;
	va_start(ap, fmt);
	vsprintf(s, fmt,ap);
	va_end(ap);
	while(0 != *p_char){
     3c0:	f8 01       	movw	r30, r16
     3c2:	81 91       	ld	r24, Z+
     3c4:	8f 01       	movw	r16, r30
     3c6:	88 23       	and	r24, r24
     3c8:	c9 f7       	brne	.-14     	; 0x3bc <debugprint+0x3c>
		putCh2(*p_char++);
	}	
}
     3ca:	c0 58       	subi	r28, 0x80	; 128
     3cc:	df 4f       	sbci	r29, 0xFF	; 255
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	f8 94       	cli
     3d2:	de bf       	out	0x3e, r29	; 62
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	cd bf       	out	0x3d, r28	; 61
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	1f 91       	pop	r17
     3de:	0f 91       	pop	r16
     3e0:	08 95       	ret

000003e2 <debugConsoleMain>:

void debugConsoleMain()
{
	int i;

	if ( !g_debugRxCurrentIndex ) 
     3e2:	80 91 53 04 	lds	r24, 0x0453
     3e6:	88 23       	and	r24, r24
     3e8:	79 f0       	breq	.+30     	; 0x408 <debugConsoleMain+0x26>
		return;
	
	for(i = 0; i <g_debugRxCurrentIndex;i++)
     3ea:	80 91 53 04 	lds	r24, 0x0453
     3ee:	88 23       	and	r24, r24
     3f0:	49 f0       	breq	.+18     	; 0x404 <debugConsoleMain+0x22>
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	01 96       	adiw	r24, 0x01	; 1
     3f8:	20 91 53 04 	lds	r18, 0x0453
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	82 17       	cp	r24, r18
     400:	93 07       	cpc	r25, r19
     402:	cc f3       	brlt	.-14     	; 0x3f6 <debugConsoleMain+0x14>
	{

	}
	g_debugRxCurrentIndex = 0;
     404:	10 92 53 04 	sts	0x0453, r1
     408:	08 95       	ret

0000040a <putCh0>:
volatile int g_rxDataLen = 0;
volatile uint8_t g_rxDataBuff[MAX_WIFI_RX_DATA];

void putCh0(char ch)
{
	while (!(UCSR0A & 0x20));
     40a:	e0 ec       	ldi	r30, 0xC0	; 192
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	90 81       	ld	r25, Z
     410:	95 ff       	sbrs	r25, 5
     412:	fd cf       	rjmp	.-6      	; 0x40e <putCh0+0x4>
	UDR0= ch;
     414:	80 93 c6 00 	sts	0x00C6, r24
}
     418:	08 95       	ret

0000041a <__vector_25>:

ISR(USART0_RX_vect)
{
     41a:	1f 92       	push	r1
     41c:	0f 92       	push	r0
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	0f 92       	push	r0
     422:	0b b6       	in	r0, 0x3b	; 59
     424:	0f 92       	push	r0
     426:	11 24       	eor	r1, r1
     428:	8f 93       	push	r24
     42a:	9f 93       	push	r25
     42c:	ef 93       	push	r30
     42e:	ff 93       	push	r31
	g_wifiRxData[g_wifiRxCurrentIndex] = UDR0;
     430:	90 91 59 04 	lds	r25, 0x0459
     434:	80 91 c6 00 	lds	r24, 0x00C6
     438:	e5 ea       	ldi	r30, 0xA5	; 165
     43a:	f6 e0       	ldi	r31, 0x06	; 6
     43c:	e9 0f       	add	r30, r25
     43e:	f1 1d       	adc	r31, r1
     440:	80 83       	st	Z, r24
	g_wifiRxCurrentIndex++;
     442:	80 91 59 04 	lds	r24, 0x0459
     446:	8f 5f       	subi	r24, 0xFF	; 255
     448:	80 93 59 04 	sts	0x0459, r24
	if(g_wifiRxCurrentIndex >= MAX_WIFI_RX_DATA)
     44c:	80 91 59 04 	lds	r24, 0x0459
	g_wifiRxCurrentIndex = 0;
}
     450:	ff 91       	pop	r31
     452:	ef 91       	pop	r30
     454:	9f 91       	pop	r25
     456:	8f 91       	pop	r24
     458:	0f 90       	pop	r0
     45a:	0b be       	out	0x3b, r0	; 59
     45c:	0f 90       	pop	r0
     45e:	0f be       	out	0x3f, r0	; 63
     460:	0f 90       	pop	r0
     462:	1f 90       	pop	r1
     464:	18 95       	reti

00000466 <wifiAndBTModuleReset>:

void wifiAndBTModuleReset()
{
	// MOD_RESET(PD6) (wifi module and  BT module reset )  => bt + wifi  reset
	DDRD  &= 0xBF; // input										// "0" input, "1" output
     466:	56 98       	cbi	0x0a, 6	; 10
	PORTD &= 0xBF; // low
     468:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     46a:	89 e9       	ldi	r24, 0x99	; 153
     46c:	99 e5       	ldi	r25, 0x59	; 89
     46e:	a1 e0       	ldi	r26, 0x01	; 1
     470:	81 50       	subi	r24, 0x01	; 1
     472:	90 40       	sbci	r25, 0x00	; 0
     474:	a0 40       	sbci	r26, 0x00	; 0
     476:	e1 f7       	brne	.-8      	; 0x470 <wifiAndBTModuleReset+0xa>
     478:	00 00       	nop
	
	_delay_ms(30);
	DDRD  |= 0x40; // output
     47a:	56 9a       	sbi	0x0a, 6	; 10
     47c:	8f ef       	ldi	r24, 0xFF	; 255
     47e:	9f e3       	ldi	r25, 0x3F	; 63
     480:	a2 e0       	ldi	r26, 0x02	; 2
     482:	81 50       	subi	r24, 0x01	; 1
     484:	90 40       	sbci	r25, 0x00	; 0
     486:	a0 40       	sbci	r26, 0x00	; 0
     488:	e1 f7       	brne	.-8      	; 0x482 <wifiAndBTModuleReset+0x1c>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <wifiAndBTModuleReset+0x26>
     48c:	00 00       	nop
	_delay_ms(50);
	DDRD  &= 0xBF; // input
     48e:	56 98       	cbi	0x0a, 6	; 10
	PORTD |= 0x40; // high
     490:	5e 9a       	sbi	0x0b, 6	; 11
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	9f ef       	ldi	r25, 0xFF	; 255
     496:	a9 e5       	ldi	r26, 0x59	; 89
     498:	81 50       	subi	r24, 0x01	; 1
     49a:	90 40       	sbci	r25, 0x00	; 0
     49c:	a0 40       	sbci	r26, 0x00	; 0
     49e:	e1 f7       	brne	.-8      	; 0x498 <wifiAndBTModuleReset+0x32>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <wifiAndBTModuleReset+0x3c>
     4a2:	00 00       	nop
	
	_delay_ms(2000);
}
     4a4:	08 95       	ret

000004a6 <wifiEnable>:

void wifiEnable(uint8_t bEnable)
{
	if ( bEnable)
     4a6:	88 23       	and	r24, r24
     4a8:	11 f0       	breq	.+4      	; 0x4ae <wifiEnable+0x8>
	{
		PORTD |= 0x80;  // high output
     4aa:	5f 9a       	sbi	0x0b, 7	; 11
     4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <wifiEnable+0xa>
	}
	else
	{
		PORTD &= 0x7F;  // low output
     4ae:	5f 98       	cbi	0x0b, 7	; 11
     4b0:	8f ef       	ldi	r24, 0xFF	; 255
     4b2:	9f ef       	ldi	r25, 0xFF	; 255
     4b4:	a8 e0       	ldi	r26, 0x08	; 8
     4b6:	81 50       	subi	r24, 0x01	; 1
     4b8:	90 40       	sbci	r25, 0x00	; 0
     4ba:	a0 40       	sbci	r26, 0x00	; 0
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <wifiEnable+0x10>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <wifiEnable+0x1a>
     4c0:	00 00       	nop
	}
	_delay_ms(200);
	
}
     4c2:	08 95       	ret

000004c4 <wifiInit>:
#define BAUD_RATE_WIFI 115200L
void wifiInit()
{
	// USART0 use
	// PE0 => RX, PE1 => TX
	DDRE  &= 0xFC;										// "0" input, "1" output
     4c4:	8d b1       	in	r24, 0x0d	; 13
     4c6:	8c 7f       	andi	r24, 0xFC	; 252
     4c8:	8d b9       	out	0x0d, r24	; 13
	PORTE |= 0x00;
     4ca:	8e b1       	in	r24, 0x0e	; 14
     4cc:	8e b9       	out	0x0e, r24	; 14
	
	// Not Double mode, Not multi_communication
	UCSR0A = 0x00;								// x2 Mode
     4ce:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x98;
     4d2:	88 e9       	ldi	r24, 0x98	; 152
     4d4:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = 0x06;
     4d8:	86 e0       	ldi	r24, 0x06	; 6
     4da:	80 93 c2 00 	sts	0x00C2, r24
	//	UBRR0L = 16;								// 115200
	
	unsigned int baud=1;   									// ??? baud???? "1"?? ????
	baud = ((F_CPU+(BAUD_RATE_WIFI*8L))/(BAUD_RATE_WIFI*16L)-1);      // baud?? ???¨÷¨„?????? ????
	
	UBRR0H=(unsigned char) (baud >>8);                            // baud ?????? ??????  H???????? ????
     4de:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=(unsigned char) (baud & 0xFF);                         // baud ?????? ??????  L???????  ????
     4e2:	87 e0       	ldi	r24, 0x07	; 7
     4e4:	80 93 c4 00 	sts	0x00C4, r24
	
	// wifi enable init
	// WIFI_EN  ( PD7 )
	DDRD  |= 0x80; // output										// "0" input, "1" output
     4e8:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= 0x80; // default high
     4ea:	5f 9a       	sbi	0x0b, 7	; 11
	
	wifiAndBTModuleReset();
     4ec:	0e 94 33 02 	call	0x466	; 0x466 <wifiAndBTModuleReset>
     4f0:	8f ef       	ldi	r24, 0xFF	; 255
     4f2:	9f e7       	ldi	r25, 0x7F	; 127
     4f4:	a4 e0       	ldi	r26, 0x04	; 4
     4f6:	81 50       	subi	r24, 0x01	; 1
     4f8:	90 40       	sbci	r25, 0x00	; 0
     4fa:	a0 40       	sbci	r26, 0x00	; 0
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <wifiInit+0x32>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <wifiInit+0x3c>
     500:	00 00       	nop
	_delay_ms(100);
	wifiEnable(1);
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	0e 94 53 02 	call	0x4a6	; 0x4a6 <wifiEnable>
	
	callbackFnc = NULL;
     508:	10 92 a6 0a 	sts	0x0AA6, r1
     50c:	10 92 a5 0a 	sts	0x0AA5, r1
}
     510:	08 95       	ret

00000512 <wifiprint>:

void wifiprint(const char *fmt,...)
{
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
     51e:	c0 58       	subi	r28, 0x80	; 128
     520:	d0 40       	sbci	r29, 0x00	; 0
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
     52c:	fe 01       	movw	r30, r28
     52e:	e8 57       	subi	r30, 0x78	; 120
     530:	ff 4f       	sbci	r31, 0xFF	; 255
     532:	61 91       	ld	r22, Z+
     534:	71 91       	ld	r23, Z+
	va_list ap;
	char s[128];
	char *p_char = s;
	va_start(ap, fmt);
	vsprintf(s, fmt,ap);
     536:	ce 01       	movw	r24, r28
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	4e 2f       	mov	r20, r30
     53c:	5f 2f       	mov	r21, r31
     53e:	0e 94 ed 13 	call	0x27da	; 0x27da <vsprintf>
	va_end(ap);
	while(0 != *p_char){
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	88 23       	and	r24, r24
     546:	51 f0       	breq	.+20     	; 0x55c <wifiprint+0x4a>
     548:	8e 01       	movw	r16, r28
     54a:	0e 5f       	subi	r16, 0xFE	; 254
     54c:	1f 4f       	sbci	r17, 0xFF	; 255
		putCh0(*p_char++);
     54e:	0e 94 05 02 	call	0x40a	; 0x40a <putCh0>
	char s[128];
	char *p_char = s;
	va_start(ap, fmt);
	vsprintf(s, fmt,ap);
	va_end(ap);
	while(0 != *p_char){
     552:	f8 01       	movw	r30, r16
     554:	81 91       	ld	r24, Z+
     556:	8f 01       	movw	r16, r30
     558:	88 23       	and	r24, r24
     55a:	c9 f7       	brne	.-14     	; 0x54e <wifiprint+0x3c>
		putCh0(*p_char++);
	}
}
     55c:	c0 58       	subi	r28, 0x80	; 128
     55e:	df 4f       	sbci	r29, 0xFF	; 255
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	de bf       	out	0x3e, r29	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	cd bf       	out	0x3d, r28	; 61
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	08 95       	ret

00000574 <parsingIPDRxData>:
// 1 => under rxing
// 2 => parcing fail

// +IPD,<len>:<data>
uint8_t parsingIPDRxData(uint8_t* buff, int buffLen)
{
     574:	8f 92       	push	r8
     576:	9f 92       	push	r9
     578:	af 92       	push	r10
     57a:	bf 92       	push	r11
     57c:	cf 92       	push	r12
     57e:	df 92       	push	r13
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	cd b7       	in	r28, 0x3d	; 61
     58e:	de b7       	in	r29, 0x3e	; 62
     590:	2a 97       	sbiw	r28, 0x0a	; 10
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	de bf       	out	0x3e, r29	; 62
     598:	0f be       	out	0x3f, r0	; 63
     59a:	cd bf       	out	0x3d, r28	; 61
     59c:	6c 01       	movw	r12, r24
     59e:	7b 01       	movw	r14, r22
	int deliIndex = -1;
	int rxLen;
	char  strTemp[10];
	for( int i = 0; i < buffLen ; i++)
     5a0:	16 16       	cp	r1, r22
     5a2:	17 06       	cpc	r1, r23
     5a4:	0c f0       	brlt	.+2      	; 0x5a8 <parsingIPDRxData+0x34>
     5a6:	76 c0       	rjmp	.+236    	; 0x694 <parsingIPDRxData+0x120>
	{
		if (buff[i] == ':')
     5a8:	fc 01       	movw	r30, r24
     5aa:	80 81       	ld	r24, Z
     5ac:	8a 33       	cpi	r24, 0x3A	; 58
     5ae:	c1 f0       	breq	.+48     	; 0x5e0 <parsingIPDRxData+0x6c>
// 0 => success
// 1 => under rxing
// 2 => parcing fail

// +IPD,<len>:<data>
uint8_t parsingIPDRxData(uint8_t* buff, int buffLen)
     5b0:	31 96       	adiw	r30, 0x01	; 1
{
	int deliIndex = -1;
	int rxLen;
	char  strTemp[10];
	for( int i = 0; i < buffLen ; i++)
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	03 c0       	rjmp	.+6      	; 0x5be <parsingIPDRxData+0x4a>
	{
		if (buff[i] == ':')
     5b8:	21 91       	ld	r18, Z+
     5ba:	2a 33       	cpi	r18, 0x3A	; 58
     5bc:	31 f0       	breq	.+12     	; 0x5ca <parsingIPDRxData+0x56>
uint8_t parsingIPDRxData(uint8_t* buff, int buffLen)
{
	int deliIndex = -1;
	int rxLen;
	char  strTemp[10];
	for( int i = 0; i < buffLen ; i++)
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	8e 15       	cp	r24, r14
     5c2:	9f 05       	cpc	r25, r15
     5c4:	c9 f7       	brne	.-14     	; 0x5b8 <parsingIPDRxData+0x44>
			break;
		}
	}
	if ( deliIndex == -1)
	{
		return 1;
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	6e c0       	rjmp	.+220    	; 0x6a6 <parsingIPDRxData+0x132>
		{
			deliIndex = i;
			break;
		}
	}
	if ( deliIndex == -1)
     5ca:	ff ef       	ldi	r31, 0xFF	; 255
     5cc:	8f 3f       	cpi	r24, 0xFF	; 255
     5ce:	9f 07       	cpc	r25, r31
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <parsingIPDRxData+0x60>
     5d2:	62 c0       	rjmp	.+196    	; 0x698 <parsingIPDRxData+0x124>
uint8_t parsingIPDRxData(uint8_t* buff, int buffLen)
{
	int deliIndex = -1;
	int rxLen;
	char  strTemp[10];
	for( int i = 0; i < buffLen ; i++)
     5d4:	5c 01       	movw	r10, r24
	}
	if ( deliIndex == -1)
	{
		return 1;
	}
	if (deliIndex > 11 )
     5d6:	8c 30       	cpi	r24, 0x0C	; 12
     5d8:	91 05       	cpc	r25, r1
     5da:	0c f0       	brlt	.+2      	; 0x5de <parsingIPDRxData+0x6a>
     5dc:	5f c0       	rjmp	.+190    	; 0x69c <parsingIPDRxData+0x128>
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <parsingIPDRxData+0x70>
uint8_t parsingIPDRxData(uint8_t* buff, int buffLen)
{
	int deliIndex = -1;
	int rxLen;
	char  strTemp[10];
	for( int i = 0; i < buffLen ; i++)
     5e0:	aa 24       	eor	r10, r10
     5e2:	bb 24       	eor	r11, r11
	if (deliIndex > 11 )
	{
		
		return 2;
	}
	memcpy(strTemp,buff+5, deliIndex - 5 );
     5e4:	85 01       	movw	r16, r10
     5e6:	05 50       	subi	r16, 0x05	; 5
     5e8:	10 40       	sbci	r17, 0x00	; 0
     5ea:	b6 01       	movw	r22, r12
     5ec:	6b 5f       	subi	r22, 0xFB	; 251
     5ee:	7f 4f       	sbci	r23, 0xFF	; 255
     5f0:	ce 01       	movw	r24, r28
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	40 2f       	mov	r20, r16
     5f6:	51 2f       	mov	r21, r17
     5f8:	0e 94 9f 13 	call	0x273e	; 0x273e <memcpy>
	strTemp[deliIndex - 5] = NULL;
     5fc:	e1 e0       	ldi	r30, 0x01	; 1
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	ec 0f       	add	r30, r28
     602:	fd 1f       	adc	r31, r29
     604:	e0 0f       	add	r30, r16
     606:	f1 1f       	adc	r31, r17
     608:	10 82       	st	Z, r1
	
	rxLen = atoi(strTemp);
     60a:	ce 01       	movw	r24, r28
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	0e 94 81 13 	call	0x2702	; 0x2702 <atoi>
     612:	ac 01       	movw	r20, r24
	
	if ( rxLen == 0)
     614:	00 97       	sbiw	r24, 0x00	; 0
     616:	09 f4       	brne	.+2      	; 0x61a <parsingIPDRxData+0xa6>
     618:	43 c0       	rjmp	.+134    	; 0x6a0 <parsingIPDRxData+0x12c>
	{
		return 2;
	}
	
	if ( (buffLen -deliIndex-1) < rxLen )
     61a:	ea 18       	sub	r14, r10
     61c:	fb 08       	sbc	r15, r11
     61e:	87 01       	movw	r16, r14
     620:	01 50       	subi	r16, 0x01	; 1
     622:	10 40       	sbci	r17, 0x00	; 0
     624:	08 17       	cp	r16, r24
     626:	19 07       	cpc	r17, r25
     628:	34 f5       	brge	.+76     	; 0x676 <parsingIPDRxData+0x102>
	{
		if ( (buffLen-deliIndex+1) == rxLen ) // messageø°  \r\n ∫Ÿ¿∫ ∞ÊøÏ 
     62a:	c7 01       	movw	r24, r14
     62c:	01 96       	adiw	r24, 0x01	; 1
     62e:	84 17       	cp	r24, r20
     630:	95 07       	cpc	r25, r21
     632:	c1 f5       	brne	.+112    	; 0x6a4 <parsingIPDRxData+0x130>
		{
			g_wifiIPDRxDataLen = rxLen;	
     634:	90 93 58 04 	sts	0x0458, r25
     638:	80 93 57 04 	sts	0x0457, r24
			memcpy(g_wifiIPDRxData,buff+deliIndex+1,rxLen-2 );
     63c:	0f 2e       	mov	r0, r31
     63e:	f5 ea       	ldi	r31, 0xA5	; 165
     640:	8f 2e       	mov	r8, r31
     642:	f4 e0       	ldi	r31, 0x04	; 4
     644:	9f 2e       	mov	r9, r31
     646:	f0 2d       	mov	r31, r0
     648:	b5 01       	movw	r22, r10
     64a:	6f 5f       	subi	r22, 0xFF	; 255
     64c:	7f 4f       	sbci	r23, 0xFF	; 255
     64e:	6c 0d       	add	r22, r12
     650:	7d 1d       	adc	r23, r13
     652:	88 2d       	mov	r24, r8
     654:	99 2d       	mov	r25, r9
     656:	40 2f       	mov	r20, r16
     658:	51 2f       	mov	r21, r17
     65a:	0e 94 9f 13 	call	0x273e	; 0x273e <memcpy>
			g_wifiIPDRxData[rxLen-2] = 0x0D;
     65e:	f4 01       	movw	r30, r8
     660:	e0 0f       	add	r30, r16
     662:	f1 1f       	adc	r31, r17
     664:	8d e0       	ldi	r24, 0x0D	; 13
     666:	80 83       	st	Z, r24
			g_wifiIPDRxData[rxLen-1] = 0x0A;
     668:	f4 01       	movw	r30, r8
     66a:	ee 0d       	add	r30, r14
     66c:	ff 1d       	adc	r31, r15
     66e:	8a e0       	ldi	r24, 0x0A	; 10
     670:	80 83       	st	Z, r24
			return 0;
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	18 c0       	rjmp	.+48     	; 0x6a6 <parsingIPDRxData+0x132>
		}
		return 1;
	}
	g_wifiIPDRxDataLen = rxLen;
     676:	90 93 58 04 	sts	0x0458, r25
     67a:	80 93 57 04 	sts	0x0457, r24
	memcpy(g_wifiIPDRxData,buff+deliIndex+1,rxLen );
     67e:	85 ea       	ldi	r24, 0xA5	; 165
     680:	94 e0       	ldi	r25, 0x04	; 4
     682:	b5 01       	movw	r22, r10
     684:	6f 5f       	subi	r22, 0xFF	; 255
     686:	7f 4f       	sbci	r23, 0xFF	; 255
     688:	6c 0d       	add	r22, r12
     68a:	7d 1d       	adc	r23, r13
     68c:	0e 94 9f 13 	call	0x273e	; 0x273e <memcpy>
	return 0;
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	09 c0       	rjmp	.+18     	; 0x6a6 <parsingIPDRxData+0x132>
			break;
		}
	}
	if ( deliIndex == -1)
	{
		return 1;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	07 c0       	rjmp	.+14     	; 0x6a6 <parsingIPDRxData+0x132>
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	05 c0       	rjmp	.+10     	; 0x6a6 <parsingIPDRxData+0x132>
	}
	if (deliIndex > 11 )
	{
		
		return 2;
     69c:	82 e0       	ldi	r24, 0x02	; 2
     69e:	03 c0       	rjmp	.+6      	; 0x6a6 <parsingIPDRxData+0x132>
	
	rxLen = atoi(strTemp);
	
	if ( rxLen == 0)
	{
		return 2;
     6a0:	82 e0       	ldi	r24, 0x02	; 2
     6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <parsingIPDRxData+0x132>
			memcpy(g_wifiIPDRxData,buff+deliIndex+1,rxLen-2 );
			g_wifiIPDRxData[rxLen-2] = 0x0D;
			g_wifiIPDRxData[rxLen-1] = 0x0A;
			return 0;
		}
		return 1;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
	}
	g_wifiIPDRxDataLen = rxLen;
	memcpy(g_wifiIPDRxData,buff+deliIndex+1,rxLen );
	return 0;
}
     6a6:	2a 96       	adiw	r28, 0x0a	; 10
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	df 90       	pop	r13
     6c0:	cf 90       	pop	r12
     6c2:	bf 90       	pop	r11
     6c4:	af 90       	pop	r10
     6c6:	9f 90       	pop	r9
     6c8:	8f 90       	pop	r8
     6ca:	08 95       	ret

000006cc <parsingMsg>:
#define  MSG_SEND_READY	8
#define  MSG_BYSY		9
#define  MSG_UNDER_MSG  10

uint8_t parsingMsg(uint8_t* buff, int buffLen)
{
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	ec 01       	movw	r28, r24
     6d6:	8b 01       	movw	r16, r22
	//putCh2(g_wifiRxData[i]);
	debugprint("[%02X]",buff[i]);
}
debugprint("\r\n");
#endif	
	if (!strncmp((char*)buff,"OK",2))
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	72 e0       	ldi	r23, 0x02	; 2
     6dc:	42 e0       	ldi	r20, 0x02	; 2
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	0e 94 a8 13 	call	0x2750	; 0x2750 <strncmp>
     6e4:	28 2f       	mov	r18, r24
     6e6:	39 2f       	mov	r19, r25
     6e8:	21 15       	cp	r18, r1
     6ea:	31 05       	cpc	r19, r1
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <parsingMsg+0x24>
     6ee:	6a c0       	rjmp	.+212    	; 0x7c4 <parsingMsg+0xf8>
	{
		return MSG_OK;
	}
	else if (buff[0] == '>')
     6f0:	88 81       	ld	r24, Y
     6f2:	8e 33       	cpi	r24, 0x3E	; 62
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <parsingMsg+0x2c>
     6f6:	68 c0       	rjmp	.+208    	; 0x7c8 <parsingMsg+0xfc>
	{
		return MSG_SEND_READY;
	}
	else if ((buffLen >= 7) && !strncmp(buff,"SEND OK",7)  )
     6f8:	07 30       	cpi	r16, 0x07	; 7
     6fa:	11 05       	cpc	r17, r1
     6fc:	6c f0       	brlt	.+26     	; 0x718 <parsingMsg+0x4c>
     6fe:	ce 01       	movw	r24, r28
     700:	63 e0       	ldi	r22, 0x03	; 3
     702:	72 e0       	ldi	r23, 0x02	; 2
     704:	47 e0       	ldi	r20, 0x07	; 7
     706:	50 e0       	ldi	r21, 0x00	; 0
     708:	0e 94 a8 13 	call	0x2750	; 0x2750 <strncmp>
     70c:	28 2f       	mov	r18, r24
     70e:	39 2f       	mov	r19, r25
     710:	21 15       	cp	r18, r1
     712:	31 05       	cpc	r19, r1
     714:	09 f4       	brne	.+2      	; 0x718 <parsingMsg+0x4c>
     716:	5a c0       	rjmp	.+180    	; 0x7cc <parsingMsg+0x100>
	{
		return MSG_SEND_OK;
	}
	else if ((buffLen >=4) &&  !strncmp(buff,"+IPD,",4) )
     718:	04 30       	cpi	r16, 0x04	; 4
     71a:	11 05       	cpc	r17, r1
     71c:	c4 f0       	brlt	.+48     	; 0x74e <parsingMsg+0x82>
     71e:	ce 01       	movw	r24, r28
     720:	6b e0       	ldi	r22, 0x0B	; 11
     722:	72 e0       	ldi	r23, 0x02	; 2
     724:	44 e0       	ldi	r20, 0x04	; 4
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	0e 94 a8 13 	call	0x2750	; 0x2750 <strncmp>
     72c:	28 2f       	mov	r18, r24
     72e:	39 2f       	mov	r19, r25
     730:	21 15       	cp	r18, r1
     732:	31 05       	cpc	r19, r1
     734:	61 f4       	brne	.+24     	; 0x74e <parsingMsg+0x82>
	{
		uint8_t temp;
		temp = parsingIPDRxData(buff, buffLen);
     736:	ce 01       	movw	r24, r28
     738:	b8 01       	movw	r22, r16
     73a:	0e 94 ba 02 	call	0x574	; 0x574 <parsingIPDRxData>
		if ( temp == 0)
     73e:	88 23       	and	r24, r24
     740:	09 f4       	brne	.+2      	; 0x744 <parsingMsg+0x78>
     742:	46 c0       	rjmp	.+140    	; 0x7d0 <parsingMsg+0x104>
			return MSG_RX;
		else if (temp == 1)
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	09 f0       	breq	.+2      	; 0x74a <parsingMsg+0x7e>
     748:	45 c0       	rjmp	.+138    	; 0x7d4 <parsingMsg+0x108>
			return MSG_RXING;
     74a:	84 e0       	ldi	r24, 0x04	; 4
     74c:	4e c0       	rjmp	.+156    	; 0x7ea <parsingMsg+0x11e>
		
		return MSG_UNDEFINED;	// fail
	}
	else if ((buffLen >= 5) && !strncmp(buff,"ERROR",5)  )
     74e:	05 30       	cpi	r16, 0x05	; 5
     750:	11 05       	cpc	r17, r1
     752:	64 f0       	brlt	.+24     	; 0x76c <parsingMsg+0xa0>
     754:	ce 01       	movw	r24, r28
     756:	61 e1       	ldi	r22, 0x11	; 17
     758:	72 e0       	ldi	r23, 0x02	; 2
     75a:	45 e0       	ldi	r20, 0x05	; 5
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	0e 94 a8 13 	call	0x2750	; 0x2750 <strncmp>
     762:	28 2f       	mov	r18, r24
     764:	39 2f       	mov	r19, r25
     766:	21 15       	cp	r18, r1
     768:	31 05       	cpc	r19, r1
     76a:	b1 f1       	breq	.+108    	; 0x7d8 <parsingMsg+0x10c>
	{
		return MSG_ERROR;
	}
	else if ((buffLen >= 4) && !strncmp(buff,"FAIL",5)  )
     76c:	04 30       	cpi	r16, 0x04	; 4
     76e:	11 05       	cpc	r17, r1
     770:	64 f0       	brlt	.+24     	; 0x78a <parsingMsg+0xbe>
     772:	ce 01       	movw	r24, r28
     774:	67 e1       	ldi	r22, 0x17	; 23
     776:	72 e0       	ldi	r23, 0x02	; 2
     778:	45 e0       	ldi	r20, 0x05	; 5
     77a:	50 e0       	ldi	r21, 0x00	; 0
     77c:	0e 94 a8 13 	call	0x2750	; 0x2750 <strncmp>
     780:	28 2f       	mov	r18, r24
     782:	39 2f       	mov	r19, r25
     784:	21 15       	cp	r18, r1
     786:	31 05       	cpc	r19, r1
     788:	49 f1       	breq	.+82     	; 0x7dc <parsingMsg+0x110>
	{
		return MSG_FAIL;
	}
	else if ((buffLen >= 7) && !strncmp(buff,"ALREADY",7)  )
     78a:	07 30       	cpi	r16, 0x07	; 7
     78c:	11 05       	cpc	r17, r1
     78e:	44 f1       	brlt	.+80     	; 0x7e0 <parsingMsg+0x114>
     790:	ce 01       	movw	r24, r28
     792:	6c e1       	ldi	r22, 0x1C	; 28
     794:	72 e0       	ldi	r23, 0x02	; 2
     796:	47 e0       	ldi	r20, 0x07	; 7
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	0e 94 a8 13 	call	0x2750	; 0x2750 <strncmp>
     79e:	28 2f       	mov	r18, r24
     7a0:	39 2f       	mov	r19, r25
     7a2:	21 15       	cp	r18, r1
     7a4:	31 05       	cpc	r19, r1
     7a6:	f1 f0       	breq	.+60     	; 0x7e4 <parsingMsg+0x118>
	{
		return MSG_ALREAD;
	}
	else if ((buffLen>= 7) && !strncmp(buff,"busy...",7) )
     7a8:	ce 01       	movw	r24, r28
     7aa:	64 e2       	ldi	r22, 0x24	; 36
     7ac:	72 e0       	ldi	r23, 0x02	; 2
     7ae:	47 e0       	ldi	r20, 0x07	; 7
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	0e 94 a8 13 	call	0x2750	; 0x2750 <strncmp>
     7b6:	28 2f       	mov	r18, r24
     7b8:	39 2f       	mov	r19, r25
     7ba:	21 15       	cp	r18, r1
     7bc:	31 05       	cpc	r19, r1
     7be:	a1 f4       	brne	.+40     	; 0x7e8 <parsingMsg+0x11c>
	{
		return MSG_BYSY;
     7c0:	89 e0       	ldi	r24, 0x09	; 9
     7c2:	13 c0       	rjmp	.+38     	; 0x7ea <parsingMsg+0x11e>
}
debugprint("\r\n");
#endif	
	if (!strncmp((char*)buff,"OK",2))
	{
		return MSG_OK;
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	11 c0       	rjmp	.+34     	; 0x7ea <parsingMsg+0x11e>
	}
	else if (buff[0] == '>')
	{
		return MSG_SEND_READY;
     7c8:	88 e0       	ldi	r24, 0x08	; 8
     7ca:	0f c0       	rjmp	.+30     	; 0x7ea <parsingMsg+0x11e>
	}
	else if ((buffLen >= 7) && !strncmp(buff,"SEND OK",7)  )
	{
		return MSG_SEND_OK;
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	0d c0       	rjmp	.+26     	; 0x7ea <parsingMsg+0x11e>
	else if ((buffLen >=4) &&  !strncmp(buff,"+IPD,",4) )
	{
		uint8_t temp;
		temp = parsingIPDRxData(buff, buffLen);
		if ( temp == 0)
			return MSG_RX;
     7d0:	83 e0       	ldi	r24, 0x03	; 3
     7d2:	0b c0       	rjmp	.+22     	; 0x7ea <parsingMsg+0x11e>
		else if (temp == 1)
			return MSG_RXING;
		
		return MSG_UNDEFINED;	// fail
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	09 c0       	rjmp	.+18     	; 0x7ea <parsingMsg+0x11e>
	}
	else if ((buffLen >= 5) && !strncmp(buff,"ERROR",5)  )
	{
		return MSG_ERROR;
     7d8:	85 e0       	ldi	r24, 0x05	; 5
     7da:	07 c0       	rjmp	.+14     	; 0x7ea <parsingMsg+0x11e>
	}
	else if ((buffLen >= 4) && !strncmp(buff,"FAIL",5)  )
	{
		return MSG_FAIL;
     7dc:	86 e0       	ldi	r24, 0x06	; 6
     7de:	05 c0       	rjmp	.+10     	; 0x7ea <parsingMsg+0x11e>
	else if (buffLen>= 7)
	{
		return MSG_UNDEFINED;
	}
	
	return MSG_UNDER_MSG;
     7e0:	8a e0       	ldi	r24, 0x0A	; 10
     7e2:	03 c0       	rjmp	.+6      	; 0x7ea <parsingMsg+0x11e>
	{
		return MSG_FAIL;
	}
	else if ((buffLen >= 7) && !strncmp(buff,"ALREADY",7)  )
	{
		return MSG_ALREAD;
     7e4:	87 e0       	ldi	r24, 0x07	; 7
     7e6:	01 c0       	rjmp	.+2      	; 0x7ea <parsingMsg+0x11e>
	{
		return MSG_BYSY;
	}
	else if (buffLen>= 7)
	{
		return MSG_UNDEFINED;
     7e8:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return MSG_UNDER_MSG;
}
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	08 95       	ret

000007f4 <rxDataProcess>:

uint8_t rxDataProcess(uint8_t* msgBuff, uint8_t msgBuffLen)
{
     7f4:	2f 92       	push	r2
     7f6:	3f 92       	push	r3
     7f8:	4f 92       	push	r4
     7fa:	5f 92       	push	r5
     7fc:	6f 92       	push	r6
     7fe:	7f 92       	push	r7
     800:	8f 92       	push	r8
     802:	9f 92       	push	r9
     804:	af 92       	push	r10
     806:	bf 92       	push	r11
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	c2 50       	subi	r28, 0x02	; 2
     81e:	d2 40       	sbci	r29, 0x02	; 2
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	f8 94       	cli
     824:	de bf       	out	0x3e, r29	; 62
     826:	0f be       	out	0x3f, r0	; 63
     828:	cd bf       	out	0x3d, r28	; 61
     82a:	3c 01       	movw	r6, r24
     82c:	c6 2e       	mov	r12, r22
	int lineFeedIndex;
	
	uint8_t syncDetected;
	uint8_t temp;
	uint8_t msgBuffIndex = 0;
	if (g_wifiRxCurrentIndex == 0 )
     82e:	80 91 59 04 	lds	r24, 0x0459
     832:	88 23       	and	r24, r24
     834:	09 f4       	brne	.+2      	; 0x838 <rxDataProcess+0x44>
     836:	0b c1       	rjmp	.+534    	; 0xa4e <rxDataProcess+0x25a>
		return 0;
	
	if ((g_rxDataLen + g_wifiRxCurrentIndex) >= MAX_WIFI_RX_DATA )
     838:	20 91 59 04 	lds	r18, 0x0459
     83c:	80 91 54 04 	lds	r24, 0x0454
     840:	90 91 55 04 	lds	r25, 0x0455
     844:	82 0f       	add	r24, r18
     846:	91 1d       	adc	r25, r1
     848:	22 e0       	ldi	r18, 0x02	; 2
     84a:	80 30       	cpi	r24, 0x00	; 0
     84c:	92 07       	cpc	r25, r18
     84e:	44 f0       	brlt	.+16     	; 0x860 <rxDataProcess+0x6c>
	{
		g_rxDataLen = 0;
     850:	10 92 55 04 	sts	0x0455, r1
     854:	10 92 54 04 	sts	0x0454, r1
		g_underRxDataFlag = 0;
     858:	10 92 56 04 	sts	0x0456, r1
		return msgBuffIndex;
     85c:	dd 24       	eor	r13, r13
     85e:	f8 c0       	rjmp	.+496    	; 0xa50 <rxDataProcess+0x25c>
	}
	memcpy(g_rxDataBuff,g_wifiRxData,g_wifiRxCurrentIndex);
     860:	40 91 59 04 	lds	r20, 0x0459
     864:	85 ea       	ldi	r24, 0xA5	; 165
     866:	98 e0       	ldi	r25, 0x08	; 8
     868:	65 ea       	ldi	r22, 0xA5	; 165
     86a:	76 e0       	ldi	r23, 0x06	; 6
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	0e 94 9f 13 	call	0x273e	; 0x273e <memcpy>
	g_rxDataLen += (int)g_wifiRxCurrentIndex;
     872:	20 91 59 04 	lds	r18, 0x0459
     876:	80 91 54 04 	lds	r24, 0x0454
     87a:	90 91 55 04 	lds	r25, 0x0455
     87e:	82 0f       	add	r24, r18
     880:	91 1d       	adc	r25, r1
     882:	90 93 55 04 	sts	0x0455, r25
     886:	80 93 54 04 	sts	0x0454, r24
	g_wifiRxCurrentIndex = 0;
     88a:	10 92 59 04 	sts	0x0459, r1
	int  carriageReturnIndex;
	int lineFeedIndex;
	
	uint8_t syncDetected;
	uint8_t temp;
	uint8_t msgBuffIndex = 0;
     88e:	dd 24       	eor	r13, r13
	while(1)
	{
		carriageReturnIndex = -1;
		lineFeedIndex = -1;
		
		for ( int i = 0; i < g_rxDataLen ; i++ )
     890:	aa 24       	eor	r10, r10
     892:	bb 24       	eor	r11, r11
	}
#endif

	while(1)
	{
		carriageReturnIndex = -1;
     894:	88 24       	eor	r8, r8
     896:	8a 94       	dec	r8
     898:	98 2c       	mov	r9, r8
					break;
				}
			}
			else
			{
				if ( g_rxDataBuff[i] ==  CARRIAGE_RETURN )
     89a:	0f 2e       	mov	r0, r31
     89c:	f5 ea       	ldi	r31, 0xA5	; 165
     89e:	ef 2e       	mov	r14, r31
     8a0:	f8 e0       	ldi	r31, 0x08	; 8
     8a2:	ff 2e       	mov	r15, r31
     8a4:	f0 2d       	mov	r31, r0
     8a6:	cf 5f       	subi	r28, 0xFF	; 255
     8a8:	dd 4f       	sbci	r29, 0xFD	; 253
     8aa:	e8 82       	st	Y, r14
     8ac:	c1 50       	subi	r28, 0x01	; 1
     8ae:	d2 40       	sbci	r29, 0x02	; 2
     8b0:	ce 5f       	subi	r28, 0xFE	; 254
     8b2:	dd 4f       	sbci	r29, 0xFD	; 253
     8b4:	f8 82       	st	Y, r15
     8b6:	c2 50       	subi	r28, 0x02	; 2
     8b8:	d2 40       	sbci	r29, 0x02	; 2
				if ( (g_rxDataBuff[i] ==  LINE_FEED) && ((carriageReturnIndex+1) == i ) )
				{
					lineFeedIndex = i;
					if ( lineFeedIndex == 1)//
					{
						memcpy(strTemp, g_rxDataBuff+lineFeedIndex+1, g_rxDataLen - lineFeedIndex -1);
     8ba:	0f 2e       	mov	r0, r31
     8bc:	f7 ea       	ldi	r31, 0xA7	; 167
     8be:	4f 2e       	mov	r4, r31
     8c0:	f8 e0       	ldi	r31, 0x08	; 8
     8c2:	5f 2e       	mov	r5, r31
     8c4:	f0 2d       	mov	r31, r0
						memcpy(g_rxDataBuff , strTemp, g_rxDataLen - lineFeedIndex -1);
     8c6:	0f 2e       	mov	r0, r31
     8c8:	fe ef       	ldi	r31, 0xFE	; 254
     8ca:	2f 2e       	mov	r2, r31
     8cc:	ff ef       	ldi	r31, 0xFF	; 255
     8ce:	3f 2e       	mov	r3, r31
     8d0:	f0 2d       	mov	r31, r0
     8d2:	24 0c       	add	r2, r4
     8d4:	35 1c       	adc	r3, r5
	while(1)
	{
		carriageReturnIndex = -1;
		lineFeedIndex = -1;
		
		for ( int i = 0; i < g_rxDataLen ; i++ )
     8d6:	80 91 54 04 	lds	r24, 0x0454
     8da:	90 91 55 04 	lds	r25, 0x0455
     8de:	18 16       	cp	r1, r24
     8e0:	19 06       	cpc	r1, r25
     8e2:	0c f0       	brlt	.+2      	; 0x8e6 <rxDataProcess+0xf2>
     8e4:	9b c0       	rjmp	.+310    	; 0xa1c <rxDataProcess+0x228>
     8e6:	85 01       	movw	r16, r10
	}
#endif

	while(1)
	{
		carriageReturnIndex = -1;
     8e8:	b4 01       	movw	r22, r8
		lineFeedIndex = -1;
		
		for ( int i = 0; i < g_rxDataLen ; i++ )
		{
			// check carriage return and line feed
			if ( carriageReturnIndex !=  -1)
     8ea:	8f ef       	ldi	r24, 0xFF	; 255
     8ec:	6f 3f       	cpi	r22, 0xFF	; 255
     8ee:	78 07       	cpc	r23, r24
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <rxDataProcess+0x100>
     8f2:	83 c0       	rjmp	.+262    	; 0x9fa <rxDataProcess+0x206>
			{
				if ( (g_rxDataBuff[i] ==  LINE_FEED) && ((carriageReturnIndex+1) == i ) )
     8f4:	f7 01       	movw	r30, r14
     8f6:	e0 0f       	add	r30, r16
     8f8:	f1 1f       	adc	r31, r17
     8fa:	80 81       	ld	r24, Z
     8fc:	8a 30       	cpi	r24, 0x0A	; 10
     8fe:	09 f0       	breq	.+2      	; 0x902 <rxDataProcess+0x10e>
     900:	83 c0       	rjmp	.+262    	; 0xa08 <rxDataProcess+0x214>
     902:	cb 01       	movw	r24, r22
     904:	01 96       	adiw	r24, 0x01	; 1
     906:	80 17       	cp	r24, r16
     908:	91 07       	cpc	r25, r17
     90a:	09 f0       	breq	.+2      	; 0x90e <rxDataProcess+0x11a>
     90c:	7d c0       	rjmp	.+250    	; 0xa08 <rxDataProcess+0x214>
				{
					lineFeedIndex = i;
					if ( lineFeedIndex == 1)//
     90e:	81 30       	cpi	r24, 0x01	; 1
     910:	91 05       	cpc	r25, r1
     912:	19 f5       	brne	.+70     	; 0x95a <rxDataProcess+0x166>
					{
						memcpy(strTemp, g_rxDataBuff+lineFeedIndex+1, g_rxDataLen - lineFeedIndex -1);
     914:	40 91 54 04 	lds	r20, 0x0454
     918:	50 91 55 04 	lds	r21, 0x0455
     91c:	42 50       	subi	r20, 0x02	; 2
     91e:	50 40       	sbci	r21, 0x00	; 0
     920:	ce 01       	movw	r24, r28
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	64 2d       	mov	r22, r4
     926:	75 2d       	mov	r23, r5
     928:	0e 94 9f 13 	call	0x273e	; 0x273e <memcpy>
						memcpy(g_rxDataBuff , strTemp, g_rxDataLen - lineFeedIndex -1);
     92c:	40 91 54 04 	lds	r20, 0x0454
     930:	50 91 55 04 	lds	r21, 0x0455
     934:	42 50       	subi	r20, 0x02	; 2
     936:	50 40       	sbci	r21, 0x00	; 0
     938:	82 2d       	mov	r24, r2
     93a:	93 2d       	mov	r25, r3
     93c:	be 01       	movw	r22, r28
     93e:	6f 5f       	subi	r22, 0xFF	; 255
     940:	7f 4f       	sbci	r23, 0xFF	; 255
     942:	0e 94 9f 13 	call	0x273e	; 0x273e <memcpy>
						g_rxDataLen -= (lineFeedIndex + 1);
     946:	80 91 54 04 	lds	r24, 0x0454
     94a:	90 91 55 04 	lds	r25, 0x0455
     94e:	02 97       	sbiw	r24, 0x02	; 2
     950:	90 93 55 04 	sts	0x0455, r25
     954:	80 93 54 04 	sts	0x0454, r24
     958:	be cf       	rjmp	.-132    	; 0x8d6 <rxDataProcess+0xe2>
						break;
					}
					temp = parsingMsg(g_rxDataBuff, carriageReturnIndex);
     95a:	cf 5f       	subi	r28, 0xFF	; 255
     95c:	dd 4f       	sbci	r29, 0xFD	; 253
     95e:	88 81       	ld	r24, Y
     960:	c1 50       	subi	r28, 0x01	; 1
     962:	d2 40       	sbci	r29, 0x02	; 2
     964:	ce 5f       	subi	r28, 0xFE	; 254
     966:	dd 4f       	sbci	r29, 0xFD	; 253
     968:	98 81       	ld	r25, Y
     96a:	c2 50       	subi	r28, 0x02	; 2
     96c:	d2 40       	sbci	r29, 0x02	; 2
     96e:	0e 94 66 03 	call	0x6cc	; 0x6cc <parsingMsg>
					//					debugprint("M1:%d\r\n",temp);
					if ( msgBuffIndex <  msgBuffLen )
     972:	dc 14       	cp	r13, r12
     974:	28 f4       	brcc	.+10     	; 0x980 <rxDataProcess+0x18c>
					{
						msgBuff[msgBuffIndex] = temp;
     976:	f3 01       	movw	r30, r6
     978:	ed 0d       	add	r30, r13
     97a:	f1 1d       	adc	r31, r1
     97c:	80 83       	st	Z, r24
						msgBuffIndex++;
     97e:	d3 94       	inc	r13
						
					}
					if ( (lineFeedIndex+1) == g_rxDataLen ) //when  line feed is data end
     980:	20 91 54 04 	lds	r18, 0x0454
     984:	30 91 55 04 	lds	r19, 0x0455
     988:	c8 01       	movw	r24, r16
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	82 17       	cp	r24, r18
     98e:	93 07       	cpc	r25, r19
     990:	19 f4       	brne	.+6      	; 0x998 <rxDataProcess+0x1a4>
					{
						g_underRxDataFlag = 0;
     992:	10 92 56 04 	sts	0x0456, r1
						return msgBuffIndex;
     996:	5c c0       	rjmp	.+184    	; 0xa50 <rxDataProcess+0x25c>
					}
					memcpy(strTemp, g_rxDataBuff+lineFeedIndex+1, g_rxDataLen - lineFeedIndex -1);
     998:	b8 01       	movw	r22, r16
     99a:	6a 55       	subi	r22, 0x5A	; 90
     99c:	77 4f       	sbci	r23, 0xF7	; 247
     99e:	40 91 54 04 	lds	r20, 0x0454
     9a2:	50 91 55 04 	lds	r21, 0x0455
     9a6:	40 1b       	sub	r20, r16
     9a8:	51 0b       	sbc	r21, r17
     9aa:	41 50       	subi	r20, 0x01	; 1
     9ac:	50 40       	sbci	r21, 0x00	; 0
     9ae:	ce 01       	movw	r24, r28
     9b0:	01 96       	adiw	r24, 0x01	; 1
     9b2:	0e 94 9f 13 	call	0x273e	; 0x273e <memcpy>
					memcpy(g_rxDataBuff , strTemp, g_rxDataLen - lineFeedIndex -1);
     9b6:	40 91 54 04 	lds	r20, 0x0454
     9ba:	50 91 55 04 	lds	r21, 0x0455
     9be:	40 1b       	sub	r20, r16
     9c0:	51 0b       	sbc	r21, r17
     9c2:	41 50       	subi	r20, 0x01	; 1
     9c4:	50 40       	sbci	r21, 0x00	; 0
     9c6:	8e 2d       	mov	r24, r14
     9c8:	9f 2d       	mov	r25, r15
     9ca:	be 01       	movw	r22, r28
     9cc:	6f 5f       	subi	r22, 0xFF	; 255
     9ce:	7f 4f       	sbci	r23, 0xFF	; 255
     9d0:	0e 94 9f 13 	call	0x273e	; 0x273e <memcpy>
					g_rxDataLen -= (lineFeedIndex + 1);
     9d4:	20 91 54 04 	lds	r18, 0x0454
     9d8:	30 91 55 04 	lds	r19, 0x0455
     9dc:	c8 01       	movw	r24, r16
     9de:	80 95       	com	r24
     9e0:	90 95       	com	r25
     9e2:	82 0f       	add	r24, r18
     9e4:	93 1f       	adc	r25, r19
     9e6:	90 93 55 04 	sts	0x0455, r25
     9ea:	80 93 54 04 	sts	0x0454, r24
					continue;
				}
			}
		}
		
		if ( lineFeedIndex == -1) // no find sync, check rxing data
     9ee:	2f ef       	ldi	r18, 0xFF	; 255
     9f0:	0f 3f       	cpi	r16, 0xFF	; 255
     9f2:	12 07       	cpc	r17, r18
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <rxDataProcess+0x204>
     9f6:	6f cf       	rjmp	.-290    	; 0x8d6 <rxDataProcess+0xe2>
     9f8:	11 c0       	rjmp	.+34     	; 0xa1c <rxDataProcess+0x228>
					break;
				}
			}
			else
			{
				if ( g_rxDataBuff[i] ==  CARRIAGE_RETURN )
     9fa:	f7 01       	movw	r30, r14
     9fc:	e0 0f       	add	r30, r16
     9fe:	f1 1f       	adc	r31, r17
     a00:	80 81       	ld	r24, Z
     a02:	8d 30       	cpi	r24, 0x0D	; 13
     a04:	09 f4       	brne	.+2      	; 0xa08 <rxDataProcess+0x214>
     a06:	b8 01       	movw	r22, r16
	while(1)
	{
		carriageReturnIndex = -1;
		lineFeedIndex = -1;
		
		for ( int i = 0; i < g_rxDataLen ; i++ )
     a08:	0f 5f       	subi	r16, 0xFF	; 255
     a0a:	1f 4f       	sbci	r17, 0xFF	; 255
     a0c:	80 91 54 04 	lds	r24, 0x0454
     a10:	90 91 55 04 	lds	r25, 0x0455
     a14:	08 17       	cp	r16, r24
     a16:	19 07       	cpc	r17, r25
     a18:	0c f4       	brge	.+2      	; 0xa1c <rxDataProcess+0x228>
     a1a:	67 cf       	rjmp	.-306    	; 0x8ea <rxDataProcess+0xf6>
			}
		}
		
		if ( lineFeedIndex == -1) // no find sync, check rxing data
		{
			g_underRxDataFlag = 1;
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	80 93 56 04 	sts	0x0456, r24
			
			temp = parsingMsg(g_rxDataBuff, g_rxDataLen);
     a22:	60 91 54 04 	lds	r22, 0x0454
     a26:	70 91 55 04 	lds	r23, 0x0455
     a2a:	85 ea       	ldi	r24, 0xA5	; 165
     a2c:	98 e0       	ldi	r25, 0x08	; 8
     a2e:	0e 94 66 03 	call	0x6cc	; 0x6cc <parsingMsg>
			//			debugprint("M2:%d\r\n",temp);
			if ((temp ==MSG_UNDER_MSG) || (temp ==MSG_RXING) )
     a32:	8a 30       	cpi	r24, 0x0A	; 10
     a34:	31 f0       	breq	.+12     	; 0xa42 <rxDataProcess+0x24e>
     a36:	84 30       	cpi	r24, 0x04	; 4
     a38:	21 f0       	breq	.+8      	; 0xa42 <rxDataProcess+0x24e>
			{
			}
			else
			{
				g_rxDataLen = 0;
     a3a:	10 92 55 04 	sts	0x0455, r1
     a3e:	10 92 54 04 	sts	0x0454, r1
			}
			msgBuff[msgBuffIndex] = temp;
     a42:	f3 01       	movw	r30, r6
     a44:	ed 0d       	add	r30, r13
     a46:	f1 1d       	adc	r31, r1
     a48:	80 83       	st	Z, r24
			msgBuffIndex++;
     a4a:	d3 94       	inc	r13
			return msgBuffIndex;
     a4c:	01 c0       	rjmp	.+2      	; 0xa50 <rxDataProcess+0x25c>
	
	uint8_t syncDetected;
	uint8_t temp;
	uint8_t msgBuffIndex = 0;
	if (g_wifiRxCurrentIndex == 0 )
		return 0;
     a4e:	dd 24       	eor	r13, r13
			return msgBuffIndex;
		}
	}
	
	return msgBuffIndex;
}
     a50:	8d 2d       	mov	r24, r13
     a52:	ce 5f       	subi	r28, 0xFE	; 254
     a54:	dd 4f       	sbci	r29, 0xFD	; 253
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	cd bf       	out	0x3d, r28	; 61
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
     a74:	9f 90       	pop	r9
     a76:	8f 90       	pop	r8
     a78:	7f 90       	pop	r7
     a7a:	6f 90       	pop	r6
     a7c:	5f 90       	pop	r5
     a7e:	4f 90       	pop	r4
     a80:	3f 90       	pop	r3
     a82:	2f 90       	pop	r2
     a84:	08 95       	ret

00000a86 <wifiMain>:
[04][00][00][00][00][00][00][00][00][00][00][00][00][01][02][04][00][00][00][00][00][00][00][00][03]
[00][00][00][00][1E][00][00][00][FF]
*/

void wifiMain()
{
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	00 d0       	rcall	.+0      	; 0xa8c <wifiMain+0x6>
     a8c:	0f 92       	push	r0
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
	g_wifiRxCurrentIndex = 0;
#else
	int i;
	int  endIndex = -1;
	
	if ( g_wifiIPDRxDataLen )// no ipd data
     a92:	80 91 57 04 	lds	r24, 0x0457
     a96:	90 91 58 04 	lds	r25, 0x0458
     a9a:	00 97       	sbiw	r24, 0x00	; 0
     a9c:	99 f0       	breq	.+38     	; 0xac4 <wifiMain+0x3e>
	{
		if (callbackFnc != NULL )
     a9e:	e0 91 a5 0a 	lds	r30, 0x0AA5
     aa2:	f0 91 a6 0a 	lds	r31, 0x0AA6
     aa6:	30 97       	sbiw	r30, 0x00	; 0
     aa8:	49 f0       	breq	.+18     	; 0xabc <wifiMain+0x36>
		{
			callbackFnc(EVENT_RX_DATA,g_wifiIPDRxData,g_wifiIPDRxDataLen);
     aaa:	40 91 57 04 	lds	r20, 0x0457
     aae:	50 91 58 04 	lds	r21, 0x0458
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	65 ea       	ldi	r22, 0xA5	; 165
     ab8:	74 e0       	ldi	r23, 0x04	; 4
     aba:	19 95       	eicall
		}
		g_wifiIPDRxDataLen = 0;
     abc:	10 92 58 04 	sts	0x0458, r1
     ac0:	10 92 57 04 	sts	0x0457, r1
		
	}
	
	if ( !g_wifiRxCurrentIndex )
     ac4:	80 91 59 04 	lds	r24, 0x0459
     ac8:	88 23       	and	r24, r24
     aca:	f1 f0       	breq	.+60     	; 0xb08 <wifiMain+0x82>
	}
#endif

	uint8_t msgBuff[4];
	uint8_t msgRxNum;
	msgRxNum = rxDataProcess(msgBuff,4);
     acc:	ce 01       	movw	r24, r28
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	64 e0       	ldi	r22, 0x04	; 4
     ad2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <rxDataProcess>
	
	
	if ( !g_wifiIPDRxDataLen )// no ipd data
     ad6:	80 91 57 04 	lds	r24, 0x0457
     ada:	90 91 58 04 	lds	r25, 0x0458
     ade:	00 97       	sbiw	r24, 0x00	; 0
     ae0:	99 f0       	breq	.+38     	; 0xb08 <wifiMain+0x82>
		return;

	if (callbackFnc != NULL )
     ae2:	e0 91 a5 0a 	lds	r30, 0x0AA5
     ae6:	f0 91 a6 0a 	lds	r31, 0x0AA6
     aea:	30 97       	sbiw	r30, 0x00	; 0
     aec:	49 f0       	breq	.+18     	; 0xb00 <wifiMain+0x7a>
	{
		callbackFnc(EVENT_RX_DATA,g_wifiIPDRxData,g_wifiIPDRxDataLen);
     aee:	40 91 57 04 	lds	r20, 0x0457
     af2:	50 91 58 04 	lds	r21, 0x0458
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	65 ea       	ldi	r22, 0xA5	; 165
     afc:	74 e0       	ldi	r23, 0x04	; 4
     afe:	19 95       	eicall
	}
	g_wifiIPDRxDataLen = 0;
     b00:	10 92 58 04 	sts	0x0458, r1
     b04:	10 92 57 04 	sts	0x0457, r1

	#endif
}
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <WaitOKWithPrint>:

int WaitOKWithPrint()
{
     b16:	2f 92       	push	r2
     b18:	3f 92       	push	r3
     b1a:	4f 92       	push	r4
     b1c:	5f 92       	push	r5
     b1e:	6f 92       	push	r6
     b20:	7f 92       	push	r7
     b22:	8f 92       	push	r8
     b24:	9f 92       	push	r9
     b26:	af 92       	push	r10
     b28:	bf 92       	push	r11
     b2a:	cf 92       	push	r12
     b2c:	df 92       	push	r13
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	c0 50       	subi	r28, 0x00	; 0
     b40:	d2 40       	sbci	r29, 0x02	; 2
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
	uint8_t strTemp[512];
	int currentIndex = 0;
     b4c:	ee 24       	eor	r14, r14
     b4e:	ff 24       	eor	r15, r15
		if (g_wifiRxCurrentIndex)
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
			{
				//
				strTemp[currentIndex++] = g_wifiRxData[i];
     b50:	0f 2e       	mov	r0, r31
     b52:	f5 ea       	ldi	r31, 0xA5	; 165
     b54:	af 2e       	mov	r10, r31
     b56:	f6 e0       	ldi	r31, 0x06	; 6
     b58:	bf 2e       	mov	r11, r31
     b5a:	f0 2d       	mov	r31, r0
						{
							g_wifiRxCurrentIndex = 0;
							//							debugprint("error\r\n");
							return -1;
						}
						else if ((currentIndex >= 7) && !strncmp(strTemp,"ERROR",5)  )
     b5c:	0f 2e       	mov	r0, r31
     b5e:	f1 e1       	ldi	r31, 0x11	; 17
     b60:	2f 2e       	mov	r2, r31
     b62:	f2 e0       	ldi	r31, 0x02	; 2
     b64:	3f 2e       	mov	r3, r31
     b66:	f0 2d       	mov	r31, r0
				{
					//debugprint("\r\n");
					if ( currentIndex >= 4) // "OK\r\n"
					{
						// check end  "OK\r\n"
						if (!strncmp((char*)strTemp,"OK",2))
     b68:	0f 2e       	mov	r0, r31
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	6f 2e       	mov	r6, r31
     b6e:	f2 e0       	ldi	r31, 0x02	; 2
     b70:	7f 2e       	mov	r7, r31
     b72:	f0 2d       	mov	r31, r0
						{
							g_wifiRxCurrentIndex = 0;
							return 0;
						}
						else if ((currentIndex >=4) &&  !strncmp(strTemp,"+IPD,",4) )
     b74:	0f 2e       	mov	r0, r31
     b76:	fb e0       	ldi	r31, 0x0B	; 11
     b78:	4f 2e       	mov	r4, r31
     b7a:	f2 e0       	ldi	r31, 0x02	; 2
     b7c:	5f 2e       	mov	r5, r31
     b7e:	f0 2d       	mov	r31, r0
	OK\r\n
	*/
	
	while(1)
	{
		if (g_wifiRxCurrentIndex)
     b80:	80 91 59 04 	lds	r24, 0x0459
     b84:	88 23       	and	r24, r24
     b86:	e1 f3       	breq	.-8      	; 0xb80 <WaitOKWithPrint+0x6a>
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
     b88:	80 91 59 04 	lds	r24, 0x0459
     b8c:	88 23       	and	r24, r24
     b8e:	09 f4       	brne	.+2      	; 0xb92 <WaitOKWithPrint+0x7c>
     b90:	a9 c0       	rjmp	.+338    	; 0xce4 <WaitOKWithPrint+0x1ce>
     b92:	cc 24       	eor	r12, r12
     b94:	dd 24       	eor	r13, r13
						
						#endif
						//						debugprint(strTemp);
						
					}
					currentIndex = 0;
     b96:	88 24       	eor	r8, r8
     b98:	99 24       	eor	r9, r9
		if (g_wifiRxCurrentIndex)
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
			{
				//
				strTemp[currentIndex++] = g_wifiRxData[i];
     b9a:	85 01       	movw	r16, r10
     b9c:	0c 0d       	add	r16, r12
     b9e:	1d 1d       	adc	r17, r13
     ba0:	f8 01       	movw	r30, r16
     ba2:	80 81       	ld	r24, Z
     ba4:	e1 e0       	ldi	r30, 0x01	; 1
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	ec 0f       	add	r30, r28
     baa:	fd 1f       	adc	r31, r29
     bac:	ee 0d       	add	r30, r14
     bae:	ff 1d       	adc	r31, r15
     bb0:	80 83       	st	Z, r24
     bb2:	08 94       	sec
     bb4:	e1 1c       	adc	r14, r1
     bb6:	f1 1c       	adc	r15, r1
				//if((g_wifiRxData[i] !=0x0D) && (g_wifiRxData[i] !=0x0A)   )
				putCh2(g_wifiRxData[i]);
     bb8:	f8 01       	movw	r30, r16
     bba:	80 81       	ld	r24, Z
     bbc:	0e 94 77 01 	call	0x2ee	; 0x2ee <putCh2>
				
				if (g_wifiRxData[i] == 0x0A)
     bc0:	f8 01       	movw	r30, r16
     bc2:	80 81       	ld	r24, Z
     bc4:	8a 30       	cpi	r24, 0x0A	; 10
     bc6:	09 f0       	breq	.+2      	; 0xbca <WaitOKWithPrint+0xb4>
     bc8:	83 c0       	rjmp	.+262    	; 0xcd0 <WaitOKWithPrint+0x1ba>
				{
					//debugprint("\r\n");
					if ( currentIndex >= 4) // "OK\r\n"
     bca:	f4 e0       	ldi	r31, 0x04	; 4
     bcc:	ef 16       	cp	r14, r31
     bce:	f1 04       	cpc	r15, r1
     bd0:	0c f4       	brge	.+2      	; 0xbd4 <WaitOKWithPrint+0xbe>
     bd2:	79 c0       	rjmp	.+242    	; 0xcc6 <WaitOKWithPrint+0x1b0>
					{
						// check end  "OK\r\n"
						if (!strncmp((char*)strTemp,"OK",2))
     bd4:	ce 01       	movw	r24, r28
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	b3 01       	movw	r22, r6
     bda:	42 e0       	ldi	r20, 0x02	; 2
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	0e 94 a8 13 	call	0x2750	; 0x2750 <strncmp>
     be2:	28 2f       	mov	r18, r24
     be4:	39 2f       	mov	r19, r25
     be6:	21 15       	cp	r18, r1
     be8:	31 05       	cpc	r19, r1
     bea:	29 f4       	brne	.+10     	; 0xbf6 <WaitOKWithPrint+0xe0>
						{
							g_wifiRxCurrentIndex = 0;
     bec:	10 92 59 04 	sts	0x0459, r1
							return 0;
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	7a c0       	rjmp	.+244    	; 0xcea <WaitOKWithPrint+0x1d4>
						}
						else if ((currentIndex >=4) &&  !strncmp(strTemp,"+IPD,",4) )
     bf6:	ce 01       	movw	r24, r28
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	b2 01       	movw	r22, r4
     bfc:	44 e0       	ldi	r20, 0x04	; 4
     bfe:	50 e0       	ldi	r21, 0x00	; 0
     c00:	0e 94 a8 13 	call	0x2750	; 0x2750 <strncmp>
     c04:	28 2f       	mov	r18, r24
     c06:	39 2f       	mov	r19, r25
     c08:	21 15       	cp	r18, r1
     c0a:	31 05       	cpc	r19, r1
     c0c:	29 f4       	brne	.+10     	; 0xc18 <WaitOKWithPrint+0x102>
						{
							g_wifiRxCurrentIndex = 0;
     c0e:	10 92 59 04 	sts	0x0459, r1
							//							debugprint("error\r\n");
							return -1;
     c12:	8f ef       	ldi	r24, 0xFF	; 255
     c14:	9f ef       	ldi	r25, 0xFF	; 255
     c16:	69 c0       	rjmp	.+210    	; 0xcea <WaitOKWithPrint+0x1d4>
						}
						else if ((currentIndex >= 7) && !strncmp(strTemp,"ERROR",5)  )
     c18:	87 e0       	ldi	r24, 0x07	; 7
     c1a:	e8 16       	cp	r14, r24
     c1c:	f1 04       	cpc	r15, r1
     c1e:	8c f0       	brlt	.+34     	; 0xc42 <WaitOKWithPrint+0x12c>
     c20:	ce 01       	movw	r24, r28
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	b1 01       	movw	r22, r2
     c26:	45 e0       	ldi	r20, 0x05	; 5
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	0e 94 a8 13 	call	0x2750	; 0x2750 <strncmp>
     c2e:	28 2f       	mov	r18, r24
     c30:	39 2f       	mov	r19, r25
     c32:	21 15       	cp	r18, r1
     c34:	31 05       	cpc	r19, r1
     c36:	29 f4       	brne	.+10     	; 0xc42 <WaitOKWithPrint+0x12c>
						{
							g_wifiRxCurrentIndex = 0;
     c38:	10 92 59 04 	sts	0x0459, r1
							//							debugprint("error\r\n");
							return -1;
     c3c:	8f ef       	ldi	r24, 0xFF	; 255
     c3e:	9f ef       	ldi	r25, 0xFF	; 255
     c40:	54 c0       	rjmp	.+168    	; 0xcea <WaitOKWithPrint+0x1d4>
						}
						else if ((currentIndex >= 6) && !strncmp(strTemp,"FAIL",5)  )
     c42:	e6 e0       	ldi	r30, 0x06	; 6
     c44:	ee 16       	cp	r14, r30
     c46:	f1 04       	cpc	r15, r1
     c48:	94 f0       	brlt	.+36     	; 0xc6e <WaitOKWithPrint+0x158>
     c4a:	ce 01       	movw	r24, r28
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	67 e1       	ldi	r22, 0x17	; 23
     c50:	72 e0       	ldi	r23, 0x02	; 2
     c52:	45 e0       	ldi	r20, 0x05	; 5
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	0e 94 a8 13 	call	0x2750	; 0x2750 <strncmp>
     c5a:	28 2f       	mov	r18, r24
     c5c:	39 2f       	mov	r19, r25
     c5e:	21 15       	cp	r18, r1
     c60:	31 05       	cpc	r19, r1
     c62:	29 f4       	brne	.+10     	; 0xc6e <WaitOKWithPrint+0x158>
						{
							g_wifiRxCurrentIndex = 0;
     c64:	10 92 59 04 	sts	0x0459, r1
							//							debugprint("fail\r\n");
							return -1;
     c68:	8f ef       	ldi	r24, 0xFF	; 255
     c6a:	9f ef       	ldi	r25, 0xFF	; 255
     c6c:	3e c0       	rjmp	.+124    	; 0xcea <WaitOKWithPrint+0x1d4>
						}
						else if ((currentIndex >= 7) && !strncmp(strTemp,"ALREAY",5)  )
     c6e:	f7 e0       	ldi	r31, 0x07	; 7
     c70:	ef 16       	cp	r14, r31
     c72:	f1 04       	cpc	r15, r1
     c74:	94 f0       	brlt	.+36     	; 0xc9a <WaitOKWithPrint+0x184>
     c76:	ce 01       	movw	r24, r28
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	6c e2       	ldi	r22, 0x2C	; 44
     c7c:	72 e0       	ldi	r23, 0x02	; 2
     c7e:	45 e0       	ldi	r20, 0x05	; 5
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	0e 94 a8 13 	call	0x2750	; 0x2750 <strncmp>
     c86:	28 2f       	mov	r18, r24
     c88:	39 2f       	mov	r19, r25
     c8a:	21 15       	cp	r18, r1
     c8c:	31 05       	cpc	r19, r1
     c8e:	29 f4       	brne	.+10     	; 0xc9a <WaitOKWithPrint+0x184>
						{
							g_wifiRxCurrentIndex = 0;
     c90:	10 92 59 04 	sts	0x0459, r1
							return 0;
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	28 c0       	rjmp	.+80     	; 0xcea <WaitOKWithPrint+0x1d4>
						}
						else if ((currentIndex >= 9) && !strncmp(strTemp,"SEND OK",7)  )
     c9a:	89 e0       	ldi	r24, 0x09	; 9
     c9c:	e8 16       	cp	r14, r24
     c9e:	f1 04       	cpc	r15, r1
     ca0:	a4 f0       	brlt	.+40     	; 0xcca <WaitOKWithPrint+0x1b4>
     ca2:	ce 01       	movw	r24, r28
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	63 e0       	ldi	r22, 0x03	; 3
     ca8:	72 e0       	ldi	r23, 0x02	; 2
     caa:	47 e0       	ldi	r20, 0x07	; 7
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	0e 94 a8 13 	call	0x2750	; 0x2750 <strncmp>
     cb2:	28 2f       	mov	r18, r24
     cb4:	39 2f       	mov	r19, r25
     cb6:	21 15       	cp	r18, r1
     cb8:	31 05       	cpc	r19, r1
     cba:	49 f4       	brne	.+18     	; 0xcce <WaitOKWithPrint+0x1b8>
						{
							g_wifiRxCurrentIndex = 0;
     cbc:	10 92 59 04 	sts	0x0459, r1
							return 0;
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	12 c0       	rjmp	.+36     	; 0xcea <WaitOKWithPrint+0x1d4>
						
						#endif
						//						debugprint(strTemp);
						
					}
					currentIndex = 0;
     cc6:	74 01       	movw	r14, r8
     cc8:	03 c0       	rjmp	.+6      	; 0xcd0 <WaitOKWithPrint+0x1ba>
     cca:	74 01       	movw	r14, r8
     ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <WaitOKWithPrint+0x1ba>
     cce:	74 01       	movw	r14, r8
	
	while(1)
	{
		if (g_wifiRxCurrentIndex)
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
     cd0:	08 94       	sec
     cd2:	c1 1c       	adc	r12, r1
     cd4:	d1 1c       	adc	r13, r1
     cd6:	80 91 59 04 	lds	r24, 0x0459
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	c8 16       	cp	r12, r24
     cde:	d9 06       	cpc	r13, r25
     ce0:	0c f4       	brge	.+2      	; 0xce4 <WaitOKWithPrint+0x1ce>
     ce2:	5b cf       	rjmp	.-330    	; 0xb9a <WaitOKWithPrint+0x84>
						
					}
					currentIndex = 0;
				}
			}
			g_wifiRxCurrentIndex = 0;
     ce4:	10 92 59 04 	sts	0x0459, r1
     ce8:	4b cf       	rjmp	.-362    	; 0xb80 <WaitOKWithPrint+0x6a>
		}
	}
}
     cea:	c0 50       	subi	r28, 0x00	; 0
     cec:	de 4f       	sbci	r29, 0xFE	; 254
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	cf 90       	pop	r12
     d08:	bf 90       	pop	r11
     d0a:	af 90       	pop	r10
     d0c:	9f 90       	pop	r9
     d0e:	8f 90       	pop	r8
     d10:	7f 90       	pop	r7
     d12:	6f 90       	pop	r6
     d14:	5f 90       	pop	r5
     d16:	4f 90       	pop	r4
     d18:	3f 90       	pop	r3
     d1a:	2f 90       	pop	r2
     d1c:	08 95       	ret

00000d1e <WaitSendReadyWithoutPrint>:


int WaitSendReadyWithoutPrint()
{
     d1e:	cf 92       	push	r12
     d20:	df 92       	push	r13
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <WaitSendReadyWithoutPrint+0x10>
     d2e:	0f 92       	push	r0
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	0f 2e       	mov	r0, r31
     d36:	f5 e6       	ldi	r31, 0x65	; 101
     d38:	cf 2e       	mov	r12, r31
     d3a:	dd 24       	eor	r13, r13
     d3c:	f0 2d       	mov	r31, r0
	int counter = 0;
	uint8_t msgBuff[4];
	uint8_t msgRxNum;
	int i;
	uint8_t okFlag =0;
	uint8_t readyFlag = 0;
     d3e:	00 e0       	ldi	r16, 0x00	; 0
{
	int counter = 0;
	uint8_t msgBuff[4];
	uint8_t msgRxNum;
	int i;
	uint8_t okFlag =0;
     d40:	ff 24       	eor	r15, r15
		for(i = 0 ; i< msgRxNum ; i++)
		{
			if (msgBuff[i] == MSG_SEND_READY)
			{
				
				readyFlag = 1;
     d42:	11 e0       	ldi	r17, 0x01	; 1
	int i;
	uint8_t okFlag =0;
	uint8_t readyFlag = 0;
	while(1)
	{
		msgRxNum = rxDataProcess(msgBuff,4);
     d44:	ce 01       	movw	r24, r28
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	64 e0       	ldi	r22, 0x04	; 4
     d4a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <rxDataProcess>
		for(i = 0 ; i< msgRxNum ; i++)
     d4e:	88 23       	and	r24, r24
     d50:	a1 f0       	breq	.+40     	; 0xd7a <WaitSendReadyWithoutPrint+0x5c>
     d52:	fe 01       	movw	r30, r28
     d54:	31 96       	adiw	r30, 0x01	; 1
		}
	}
}


int WaitSendReadyWithoutPrint()
     d56:	9f 01       	movw	r18, r30
     d58:	28 0f       	add	r18, r24
     d5a:	31 1d       	adc	r19, r1
     d5c:	c9 01       	movw	r24, r18
	while(1)
	{
		msgRxNum = rxDataProcess(msgBuff,4);
		for(i = 0 ; i< msgRxNum ; i++)
		{
			if (msgBuff[i] == MSG_SEND_READY)
     d5e:	21 91       	ld	r18, Z+
     d60:	28 30       	cpi	r18, 0x08	; 8
     d62:	29 f0       	breq	.+10     	; 0xd6e <WaitSendReadyWithoutPrint+0x50>
			{
				
				readyFlag = 1;
			}
			else if (msgBuff[i] == MSG_OK)
     d64:	22 30       	cpi	r18, 0x02	; 2
     d66:	29 f0       	breq	.+10     	; 0xd72 <WaitSendReadyWithoutPrint+0x54>
			{
				okFlag = 1;
			}
			else if (msgBuff[i] == MSG_ERROR)
     d68:	25 30       	cpi	r18, 0x05	; 5
     d6a:	21 f4       	brne	.+8      	; 0xd74 <WaitSendReadyWithoutPrint+0x56>
     d6c:	26 c0       	rjmp	.+76     	; 0xdba <WaitSendReadyWithoutPrint+0x9c>
		for(i = 0 ; i< msgRxNum ; i++)
		{
			if (msgBuff[i] == MSG_SEND_READY)
			{
				
				readyFlag = 1;
     d6e:	01 2f       	mov	r16, r17
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <WaitSendReadyWithoutPrint+0x56>
			}
			else if (msgBuff[i] == MSG_OK)
			{
				okFlag = 1;
     d72:	f1 2e       	mov	r15, r17
	uint8_t okFlag =0;
	uint8_t readyFlag = 0;
	while(1)
	{
		msgRxNum = rxDataProcess(msgBuff,4);
		for(i = 0 ; i< msgRxNum ; i++)
     d74:	e8 17       	cp	r30, r24
     d76:	f9 07       	cpc	r31, r25
     d78:	91 f7       	brne	.-28     	; 0xd5e <WaitSendReadyWithoutPrint+0x40>
			else if (msgBuff[i] == MSG_ERROR)
			{
				return -1;
			}
		}
		if ( readyFlag && okFlag )
     d7a:	00 23       	and	r16, r16
     d7c:	11 f0       	breq	.+4      	; 0xd82 <WaitSendReadyWithoutPrint+0x64>
     d7e:	ff 20       	and	r15, r15
     d80:	f9 f4       	brne	.+62     	; 0xdc0 <WaitSendReadyWithoutPrint+0xa2>
     d82:	08 94       	sec
     d84:	c1 08       	sbc	r12, r1
     d86:	d1 08       	sbc	r13, r1
		{
			return 0;
		}
		
		counter++;
		if (counter> 100)
     d88:	c1 14       	cp	r12, r1
     d8a:	d1 04       	cpc	r13, r1
     d8c:	79 f4       	brne	.+30     	; 0xdac <WaitSendReadyWithoutPrint+0x8e>
		{
			debugprint("WaitSendReadyWithoutPrint counter err\r\n");
     d8e:	0f 92       	push	r0
     d90:	0f 92       	push	r0
     d92:	83 e3       	ldi	r24, 0x33	; 51
     d94:	92 e0       	ldi	r25, 0x02	; 2
     d96:	ed b7       	in	r30, 0x3d	; 61
     d98:	fe b7       	in	r31, 0x3e	; 62
     d9a:	92 83       	std	Z+2, r25	; 0x02
     d9c:	81 83       	std	Z+1, r24	; 0x01
     d9e:	0e 94 c0 01 	call	0x380	; 0x380 <debugprint>
			return -1;
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	8f ef       	ldi	r24, 0xFF	; 255
     da8:	9f ef       	ldi	r25, 0xFF	; 255
     daa:	0c c0       	rjmp	.+24     	; 0xdc4 <WaitSendReadyWithoutPrint+0xa6>
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	9f e8       	ldi	r25, 0x8F	; 143
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <WaitSendReadyWithoutPrint+0x92>
     db4:	00 c0       	rjmp	.+0      	; 0xdb6 <WaitSendReadyWithoutPrint+0x98>
     db6:	00 00       	nop
     db8:	c5 cf       	rjmp	.-118    	; 0xd44 <WaitSendReadyWithoutPrint+0x26>
			{
				okFlag = 1;
			}
			else if (msgBuff[i] == MSG_ERROR)
			{
				return -1;
     dba:	8f ef       	ldi	r24, 0xFF	; 255
     dbc:	9f ef       	ldi	r25, 0xFF	; 255
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <WaitSendReadyWithoutPrint+0xa6>
			}
		}
		if ( readyFlag && okFlag )
		{
			return 0;
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
			return -1;
		}
		
		_delay_ms(10);
	}
}
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	ff 90       	pop	r15
     dd6:	df 90       	pop	r13
     dd8:	cf 90       	pop	r12
     dda:	08 95       	ret

00000ddc <WaitSendOKWithoutPrint>:

int WaitSendOKWithoutPrint()
{
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	00 d0       	rcall	.+0      	; 0xde6 <WaitSendOKWithoutPrint+0xa>
     de6:	0f 92       	push	r0
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	05 e6       	ldi	r16, 0x65	; 101
     dee:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t msgBuff[4];
	uint8_t msgRxNum;
	int i;
	while(1)
	{
		msgRxNum = rxDataProcess(msgBuff,4);
     df0:	ce 01       	movw	r24, r28
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	64 e0       	ldi	r22, 0x04	; 4
     df6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <rxDataProcess>
		for(i = 0 ; i< msgRxNum ; i++)
     dfa:	88 23       	and	r24, r24
     dfc:	b9 f0       	breq	.+46     	; 0xe2c <WaitSendOKWithoutPrint+0x50>
		{
			if (msgBuff[i] == MSG_SEND_OK)
     dfe:	99 81       	ldd	r25, Y+1	; 0x01
     e00:	91 30       	cpi	r25, 0x01	; 1
     e02:	69 f1       	breq	.+90     	; 0xe5e <WaitSendOKWithoutPrint+0x82>
			return 0;
			else if (msgBuff[i] == MSG_ERROR)
     e04:	95 30       	cpi	r25, 0x05	; 5
     e06:	71 f1       	breq	.+92     	; 0xe64 <WaitSendOKWithoutPrint+0x88>
     e08:	fe 01       	movw	r30, r28
     e0a:	32 96       	adiw	r30, 0x02	; 2
		
		_delay_ms(10);
	}
}

int WaitSendOKWithoutPrint()
     e0c:	21 e0       	ldi	r18, 0x01	; 1
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	2c 0f       	add	r18, r28
     e12:	3d 1f       	adc	r19, r29
     e14:	28 0f       	add	r18, r24
     e16:	31 1d       	adc	r19, r1
     e18:	c9 01       	movw	r24, r18
     e1a:	05 c0       	rjmp	.+10     	; 0xe26 <WaitSendOKWithoutPrint+0x4a>
	while(1)
	{
		msgRxNum = rxDataProcess(msgBuff,4);
		for(i = 0 ; i< msgRxNum ; i++)
		{
			if (msgBuff[i] == MSG_SEND_OK)
     e1c:	21 91       	ld	r18, Z+
     e1e:	21 30       	cpi	r18, 0x01	; 1
     e20:	21 f1       	breq	.+72     	; 0xe6a <WaitSendOKWithoutPrint+0x8e>
			return 0;
			else if (msgBuff[i] == MSG_ERROR)
     e22:	25 30       	cpi	r18, 0x05	; 5
     e24:	29 f1       	breq	.+74     	; 0xe70 <WaitSendOKWithoutPrint+0x94>
	uint8_t msgRxNum;
	int i;
	while(1)
	{
		msgRxNum = rxDataProcess(msgBuff,4);
		for(i = 0 ; i< msgRxNum ; i++)
     e26:	e8 17       	cp	r30, r24
     e28:	f9 07       	cpc	r31, r25
     e2a:	c1 f7       	brne	.-16     	; 0xe1c <WaitSendOKWithoutPrint+0x40>
     e2c:	01 50       	subi	r16, 0x01	; 1
     e2e:	10 40       	sbci	r17, 0x00	; 0
			else if (msgBuff[i] == MSG_ERROR)
			return -1;
		}
		
		counter++;
		if (counter> 100)
     e30:	79 f4       	brne	.+30     	; 0xe50 <WaitSendOKWithoutPrint+0x74>
		{
			debugprint("WaitOKWithoutPrint counter err\r\n");
     e32:	0f 92       	push	r0
     e34:	0f 92       	push	r0
     e36:	8b e5       	ldi	r24, 0x5B	; 91
     e38:	92 e0       	ldi	r25, 0x02	; 2
     e3a:	ed b7       	in	r30, 0x3d	; 61
     e3c:	fe b7       	in	r31, 0x3e	; 62
     e3e:	92 83       	std	Z+2, r25	; 0x02
     e40:	81 83       	std	Z+1, r24	; 0x01
     e42:	0e 94 c0 01 	call	0x380	; 0x380 <debugprint>
			return -1;
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	9f ef       	ldi	r25, 0xFF	; 255
     e4e:	12 c0       	rjmp	.+36     	; 0xe74 <WaitSendOKWithoutPrint+0x98>
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	9f e8       	ldi	r25, 0x8F	; 143
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <WaitSendOKWithoutPrint+0x78>
     e58:	00 c0       	rjmp	.+0      	; 0xe5a <WaitSendOKWithoutPrint+0x7e>
     e5a:	00 00       	nop
     e5c:	c9 cf       	rjmp	.-110    	; 0xdf0 <WaitSendOKWithoutPrint+0x14>
	{
		msgRxNum = rxDataProcess(msgBuff,4);
		for(i = 0 ; i< msgRxNum ; i++)
		{
			if (msgBuff[i] == MSG_SEND_OK)
			return 0;
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	08 c0       	rjmp	.+16     	; 0xe74 <WaitSendOKWithoutPrint+0x98>
			else if (msgBuff[i] == MSG_ERROR)
			return -1;
     e64:	8f ef       	ldi	r24, 0xFF	; 255
     e66:	9f ef       	ldi	r25, 0xFF	; 255
     e68:	05 c0       	rjmp	.+10     	; 0xe74 <WaitSendOKWithoutPrint+0x98>
	{
		msgRxNum = rxDataProcess(msgBuff,4);
		for(i = 0 ; i< msgRxNum ; i++)
		{
			if (msgBuff[i] == MSG_SEND_OK)
			return 0;
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <WaitSendOKWithoutPrint+0x98>
			else if (msgBuff[i] == MSG_ERROR)
			return -1;
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	9f ef       	ldi	r25, 0xFF	; 255
			return -1;
		}
		_delay_ms(10);
		
	}
}
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	08 95       	ret

00000e86 <WaitOk>:

int WaitOk() //"\r\nOK\r\n"
{
     e86:	cf 92       	push	r12
     e88:	df 92       	push	r13
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	c0 50       	subi	r28, 0x00	; 0
     e9c:	d1 40       	sbci	r29, 0x01	; 1
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
	uint8_t strTemp[256];
	int currentIndex = 0;
	uint8_t firstCarrageReturnDetect = 0;
     ea8:	dd 24       	eor	r13, r13
}

int WaitOk() //"\r\nOK\r\n"
{
	uint8_t strTemp[256];
	int currentIndex = 0;
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(10);
		
	}
}

int WaitOk() //"\r\nOK\r\n"
     eae:	be 01       	movw	r22, r28
     eb0:	6f 5f       	subi	r22, 0xFF	; 255
     eb2:	7f 4f       	sbci	r23, 0xFF	; 255
     eb4:	ee 24       	eor	r14, r14
     eb6:	ff 24       	eor	r15, r15
	{
		if (g_wifiRxCurrentIndex)
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
			{
				strTemp[currentIndex++] = g_wifiRxData[i];
     eb8:	05 ea       	ldi	r16, 0xA5	; 165
     eba:	16 e0       	ldi	r17, 0x06	; 6
				if (g_wifiRxData[i] == 0x0A)
				{
					if ( !firstCarrageReturnDetect )
					{
						firstCarrageReturnDetect = 1;
     ebc:	cc 24       	eor	r12, r12
     ebe:	c3 94       	inc	r12
	uint8_t firstCarrageReturnDetect = 0;
	int i;
	
	while(1)
	{
		if (g_wifiRxCurrentIndex)
     ec0:	80 91 59 04 	lds	r24, 0x0459
     ec4:	88 23       	and	r24, r24
     ec6:	e1 f3       	breq	.-8      	; 0xec0 <WaitOk+0x3a>
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
     ec8:	80 91 59 04 	lds	r24, 0x0459
     ecc:	88 23       	and	r24, r24
     ece:	c1 f3       	breq	.-16     	; 0xec0 <WaitOk+0x3a>
		_delay_ms(10);
		
	}
}

int WaitOk() //"\r\nOK\r\n"
     ed0:	db 01       	movw	r26, r22
     ed2:	a4 0f       	add	r26, r20
     ed4:	b5 1f       	adc	r27, r21
     ed6:	97 01       	movw	r18, r14
	{
		if (g_wifiRxCurrentIndex)
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
			{
				strTemp[currentIndex++] = g_wifiRxData[i];
     ed8:	f8 01       	movw	r30, r16
     eda:	e2 0f       	add	r30, r18
     edc:	f3 1f       	adc	r31, r19
     ede:	80 81       	ld	r24, Z
     ee0:	8d 93       	st	X+, r24
				if (g_wifiRxData[i] == 0x0A)
     ee2:	80 81       	ld	r24, Z
     ee4:	8a 30       	cpi	r24, 0x0A	; 10
     ee6:	39 f5       	brne	.+78     	; 0xf36 <WaitOk+0xb0>
				{
					if ( !firstCarrageReturnDetect )
     ee8:	dd 20       	and	r13, r13
     eea:	21 f1       	breq	.+72     	; 0xf34 <WaitOk+0xae>
						firstCarrageReturnDetect = 1;
					}
					else
					{
						// check end  "OK\r\n"
						if (!strncmp(strTemp+2,"OK",2))
     eec:	ce 01       	movw	r24, r28
     eee:	03 96       	adiw	r24, 0x03	; 3
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	72 e0       	ldi	r23, 0x02	; 2
     ef4:	42 e0       	ldi	r20, 0x02	; 2
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	0e 94 a8 13 	call	0x2750	; 0x2750 <strncmp>
     efc:	28 2f       	mov	r18, r24
     efe:	39 2f       	mov	r19, r25
     f00:	21 15       	cp	r18, r1
     f02:	31 05       	cpc	r19, r1
     f04:	29 f4       	brne	.+10     	; 0xf10 <WaitOk+0x8a>
						{
							g_wifiRxCurrentIndex = 0;
     f06:	10 92 59 04 	sts	0x0459, r1
							return 0;
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	22 c0       	rjmp	.+68     	; 0xf54 <WaitOk+0xce>
						}
						else if (!strncmp(strTemp+2,"ERROR",5)  )
     f10:	ce 01       	movw	r24, r28
     f12:	03 96       	adiw	r24, 0x03	; 3
     f14:	61 e1       	ldi	r22, 0x11	; 17
     f16:	72 e0       	ldi	r23, 0x02	; 2
     f18:	45 e0       	ldi	r20, 0x05	; 5
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	0e 94 a8 13 	call	0x2750	; 0x2750 <strncmp>
     f20:	28 2f       	mov	r18, r24
     f22:	39 2f       	mov	r19, r25
     f24:	21 15       	cp	r18, r1
     f26:	31 05       	cpc	r19, r1
     f28:	99 f4       	brne	.+38     	; 0xf50 <WaitOk+0xca>
						{
							g_wifiRxCurrentIndex = 0;
     f2a:	10 92 59 04 	sts	0x0459, r1
							return -1;
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	9f ef       	ldi	r25, 0xFF	; 255
     f32:	10 c0       	rjmp	.+32     	; 0xf54 <WaitOk+0xce>
				strTemp[currentIndex++] = g_wifiRxData[i];
				if (g_wifiRxData[i] == 0x0A)
				{
					if ( !firstCarrageReturnDetect )
					{
						firstCarrageReturnDetect = 1;
     f34:	dc 2c       	mov	r13, r12
		_delay_ms(10);
		
	}
}

int WaitOk() //"\r\nOK\r\n"
     f36:	ad 01       	movw	r20, r26
     f38:	46 1b       	sub	r20, r22
     f3a:	57 0b       	sbc	r21, r23
	
	while(1)
	{
		if (g_wifiRxCurrentIndex)
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
     f3c:	2f 5f       	subi	r18, 0xFF	; 255
     f3e:	3f 4f       	sbci	r19, 0xFF	; 255
     f40:	80 91 59 04 	lds	r24, 0x0459
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	28 17       	cp	r18, r24
     f48:	39 07       	cpc	r19, r25
     f4a:	0c f0       	brlt	.+2      	; 0xf4e <WaitOk+0xc8>
     f4c:	b9 cf       	rjmp	.-142    	; 0xec0 <WaitOk+0x3a>
     f4e:	c4 cf       	rjmp	.-120    	; 0xed8 <WaitOk+0x52>
						else if (!strncmp(strTemp+2,"ERROR",5)  )
						{
							g_wifiRxCurrentIndex = 0;
							return -1;
						}
						return -1;
     f50:	8f ef       	ldi	r24, 0xFF	; 255
     f52:	9f ef       	ldi	r25, 0xFF	; 255
				}
			}
		}
	}
	return -1;
}
     f54:	c0 50       	subi	r28, 0x00	; 0
     f56:	df 4f       	sbci	r29, 0xFF	; 255
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	ff 90       	pop	r15
     f6c:	ef 90       	pop	r14
     f6e:	df 90       	pop	r13
     f70:	cf 90       	pop	r12
     f72:	08 95       	ret

00000f74 <wifiDisplayAPlist>:

int wifiDisplayAPlist()
{
	wifiprint("AT+CWLAP\r\n");
     f74:	0f 92       	push	r0
     f76:	0f 92       	push	r0
     f78:	8c e7       	ldi	r24, 0x7C	; 124
     f7a:	92 e0       	ldi	r25, 0x02	; 2
     f7c:	ad b7       	in	r26, 0x3d	; 61
     f7e:	be b7       	in	r27, 0x3e	; 62
     f80:	12 96       	adiw	r26, 0x02	; 2
     f82:	9c 93       	st	X, r25
     f84:	8e 93       	st	-X, r24
     f86:	11 97       	sbiw	r26, 0x01	; 1
     f88:	0e 94 89 02 	call	0x512	; 0x512 <wifiprint>
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	9f ef       	ldi	r25, 0xFF	; 255
     f90:	a9 e5       	ldi	r26, 0x59	; 89
     f92:	81 50       	subi	r24, 0x01	; 1
     f94:	90 40       	sbci	r25, 0x00	; 0
     f96:	a0 40       	sbci	r26, 0x00	; 0
     f98:	e1 f7       	brne	.-8      	; 0xf92 <wifiDisplayAPlist+0x1e>
     f9a:	00 c0       	rjmp	.+0      	; 0xf9c <wifiDisplayAPlist+0x28>
     f9c:	00 00       	nop
	_delay_ms(2000);
	return WaitOKWithPrint();
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0e 94 8b 05 	call	0xb16	; 0xb16 <WaitOKWithPrint>
}
     fa6:	08 95       	ret

00000fa8 <wifiConnectAP>:

uint8_t wifiConnectAP(char* ssid, char* pwd)
{
	wifiprint("AT+CWJAP_DEF=\"%s\",\"%s\"\r\n",ssid,pwd);
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <wifiConnectAP+0x2>
     faa:	00 d0       	rcall	.+0      	; 0xfac <wifiConnectAP+0x4>
     fac:	ed b7       	in	r30, 0x3d	; 61
     fae:	fe b7       	in	r31, 0x3e	; 62
     fb0:	31 96       	adiw	r30, 0x01	; 1
     fb2:	27 e8       	ldi	r18, 0x87	; 135
     fb4:	32 e0       	ldi	r19, 0x02	; 2
     fb6:	ad b7       	in	r26, 0x3d	; 61
     fb8:	be b7       	in	r27, 0x3e	; 62
     fba:	12 96       	adiw	r26, 0x02	; 2
     fbc:	3c 93       	st	X, r19
     fbe:	2e 93       	st	-X, r18
     fc0:	11 97       	sbiw	r26, 0x01	; 1
     fc2:	93 83       	std	Z+3, r25	; 0x03
     fc4:	82 83       	std	Z+2, r24	; 0x02
     fc6:	75 83       	std	Z+5, r23	; 0x05
     fc8:	64 83       	std	Z+4, r22	; 0x04
     fca:	0e 94 89 02 	call	0x512	; 0x512 <wifiprint>
	
	return WaitOKWithPrint();
     fce:	8d b7       	in	r24, 0x3d	; 61
     fd0:	9e b7       	in	r25, 0x3e	; 62
     fd2:	06 96       	adiw	r24, 0x06	; 6
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	9e bf       	out	0x3e, r25	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	8d bf       	out	0x3d, r24	; 61
     fde:	0e 94 8b 05 	call	0xb16	; 0xb16 <WaitOKWithPrint>
}
     fe2:	08 95       	ret

00000fe4 <wifiModeSet>:


uint8_t wifiModeSet()
{
	wifiprint("AT+CWMODE=3\r\n");
     fe4:	0f 92       	push	r0
     fe6:	0f 92       	push	r0
     fe8:	80 ea       	ldi	r24, 0xA0	; 160
     fea:	92 e0       	ldi	r25, 0x02	; 2
     fec:	ed b7       	in	r30, 0x3d	; 61
     fee:	fe b7       	in	r31, 0x3e	; 62
     ff0:	92 83       	std	Z+2, r25	; 0x02
     ff2:	81 83       	std	Z+1, r24	; 0x01
     ff4:	0e 94 89 02 	call	0x512	; 0x512 <wifiprint>
	return WaitOKWithPrint();
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0e 94 8b 05 	call	0xb16	; 0xb16 <WaitOKWithPrint>

}
    1000:	08 95       	ret

00001002 <wifiDisplayLocalIP>:

uint8_t wifiDisplayLocalIP()
{
	wifiprint("AT+CIPSTA_CUR?\r\n");
    1002:	0f 92       	push	r0
    1004:	0f 92       	push	r0
    1006:	8e ea       	ldi	r24, 0xAE	; 174
    1008:	92 e0       	ldi	r25, 0x02	; 2
    100a:	ed b7       	in	r30, 0x3d	; 61
    100c:	fe b7       	in	r31, 0x3e	; 62
    100e:	92 83       	std	Z+2, r25	; 0x02
    1010:	81 83       	std	Z+1, r24	; 0x01
    1012:	0e 94 89 02 	call	0x512	; 0x512 <wifiprint>
	return WaitOKWithPrint();
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0e 94 8b 05 	call	0xb16	; 0xb16 <WaitOKWithPrint>
}
    101e:	08 95       	ret

00001020 <wifiEnableDHCP>:

uint8_t wifiEnableDHCP()
{
	wifiprint("AT+CWDHCP_CUR=1,1\r\n");
    1020:	0f 92       	push	r0
    1022:	0f 92       	push	r0
    1024:	8f eb       	ldi	r24, 0xBF	; 191
    1026:	92 e0       	ldi	r25, 0x02	; 2
    1028:	ed b7       	in	r30, 0x3d	; 61
    102a:	fe b7       	in	r31, 0x3e	; 62
    102c:	92 83       	std	Z+2, r25	; 0x02
    102e:	81 83       	std	Z+1, r24	; 0x01
    1030:	0e 94 89 02 	call	0x512	; 0x512 <wifiprint>
	return WaitOKWithPrint();
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0e 94 8b 05 	call	0xb16	; 0xb16 <WaitOKWithPrint>

}
    103c:	08 95       	ret

0000103e <wifiConnectTCPServer>:


uint8_t wifiConnectTCPServer(char* remoteIP,uint32_t remotePort)
{
	wifiprint("AT+CIPSTART=\"TCP\",\"%s\",%u\r\n",remoteIP, remotePort);
    103e:	2d b7       	in	r18, 0x3d	; 61
    1040:	3e b7       	in	r19, 0x3e	; 62
    1042:	28 50       	subi	r18, 0x08	; 8
    1044:	30 40       	sbci	r19, 0x00	; 0
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	3e bf       	out	0x3e, r19	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	2d bf       	out	0x3d, r18	; 61
    1050:	ed b7       	in	r30, 0x3d	; 61
    1052:	fe b7       	in	r31, 0x3e	; 62
    1054:	31 96       	adiw	r30, 0x01	; 1
    1056:	23 ed       	ldi	r18, 0xD3	; 211
    1058:	32 e0       	ldi	r19, 0x02	; 2
    105a:	ad b7       	in	r26, 0x3d	; 61
    105c:	be b7       	in	r27, 0x3e	; 62
    105e:	12 96       	adiw	r26, 0x02	; 2
    1060:	3c 93       	st	X, r19
    1062:	2e 93       	st	-X, r18
    1064:	11 97       	sbiw	r26, 0x01	; 1
    1066:	93 83       	std	Z+3, r25	; 0x03
    1068:	82 83       	std	Z+2, r24	; 0x02
    106a:	44 83       	std	Z+4, r20	; 0x04
    106c:	55 83       	std	Z+5, r21	; 0x05
    106e:	66 83       	std	Z+6, r22	; 0x06
    1070:	77 83       	std	Z+7, r23	; 0x07
    1072:	0e 94 89 02 	call	0x512	; 0x512 <wifiprint>
	
	return WaitOKWithPrint();
    1076:	2d b7       	in	r18, 0x3d	; 61
    1078:	3e b7       	in	r19, 0x3e	; 62
    107a:	28 5f       	subi	r18, 0xF8	; 248
    107c:	3f 4f       	sbci	r19, 0xFF	; 255
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	3e bf       	out	0x3e, r19	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	2d bf       	out	0x3d, r18	; 61
    1088:	0e 94 8b 05 	call	0xb16	; 0xb16 <WaitOKWithPrint>
}
    108c:	08 95       	ret

0000108e <wifiSetEventCallback>:


uint8_t wifiSetEventCallback(void* func)
{
	callbackFnc = func;
    108e:	90 93 a6 0a 	sts	0x0AA6, r25
    1092:	80 93 a5 0a 	sts	0x0AA5, r24
	return 0;
}
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	08 95       	ret

0000109a <wifiSendData>:

int wifiSendData(uint8_t* buff, int dataSize)
{
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	08 2f       	mov	r16, r24
    10a8:	19 2f       	mov	r17, r25
    10aa:	eb 01       	movw	r28, r22
	if (0 )
	{
		debugprint("wifiSendData err. rx processing ,g_wifiRxCurrentIndex:%d\r\n",g_wifiRxCurrentIndex);
		return -1;
	}
	wifiprint("AT+CIPSEND=%d\r\n",dataSize);
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <wifiSendData+0x14>
    10ae:	0f 92       	push	r0
    10b0:	8f ee       	ldi	r24, 0xEF	; 239
    10b2:	92 e0       	ldi	r25, 0x02	; 2
    10b4:	ad b7       	in	r26, 0x3d	; 61
    10b6:	be b7       	in	r27, 0x3e	; 62
    10b8:	12 96       	adiw	r26, 0x02	; 2
    10ba:	9c 93       	st	X, r25
    10bc:	8e 93       	st	-X, r24
    10be:	11 97       	sbiw	r26, 0x01	; 1
    10c0:	14 96       	adiw	r26, 0x04	; 4
    10c2:	7c 93       	st	X, r23
    10c4:	6e 93       	st	-X, r22
    10c6:	13 97       	sbiw	r26, 0x03	; 3
    10c8:	0e 94 89 02 	call	0x512	; 0x512 <wifiprint>
	if ( WaitSendReadyWithoutPrint() < 0 )
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0e 94 8f 06 	call	0xd1e	; 0xd1e <WaitSendReadyWithoutPrint>
    10d8:	99 23       	and	r25, r25
    10da:	2c f0       	brlt	.+10     	; 0x10e6 <wifiSendData+0x4c>
		}
		#endif
		return -1;
	}
	
	for(int i = 0; i < dataSize ; i++ )
    10dc:	1c 16       	cp	r1, r28
    10de:	1d 06       	cpc	r1, r29
    10e0:	0c f4       	brge	.+2      	; 0x10e4 <wifiSendData+0x4a>
    10e2:	4a c0       	rjmp	.+148    	; 0x1178 <wifiSendData+0xde>
    10e4:	57 c0       	rjmp	.+174    	; 0x1194 <wifiSendData+0xfa>
		return -1;
	}
	wifiprint("AT+CIPSEND=%d\r\n",dataSize);
	if ( WaitSendReadyWithoutPrint() < 0 )
	{
		debugprint("wifiSendData wait err -0");
    10e6:	0f 92       	push	r0
    10e8:	0f 92       	push	r0
    10ea:	8f ef       	ldi	r24, 0xFF	; 255
    10ec:	92 e0       	ldi	r25, 0x02	; 2
    10ee:	ed b7       	in	r30, 0x3d	; 61
    10f0:	fe b7       	in	r31, 0x3e	; 62
    10f2:	92 83       	std	Z+2, r25	; 0x02
    10f4:	81 83       	std	Z+1, r24	; 0x01
    10f6:	0e 94 c0 01 	call	0x380	; 0x380 <debugprint>
		#if 1 // test
		debugprint("&:");
    10fa:	88 e1       	ldi	r24, 0x18	; 24
    10fc:	93 e0       	ldi	r25, 0x03	; 3
    10fe:	ad b7       	in	r26, 0x3d	; 61
    1100:	be b7       	in	r27, 0x3e	; 62
    1102:	12 96       	adiw	r26, 0x02	; 2
    1104:	9c 93       	st	X, r25
    1106:	8e 93       	st	-X, r24
    1108:	11 97       	sbiw	r26, 0x01	; 1
    110a:	0e 94 c0 01 	call	0x380	; 0x380 <debugprint>
		for(int i = 0; i <g_rxDataLen;i++)
    110e:	80 91 54 04 	lds	r24, 0x0454
    1112:	90 91 55 04 	lds	r25, 0x0455
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	18 16       	cp	r1, r24
    111c:	19 06       	cpc	r1, r25
    111e:	ec f5       	brge	.+122    	; 0x119a <wifiSendData+0x100>
    1120:	c0 e0       	ldi	r28, 0x00	; 0
    1122:	d0 e0       	ldi	r29, 0x00	; 0
		{
			//putCh2(g_wifiRxData[i]);
			debugprint("[%02X]",g_rxDataBuff[i]);
    1124:	05 ea       	ldi	r16, 0xA5	; 165
    1126:	18 e0       	ldi	r17, 0x08	; 8
    1128:	0f 2e       	mov	r0, r31
    112a:	fb e1       	ldi	r31, 0x1B	; 27
    112c:	ef 2e       	mov	r14, r31
    112e:	f3 e0       	ldi	r31, 0x03	; 3
    1130:	ff 2e       	mov	r15, r31
    1132:	f0 2d       	mov	r31, r0
    1134:	f8 01       	movw	r30, r16
    1136:	ec 0f       	add	r30, r28
    1138:	fd 1f       	adc	r31, r29
    113a:	80 81       	ld	r24, Z
    113c:	00 d0       	rcall	.+0      	; 0x113e <wifiSendData+0xa4>
    113e:	0f 92       	push	r0
    1140:	ed b7       	in	r30, 0x3d	; 61
    1142:	fe b7       	in	r31, 0x3e	; 62
    1144:	31 96       	adiw	r30, 0x01	; 1
    1146:	ad b7       	in	r26, 0x3d	; 61
    1148:	be b7       	in	r27, 0x3e	; 62
    114a:	12 96       	adiw	r26, 0x02	; 2
    114c:	fc 92       	st	X, r15
    114e:	ee 92       	st	-X, r14
    1150:	11 97       	sbiw	r26, 0x01	; 1
    1152:	82 83       	std	Z+2, r24	; 0x02
    1154:	13 82       	std	Z+3, r1	; 0x03
    1156:	0e 94 c0 01 	call	0x380	; 0x380 <debugprint>
	if ( WaitSendReadyWithoutPrint() < 0 )
	{
		debugprint("wifiSendData wait err -0");
		#if 1 // test
		debugprint("&:");
		for(int i = 0; i <g_rxDataLen;i++)
    115a:	21 96       	adiw	r28, 0x01	; 1
    115c:	80 91 54 04 	lds	r24, 0x0454
    1160:	90 91 55 04 	lds	r25, 0x0455
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	c8 17       	cp	r28, r24
    116e:	d9 07       	cpc	r29, r25
    1170:	0c f3       	brlt	.-62     	; 0x1134 <wifiSendData+0x9a>
		{
			//putCh2(g_wifiRxData[i]);
			debugprint("[%02X]",g_rxDataBuff[i]);
		}
		#endif
		return -1;
    1172:	8f ef       	ldi	r24, 0xFF	; 255
    1174:	9f ef       	ldi	r25, 0xFF	; 255
    1176:	13 c0       	rjmp	.+38     	; 0x119e <wifiSendData+0x104>
	if ( WaitSendReadyWithoutPrint() < 0 )
	{
		debugprint("wifiSendData wait err -0");
		#if 1 // test
		debugprint("&:");
		for(int i = 0; i <g_rxDataLen;i++)
    1178:	e0 2e       	mov	r14, r16
    117a:	f1 2e       	mov	r15, r17
		}
		#endif
		return -1;
	}
	
	for(int i = 0; i < dataSize ; i++ )
    117c:	00 e0       	ldi	r16, 0x00	; 0
    117e:	10 e0       	ldi	r17, 0x00	; 0
	{
		
		putCh0(buff[i]);
    1180:	f7 01       	movw	r30, r14
    1182:	81 91       	ld	r24, Z+
    1184:	7f 01       	movw	r14, r30
    1186:	0e 94 05 02 	call	0x40a	; 0x40a <putCh0>
		}
		#endif
		return -1;
	}
	
	for(int i = 0; i < dataSize ; i++ )
    118a:	0f 5f       	subi	r16, 0xFF	; 255
    118c:	1f 4f       	sbci	r17, 0xFF	; 255
    118e:	0c 17       	cp	r16, r28
    1190:	1d 07       	cpc	r17, r29
    1192:	b1 f7       	brne	.-20     	; 0x1180 <wifiSendData+0xe6>
	{
		
		putCh0(buff[i]);
	}
	
	return WaitSendOKWithoutPrint();
    1194:	0e 94 ee 06 	call	0xddc	; 0xddc <WaitSendOKWithoutPrint>
    1198:	02 c0       	rjmp	.+4      	; 0x119e <wifiSendData+0x104>
		{
			//putCh2(g_wifiRxData[i]);
			debugprint("[%02X]",g_rxDataBuff[i]);
		}
		#endif
		return -1;
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	9f ef       	ldi	r25, 0xFF	; 255
		putCh0(buff[i]);
	}
	
	return WaitSendOKWithoutPrint();
	
}
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	08 95       	ret

000011ac <wificlearUartBuff>:

void wificlearUartBuff()
{
	g_wifiRxCurrentIndex = 0;
    11ac:	10 92 59 04 	sts	0x0459, r1
	g_rxDataLen = 0;
    11b0:	10 92 55 04 	sts	0x0455, r1
    11b4:	10 92 54 04 	sts	0x0454, r1
}
    11b8:	08 95       	ret

000011ba <wifiAutoConnectDisable>:

void wifiAutoConnectDisable()
{
	wifiprint("AT+CWAUTOCONN=0\r\n");
    11ba:	0f 92       	push	r0
    11bc:	0f 92       	push	r0
    11be:	82 e2       	ldi	r24, 0x22	; 34
    11c0:	93 e0       	ldi	r25, 0x03	; 3
    11c2:	ad b7       	in	r26, 0x3d	; 61
    11c4:	be b7       	in	r27, 0x3e	; 62
    11c6:	12 96       	adiw	r26, 0x02	; 2
    11c8:	9c 93       	st	X, r25
    11ca:	8e 93       	st	-X, r24
    11cc:	11 97       	sbiw	r26, 0x01	; 1
    11ce:	0e 94 89 02 	call	0x512	; 0x512 <wifiprint>
    11d2:	8f ef       	ldi	r24, 0xFF	; 255
    11d4:	9f e3       	ldi	r25, 0x3F	; 63
    11d6:	a2 e0       	ldi	r26, 0x02	; 2
    11d8:	81 50       	subi	r24, 0x01	; 1
    11da:	90 40       	sbci	r25, 0x00	; 0
    11dc:	a0 40       	sbci	r26, 0x00	; 0
    11de:	e1 f7       	brne	.-8      	; 0x11d8 <wifiAutoConnectDisable+0x1e>
    11e0:	00 c0       	rjmp	.+0      	; 0x11e2 <wifiAutoConnectDisable+0x28>
    11e2:	00 00       	nop

	_delay_ms(50);
	WaitOk();
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0e 94 43 07 	call	0xe86	; 0xe86 <WaitOk>
}
    11ec:	08 95       	ret

000011ee <wifiEchoDisable>:

void wifiEchoDisable()
{
	wifiprint("ATE0\r\n");
    11ee:	0f 92       	push	r0
    11f0:	0f 92       	push	r0
    11f2:	84 e3       	ldi	r24, 0x34	; 52
    11f4:	93 e0       	ldi	r25, 0x03	; 3
    11f6:	ad b7       	in	r26, 0x3d	; 61
    11f8:	be b7       	in	r27, 0x3e	; 62
    11fa:	12 96       	adiw	r26, 0x02	; 2
    11fc:	9c 93       	st	X, r25
    11fe:	8e 93       	st	-X, r24
    1200:	11 97       	sbiw	r26, 0x01	; 1
    1202:	0e 94 89 02 	call	0x512	; 0x512 <wifiprint>
    1206:	8f ef       	ldi	r24, 0xFF	; 255
    1208:	9f e7       	ldi	r25, 0x7F	; 127
    120a:	a4 e0       	ldi	r26, 0x04	; 4
    120c:	81 50       	subi	r24, 0x01	; 1
    120e:	90 40       	sbci	r25, 0x00	; 0
    1210:	a0 40       	sbci	r26, 0x00	; 0
    1212:	e1 f7       	brne	.-8      	; 0x120c <wifiEchoDisable+0x1e>
    1214:	00 c0       	rjmp	.+0      	; 0x1216 <wifiEchoDisable+0x28>
    1216:	00 00       	nop
	_delay_ms(100);
	
	wificlearUartBuff();
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <wificlearUartBuff>
	
}
    1220:	08 95       	ret

00001222 <pinMode>:
//	G (PORTG), H (PORTH), J (PORTJ), K (PORTK), L (PORTL),
// pin  = 0~7
// mode = 0(Input), 1(OutPut)
void pinMode(uint8_t port,uint8_t pin,uint8_t mode)
{
	if(port == A) {
    1222:	88 23       	and	r24, r24
    1224:	e9 f4       	brne	.+58     	; 0x1260 <pinMode+0x3e>
		if(mode) {
    1226:	44 23       	and	r20, r20
    1228:	69 f0       	breq	.+26     	; 0x1244 <pinMode+0x22>
			sbit(DDRA,pin);	
    122a:	21 b1       	in	r18, 0x01	; 1
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	ac 01       	movw	r20, r24
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <pinMode+0x16>
    1234:	44 0f       	add	r20, r20
    1236:	55 1f       	adc	r21, r21
    1238:	6a 95       	dec	r22
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <pinMode+0x12>
    123c:	ba 01       	movw	r22, r20
    123e:	62 2b       	or	r22, r18
    1240:	61 b9       	out	0x01, r22	; 1
    1242:	08 95       	ret
		}
		else {
			cbit(DDRA,pin);
    1244:	21 b1       	in	r18, 0x01	; 1
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	ac 01       	movw	r20, r24
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <pinMode+0x30>
    124e:	44 0f       	add	r20, r20
    1250:	55 1f       	adc	r21, r21
    1252:	6a 95       	dec	r22
    1254:	e2 f7       	brpl	.-8      	; 0x124e <pinMode+0x2c>
    1256:	ba 01       	movw	r22, r20
    1258:	60 95       	com	r22
    125a:	62 23       	and	r22, r18
    125c:	61 b9       	out	0x01, r22	; 1
    125e:	08 95       	ret
		}	
	}
	else if(port == B) {
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	e9 f4       	brne	.+58     	; 0x129e <pinMode+0x7c>
		if(mode) {
    1264:	44 23       	and	r20, r20
    1266:	69 f0       	breq	.+26     	; 0x1282 <pinMode+0x60>
			sbit(DDRB,pin);	
    1268:	24 b1       	in	r18, 0x04	; 4
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	ac 01       	movw	r20, r24
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <pinMode+0x54>
    1272:	44 0f       	add	r20, r20
    1274:	55 1f       	adc	r21, r21
    1276:	6a 95       	dec	r22
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <pinMode+0x50>
    127a:	ba 01       	movw	r22, r20
    127c:	62 2b       	or	r22, r18
    127e:	64 b9       	out	0x04, r22	; 4
    1280:	08 95       	ret
		}
		else {
			cbit(DDRB,pin);
    1282:	24 b1       	in	r18, 0x04	; 4
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	ac 01       	movw	r20, r24
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <pinMode+0x6e>
    128c:	44 0f       	add	r20, r20
    128e:	55 1f       	adc	r21, r21
    1290:	6a 95       	dec	r22
    1292:	e2 f7       	brpl	.-8      	; 0x128c <pinMode+0x6a>
    1294:	ba 01       	movw	r22, r20
    1296:	60 95       	com	r22
    1298:	62 23       	and	r22, r18
    129a:	64 b9       	out	0x04, r22	; 4
    129c:	08 95       	ret
		}	
	}
	else if(port == C) {
    129e:	82 30       	cpi	r24, 0x02	; 2
    12a0:	e9 f4       	brne	.+58     	; 0x12dc <pinMode+0xba>
		if(mode) {
    12a2:	44 23       	and	r20, r20
    12a4:	69 f0       	breq	.+26     	; 0x12c0 <pinMode+0x9e>
			sbit(DDRC,pin);	
    12a6:	27 b1       	in	r18, 0x07	; 7
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	ac 01       	movw	r20, r24
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <pinMode+0x92>
    12b0:	44 0f       	add	r20, r20
    12b2:	55 1f       	adc	r21, r21
    12b4:	6a 95       	dec	r22
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <pinMode+0x8e>
    12b8:	ba 01       	movw	r22, r20
    12ba:	62 2b       	or	r22, r18
    12bc:	67 b9       	out	0x07, r22	; 7
    12be:	08 95       	ret
		}
		else {
			cbit(DDRC,pin);
    12c0:	27 b1       	in	r18, 0x07	; 7
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	ac 01       	movw	r20, r24
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <pinMode+0xac>
    12ca:	44 0f       	add	r20, r20
    12cc:	55 1f       	adc	r21, r21
    12ce:	6a 95       	dec	r22
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <pinMode+0xa8>
    12d2:	ba 01       	movw	r22, r20
    12d4:	60 95       	com	r22
    12d6:	62 23       	and	r22, r18
    12d8:	67 b9       	out	0x07, r22	; 7
    12da:	08 95       	ret
		}
	}	
	else if(port == D) {
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	e9 f4       	brne	.+58     	; 0x131a <pinMode+0xf8>
		if(mode) {
    12e0:	44 23       	and	r20, r20
    12e2:	69 f0       	breq	.+26     	; 0x12fe <pinMode+0xdc>
			sbit(DDRD,pin);	
    12e4:	2a b1       	in	r18, 0x0a	; 10
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	ac 01       	movw	r20, r24
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <pinMode+0xd0>
    12ee:	44 0f       	add	r20, r20
    12f0:	55 1f       	adc	r21, r21
    12f2:	6a 95       	dec	r22
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <pinMode+0xcc>
    12f6:	ba 01       	movw	r22, r20
    12f8:	62 2b       	or	r22, r18
    12fa:	6a b9       	out	0x0a, r22	; 10
    12fc:	08 95       	ret
		}
		else {
			cbit(DDRD,pin);
    12fe:	2a b1       	in	r18, 0x0a	; 10
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	ac 01       	movw	r20, r24
    1306:	02 c0       	rjmp	.+4      	; 0x130c <pinMode+0xea>
    1308:	44 0f       	add	r20, r20
    130a:	55 1f       	adc	r21, r21
    130c:	6a 95       	dec	r22
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <pinMode+0xe6>
    1310:	ba 01       	movw	r22, r20
    1312:	60 95       	com	r22
    1314:	62 23       	and	r22, r18
    1316:	6a b9       	out	0x0a, r22	; 10
    1318:	08 95       	ret
		}
	}
	else if(port == E) {
    131a:	84 30       	cpi	r24, 0x04	; 4
    131c:	e9 f4       	brne	.+58     	; 0x1358 <pinMode+0x136>
		if(mode) {
    131e:	44 23       	and	r20, r20
    1320:	69 f0       	breq	.+26     	; 0x133c <pinMode+0x11a>
			sbit(DDRE,pin);	
    1322:	2d b1       	in	r18, 0x0d	; 13
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	ac 01       	movw	r20, r24
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <pinMode+0x10e>
    132c:	44 0f       	add	r20, r20
    132e:	55 1f       	adc	r21, r21
    1330:	6a 95       	dec	r22
    1332:	e2 f7       	brpl	.-8      	; 0x132c <pinMode+0x10a>
    1334:	ba 01       	movw	r22, r20
    1336:	62 2b       	or	r22, r18
    1338:	6d b9       	out	0x0d, r22	; 13
    133a:	08 95       	ret
		}
		else {
			cbit(DDRE,pin);
    133c:	2d b1       	in	r18, 0x0d	; 13
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	ac 01       	movw	r20, r24
    1344:	02 c0       	rjmp	.+4      	; 0x134a <pinMode+0x128>
    1346:	44 0f       	add	r20, r20
    1348:	55 1f       	adc	r21, r21
    134a:	6a 95       	dec	r22
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <pinMode+0x124>
    134e:	ba 01       	movw	r22, r20
    1350:	60 95       	com	r22
    1352:	62 23       	and	r22, r18
    1354:	6d b9       	out	0x0d, r22	; 13
    1356:	08 95       	ret
		}
	}
	else if(port == F) {
    1358:	85 30       	cpi	r24, 0x05	; 5
    135a:	e9 f4       	brne	.+58     	; 0x1396 <pinMode+0x174>
		if(mode) {
    135c:	44 23       	and	r20, r20
    135e:	69 f0       	breq	.+26     	; 0x137a <pinMode+0x158>
			sbit(DDRF,pin);	
    1360:	20 b3       	in	r18, 0x10	; 16
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	ac 01       	movw	r20, r24
    1368:	02 c0       	rjmp	.+4      	; 0x136e <pinMode+0x14c>
    136a:	44 0f       	add	r20, r20
    136c:	55 1f       	adc	r21, r21
    136e:	6a 95       	dec	r22
    1370:	e2 f7       	brpl	.-8      	; 0x136a <pinMode+0x148>
    1372:	ba 01       	movw	r22, r20
    1374:	62 2b       	or	r22, r18
    1376:	60 bb       	out	0x10, r22	; 16
    1378:	08 95       	ret
		}
		else {
			cbit(DDRF,pin);
    137a:	20 b3       	in	r18, 0x10	; 16
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	ac 01       	movw	r20, r24
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <pinMode+0x166>
    1384:	44 0f       	add	r20, r20
    1386:	55 1f       	adc	r21, r21
    1388:	6a 95       	dec	r22
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <pinMode+0x162>
    138c:	ba 01       	movw	r22, r20
    138e:	60 95       	com	r22
    1390:	62 23       	and	r22, r18
    1392:	60 bb       	out	0x10, r22	; 16
    1394:	08 95       	ret
		}
	}
	else if(port == G) {
    1396:	86 30       	cpi	r24, 0x06	; 6
    1398:	e9 f4       	brne	.+58     	; 0x13d4 <pinMode+0x1b2>
		if(mode) {
    139a:	44 23       	and	r20, r20
    139c:	69 f0       	breq	.+26     	; 0x13b8 <pinMode+0x196>
			sbit(DDRG,pin);	
    139e:	23 b3       	in	r18, 0x13	; 19
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	ac 01       	movw	r20, r24
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <pinMode+0x18a>
    13a8:	44 0f       	add	r20, r20
    13aa:	55 1f       	adc	r21, r21
    13ac:	6a 95       	dec	r22
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <pinMode+0x186>
    13b0:	ba 01       	movw	r22, r20
    13b2:	62 2b       	or	r22, r18
    13b4:	63 bb       	out	0x13, r22	; 19
    13b6:	08 95       	ret
		}
		else {
			cbit(DDRG,pin);
    13b8:	23 b3       	in	r18, 0x13	; 19
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	ac 01       	movw	r20, r24
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <pinMode+0x1a4>
    13c2:	44 0f       	add	r20, r20
    13c4:	55 1f       	adc	r21, r21
    13c6:	6a 95       	dec	r22
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <pinMode+0x1a0>
    13ca:	ba 01       	movw	r22, r20
    13cc:	60 95       	com	r22
    13ce:	62 23       	and	r22, r18
    13d0:	63 bb       	out	0x13, r22	; 19
    13d2:	08 95       	ret
		}
	}
	else if(port == H) {
    13d4:	87 30       	cpi	r24, 0x07	; 7
    13d6:	09 f5       	brne	.+66     	; 0x141a <pinMode+0x1f8>
		if(mode) {
    13d8:	44 23       	and	r20, r20
    13da:	79 f0       	breq	.+30     	; 0x13fa <pinMode+0x1d8>
			sbit(DDRH,pin);	
    13dc:	e1 e0       	ldi	r30, 0x01	; 1
    13de:	f1 e0       	ldi	r31, 0x01	; 1
    13e0:	20 81       	ld	r18, Z
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	ac 01       	movw	r20, r24
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <pinMode+0x1cc>
    13ea:	44 0f       	add	r20, r20
    13ec:	55 1f       	adc	r21, r21
    13ee:	6a 95       	dec	r22
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <pinMode+0x1c8>
    13f2:	ba 01       	movw	r22, r20
    13f4:	62 2b       	or	r22, r18
    13f6:	60 83       	st	Z, r22
    13f8:	08 95       	ret
		}
		else {
			cbit(DDRH,pin);
    13fa:	e1 e0       	ldi	r30, 0x01	; 1
    13fc:	f1 e0       	ldi	r31, 0x01	; 1
    13fe:	20 81       	ld	r18, Z
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	ac 01       	movw	r20, r24
    1406:	02 c0       	rjmp	.+4      	; 0x140c <pinMode+0x1ea>
    1408:	44 0f       	add	r20, r20
    140a:	55 1f       	adc	r21, r21
    140c:	6a 95       	dec	r22
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <pinMode+0x1e6>
    1410:	ba 01       	movw	r22, r20
    1412:	60 95       	com	r22
    1414:	62 23       	and	r22, r18
    1416:	60 83       	st	Z, r22
    1418:	08 95       	ret
		}
	}
	// PORTI is not present
	else if(port == J) {
    141a:	89 30       	cpi	r24, 0x09	; 9
    141c:	09 f5       	brne	.+66     	; 0x1460 <pinMode+0x23e>
		if(mode) {
    141e:	44 23       	and	r20, r20
    1420:	79 f0       	breq	.+30     	; 0x1440 <pinMode+0x21e>
			sbit(DDRJ,pin);	
    1422:	e4 e0       	ldi	r30, 0x04	; 4
    1424:	f1 e0       	ldi	r31, 0x01	; 1
    1426:	20 81       	ld	r18, Z
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	ac 01       	movw	r20, r24
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <pinMode+0x212>
    1430:	44 0f       	add	r20, r20
    1432:	55 1f       	adc	r21, r21
    1434:	6a 95       	dec	r22
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <pinMode+0x20e>
    1438:	ba 01       	movw	r22, r20
    143a:	62 2b       	or	r22, r18
    143c:	60 83       	st	Z, r22
    143e:	08 95       	ret
		}
		else {
			cbit(DDRJ,pin);
    1440:	e4 e0       	ldi	r30, 0x04	; 4
    1442:	f1 e0       	ldi	r31, 0x01	; 1
    1444:	20 81       	ld	r18, Z
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	ac 01       	movw	r20, r24
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <pinMode+0x230>
    144e:	44 0f       	add	r20, r20
    1450:	55 1f       	adc	r21, r21
    1452:	6a 95       	dec	r22
    1454:	e2 f7       	brpl	.-8      	; 0x144e <pinMode+0x22c>
    1456:	ba 01       	movw	r22, r20
    1458:	60 95       	com	r22
    145a:	62 23       	and	r22, r18
    145c:	60 83       	st	Z, r22
    145e:	08 95       	ret
		}
	}
	else if(port == K) {
    1460:	8a 30       	cpi	r24, 0x0A	; 10
    1462:	09 f5       	brne	.+66     	; 0x14a6 <pinMode+0x284>
		if(mode) {
    1464:	44 23       	and	r20, r20
    1466:	79 f0       	breq	.+30     	; 0x1486 <pinMode+0x264>
			sbit(DDRK,pin);
    1468:	e7 e0       	ldi	r30, 0x07	; 7
    146a:	f1 e0       	ldi	r31, 0x01	; 1
    146c:	20 81       	ld	r18, Z
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	ac 01       	movw	r20, r24
    1474:	02 c0       	rjmp	.+4      	; 0x147a <pinMode+0x258>
    1476:	44 0f       	add	r20, r20
    1478:	55 1f       	adc	r21, r21
    147a:	6a 95       	dec	r22
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <pinMode+0x254>
    147e:	ba 01       	movw	r22, r20
    1480:	62 2b       	or	r22, r18
    1482:	60 83       	st	Z, r22
    1484:	08 95       	ret
		}
		else {
			cbit(DDRK,pin);
    1486:	e7 e0       	ldi	r30, 0x07	; 7
    1488:	f1 e0       	ldi	r31, 0x01	; 1
    148a:	20 81       	ld	r18, Z
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	ac 01       	movw	r20, r24
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <pinMode+0x276>
    1494:	44 0f       	add	r20, r20
    1496:	55 1f       	adc	r21, r21
    1498:	6a 95       	dec	r22
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <pinMode+0x272>
    149c:	ba 01       	movw	r22, r20
    149e:	60 95       	com	r22
    14a0:	62 23       	and	r22, r18
    14a2:	60 83       	st	Z, r22
    14a4:	08 95       	ret
		}
	}
	else if(port == L) {
    14a6:	8b 30       	cpi	r24, 0x0B	; 11
    14a8:	01 f5       	brne	.+64     	; 0x14ea <pinMode+0x2c8>
		if(mode) {
    14aa:	44 23       	and	r20, r20
    14ac:	79 f0       	breq	.+30     	; 0x14cc <pinMode+0x2aa>
			sbit(DDRL,pin);
    14ae:	ea e0       	ldi	r30, 0x0A	; 10
    14b0:	f1 e0       	ldi	r31, 0x01	; 1
    14b2:	20 81       	ld	r18, Z
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	ac 01       	movw	r20, r24
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <pinMode+0x29e>
    14bc:	44 0f       	add	r20, r20
    14be:	55 1f       	adc	r21, r21
    14c0:	6a 95       	dec	r22
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <pinMode+0x29a>
    14c4:	ba 01       	movw	r22, r20
    14c6:	62 2b       	or	r22, r18
    14c8:	60 83       	st	Z, r22
    14ca:	08 95       	ret
		}
		else {
			cbit(DDRL,pin);
    14cc:	ea e0       	ldi	r30, 0x0A	; 10
    14ce:	f1 e0       	ldi	r31, 0x01	; 1
    14d0:	20 81       	ld	r18, Z
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	ac 01       	movw	r20, r24
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <pinMode+0x2bc>
    14da:	44 0f       	add	r20, r20
    14dc:	55 1f       	adc	r21, r21
    14de:	6a 95       	dec	r22
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <pinMode+0x2b8>
    14e2:	ba 01       	movw	r22, r20
    14e4:	60 95       	com	r22
    14e6:	62 23       	and	r22, r18
    14e8:	60 83       	st	Z, r22
    14ea:	08 95       	ret

000014ec <digitalWrite>:
//	G (PORTG), H (PORTH), J (PORTJ), K (PORTK), L (PORTL),
// pin  = 0~7
// signal = 0(LOW), 1(HIGH)
void digitalWrite(uint8_t port, uint8_t pin, uint8_t signal)
{
	if(port == A) {
    14ec:	88 23       	and	r24, r24
    14ee:	e9 f4       	brne	.+58     	; 0x152a <digitalWrite+0x3e>
		if(signal) {
    14f0:	44 23       	and	r20, r20
    14f2:	69 f0       	breq	.+26     	; 0x150e <digitalWrite+0x22>
			sbit(PORTA,pin);
    14f4:	22 b1       	in	r18, 0x02	; 2
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	ac 01       	movw	r20, r24
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <digitalWrite+0x16>
    14fe:	44 0f       	add	r20, r20
    1500:	55 1f       	adc	r21, r21
    1502:	6a 95       	dec	r22
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <digitalWrite+0x12>
    1506:	ba 01       	movw	r22, r20
    1508:	62 2b       	or	r22, r18
    150a:	62 b9       	out	0x02, r22	; 2
    150c:	08 95       	ret
		}
		else {
			cbit(PORTA,pin);
    150e:	22 b1       	in	r18, 0x02	; 2
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	ac 01       	movw	r20, r24
    1516:	02 c0       	rjmp	.+4      	; 0x151c <digitalWrite+0x30>
    1518:	44 0f       	add	r20, r20
    151a:	55 1f       	adc	r21, r21
    151c:	6a 95       	dec	r22
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <digitalWrite+0x2c>
    1520:	ba 01       	movw	r22, r20
    1522:	60 95       	com	r22
    1524:	62 23       	and	r22, r18
    1526:	62 b9       	out	0x02, r22	; 2
    1528:	08 95       	ret
		}
	}
	else if(port == B) {
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	e9 f4       	brne	.+58     	; 0x1568 <digitalWrite+0x7c>
		if(signal) {
    152e:	44 23       	and	r20, r20
    1530:	69 f0       	breq	.+26     	; 0x154c <digitalWrite+0x60>
			sbit(PORTB,pin);
    1532:	25 b1       	in	r18, 0x05	; 5
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	ac 01       	movw	r20, r24
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <digitalWrite+0x54>
    153c:	44 0f       	add	r20, r20
    153e:	55 1f       	adc	r21, r21
    1540:	6a 95       	dec	r22
    1542:	e2 f7       	brpl	.-8      	; 0x153c <digitalWrite+0x50>
    1544:	ba 01       	movw	r22, r20
    1546:	62 2b       	or	r22, r18
    1548:	65 b9       	out	0x05, r22	; 5
    154a:	08 95       	ret
		}
		else {
			cbit(PORTB,pin);
    154c:	25 b1       	in	r18, 0x05	; 5
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	ac 01       	movw	r20, r24
    1554:	02 c0       	rjmp	.+4      	; 0x155a <digitalWrite+0x6e>
    1556:	44 0f       	add	r20, r20
    1558:	55 1f       	adc	r21, r21
    155a:	6a 95       	dec	r22
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <digitalWrite+0x6a>
    155e:	ba 01       	movw	r22, r20
    1560:	60 95       	com	r22
    1562:	62 23       	and	r22, r18
    1564:	65 b9       	out	0x05, r22	; 5
    1566:	08 95       	ret
		}
	}
	else if(port == C) {
    1568:	82 30       	cpi	r24, 0x02	; 2
    156a:	e9 f4       	brne	.+58     	; 0x15a6 <digitalWrite+0xba>
		if(signal) {
    156c:	44 23       	and	r20, r20
    156e:	69 f0       	breq	.+26     	; 0x158a <digitalWrite+0x9e>
			sbit(PORTC,pin);
    1570:	28 b1       	in	r18, 0x08	; 8
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	ac 01       	movw	r20, r24
    1578:	02 c0       	rjmp	.+4      	; 0x157e <digitalWrite+0x92>
    157a:	44 0f       	add	r20, r20
    157c:	55 1f       	adc	r21, r21
    157e:	6a 95       	dec	r22
    1580:	e2 f7       	brpl	.-8      	; 0x157a <digitalWrite+0x8e>
    1582:	ba 01       	movw	r22, r20
    1584:	62 2b       	or	r22, r18
    1586:	68 b9       	out	0x08, r22	; 8
    1588:	08 95       	ret
		}
		else {
			cbit(PORTC,pin);
    158a:	28 b1       	in	r18, 0x08	; 8
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	ac 01       	movw	r20, r24
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <digitalWrite+0xac>
    1594:	44 0f       	add	r20, r20
    1596:	55 1f       	adc	r21, r21
    1598:	6a 95       	dec	r22
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <digitalWrite+0xa8>
    159c:	ba 01       	movw	r22, r20
    159e:	60 95       	com	r22
    15a0:	62 23       	and	r22, r18
    15a2:	68 b9       	out	0x08, r22	; 8
    15a4:	08 95       	ret
		}
	}
	else if(port == D) {
    15a6:	83 30       	cpi	r24, 0x03	; 3
    15a8:	e9 f4       	brne	.+58     	; 0x15e4 <digitalWrite+0xf8>
		if(signal) {
    15aa:	44 23       	and	r20, r20
    15ac:	69 f0       	breq	.+26     	; 0x15c8 <digitalWrite+0xdc>
			sbit(PORTD,pin);
    15ae:	2b b1       	in	r18, 0x0b	; 11
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	ac 01       	movw	r20, r24
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <digitalWrite+0xd0>
    15b8:	44 0f       	add	r20, r20
    15ba:	55 1f       	adc	r21, r21
    15bc:	6a 95       	dec	r22
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <digitalWrite+0xcc>
    15c0:	ba 01       	movw	r22, r20
    15c2:	62 2b       	or	r22, r18
    15c4:	6b b9       	out	0x0b, r22	; 11
    15c6:	08 95       	ret
		}
		else {
			cbit(PORTD,pin);
    15c8:	2b b1       	in	r18, 0x0b	; 11
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	ac 01       	movw	r20, r24
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <digitalWrite+0xea>
    15d2:	44 0f       	add	r20, r20
    15d4:	55 1f       	adc	r21, r21
    15d6:	6a 95       	dec	r22
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <digitalWrite+0xe6>
    15da:	ba 01       	movw	r22, r20
    15dc:	60 95       	com	r22
    15de:	62 23       	and	r22, r18
    15e0:	6b b9       	out	0x0b, r22	; 11
    15e2:	08 95       	ret
		}
	}
	else if(port == E) {
    15e4:	84 30       	cpi	r24, 0x04	; 4
    15e6:	e9 f4       	brne	.+58     	; 0x1622 <digitalWrite+0x136>
		if(signal) {
    15e8:	44 23       	and	r20, r20
    15ea:	69 f0       	breq	.+26     	; 0x1606 <digitalWrite+0x11a>
			sbit(PORTE,pin);
    15ec:	2e b1       	in	r18, 0x0e	; 14
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	ac 01       	movw	r20, r24
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <digitalWrite+0x10e>
    15f6:	44 0f       	add	r20, r20
    15f8:	55 1f       	adc	r21, r21
    15fa:	6a 95       	dec	r22
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <digitalWrite+0x10a>
    15fe:	ba 01       	movw	r22, r20
    1600:	62 2b       	or	r22, r18
    1602:	6e b9       	out	0x0e, r22	; 14
    1604:	08 95       	ret
		}
		else {
			cbit(PORTE,pin);
    1606:	2e b1       	in	r18, 0x0e	; 14
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	ac 01       	movw	r20, r24
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <digitalWrite+0x128>
    1610:	44 0f       	add	r20, r20
    1612:	55 1f       	adc	r21, r21
    1614:	6a 95       	dec	r22
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <digitalWrite+0x124>
    1618:	ba 01       	movw	r22, r20
    161a:	60 95       	com	r22
    161c:	62 23       	and	r22, r18
    161e:	6e b9       	out	0x0e, r22	; 14
    1620:	08 95       	ret
		}
	}
	else if(port == F) {
    1622:	85 30       	cpi	r24, 0x05	; 5
    1624:	e9 f4       	brne	.+58     	; 0x1660 <digitalWrite+0x174>
		if(signal) {
    1626:	44 23       	and	r20, r20
    1628:	69 f0       	breq	.+26     	; 0x1644 <digitalWrite+0x158>
			sbit(PORTF,pin);
    162a:	21 b3       	in	r18, 0x11	; 17
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	ac 01       	movw	r20, r24
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <digitalWrite+0x14c>
    1634:	44 0f       	add	r20, r20
    1636:	55 1f       	adc	r21, r21
    1638:	6a 95       	dec	r22
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <digitalWrite+0x148>
    163c:	ba 01       	movw	r22, r20
    163e:	62 2b       	or	r22, r18
    1640:	61 bb       	out	0x11, r22	; 17
    1642:	08 95       	ret
		}
		else {
			cbit(PORTF,pin);
    1644:	21 b3       	in	r18, 0x11	; 17
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	ac 01       	movw	r20, r24
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <digitalWrite+0x166>
    164e:	44 0f       	add	r20, r20
    1650:	55 1f       	adc	r21, r21
    1652:	6a 95       	dec	r22
    1654:	e2 f7       	brpl	.-8      	; 0x164e <digitalWrite+0x162>
    1656:	ba 01       	movw	r22, r20
    1658:	60 95       	com	r22
    165a:	62 23       	and	r22, r18
    165c:	61 bb       	out	0x11, r22	; 17
    165e:	08 95       	ret
		}
	}
	else if(port == G) {
    1660:	86 30       	cpi	r24, 0x06	; 6
    1662:	e9 f4       	brne	.+58     	; 0x169e <digitalWrite+0x1b2>
		if(signal) {
    1664:	44 23       	and	r20, r20
    1666:	69 f0       	breq	.+26     	; 0x1682 <digitalWrite+0x196>
			sbit(PORTG,pin);
    1668:	24 b3       	in	r18, 0x14	; 20
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	ac 01       	movw	r20, r24
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <digitalWrite+0x18a>
    1672:	44 0f       	add	r20, r20
    1674:	55 1f       	adc	r21, r21
    1676:	6a 95       	dec	r22
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <digitalWrite+0x186>
    167a:	ba 01       	movw	r22, r20
    167c:	62 2b       	or	r22, r18
    167e:	64 bb       	out	0x14, r22	; 20
    1680:	08 95       	ret
		}
		else {
			cbit(PORTG,pin);
    1682:	24 b3       	in	r18, 0x14	; 20
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	ac 01       	movw	r20, r24
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <digitalWrite+0x1a4>
    168c:	44 0f       	add	r20, r20
    168e:	55 1f       	adc	r21, r21
    1690:	6a 95       	dec	r22
    1692:	e2 f7       	brpl	.-8      	; 0x168c <digitalWrite+0x1a0>
    1694:	ba 01       	movw	r22, r20
    1696:	60 95       	com	r22
    1698:	62 23       	and	r22, r18
    169a:	64 bb       	out	0x14, r22	; 20
    169c:	08 95       	ret
		}
	}
	else if(port == H) {
    169e:	87 30       	cpi	r24, 0x07	; 7
    16a0:	09 f5       	brne	.+66     	; 0x16e4 <digitalWrite+0x1f8>
		if(signal) {
    16a2:	44 23       	and	r20, r20
    16a4:	79 f0       	breq	.+30     	; 0x16c4 <digitalWrite+0x1d8>
			sbit(PORTH,pin);
    16a6:	e2 e0       	ldi	r30, 0x02	; 2
    16a8:	f1 e0       	ldi	r31, 0x01	; 1
    16aa:	20 81       	ld	r18, Z
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	ac 01       	movw	r20, r24
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <digitalWrite+0x1cc>
    16b4:	44 0f       	add	r20, r20
    16b6:	55 1f       	adc	r21, r21
    16b8:	6a 95       	dec	r22
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <digitalWrite+0x1c8>
    16bc:	ba 01       	movw	r22, r20
    16be:	62 2b       	or	r22, r18
    16c0:	60 83       	st	Z, r22
    16c2:	08 95       	ret
		}
		else {
			cbit(PORTH,pin);
    16c4:	e2 e0       	ldi	r30, 0x02	; 2
    16c6:	f1 e0       	ldi	r31, 0x01	; 1
    16c8:	20 81       	ld	r18, Z
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	ac 01       	movw	r20, r24
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <digitalWrite+0x1ea>
    16d2:	44 0f       	add	r20, r20
    16d4:	55 1f       	adc	r21, r21
    16d6:	6a 95       	dec	r22
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <digitalWrite+0x1e6>
    16da:	ba 01       	movw	r22, r20
    16dc:	60 95       	com	r22
    16de:	62 23       	and	r22, r18
    16e0:	60 83       	st	Z, r22
    16e2:	08 95       	ret
		}
	}
	// PORTI is not present
	else if(port == J) {
    16e4:	89 30       	cpi	r24, 0x09	; 9
    16e6:	09 f5       	brne	.+66     	; 0x172a <digitalWrite+0x23e>
		if(signal) {
    16e8:	44 23       	and	r20, r20
    16ea:	79 f0       	breq	.+30     	; 0x170a <digitalWrite+0x21e>
			sbit(PORTJ,pin);
    16ec:	e5 e0       	ldi	r30, 0x05	; 5
    16ee:	f1 e0       	ldi	r31, 0x01	; 1
    16f0:	20 81       	ld	r18, Z
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	ac 01       	movw	r20, r24
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <digitalWrite+0x212>
    16fa:	44 0f       	add	r20, r20
    16fc:	55 1f       	adc	r21, r21
    16fe:	6a 95       	dec	r22
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <digitalWrite+0x20e>
    1702:	ba 01       	movw	r22, r20
    1704:	62 2b       	or	r22, r18
    1706:	60 83       	st	Z, r22
    1708:	08 95       	ret
		}
		else {
			cbit(PORTJ,pin);
    170a:	e5 e0       	ldi	r30, 0x05	; 5
    170c:	f1 e0       	ldi	r31, 0x01	; 1
    170e:	20 81       	ld	r18, Z
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	ac 01       	movw	r20, r24
    1716:	02 c0       	rjmp	.+4      	; 0x171c <digitalWrite+0x230>
    1718:	44 0f       	add	r20, r20
    171a:	55 1f       	adc	r21, r21
    171c:	6a 95       	dec	r22
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <digitalWrite+0x22c>
    1720:	ba 01       	movw	r22, r20
    1722:	60 95       	com	r22
    1724:	62 23       	and	r22, r18
    1726:	60 83       	st	Z, r22
    1728:	08 95       	ret
		}
	}
	else if(port == K) {
    172a:	8a 30       	cpi	r24, 0x0A	; 10
    172c:	09 f5       	brne	.+66     	; 0x1770 <digitalWrite+0x284>
		if(signal) {
    172e:	44 23       	and	r20, r20
    1730:	79 f0       	breq	.+30     	; 0x1750 <digitalWrite+0x264>
			sbit(PORTK,pin);
    1732:	e8 e0       	ldi	r30, 0x08	; 8
    1734:	f1 e0       	ldi	r31, 0x01	; 1
    1736:	20 81       	ld	r18, Z
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	ac 01       	movw	r20, r24
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <digitalWrite+0x258>
    1740:	44 0f       	add	r20, r20
    1742:	55 1f       	adc	r21, r21
    1744:	6a 95       	dec	r22
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <digitalWrite+0x254>
    1748:	ba 01       	movw	r22, r20
    174a:	62 2b       	or	r22, r18
    174c:	60 83       	st	Z, r22
    174e:	08 95       	ret
		}
		else {
			cbit(PORTK,pin);
    1750:	e8 e0       	ldi	r30, 0x08	; 8
    1752:	f1 e0       	ldi	r31, 0x01	; 1
    1754:	20 81       	ld	r18, Z
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	ac 01       	movw	r20, r24
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <digitalWrite+0x276>
    175e:	44 0f       	add	r20, r20
    1760:	55 1f       	adc	r21, r21
    1762:	6a 95       	dec	r22
    1764:	e2 f7       	brpl	.-8      	; 0x175e <digitalWrite+0x272>
    1766:	ba 01       	movw	r22, r20
    1768:	60 95       	com	r22
    176a:	62 23       	and	r22, r18
    176c:	60 83       	st	Z, r22
    176e:	08 95       	ret
		}
	}
	else if(port == L) {
    1770:	8b 30       	cpi	r24, 0x0B	; 11
    1772:	01 f5       	brne	.+64     	; 0x17b4 <digitalWrite+0x2c8>
		if(signal) {
    1774:	44 23       	and	r20, r20
    1776:	79 f0       	breq	.+30     	; 0x1796 <digitalWrite+0x2aa>
			sbit(PORTL,pin);
    1778:	eb e0       	ldi	r30, 0x0B	; 11
    177a:	f1 e0       	ldi	r31, 0x01	; 1
    177c:	20 81       	ld	r18, Z
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	ac 01       	movw	r20, r24
    1784:	02 c0       	rjmp	.+4      	; 0x178a <digitalWrite+0x29e>
    1786:	44 0f       	add	r20, r20
    1788:	55 1f       	adc	r21, r21
    178a:	6a 95       	dec	r22
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <digitalWrite+0x29a>
    178e:	ba 01       	movw	r22, r20
    1790:	62 2b       	or	r22, r18
    1792:	60 83       	st	Z, r22
    1794:	08 95       	ret
		}
		else {
			cbit(PORTL,pin);
    1796:	eb e0       	ldi	r30, 0x0B	; 11
    1798:	f1 e0       	ldi	r31, 0x01	; 1
    179a:	20 81       	ld	r18, Z
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	ac 01       	movw	r20, r24
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <digitalWrite+0x2bc>
    17a4:	44 0f       	add	r20, r20
    17a6:	55 1f       	adc	r21, r21
    17a8:	6a 95       	dec	r22
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <digitalWrite+0x2b8>
    17ac:	ba 01       	movw	r22, r20
    17ae:	60 95       	com	r22
    17b0:	62 23       	and	r22, r18
    17b2:	60 83       	st	Z, r22
    17b4:	08 95       	ret

000017b6 <digitalRead>:
//	G (PORTG), H (PORTH), J (PORTJ), K (PORTK), L (PORTL),
// pin  = 0~7
int digitalRead(uint8_t port, uint8_t pin)
{
	unsigned char ucReadValue;
	if(port == A)
    17b6:	88 23       	and	r24, r24
    17b8:	59 f4       	brne	.+22     	; 0x17d0 <digitalRead+0x1a>
	{
		ucReadValue = (PINA>>pin)&0x01;
    17ba:	20 b1       	in	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	c9 01       	movw	r24, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <digitalRead+0x10>
    17c2:	95 95       	asr	r25
    17c4:	87 95       	ror	r24
    17c6:	6a 95       	dec	r22
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <digitalRead+0xc>
    17ca:	98 2f       	mov	r25, r24
    17cc:	91 70       	andi	r25, 0x01	; 1
    17ce:	7b c0       	rjmp	.+246    	; 0x18c6 <digitalRead+0x110>
	}
	else if(port == B)
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	59 f4       	brne	.+22     	; 0x17ea <digitalRead+0x34>
	{
		ucReadValue = (PINB>>pin)&0x01;
    17d4:	23 b1       	in	r18, 0x03	; 3
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	c9 01       	movw	r24, r18
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <digitalRead+0x2a>
    17dc:	95 95       	asr	r25
    17de:	87 95       	ror	r24
    17e0:	6a 95       	dec	r22
    17e2:	e2 f7       	brpl	.-8      	; 0x17dc <digitalRead+0x26>
    17e4:	98 2f       	mov	r25, r24
    17e6:	91 70       	andi	r25, 0x01	; 1
    17e8:	6e c0       	rjmp	.+220    	; 0x18c6 <digitalRead+0x110>
	}
	else if(port == C)
    17ea:	82 30       	cpi	r24, 0x02	; 2
    17ec:	59 f4       	brne	.+22     	; 0x1804 <digitalRead+0x4e>
	{
		ucReadValue = (PINC>>pin)&0x01;
    17ee:	26 b1       	in	r18, 0x06	; 6
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	c9 01       	movw	r24, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <digitalRead+0x44>
    17f6:	95 95       	asr	r25
    17f8:	87 95       	ror	r24
    17fa:	6a 95       	dec	r22
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <digitalRead+0x40>
    17fe:	98 2f       	mov	r25, r24
    1800:	91 70       	andi	r25, 0x01	; 1
    1802:	61 c0       	rjmp	.+194    	; 0x18c6 <digitalRead+0x110>
	}
	else if(port == D)
    1804:	83 30       	cpi	r24, 0x03	; 3
    1806:	39 f4       	brne	.+14     	; 0x1816 <digitalRead+0x60>
	{
		ucReadValue = (PIND>pin)&0x01;
    1808:	89 b1       	in	r24, 0x09	; 9
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	68 17       	cp	r22, r24
    180e:	08 f4       	brcc	.+2      	; 0x1812 <digitalRead+0x5c>
    1810:	5a c0       	rjmp	.+180    	; 0x18c6 <digitalRead+0x110>
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	58 c0       	rjmp	.+176    	; 0x18c6 <digitalRead+0x110>
	}
	else if(port == E)
    1816:	84 30       	cpi	r24, 0x04	; 4
    1818:	59 f4       	brne	.+22     	; 0x1830 <digitalRead+0x7a>
	{
		ucReadValue = (PINE>>pin)&0x01;
    181a:	2c b1       	in	r18, 0x0c	; 12
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	c9 01       	movw	r24, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <digitalRead+0x70>
    1822:	95 95       	asr	r25
    1824:	87 95       	ror	r24
    1826:	6a 95       	dec	r22
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <digitalRead+0x6c>
    182a:	98 2f       	mov	r25, r24
    182c:	91 70       	andi	r25, 0x01	; 1
    182e:	4b c0       	rjmp	.+150    	; 0x18c6 <digitalRead+0x110>
	}
	else if(port == F)
    1830:	85 30       	cpi	r24, 0x05	; 5
    1832:	51 f4       	brne	.+20     	; 0x1848 <digitalRead+0x92>
	{
		ucReadValue = (PINF>>pin)&0x01;
    1834:	8f b1       	in	r24, 0x0f	; 15
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 c0       	rjmp	.+4      	; 0x183e <digitalRead+0x88>
    183a:	95 95       	asr	r25
    183c:	87 95       	ror	r24
    183e:	6a 95       	dec	r22
    1840:	e2 f7       	brpl	.-8      	; 0x183a <digitalRead+0x84>
    1842:	98 2f       	mov	r25, r24
    1844:	91 70       	andi	r25, 0x01	; 1
    1846:	3f c0       	rjmp	.+126    	; 0x18c6 <digitalRead+0x110>
	}
	else if(port == G)
    1848:	86 30       	cpi	r24, 0x06	; 6
    184a:	51 f4       	brne	.+20     	; 0x1860 <digitalRead+0xaa>
	{
		ucReadValue = (PING>>pin)&0x01;
    184c:	82 b3       	in	r24, 0x12	; 18
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <digitalRead+0xa0>
    1852:	95 95       	asr	r25
    1854:	87 95       	ror	r24
    1856:	6a 95       	dec	r22
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <digitalRead+0x9c>
    185a:	98 2f       	mov	r25, r24
    185c:	91 70       	andi	r25, 0x01	; 1
    185e:	33 c0       	rjmp	.+102    	; 0x18c6 <digitalRead+0x110>
	}
	else if(port == H)
    1860:	87 30       	cpi	r24, 0x07	; 7
    1862:	59 f4       	brne	.+22     	; 0x187a <digitalRead+0xc4>
	{
		ucReadValue = (PINH>>pin)&0x01;
    1864:	80 91 00 01 	lds	r24, 0x0100
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <digitalRead+0xba>
    186c:	95 95       	asr	r25
    186e:	87 95       	ror	r24
    1870:	6a 95       	dec	r22
    1872:	e2 f7       	brpl	.-8      	; 0x186c <digitalRead+0xb6>
    1874:	98 2f       	mov	r25, r24
    1876:	91 70       	andi	r25, 0x01	; 1
    1878:	26 c0       	rjmp	.+76     	; 0x18c6 <digitalRead+0x110>
	}
	// PORTI is not present
	else if(port == J)
    187a:	89 30       	cpi	r24, 0x09	; 9
    187c:	59 f4       	brne	.+22     	; 0x1894 <digitalRead+0xde>
	{
		ucReadValue = (PINJ>>pin)&0x01;
    187e:	80 91 03 01 	lds	r24, 0x0103
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 c0       	rjmp	.+4      	; 0x188a <digitalRead+0xd4>
    1886:	95 95       	asr	r25
    1888:	87 95       	ror	r24
    188a:	6a 95       	dec	r22
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <digitalRead+0xd0>
    188e:	98 2f       	mov	r25, r24
    1890:	91 70       	andi	r25, 0x01	; 1
    1892:	19 c0       	rjmp	.+50     	; 0x18c6 <digitalRead+0x110>
	}
	else if(port == K)
    1894:	8a 30       	cpi	r24, 0x0A	; 10
    1896:	59 f4       	brne	.+22     	; 0x18ae <digitalRead+0xf8>
	{
		ucReadValue = (PINK>>pin)&0x01;
    1898:	80 91 06 01 	lds	r24, 0x0106
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <digitalRead+0xee>
    18a0:	95 95       	asr	r25
    18a2:	87 95       	ror	r24
    18a4:	6a 95       	dec	r22
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <digitalRead+0xea>
    18a8:	98 2f       	mov	r25, r24
    18aa:	91 70       	andi	r25, 0x01	; 1
    18ac:	0c c0       	rjmp	.+24     	; 0x18c6 <digitalRead+0x110>
	}
	else if(port == L)
    18ae:	8b 30       	cpi	r24, 0x0B	; 11
    18b0:	51 f4       	brne	.+20     	; 0x18c6 <digitalRead+0x110>
	{
		ucReadValue = (PINL>>pin)&0x01;
    18b2:	80 91 09 01 	lds	r24, 0x0109
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <digitalRead+0x108>
    18ba:	95 95       	asr	r25
    18bc:	87 95       	ror	r24
    18be:	6a 95       	dec	r22
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <digitalRead+0x104>
    18c2:	98 2f       	mov	r25, r24
    18c4:	91 70       	andi	r25, 0x01	; 1
	}
	
	return ucReadValue;
}
    18c6:	89 2f       	mov	r24, r25
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	08 95       	ret

000018cc <I2C_data_input>:


static void I2C_data_output (void)
{	pinMode(TEMP_PORT, DATA, OUTPUT);}
static void I2C_data_input()
{	pinMode(TEMP_PORT, DATA, INPUT);}
    18cc:	85 e0       	ldi	r24, 0x05	; 5
    18ce:	65 e0       	ldi	r22, 0x05	; 5
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	0e 94 11 09 	call	0x1222	; 0x1222 <pinMode>
    18d6:	08 95       	ret

000018d8 <I2C_data_output>:
unsigned short error, checksum;
unsigned char sensing_type;


static void I2C_data_output (void)
{	pinMode(TEMP_PORT, DATA, OUTPUT);}
    18d8:	85 e0       	ldi	r24, 0x05	; 5
    18da:	65 e0       	ldi	r22, 0x05	; 5
    18dc:	41 e0       	ldi	r20, 0x01	; 1
    18de:	0e 94 11 09 	call	0x1222	; 0x1222 <pinMode>
    18e2:	08 95       	ret

000018e4 <READ_DATA>:
static void SET_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, HIGH);}
static void CLR_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, LOW);}
static int READ_DATA (void)
{	return digitalRead(TEMP_PORT, DATA);}
    18e4:	85 e0       	ldi	r24, 0x05	; 5
    18e6:	65 e0       	ldi	r22, 0x05	; 5
    18e8:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <digitalRead>
    18ec:	08 95       	ret

000018ee <CLR_DATA>:
static void I2C_sck_input (void)
{	pinMode(TEMP_PORT, SCK, INPUT);}
static void SET_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, HIGH);}
static void CLR_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, LOW);}
    18ee:	85 e0       	ldi	r24, 0x05	; 5
    18f0:	65 e0       	ldi	r22, 0x05	; 5
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	0e 94 76 0a 	call	0x14ec	; 0x14ec <digitalWrite>
    18f8:	08 95       	ret

000018fa <SET_SCK>:
static int READ_DATA (void)
{	return digitalRead(TEMP_PORT, DATA);}
static void SET_SCK()
{	digitalWrite(TEMP_PORT, SCK, HIGH);}
    18fa:	85 e0       	ldi	r24, 0x05	; 5
    18fc:	62 e0       	ldi	r22, 0x02	; 2
    18fe:	41 e0       	ldi	r20, 0x01	; 1
    1900:	0e 94 76 0a 	call	0x14ec	; 0x14ec <digitalWrite>
    1904:	08 95       	ret

00001906 <CLR_SCK>:
static void CLR_SCK()
{	digitalWrite(TEMP_PORT, SCK, LOW);}
    1906:	85 e0       	ldi	r24, 0x05	; 5
    1908:	62 e0       	ldi	r22, 0x02	; 2
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <digitalWrite>
    1910:	08 95       	ret

00001912 <SET_DATA>:
static void I2C_sck_output (void)
{	pinMode(TEMP_PORT, SCK, OUTPUT);}
static void I2C_sck_input (void)
{	pinMode(TEMP_PORT, SCK, INPUT);}
static void SET_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, HIGH);}
    1912:	85 e0       	ldi	r24, 0x05	; 5
    1914:	65 e0       	ldi	r22, 0x05	; 5
    1916:	41 e0       	ldi	r20, 0x01	; 1
    1918:	0e 94 76 0a 	call	0x14ec	; 0x14ec <digitalWrite>
    191c:	08 95       	ret

0000191e <Transmission_start>:
  	Transmission_start();	// transmission start
}

void Transmission_start (void)
{  
	SET_DATA();                   //Initial state
    191e:	0e 94 89 0c 	call	0x1912	; 0x1912 <SET_DATA>
	CLR_SCK();                    //Initial state
    1922:	0e 94 83 0c 	call	0x1906	; 0x1906 <CLR_SCK>
	asm("nop");asm("nop");
    1926:	00 00       	nop
    1928:	00 00       	nop

	SET_SCK();
    192a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <SET_SCK>
	asm("nop");asm("nop");
    192e:	00 00       	nop
    1930:	00 00       	nop

	CLR_DATA();
    1932:	0e 94 77 0c 	call	0x18ee	; 0x18ee <CLR_DATA>
	asm("nop");asm("nop");
    1936:	00 00       	nop
    1938:	00 00       	nop

	CLR_SCK();  
    193a:	0e 94 83 0c 	call	0x1906	; 0x1906 <CLR_SCK>
	asm("nop");asm("nop");
    193e:	00 00       	nop
    1940:	00 00       	nop

	SET_SCK();
    1942:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <SET_SCK>
	asm("nop");asm("nop");
    1946:	00 00       	nop
    1948:	00 00       	nop

	SET_DATA();		   
    194a:	0e 94 89 0c 	call	0x1912	; 0x1912 <SET_DATA>
	asm("nop");asm("nop");
    194e:	00 00       	nop
    1950:	00 00       	nop

	CLR_SCK();
    1952:	0e 94 83 0c 	call	0x1906	; 0x1906 <CLR_SCK>
}
    1956:	08 95       	ret

00001958 <Connection_reset>:
	I2C_sck_output ();		// DDRF |= 0x01;
	Connection_reset ();
}

void Connection_reset (void)
{
    1958:	cf 93       	push	r28
	unsigned char i; 
  	SET_DATA();				// Initial state
    195a:	0e 94 89 0c 	call	0x1912	; 0x1912 <SET_DATA>
	CLR_SCK();				// Initial state
    195e:	0e 94 83 0c 	call	0x1906	; 0x1906 <CLR_SCK>
    1962:	c9 e0       	ldi	r28, 0x09	; 9
  	for (i=0; i<9; i++)		// 9 SCK cycles
  	{
  		SET_SCK();
    1964:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <SET_SCK>
    	CLR_SCK();
    1968:	0e 94 83 0c 	call	0x1906	; 0x1906 <CLR_SCK>
    196c:	c1 50       	subi	r28, 0x01	; 1
void Connection_reset (void)
{
	unsigned char i; 
  	SET_DATA();				// Initial state
	CLR_SCK();				// Initial state
  	for (i=0; i<9; i++)		// 9 SCK cycles
    196e:	d1 f7       	brne	.-12     	; 0x1964 <Connection_reset+0xc>
  	{
  		SET_SCK();
    	CLR_SCK();
  	}
  	Transmission_start();	// transmission start
    1970:	0e 94 8f 0c 	call	0x191e	; 0x191e <Transmission_start>
}
    1974:	cf 91       	pop	r28
    1976:	08 95       	ret

00001978 <SHT11_Init>:
{	return digitalRead(TEMP_PORT, SCK);}


void SHT11_Init (void)
{
	I2C_data_output ();		// DDRF |= 0x02;
    1978:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <I2C_data_output>
static void I2C_data_output (void)
{	pinMode(TEMP_PORT, DATA, OUTPUT);}
static void I2C_data_input()
{	pinMode(TEMP_PORT, DATA, INPUT);}
static void I2C_sck_output (void)
{	pinMode(TEMP_PORT, SCK, OUTPUT);}
    197c:	85 e0       	ldi	r24, 0x05	; 5
    197e:	62 e0       	ldi	r22, 0x02	; 2
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	0e 94 11 09 	call	0x1222	; 0x1222 <pinMode>

void SHT11_Init (void)
{
	I2C_data_output ();		// DDRF |= 0x02;
	I2C_sck_output ();		// DDRF |= 0x01;
	Connection_reset ();
    1986:	0e 94 ac 0c 	call	0x1958	; 0x1958 <Connection_reset>
}
    198a:	08 95       	ret

0000198c <Write_byte>:

	return error;
}

unsigned char Write_byte (unsigned char value)
{ 
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	08 2f       	mov	r16, r24
	unsigned char i, error	=	0;
	I2C_data_output ();
    1996:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <I2C_data_output>
    199a:	c8 e0       	ldi	r28, 0x08	; 8
    199c:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0x80; i>0; i/=2)
    199e:	10 e8       	ldi	r17, 0x80	; 128
	{
		if (i & value)	SET_DATA ();
    19a0:	81 2f       	mov	r24, r17
    19a2:	80 23       	and	r24, r16
    19a4:	19 f0       	breq	.+6      	; 0x19ac <Write_byte+0x20>
    19a6:	0e 94 89 0c 	call	0x1912	; 0x1912 <SET_DATA>
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <Write_byte+0x24>
		else		CLR_DATA ();
    19ac:	0e 94 77 0c 	call	0x18ee	; 0x18ee <CLR_DATA>

		SET_SCK ();
    19b0:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <SET_SCK>
		asm("nop");asm("nop");
    19b4:	00 00       	nop
    19b6:	00 00       	nop
		CLR_SCK ();
    19b8:	0e 94 83 0c 	call	0x1906	; 0x1906 <CLR_SCK>

unsigned char Write_byte (unsigned char value)
{ 
	unsigned char i, error	=	0;
	I2C_data_output ();
	for (i=0x80; i>0; i/=2)
    19bc:	16 95       	lsr	r17
    19be:	21 97       	sbiw	r28, 0x01	; 1
    19c0:	79 f7       	brne	.-34     	; 0x19a0 <Write_byte+0x14>

		SET_SCK ();
		asm("nop");asm("nop");
		CLR_SCK ();
	}
	SET_DATA ();
    19c2:	0e 94 89 0c 	call	0x1912	; 0x1912 <SET_DATA>
	I2C_data_input ();
    19c6:	0e 94 66 0c 	call	0x18cc	; 0x18cc <I2C_data_input>
	asm("nop");asm("nop");
    19ca:	00 00       	nop
    19cc:	00 00       	nop
	SET_SCK (); 
    19ce:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <SET_SCK>
	error	=	READ_DATA ();
    19d2:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <READ_DATA>
    19d6:	c8 2f       	mov	r28, r24

	CLR_SCK ();
    19d8:	0e 94 83 0c 	call	0x1906	; 0x1906 <CLR_SCK>
	I2C_data_output ();
    19dc:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <I2C_data_output>

	return error;
}
    19e0:	8c 2f       	mov	r24, r28
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	1f 91       	pop	r17
    19e8:	0f 91       	pop	r16
    19ea:	08 95       	ret

000019ec <Read_byte>:

unsigned char Read_byte(unsigned char ack)
{ 
    19ec:	ff 92       	push	r15
    19ee:	0f 93       	push	r16
    19f0:	1f 93       	push	r17
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	f8 2e       	mov	r15, r24
	unsigned char i, val	=	0;
	I2C_data_input ();
    19f8:	0e 94 66 0c 	call	0x18cc	; 0x18cc <I2C_data_input>
	SET_DATA();
    19fc:	0e 94 89 0c 	call	0x1912	; 0x1912 <SET_DATA>
	asm("nop");asm("nop");
    1a00:	00 00       	nop
    1a02:	00 00       	nop
    1a04:	c8 e0       	ldi	r28, 0x08	; 8
    1a06:	d0 e0       	ldi	r29, 0x00	; 0
	return error;
}

unsigned char Read_byte(unsigned char ack)
{ 
	unsigned char i, val	=	0;
    1a08:	00 e0       	ldi	r16, 0x00	; 0
	I2C_data_input ();
	SET_DATA();
	asm("nop");asm("nop");

	for (i=0x80; i>0; i/=2)
    1a0a:	10 e8       	ldi	r17, 0x80	; 128
	{
		SET_SCK();
    1a0c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <SET_SCK>
		asm("nop");asm("nop");
    1a10:	00 00       	nop
    1a12:	00 00       	nop
		if (READ_DATA())
    1a14:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <READ_DATA>
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <Read_byte+0x32>
			val = (val | i); 
    1a1c:	01 2b       	or	r16, r17
		CLR_SCK();
    1a1e:	0e 94 83 0c 	call	0x1906	; 0x1906 <CLR_SCK>
		asm("nop");asm("nop");
    1a22:	00 00       	nop
    1a24:	00 00       	nop
	unsigned char i, val	=	0;
	I2C_data_input ();
	SET_DATA();
	asm("nop");asm("nop");

	for (i=0x80; i>0; i/=2)
    1a26:	16 95       	lsr	r17
    1a28:	21 97       	sbiw	r28, 0x01	; 1
    1a2a:	81 f7       	brne	.-32     	; 0x1a0c <Read_byte+0x20>
		if (READ_DATA())
			val = (val | i); 
		CLR_SCK();
		asm("nop");asm("nop");
	}
	I2C_data_output();
    1a2c:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <I2C_data_output>

	if (ack)	CLR_DATA();
    1a30:	ff 20       	and	r15, r15
    1a32:	19 f0       	breq	.+6      	; 0x1a3a <Read_byte+0x4e>
    1a34:	0e 94 77 0c 	call	0x18ee	; 0x18ee <CLR_DATA>
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <Read_byte+0x52>
	else		SET_DATA();
    1a3a:	0e 94 89 0c 	call	0x1912	; 0x1912 <SET_DATA>

	SET_SCK();
    1a3e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <SET_SCK>
	asm("nop");asm("nop"); 
    1a42:	00 00       	nop
    1a44:	00 00       	nop
	CLR_SCK();
    1a46:	0e 94 83 0c 	call	0x1906	; 0x1906 <CLR_SCK>
	asm("nop");asm("nop"); 
    1a4a:	00 00       	nop
    1a4c:	00 00       	nop
	SET_DATA();
    1a4e:	0e 94 89 0c 	call	0x1912	; 0x1912 <SET_DATA>

	return val;
}
    1a52:	80 2f       	mov	r24, r16
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	ff 90       	pop	r15
    1a5e:	08 95       	ret

00001a60 <Measure>:
	else 							return	0;
}

unsigned char Measure (unsigned short *p_value, unsigned short *p_checksum,
			unsigned char mode)
{ 
    1a60:	ef 92       	push	r14
    1a62:	ff 92       	push	r15
    1a64:	0f 93       	push	r16
    1a66:	1f 93       	push	r17
    1a68:	cf 93       	push	r28
    1a6a:	7c 01       	movw	r14, r24
    1a6c:	8b 01       	movw	r16, r22
    1a6e:	c4 2f       	mov	r28, r20
	unsigned short error	=	0;
	unsigned short SHT11_msb, SHT11_lsb;

	Transmission_start ();		//transmission start
    1a70:	0e 94 8f 0c 	call	0x191e	; 0x191e <Transmission_start>
	switch (mode)				//send command to sensor
    1a74:	cc 23       	and	r28, r28
    1a76:	19 f0       	breq	.+6      	; 0x1a7e <Measure+0x1e>
    1a78:	c1 30       	cpi	r28, 0x01	; 1
    1a7a:	59 f4       	brne	.+22     	; 0x1a92 <Measure+0x32>
    1a7c:	05 c0       	rjmp	.+10     	; 0x1a88 <Measure+0x28>
	{
		case TEMP :
			error	+=	Write_byte (MEASURE_TEMP);
    1a7e:	83 e0       	ldi	r24, 0x03	; 3
    1a80:	0e 94 c6 0c 	call	0x198c	; 0x198c <Write_byte>
    1a84:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1a86:	07 c0       	rjmp	.+14     	; 0x1a96 <Measure+0x36>
		case HUMI :
			error	+=	Write_byte (MEASURE_HUMI);
    1a88:	85 e0       	ldi	r24, 0x05	; 5
    1a8a:	0e 94 c6 0c 	call	0x198c	; 0x198c <Write_byte>
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <Measure+0x36>
}

unsigned char Measure (unsigned short *p_value, unsigned short *p_checksum,
			unsigned char mode)
{ 
	unsigned short error	=	0;
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
			error	+=	Write_byte (MEASURE_HUMI);
			break;
		default :
			break;	 
	}
	if (error != 0)
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	e9 f4       	brne	.+58     	; 0x1ad4 <Measure+0x74>
		return	error;

	I2C_data_input ();
    1a9a:	0e 94 66 0c 	call	0x18cc	; 0x18cc <I2C_data_input>

	while (READ_DATA());
    1a9e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <READ_DATA>
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	e1 f7       	brne	.-8      	; 0x1a9e <Measure+0x3e>

	I2C_data_input();
    1aa6:	0e 94 66 0c 	call	0x18cc	; 0x18cc <I2C_data_input>

	SHT11_msb	=	Read_byte (ACK);		// read the first byte (MSB)
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <Read_byte>
    1ab0:	c8 2f       	mov	r28, r24
	SHT11_lsb	=	Read_byte (ACK);		// read the second byte (LSB)
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <Read_byte>
	*p_value	=	(SHT11_msb * 256) + SHT11_lsb;
    1ab8:	3c 2f       	mov	r19, r28
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	28 0f       	add	r18, r24
    1abe:	31 1d       	adc	r19, r1
    1ac0:	f7 01       	movw	r30, r14
    1ac2:	31 83       	std	Z+1, r19	; 0x01
    1ac4:	20 83       	st	Z, r18
	*p_checksum	=	Read_byte (NOACK);	// read checksum
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <Read_byte>
    1acc:	f8 01       	movw	r30, r16
    1ace:	80 83       	st	Z, r24
    1ad0:	11 82       	std	Z+1, r1	; 0x01

	return error;
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
}
    1ad4:	cf 91       	pop	r28
    1ad6:	1f 91       	pop	r17
    1ad8:	0f 91       	pop	r16
    1ada:	ff 90       	pop	r15
    1adc:	ef 90       	pop	r14
    1ade:	08 95       	ret

00001ae0 <calc_SHT11>:

	return val;
}

void calc_SHT11 (unsigned short humidity, unsigned short temperature)
{ 
    1ae0:	2f 92       	push	r2
    1ae2:	3f 92       	push	r3
    1ae4:	4f 92       	push	r4
    1ae6:	5f 92       	push	r5
    1ae8:	6f 92       	push	r6
    1aea:	7f 92       	push	r7
    1aec:	8f 92       	push	r8
    1aee:	9f 92       	push	r9
    1af0:	af 92       	push	r10
    1af2:	bf 92       	push	r11
    1af4:	cf 92       	push	r12
    1af6:	df 92       	push	r13
    1af8:	ef 92       	push	r14
    1afa:	ff 92       	push	r15
    1afc:	0f 93       	push	r16
    1afe:	1f 93       	push	r17
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	0f 92       	push	r0
    1b06:	0f 92       	push	r0
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	8b 01       	movw	r16, r22
	const float T2	=	0.00008; 		// for 12 Bit
 
	float rh_lin;		// Relative Humidity
	float rh_true; 		// Humidity Sensor RH/Temperature compensation
	float t_C; 			// Temperature
	float rh	=	(float)humidity;
    1b0e:	bc 01       	movw	r22, r24
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__floatunsisf>
    1b18:	c6 2e       	mov	r12, r22
    1b1a:	d7 2e       	mov	r13, r23
    1b1c:	f8 2e       	mov	r15, r24
    1b1e:	e9 2e       	mov	r14, r25
	float t		=	(float)temperature;
    1b20:	b8 01       	movw	r22, r16
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__floatunsisf>
    
	t_C			=	((t * 0.01) - 40) - 5;
    1b2a:	2a e0       	ldi	r18, 0x0A	; 10
    1b2c:	37 ed       	ldi	r19, 0xD7	; 215
    1b2e:	43 e2       	ldi	r20, 0x23	; 35
    1b30:	5c e3       	ldi	r21, 0x3C	; 60
    1b32:	0e 94 0a 13 	call	0x2614	; 0x2614 <__mulsf3>
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e2       	ldi	r20, 0x20	; 32
    1b3c:	52 e4       	ldi	r21, 0x42	; 66
    1b3e:	0e 94 bf 11 	call	0x237e	; 0x237e <__subsf3>
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 ea       	ldi	r20, 0xA0	; 160
    1b48:	50 e4       	ldi	r21, 0x40	; 64
    1b4a:	0e 94 bf 11 	call	0x237e	; 0x237e <__subsf3>
    1b4e:	36 2e       	mov	r3, r22
    1b50:	27 2e       	mov	r2, r23
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	9a 83       	std	Y+2, r25	; 0x02
	rh_lin		=	(C3 * rh * rh) + (C2 * rh) + C1;
	rh_true 	=	(t_C - 25) * (T1 + (T2 * rh)) + rh_lin;
    1b56:	38 2f       	mov	r19, r24
    1b58:	29 2f       	mov	r18, r25
    1b5a:	86 2f       	mov	r24, r22
    1b5c:	92 2d       	mov	r25, r2
    1b5e:	a3 2f       	mov	r26, r19
    1b60:	b2 2f       	mov	r27, r18
    1b62:	bc 01       	movw	r22, r24
    1b64:	cd 01       	movw	r24, r26
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	48 ec       	ldi	r20, 0xC8	; 200
    1b6c:	51 e4       	ldi	r21, 0x41	; 65
    1b6e:	0e 94 bf 11 	call	0x237e	; 0x237e <__subsf3>
    1b72:	4b 01       	movw	r8, r22
    1b74:	5c 01       	movw	r10, r24
    1b76:	8c 2d       	mov	r24, r12
    1b78:	9d 2d       	mov	r25, r13
    1b7a:	af 2d       	mov	r26, r15
    1b7c:	be 2d       	mov	r27, r14
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	2c ea       	ldi	r18, 0xAC	; 172
    1b84:	35 ec       	ldi	r19, 0xC5	; 197
    1b86:	47 ea       	ldi	r20, 0xA7	; 167
    1b88:	58 e3       	ldi	r21, 0x38	; 56
    1b8a:	0e 94 0a 13 	call	0x2614	; 0x2614 <__mulsf3>
    1b8e:	2a e0       	ldi	r18, 0x0A	; 10
    1b90:	37 ed       	ldi	r19, 0xD7	; 215
    1b92:	43 e2       	ldi	r20, 0x23	; 35
    1b94:	5c e3       	ldi	r21, 0x3C	; 60
    1b96:	0e 94 c0 11 	call	0x2380	; 0x2380 <__addsf3>
    1b9a:	9b 01       	movw	r18, r22
    1b9c:	ac 01       	movw	r20, r24
    1b9e:	c5 01       	movw	r24, r10
    1ba0:	b4 01       	movw	r22, r8
    1ba2:	0e 94 0a 13 	call	0x2614	; 0x2614 <__mulsf3>
    1ba6:	2b 01       	movw	r4, r22
    1ba8:	3c 01       	movw	r6, r24
	float t_C; 			// Temperature
	float rh	=	(float)humidity;
	float t		=	(float)temperature;
    
	t_C			=	((t * 0.01) - 40) - 5;
	rh_lin		=	(C3 * rh * rh) + (C2 * rh) + C1;
    1baa:	8c 2d       	mov	r24, r12
    1bac:	9d 2d       	mov	r25, r13
    1bae:	af 2d       	mov	r26, r15
    1bb0:	be 2d       	mov	r27, r14
    1bb2:	bc 01       	movw	r22, r24
    1bb4:	cd 01       	movw	r24, r26
    1bb6:	22 ea       	ldi	r18, 0xA2	; 162
    1bb8:	37 ee       	ldi	r19, 0xE7	; 231
    1bba:	4b e3       	ldi	r20, 0x3B	; 59
    1bbc:	56 eb       	ldi	r21, 0xB6	; 182
    1bbe:	0e 94 0a 13 	call	0x2614	; 0x2614 <__mulsf3>
    1bc2:	0c 2d       	mov	r16, r12
    1bc4:	1d 2d       	mov	r17, r13
    1bc6:	2f 2d       	mov	r18, r15
    1bc8:	3e 2d       	mov	r19, r14
    1bca:	a9 01       	movw	r20, r18
    1bcc:	98 01       	movw	r18, r16
    1bce:	0e 94 0a 13 	call	0x2614	; 0x2614 <__mulsf3>
    1bd2:	4b 01       	movw	r8, r22
    1bd4:	5c 01       	movw	r10, r24
    1bd6:	80 2f       	mov	r24, r16
    1bd8:	91 2f       	mov	r25, r17
    1bda:	af 2d       	mov	r26, r15
    1bdc:	be 2d       	mov	r27, r14
    1bde:	bc 01       	movw	r22, r24
    1be0:	cd 01       	movw	r24, r26
    1be2:	24 e5       	ldi	r18, 0x54	; 84
    1be4:	33 ee       	ldi	r19, 0xE3	; 227
    1be6:	45 e2       	ldi	r20, 0x25	; 37
    1be8:	5d e3       	ldi	r21, 0x3D	; 61
    1bea:	0e 94 0a 13 	call	0x2614	; 0x2614 <__mulsf3>
    1bee:	9b 01       	movw	r18, r22
    1bf0:	ac 01       	movw	r20, r24
    1bf2:	c5 01       	movw	r24, r10
    1bf4:	b4 01       	movw	r22, r8
    1bf6:	0e 94 c0 11 	call	0x2380	; 0x2380 <__addsf3>
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e8       	ldi	r20, 0x80	; 128
    1c00:	50 e4       	ldi	r21, 0x40	; 64
    1c02:	0e 94 bf 11 	call	0x237e	; 0x237e <__subsf3>
    1c06:	9b 01       	movw	r18, r22
    1c08:	ac 01       	movw	r20, r24
	rh_true 	=	(t_C - 25) * (T1 + (T2 * rh)) + rh_lin;
    1c0a:	c3 01       	movw	r24, r6
    1c0c:	b2 01       	movw	r22, r4
    1c0e:	0e 94 c0 11 	call	0x2380	; 0x2380 <__addsf3>
    1c12:	f6 2e       	mov	r15, r22
    1c14:	07 2f       	mov	r16, r23
    1c16:	48 2e       	mov	r4, r24
    1c18:	89 2e       	mov	r8, r25
    1c1a:	e6 2e       	mov	r14, r22
    1c1c:	17 2f       	mov	r17, r23
    1c1e:	d8 2e       	mov	r13, r24
    1c20:	c9 2e       	mov	r12, r25

	if (rh_true > 100)	rh_true = 100;
    1c22:	86 2f       	mov	r24, r22
    1c24:	90 2f       	mov	r25, r16
    1c26:	a4 2d       	mov	r26, r4
    1c28:	b8 2d       	mov	r27, r8
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	48 ec       	ldi	r20, 0xC8	; 200
    1c34:	52 e4       	ldi	r21, 0x42	; 66
    1c36:	0e 94 06 13 	call	0x260c	; 0x260c <__gesf2>
    1c3a:	18 16       	cp	r1, r24
    1c3c:	7c f0       	brlt	.+30     	; 0x1c5c <calc_SHT11+0x17c>
	if (rh_true < 0.1)	rh_true = 0.1;
    1c3e:	8f 2d       	mov	r24, r15
    1c40:	90 2f       	mov	r25, r16
    1c42:	a4 2d       	mov	r26, r4
    1c44:	b8 2d       	mov	r27, r8
    1c46:	bc 01       	movw	r22, r24
    1c48:	cd 01       	movw	r24, r26
    1c4a:	2d ec       	ldi	r18, 0xCD	; 205
    1c4c:	3c ec       	ldi	r19, 0xCC	; 204
    1c4e:	4c ec       	ldi	r20, 0xCC	; 204
    1c50:	5d e3       	ldi	r21, 0x3D	; 61
    1c52:	0e 94 24 12 	call	0x2448	; 0x2448 <__cmpsf2>
    1c56:	88 23       	and	r24, r24
    1c58:	64 f0       	brlt	.+24     	; 0x1c72 <calc_SHT11+0x192>
    1c5a:	18 c0       	rjmp	.+48     	; 0x1c8c <calc_SHT11+0x1ac>
    
	t_C			=	((t * 0.01) - 40) - 5;
	rh_lin		=	(C3 * rh * rh) + (C2 * rh) + C1;
	rh_true 	=	(t_C - 25) * (T1 + (T2 * rh)) + rh_lin;

	if (rh_true > 100)	rh_true = 100;
    1c5c:	ee 24       	eor	r14, r14
    1c5e:	10 e0       	ldi	r17, 0x00	; 0
    1c60:	0f 2e       	mov	r0, r31
    1c62:	f8 ec       	ldi	r31, 0xC8	; 200
    1c64:	df 2e       	mov	r13, r31
    1c66:	f0 2d       	mov	r31, r0
    1c68:	0f 2e       	mov	r0, r31
    1c6a:	f2 e4       	ldi	r31, 0x42	; 66
    1c6c:	cf 2e       	mov	r12, r31
    1c6e:	f0 2d       	mov	r31, r0
    1c70:	0d c0       	rjmp	.+26     	; 0x1c8c <calc_SHT11+0x1ac>
	if (rh_true < 0.1)	rh_true = 0.1;
    1c72:	0f 2e       	mov	r0, r31
    1c74:	fd ec       	ldi	r31, 0xCD	; 205
    1c76:	ef 2e       	mov	r14, r31
    1c78:	f0 2d       	mov	r31, r0
    1c7a:	1c ec       	ldi	r17, 0xCC	; 204
    1c7c:	0f 2e       	mov	r0, r31
    1c7e:	fc ec       	ldi	r31, 0xCC	; 204
    1c80:	df 2e       	mov	r13, r31
    1c82:	f0 2d       	mov	r31, r0
    1c84:	0f 2e       	mov	r0, r31
    1c86:	fd e3       	ldi	r31, 0x3D	; 61
    1c88:	cf 2e       	mov	r12, r31
    1c8a:	f0 2d       	mov	r31, r0

	val_temp	=	(unsigned short)(t_C*10);
    1c8c:	39 81       	ldd	r19, Y+1	; 0x01
    1c8e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c90:	83 2d       	mov	r24, r3
    1c92:	92 2d       	mov	r25, r2
    1c94:	a3 2f       	mov	r26, r19
    1c96:	b2 2f       	mov	r27, r18
    1c98:	bc 01       	movw	r22, r24
    1c9a:	cd 01       	movw	r24, r26
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e2       	ldi	r20, 0x20	; 32
    1ca2:	51 e4       	ldi	r21, 0x41	; 65
    1ca4:	0e 94 0a 13 	call	0x2614	; 0x2614 <__mulsf3>
    1ca8:	0e 94 28 12 	call	0x2450	; 0x2450 <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	90 93 aa 0a 	sts	0x0AAA, r25
    1cb4:	80 93 a9 0a 	sts	0x0AA9, r24
	val_humi	=	(unsigned short)(rh_true*10);
    1cb8:	8e 2d       	mov	r24, r14
    1cba:	91 2f       	mov	r25, r17
    1cbc:	ad 2d       	mov	r26, r13
    1cbe:	bc 2d       	mov	r27, r12
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e2       	ldi	r20, 0x20	; 32
    1cca:	51 e4       	ldi	r21, 0x41	; 65
    1ccc:	0e 94 0a 13 	call	0x2614	; 0x2614 <__mulsf3>
    1cd0:	0e 94 28 12 	call	0x2450	; 0x2450 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	90 93 ac 0a 	sts	0x0AAC, r25
    1cdc:	80 93 ab 0a 	sts	0x0AAB, r24
}
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	1f 91       	pop	r17
    1cea:	0f 91       	pop	r16
    1cec:	ff 90       	pop	r15
    1cee:	ef 90       	pop	r14
    1cf0:	df 90       	pop	r13
    1cf2:	cf 90       	pop	r12
    1cf4:	bf 90       	pop	r11
    1cf6:	af 90       	pop	r10
    1cf8:	9f 90       	pop	r9
    1cfa:	8f 90       	pop	r8
    1cfc:	7f 90       	pop	r7
    1cfe:	6f 90       	pop	r6
    1d00:	5f 90       	pop	r5
    1d02:	4f 90       	pop	r4
    1d04:	3f 90       	pop	r3
    1d06:	2f 90       	pop	r2
    1d08:	08 95       	ret

00001d0a <get_SHT11_data>:

	CLR_SCK();
}

unsigned short get_SHT11_data (unsigned char type)
{
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
	sensing_type	=	type;
    1d0e:	80 93 b1 0a 	sts	0x0AB1, r24

	error	=	0;
    1d12:	10 92 b0 0a 	sts	0x0AB0, r1
    1d16:	10 92 af 0a 	sts	0x0AAF, r1
	// measure humidity
	error	+=	Measure (&SHT11_humi, &checksum, HUMI);
    1d1a:	c2 eb       	ldi	r28, 0xB2	; 178
    1d1c:	da e0       	ldi	r29, 0x0A	; 10
    1d1e:	87 ea       	ldi	r24, 0xA7	; 167
    1d20:	9a e0       	ldi	r25, 0x0A	; 10
    1d22:	be 01       	movw	r22, r28
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <Measure>
    1d2a:	20 91 af 0a 	lds	r18, 0x0AAF
    1d2e:	30 91 b0 0a 	lds	r19, 0x0AB0
    1d32:	28 0f       	add	r18, r24
    1d34:	31 1d       	adc	r19, r1
    1d36:	30 93 b0 0a 	sts	0x0AB0, r19
    1d3a:	20 93 af 0a 	sts	0x0AAF, r18
	// measure temperature
	error	+=	Measure (&SHT11_temp, &checksum, TEMP);
    1d3e:	8d ea       	ldi	r24, 0xAD	; 173
    1d40:	9a e0       	ldi	r25, 0x0A	; 10
    1d42:	be 01       	movw	r22, r28
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <Measure>
    1d4a:	20 91 af 0a 	lds	r18, 0x0AAF
    1d4e:	30 91 b0 0a 	lds	r19, 0x0AB0
    1d52:	28 0f       	add	r18, r24
    1d54:	31 1d       	adc	r19, r1
    1d56:	30 93 b0 0a 	sts	0x0AB0, r19
    1d5a:	20 93 af 0a 	sts	0x0AAF, r18

	if (error != 0)		// [Error] connection reset
    1d5e:	21 15       	cp	r18, r1
    1d60:	31 05       	cpc	r19, r1
    1d62:	19 f0       	breq	.+6      	; 0x1d6a <get_SHT11_data+0x60>
		Connection_reset ();
    1d64:	0e 94 ac 0c 	call	0x1958	; 0x1958 <Connection_reset>
    1d68:	0a c0       	rjmp	.+20     	; 0x1d7e <get_SHT11_data+0x74>
	else				// Calculate humidity, temperature
		calc_SHT11 (SHT11_humi, SHT11_temp);
    1d6a:	60 91 ad 0a 	lds	r22, 0x0AAD
    1d6e:	70 91 ae 0a 	lds	r23, 0x0AAE
    1d72:	80 91 a7 0a 	lds	r24, 0x0AA7
    1d76:	90 91 a8 0a 	lds	r25, 0x0AA8
    1d7a:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <calc_SHT11>

	if (sensing_type == HUMI)		return	val_humi;
    1d7e:	80 91 b1 0a 	lds	r24, 0x0AB1
    1d82:	81 30       	cpi	r24, 0x01	; 1
    1d84:	29 f4       	brne	.+10     	; 0x1d90 <get_SHT11_data+0x86>
    1d86:	80 91 ab 0a 	lds	r24, 0x0AAB
    1d8a:	90 91 ac 0a 	lds	r25, 0x0AAC
    1d8e:	09 c0       	rjmp	.+18     	; 0x1da2 <get_SHT11_data+0x98>
	else if (sensing_type == TEMP)	return	val_temp;
    1d90:	88 23       	and	r24, r24
    1d92:	29 f4       	brne	.+10     	; 0x1d9e <get_SHT11_data+0x94>
    1d94:	80 91 a9 0a 	lds	r24, 0x0AA9
    1d98:	90 91 aa 0a 	lds	r25, 0x0AAA
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <get_SHT11_data+0x98>
	else 							return	0;
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	90 e0       	ldi	r25, 0x00	; 0
}
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	08 95       	ret

00001da8 <printValue>:
}
unsigned char printValue (unsigned char sense, unsigned short senseVal)  //humi temp µ•¿Ã≈Õ ∞°∞¯ «‘ºˆ
{
	unsigned char tens;
	tens		=	senseVal / 10;			// Ω ¿« ¿⁄∏Æ ¿œ¿« ¿⁄∏Æ
	if (sense == TEMP)
    1da8:	88 23       	and	r24, r24
    1daa:	19 f0       	breq	.+6      	; 0x1db2 <printValue+0xa>
	{
		return tens;
	}
	else if (sense == HUMI)
    1dac:	81 30       	cpi	r24, 0x01	; 1
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <printValue+0xa>
    1db0:	08 95       	ret
	val_humi	=	(unsigned short)(rh_true*10);
}
unsigned char printValue (unsigned char sense, unsigned short senseVal)  //humi temp µ•¿Ã≈Õ ∞°∞¯ «‘ºˆ
{
	unsigned char tens;
	tens		=	senseVal / 10;			// Ω ¿« ¿⁄∏Æ ¿œ¿« ¿⁄∏Æ
    1db2:	cb 01       	movw	r24, r22
    1db4:	6a e0       	ldi	r22, 0x0A	; 10
    1db6:	70 e0       	ldi	r23, 0x00	; 0
    1db8:	0e 94 6d 13 	call	0x26da	; 0x26da <__udivmodhi4>
	}
	else if (sense == HUMI)
	{
		return tens;
	}
    1dbc:	86 2f       	mov	r24, r22
    1dbe:	08 95       	ret

00001dc0 <TIMER_100mSInit>:
  
void TIMER_100mSInit (void)
{
	// Timer/Count0 ÏÇ¨Ïö©
	// ÎèôÏûëÎ™®ÎìúÏôÄ ÌÅ¥Îü≠ÏÜåÏä§ Î∞è ÌîÑÎ¶¨Ïä§ÏºÄÏùºÎü¨ Í≤∞Ï†ï
	TCCR0B	=	0x05;  //  fclk_io / 1024   
    1dc0:	85 e0       	ldi	r24, 0x05	; 5
    1dc2:	85 bd       	out	0x25, r24	; 37
	// 0.01sÏóê Ïò§Î≤ÑÌîåÎ°úÏö∞ Î∞úÏÉù, 1/(14745600Hz/1024)‚Öπ144 = 0.01s
	// Ïò§Î≤ÑÌîåÎ°úÏö∞ÍπåÏßÄ Ïπ¥Ïö¥Ìä∏Î•º 144Î°ú ÏÑ§Ï†ï
	TCNT0	=	0xff - 144;
    1dc4:	8f e6       	ldi	r24, 0x6F	; 111
    1dc6:	86 bd       	out	0x26, r24	; 38
	TIMSK0	|=	1 << TOIE0;	// Overflow Interupt Enable
    1dc8:	ee e6       	ldi	r30, 0x6E	; 110
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	81 60       	ori	r24, 0x01	; 1
    1dd0:	80 83       	st	Z, r24
	TIFR0	|=	1 << TOV0;	// set Overflow Interupt Flag
    1dd2:	a8 9a       	sbi	0x15, 0	; 21
}
    1dd4:	08 95       	ret

00001dd6 <setElapsedTime100mSUnit>:


void setElapsedTime100mSUnit(uint32_t Counter)
{
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
	setTimerCheckCounter = Counter;
    1dda:	80 93 5b 04 	sts	0x045B, r24
    1dde:	90 93 5c 04 	sts	0x045C, r25
    1de2:	a0 93 5d 04 	sts	0x045D, r26
    1de6:	b0 93 5e 04 	sts	0x045E, r27
	timerCouter = 0;
    1dea:	10 92 5f 04 	sts	0x045F, r1
    1dee:	10 92 60 04 	sts	0x0460, r1
    1df2:	10 92 61 04 	sts	0x0461, r1
    1df6:	10 92 62 04 	sts	0x0462, r1
}
    1dfa:	08 95       	ret

00001dfc <isElapsed>:

uint8_t isElapsed()
{
	if (flagOverflowSetTimer )
    1dfc:	80 91 5a 04 	lds	r24, 0x045A
    1e00:	88 23       	and	r24, r24
    1e02:	21 f0       	breq	.+8      	; 0x1e0c <isElapsed+0x10>
	{
		flagOverflowSetTimer = 0;
    1e04:	10 92 5a 04 	sts	0x045A, r1
		return 1;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	08 95       	ret
	}
	
	return 0;
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
}
    1e0e:	08 95       	ret

00001e10 <eventCallback>:
volatile unsigned short humi;
extern int n_flag_getADC;//--------------^ºˆ¡§∫Œ∫–

static void eventCallback(int eventType,uint8_t* rxBuff, int rxSize)
{
	if (eventType == EVENT_RX_DATA) 
    1e10:	81 30       	cpi	r24, 0x01	; 1
    1e12:	91 05       	cpc	r25, r1
    1e14:	81 f4       	brne	.+32     	; 0x1e36 <eventCallback+0x26>
	{
		debugprint("\r\nRX:%s\r\n", rxBuff);
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <eventCallback+0x8>
    1e18:	0f 92       	push	r0
    1e1a:	8b e3       	ldi	r24, 0x3B	; 59
    1e1c:	93 e0       	ldi	r25, 0x03	; 3
    1e1e:	ed b7       	in	r30, 0x3d	; 61
    1e20:	fe b7       	in	r31, 0x3e	; 62
    1e22:	92 83       	std	Z+2, r25	; 0x02
    1e24:	81 83       	std	Z+1, r24	; 0x01
    1e26:	74 83       	std	Z+4, r23	; 0x04
    1e28:	63 83       	std	Z+3, r22	; 0x03
    1e2a:	0e 94 c0 01 	call	0x380	; 0x380 <debugprint>
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	08 95       	ret

00001e38 <main>:
	}
}


int main(void)
{
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	c0 50       	subi	r28, 0x00	; 0
    1e42:	d1 40       	sbci	r29, 0x01	; 1
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
	uint8_t strTemp[256];
	unsigned char tempc, humic;   //∫Ø»Øµ» ø¬µµ Ω¿µµ ¿˙¿Â «œ¥¬ ∫Øºˆ
	
	debugInit();
    1e4e:	0e 94 a9 01 	call	0x352	; 0x352 <debugInit>
	wifiInit();
    1e52:	0e 94 62 02 	call	0x4c4	; 0x4c4 <wifiInit>
	
	sei();
    1e56:	78 94       	sei
		
	debugprint("wifi test start\r\n");
    1e58:	0f 92       	push	r0
    1e5a:	0f 92       	push	r0
    1e5c:	85 e4       	ldi	r24, 0x45	; 69
    1e5e:	93 e0       	ldi	r25, 0x03	; 3
    1e60:	ad b7       	in	r26, 0x3d	; 61
    1e62:	be b7       	in	r27, 0x3e	; 62
    1e64:	12 96       	adiw	r26, 0x02	; 2
    1e66:	9c 93       	st	X, r25
    1e68:	8e 93       	st	-X, r24
    1e6a:	11 97       	sbiw	r26, 0x01	; 1
    1e6c:	0e 94 c0 01 	call	0x380	; 0x380 <debugprint>
    1e70:	8f ef       	ldi	r24, 0xFF	; 255
    1e72:	9f ef       	ldi	r25, 0xFF	; 255
    1e74:	ac e2       	ldi	r26, 0x2C	; 44
    1e76:	81 50       	subi	r24, 0x01	; 1
    1e78:	90 40       	sbci	r25, 0x00	; 0
    1e7a:	a0 40       	sbci	r26, 0x00	; 0
    1e7c:	e1 f7       	brne	.-8      	; 0x1e76 <main+0x3e>
    1e7e:	00 c0       	rjmp	.+0      	; 0x1e80 <main+0x48>
    1e80:	00 00       	nop
	_delay_ms(1000);
	
	wificlearUartBuff();
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0e 94 d6 08 	call	0x11ac	; 0x11ac <wificlearUartBuff>
	
	// UART echo disable 
	wifiEchoDisable();
    1e8a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <wifiEchoDisable>
	wificlearUartBuff();
    1e8e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <wificlearUartBuff>
	
	// register callback function 
	wifiSetEventCallback(eventCallback);
    1e92:	88 e0       	ldi	r24, 0x08	; 8
    1e94:	9f e0       	ldi	r25, 0x0F	; 15
    1e96:	0e 94 47 08 	call	0x108e	; 0x108e <wifiSetEventCallback>
	
	// Auto connection disable
	wifiAutoConnectDisable();
    1e9a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <wifiAutoConnectDisable>
	wificlearUartBuff();
    1e9e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <wificlearUartBuff>
	
	wifiModeSet();
    1ea2:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <wifiModeSet>
	
	wifiEnableDHCP();
    1ea6:	0e 94 10 08 	call	0x1020	; 0x1020 <wifiEnableDHCP>
	
	debugprint("\r\nAP list display:\r\n");
    1eaa:	0f 92       	push	r0
    1eac:	0f 92       	push	r0
    1eae:	87 e5       	ldi	r24, 0x57	; 87
    1eb0:	93 e0       	ldi	r25, 0x03	; 3
    1eb2:	ad b7       	in	r26, 0x3d	; 61
    1eb4:	be b7       	in	r27, 0x3e	; 62
    1eb6:	12 96       	adiw	r26, 0x02	; 2
    1eb8:	9c 93       	st	X, r25
    1eba:	8e 93       	st	-X, r24
    1ebc:	11 97       	sbiw	r26, 0x01	; 1
    1ebe:	0e 94 c0 01 	call	0x380	; 0x380 <debugprint>
	wifiDisplayAPlist();
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0e 94 ba 07 	call	0xf74	; 0xf74 <wifiDisplayAPlist>
	
	// connect  AP 
	debugprint("\r\n");
    1eca:	0f 92       	push	r0
    1ecc:	0f 92       	push	r0
    1ece:	8c e6       	ldi	r24, 0x6C	; 108
    1ed0:	93 e0       	ldi	r25, 0x03	; 3
    1ed2:	ed b7       	in	r30, 0x3d	; 61
    1ed4:	fe b7       	in	r31, 0x3e	; 62
    1ed6:	92 83       	std	Z+2, r25	; 0x02
    1ed8:	81 83       	std	Z+1, r24	; 0x01
    1eda:	0e 94 c0 01 	call	0x380	; 0x380 <debugprint>
	if ( !wifiConnectAP("CSNET-301", "gwnucomse"))
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	8f e6       	ldi	r24, 0x6F	; 111
    1ee4:	93 e0       	ldi	r25, 0x03	; 3
    1ee6:	69 e7       	ldi	r22, 0x79	; 121
    1ee8:	73 e0       	ldi	r23, 0x03	; 3
    1eea:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <wifiConnectAP>
    1eee:	88 23       	and	r24, r24
    1ef0:	79 f4       	brne	.+30     	; 0x1f10 <main+0xd8>
	{
		debugprint("AP connected.\r\n");
    1ef2:	0f 92       	push	r0
    1ef4:	0f 92       	push	r0
    1ef6:	83 e8       	ldi	r24, 0x83	; 131
    1ef8:	93 e0       	ldi	r25, 0x03	; 3
    1efa:	ad b7       	in	r26, 0x3d	; 61
    1efc:	be b7       	in	r27, 0x3e	; 62
    1efe:	12 96       	adiw	r26, 0x02	; 2
    1f00:	9c 93       	st	X, r25
    1f02:	8e 93       	st	-X, r24
    1f04:	11 97       	sbiw	r26, 0x01	; 1
    1f06:	0e 94 c0 01 	call	0x380	; 0x380 <debugprint>
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0c c0       	rjmp	.+24     	; 0x1f28 <main+0xf0>
	}
	else
	{
		debugprint("AP connection fail.\r\n");
    1f10:	0f 92       	push	r0
    1f12:	0f 92       	push	r0
    1f14:	83 e9       	ldi	r24, 0x93	; 147
    1f16:	93 e0       	ldi	r25, 0x03	; 3
    1f18:	ed b7       	in	r30, 0x3d	; 61
    1f1a:	fe b7       	in	r31, 0x3e	; 62
    1f1c:	92 83       	std	Z+2, r25	; 0x02
    1f1e:	81 83       	std	Z+1, r24	; 0x01
    1f20:	0e 94 c0 01 	call	0x380	; 0x380 <debugprint>
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
	}
	// display  local allocated IP 
	debugprint("\r\n Allocated local IP:\r\n");
    1f28:	0f 92       	push	r0
    1f2a:	0f 92       	push	r0
    1f2c:	89 ea       	ldi	r24, 0xA9	; 169
    1f2e:	93 e0       	ldi	r25, 0x03	; 3
    1f30:	ad b7       	in	r26, 0x3d	; 61
    1f32:	be b7       	in	r27, 0x3e	; 62
    1f34:	12 96       	adiw	r26, 0x02	; 2
    1f36:	9c 93       	st	X, r25
    1f38:	8e 93       	st	-X, r24
    1f3a:	11 97       	sbiw	r26, 0x01	; 1
    1f3c:	0e 94 c0 01 	call	0x380	; 0x380 <debugprint>
	wifiDisplayLocalIP();
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0e 94 01 08 	call	0x1002	; 0x1002 <wifiDisplayLocalIP>
	debugprint("\r\n");
    1f48:	0f 92       	push	r0
    1f4a:	0f 92       	push	r0
    1f4c:	8c e6       	ldi	r24, 0x6C	; 108
    1f4e:	93 e0       	ldi	r25, 0x03	; 3
    1f50:	ed b7       	in	r30, 0x3d	; 61
    1f52:	fe b7       	in	r31, 0x3e	; 62
    1f54:	92 83       	std	Z+2, r25	; 0x02
    1f56:	81 83       	std	Z+1, r24	; 0x01
    1f58:	0e 94 c0 01 	call	0x380	; 0x380 <debugprint>

	// TCP remote server connection
	if( !wifiConnectTCPServer(SERVER_IP_STR,SERVER_PORT))
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	82 ec       	ldi	r24, 0xC2	; 194
    1f62:	93 e0       	ldi	r25, 0x03	; 3
    1f64:	41 e5       	ldi	r20, 0x51	; 81
    1f66:	53 ec       	ldi	r21, 0xC3	; 195
    1f68:	60 e0       	ldi	r22, 0x00	; 0
    1f6a:	70 e0       	ldi	r23, 0x00	; 0
    1f6c:	0e 94 1f 08 	call	0x103e	; 0x103e <wifiConnectTCPServer>
    1f70:	88 23       	and	r24, r24
    1f72:	79 f4       	brne	.+30     	; 0x1f92 <main+0x15a>
	{
		debugprint("Connected Server.\r\n");
    1f74:	0f 92       	push	r0
    1f76:	0f 92       	push	r0
    1f78:	8f ec       	ldi	r24, 0xCF	; 207
    1f7a:	93 e0       	ldi	r25, 0x03	; 3
    1f7c:	ad b7       	in	r26, 0x3d	; 61
    1f7e:	be b7       	in	r27, 0x3e	; 62
    1f80:	12 96       	adiw	r26, 0x02	; 2
    1f82:	9c 93       	st	X, r25
    1f84:	8e 93       	st	-X, r24
    1f86:	11 97       	sbiw	r26, 0x01	; 1
    1f88:	0e 94 c0 01 	call	0x380	; 0x380 <debugprint>
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0c c0       	rjmp	.+24     	; 0x1faa <main+0x172>
	}
	else
	{
		debugprint("Server connection fail.\r\n");
    1f92:	0f 92       	push	r0
    1f94:	0f 92       	push	r0
    1f96:	83 ee       	ldi	r24, 0xE3	; 227
    1f98:	93 e0       	ldi	r25, 0x03	; 3
    1f9a:	ed b7       	in	r30, 0x3d	; 61
    1f9c:	fe b7       	in	r31, 0x3e	; 62
    1f9e:	92 83       	std	Z+2, r25	; 0x02
    1fa0:	81 83       	std	Z+1, r24	; 0x01
    1fa2:	0e 94 c0 01 	call	0x380	; 0x380 <debugprint>
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
	}				
	debugprint("\r\n");
    1faa:	0f 92       	push	r0
    1fac:	0f 92       	push	r0
    1fae:	8c e6       	ldi	r24, 0x6C	; 108
    1fb0:	93 e0       	ldi	r25, 0x03	; 3
    1fb2:	ad b7       	in	r26, 0x3d	; 61
    1fb4:	be b7       	in	r27, 0x3e	; 62
    1fb6:	12 96       	adiw	r26, 0x02	; 2
    1fb8:	9c 93       	st	X, r25
    1fba:	8e 93       	st	-X, r24
    1fbc:	11 97       	sbiw	r26, 0x01	; 1
    1fbe:	0e 94 c0 01 	call	0x380	; 0x380 <debugprint>
	
	// Send Test message 
	strcpy(strTemp,"test msessage: hello\r\n");
    1fc2:	de 01       	movw	r26, r28
    1fc4:	11 96       	adiw	r26, 0x01	; 1
    1fc6:	ed ef       	ldi	r30, 0xFD	; 253
    1fc8:	f3 e0       	ldi	r31, 0x03	; 3
    1fca:	87 e1       	ldi	r24, 0x17	; 23
    1fcc:	01 90       	ld	r0, Z+
    1fce:	0d 92       	st	X+, r0
    1fd0:	81 50       	subi	r24, 0x01	; 1
    1fd2:	e1 f7       	brne	.-8      	; 0x1fcc <main+0x194>
	wifiSendData(strTemp, sizeof("test msessage: hello\r\n"));
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	ce 01       	movw	r24, r28
    1fda:	01 96       	adiw	r24, 0x01	; 1
    1fdc:	67 e1       	ldi	r22, 0x17	; 23
    1fde:	70 e0       	ldi	r23, 0x00	; 0
    1fe0:	0e 94 4d 08 	call	0x109a	; 0x109a <wifiSendData>
	
	 //ø©±‚º≠∫Œ≈Õ Ω«¡¶ µ•¿Ã≈Õ∞° ∞°∞¯µ»¥Ÿ. 
	TIMER_100mSInit ();
    1fe4:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <TIMER_100mSInit>
	setElapsedTime100mSUnit(100);
    1fe8:	64 e6       	ldi	r22, 0x64	; 100
    1fea:	70 e0       	ldi	r23, 0x00	; 0
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <setElapsedTime100mSUnit>

	debugprint("start Loop\r\n");	
    1ff4:	0f 92       	push	r0
    1ff6:	0f 92       	push	r0
    1ff8:	84 e1       	ldi	r24, 0x14	; 20
    1ffa:	94 e0       	ldi	r25, 0x04	; 4
    1ffc:	ed b7       	in	r30, 0x3d	; 61
    1ffe:	fe b7       	in	r31, 0x3e	; 62
    2000:	92 83       	std	Z+2, r25	; 0x02
    2002:	81 83       	std	Z+1, r24	; 0x01
    2004:	0e 94 c0 01 	call	0x380	; 0x380 <debugprint>
	
	int counter = 0;
/*----------------led∫Œ∫–¡¶∞≈*/
	LED_Init ();		// PORTB = GREEN, PORTE = RED------------------------vºˆ¡§ ∫Œ∫– LED CDS º≥¡§
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	0e 94 1a 01 	call	0x234	; 0x234 <LED_Init>
	AdcInit(1);			// PORTF = ADC1
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	0e 94 95 00 	call	0x12a	; 0x12a <AdcInit>
	TIMER_Init();
    2016:	0e 94 0f 01 	call	0x21e	; 0x21e <TIMER_Init>
		
	sei();//-------------------------------------------^ºˆ¡§∫Œ∫–
    201a:	78 94       	sei
	
	SHT11_Init();  //humi temp º≥¡§
    201c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <SHT11_Init>
	TIMER_100mSInit ();
	setElapsedTime100mSUnit(100);

	debugprint("start Loop\r\n");	
	
	int counter = 0;
    2020:	aa 24       	eor	r10, r10
    2022:	bb 24       	eor	r11, r11
        
		wifiMain();
		
		if ( isElapsed())
		{
			sprintf(strTemp,"hello:%d CDS : %d temp : %d humi : %d\n",counter++, gun_AdcValue, tempc, humic);		//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫– 
    2024:	6e 01       	movw	r12, r28
    2026:	08 94       	sec
    2028:	c1 1c       	adc	r12, r1
    202a:	d1 1c       	adc	r13, r1
    202c:	0f 2e       	mov	r0, r31
    202e:	f1 e2       	ldi	r31, 0x21	; 33
    2030:	8f 2e       	mov	r8, r31
    2032:	f4 e0       	ldi	r31, 0x04	; 4
    2034:	9f 2e       	mov	r9, r31
    2036:	f0 2d       	mov	r31, r0
			wifiSendData(strTemp, strlen(strTemp));			//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
			debugprint("TX:%s\r\n",strTemp);				//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
    2038:	0f 2e       	mov	r0, r31
    203a:	f8 e4       	ldi	r31, 0x48	; 72
    203c:	6f 2e       	mov	r6, r31
    203e:	f4 e0       	ldi	r31, 0x04	; 4
    2040:	7f 2e       	mov	r7, r31
    2042:	f0 2d       	mov	r31, r0
	SHT11_Init();  //humi temp º≥¡§
	
    while(1)
    {//TODO:: Please write your application code 
		
		temp = get_SHT11_data (TEMP);	
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <get_SHT11_data>
    204a:	90 93 b7 0a 	sts	0x0AB7, r25
    204e:	80 93 b6 0a 	sts	0x0AB6, r24
		
		humi = get_SHT11_data (HUMI); 	
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <get_SHT11_data>
    2058:	90 93 b5 0a 	sts	0x0AB5, r25
    205c:	80 93 b4 0a 	sts	0x0AB4, r24
		
		tempc = printValue (TEMP, temp);
    2060:	60 91 b6 0a 	lds	r22, 0x0AB6
    2064:	70 91 b7 0a 	lds	r23, 0x0AB7
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <printValue>
    206e:	08 2f       	mov	r16, r24
		humic = printValue (HUMI, humi);
    2070:	60 91 b4 0a 	lds	r22, 0x0AB4
    2074:	70 91 b5 0a 	lds	r23, 0x0AB5
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <printValue>
    207e:	18 2f       	mov	r17, r24
		
	/*--------led∫Œ∫– ¡¶∞≈*/
		if(n_flag_getADC == 1)			//---------------------------------v¡∂µµ ºæº≠, ledµø¿€ºˆ¡§∫Œ∫–
    2080:	80 91 50 04 	lds	r24, 0x0450
    2084:	90 91 51 04 	lds	r25, 0x0451
    2088:	81 30       	cpi	r24, 0x01	; 1
    208a:	91 05       	cpc	r25, r1
    208c:	51 f4       	brne	.+20     	; 0x20a2 <main+0x26a>
		{
			n_flag_getADC = 0;
    208e:	10 92 51 04 	sts	0x0451, r1
    2092:	10 92 50 04 	sts	0x0450, r1
			
			gun_AdcValue	=	AdcRead();		//¡∂µµ∞™¡ﬂø‰!!!!!!
    2096:	0e 94 a0 00 	call	0x140	; 0x140 <AdcRead>
    209a:	90 93 64 04 	sts	0x0464, r25
    209e:	80 93 63 04 	sts	0x0463, r24
			//			debugprint("gun_AdcValue : %d\r\n", gun_AdcValue);
		}
		
		
		if (gun_AdcValue < 640 && gun_AdcValue >= 600)
    20a2:	20 91 63 04 	lds	r18, 0x0463
    20a6:	30 91 64 04 	lds	r19, 0x0464
    20aa:	c9 01       	movw	r24, r18
    20ac:	88 55       	subi	r24, 0x58	; 88
    20ae:	92 40       	sbci	r25, 0x02	; 2
    20b0:	88 32       	cpi	r24, 0x28	; 40
    20b2:	91 05       	cpc	r25, r1
    20b4:	58 f4       	brcc	.+22     	; 0x20cc <main+0x294>
		{	controlLED (GREEN, 0x80);	controlLED (RED, 0x00);	}
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	60 e8       	ldi	r22, 0x80	; 128
    20bc:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    20ca:	05 c1       	rjmp	.+522    	; 0x22d6 <__stack+0xd7>
		else if (gun_AdcValue < 600 && gun_AdcValue >= 560)
    20cc:	c9 01       	movw	r24, r18
    20ce:	80 53       	subi	r24, 0x30	; 48
    20d0:	92 40       	sbci	r25, 0x02	; 2
    20d2:	88 32       	cpi	r24, 0x28	; 40
    20d4:	91 05       	cpc	r25, r1
    20d6:	58 f4       	brcc	.+22     	; 0x20ee <main+0x2b6>
		{	controlLED (GREEN, 0xC0);	controlLED (RED, 0x00);	}
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	60 ec       	ldi	r22, 0xC0	; 192
    20de:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    20ec:	f4 c0       	rjmp	.+488    	; 0x22d6 <__stack+0xd7>
		else if (gun_AdcValue < 560 && gun_AdcValue >= 520)
    20ee:	c9 01       	movw	r24, r18
    20f0:	88 50       	subi	r24, 0x08	; 8
    20f2:	92 40       	sbci	r25, 0x02	; 2
    20f4:	88 32       	cpi	r24, 0x28	; 40
    20f6:	91 05       	cpc	r25, r1
    20f8:	58 f4       	brcc	.+22     	; 0x2110 <main+0x2d8>
		{	controlLED (GREEN, 0xE0);	controlLED (RED, 0x00);	}
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	60 ee       	ldi	r22, 0xE0	; 224
    2100:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    210e:	e3 c0       	rjmp	.+454    	; 0x22d6 <__stack+0xd7>
		else if (gun_AdcValue < 520 && gun_AdcValue >= 480)
    2110:	c9 01       	movw	r24, r18
    2112:	80 5e       	subi	r24, 0xE0	; 224
    2114:	91 40       	sbci	r25, 0x01	; 1
    2116:	88 32       	cpi	r24, 0x28	; 40
    2118:	91 05       	cpc	r25, r1
    211a:	58 f4       	brcc	.+22     	; 0x2132 <main+0x2fa>
		{	controlLED (GREEN, 0xF0);	controlLED (RED, 0x00);	}
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	60 ef       	ldi	r22, 0xF0	; 240
    2122:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	60 e0       	ldi	r22, 0x00	; 0
    212c:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    2130:	d2 c0       	rjmp	.+420    	; 0x22d6 <__stack+0xd7>
		else if (gun_AdcValue < 480 && gun_AdcValue >= 440)
    2132:	c9 01       	movw	r24, r18
    2134:	88 5b       	subi	r24, 0xB8	; 184
    2136:	91 40       	sbci	r25, 0x01	; 1
    2138:	88 32       	cpi	r24, 0x28	; 40
    213a:	91 05       	cpc	r25, r1
    213c:	58 f4       	brcc	.+22     	; 0x2154 <main+0x31c>
		{	controlLED (GREEN, 0xF8);	controlLED (RED, 0x00);	}
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	68 ef       	ldi	r22, 0xF8	; 248
    2144:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	60 e0       	ldi	r22, 0x00	; 0
    214e:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    2152:	c1 c0       	rjmp	.+386    	; 0x22d6 <__stack+0xd7>
		else if (gun_AdcValue < 440 && gun_AdcValue >= 400)
    2154:	c9 01       	movw	r24, r18
    2156:	80 59       	subi	r24, 0x90	; 144
    2158:	91 40       	sbci	r25, 0x01	; 1
    215a:	88 32       	cpi	r24, 0x28	; 40
    215c:	91 05       	cpc	r25, r1
    215e:	58 f4       	brcc	.+22     	; 0x2176 <main+0x33e>
		{	controlLED (GREEN, 0xFC);	controlLED (RED, 0x00);	}
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	6c ef       	ldi	r22, 0xFC	; 252
    2166:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	60 e0       	ldi	r22, 0x00	; 0
    2170:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    2174:	b0 c0       	rjmp	.+352    	; 0x22d6 <__stack+0xd7>
		else if (gun_AdcValue < 400 && gun_AdcValue >= 360)
    2176:	c9 01       	movw	r24, r18
    2178:	88 56       	subi	r24, 0x68	; 104
    217a:	91 40       	sbci	r25, 0x01	; 1
    217c:	88 32       	cpi	r24, 0x28	; 40
    217e:	91 05       	cpc	r25, r1
    2180:	58 f4       	brcc	.+22     	; 0x2198 <main+0x360>
		{	controlLED (GREEN, 0xFE);	controlLED (RED, 0x00);	}
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	6e ef       	ldi	r22, 0xFE	; 254
    2188:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    2196:	9f c0       	rjmp	.+318    	; 0x22d6 <__stack+0xd7>
		else if (gun_AdcValue < 360 && gun_AdcValue >= 320)
    2198:	c9 01       	movw	r24, r18
    219a:	80 54       	subi	r24, 0x40	; 64
    219c:	91 40       	sbci	r25, 0x01	; 1
    219e:	88 32       	cpi	r24, 0x28	; 40
    21a0:	91 05       	cpc	r25, r1
    21a2:	58 f4       	brcc	.+22     	; 0x21ba <main+0x382>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0x00);	}
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	6f ef       	ldi	r22, 0xFF	; 255
    21aa:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	60 e0       	ldi	r22, 0x00	; 0
    21b4:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    21b8:	8e c0       	rjmp	.+284    	; 0x22d6 <__stack+0xd7>
		else if (gun_AdcValue < 320 && gun_AdcValue >= 280)
    21ba:	c9 01       	movw	r24, r18
    21bc:	88 51       	subi	r24, 0x18	; 24
    21be:	91 40       	sbci	r25, 0x01	; 1
    21c0:	88 32       	cpi	r24, 0x28	; 40
    21c2:	91 05       	cpc	r25, r1
    21c4:	58 f4       	brcc	.+22     	; 0x21dc <main+0x3a4>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0x80);	}
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	6f ef       	ldi	r22, 0xFF	; 255
    21cc:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	60 e8       	ldi	r22, 0x80	; 128
    21d6:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    21da:	7d c0       	rjmp	.+250    	; 0x22d6 <__stack+0xd7>
		else if (gun_AdcValue < 280 && gun_AdcValue >= 240)
    21dc:	c9 01       	movw	r24, r18
    21de:	80 5f       	subi	r24, 0xF0	; 240
    21e0:	90 40       	sbci	r25, 0x00	; 0
    21e2:	88 32       	cpi	r24, 0x28	; 40
    21e4:	91 05       	cpc	r25, r1
    21e6:	58 f4       	brcc	.+22     	; 0x21fe <main+0x3c6>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xC0);	}	
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	6f ef       	ldi	r22, 0xFF	; 255
    21ee:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	60 ec       	ldi	r22, 0xC0	; 192
    21f8:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    21fc:	6c c0       	rjmp	.+216    	; 0x22d6 <__stack+0xd7>
		else if (gun_AdcValue < 240 && gun_AdcValue >= 200)
    21fe:	c9 01       	movw	r24, r18
    2200:	88 5c       	subi	r24, 0xC8	; 200
    2202:	90 40       	sbci	r25, 0x00	; 0
    2204:	88 32       	cpi	r24, 0x28	; 40
    2206:	91 05       	cpc	r25, r1
    2208:	58 f4       	brcc	.+22     	; 0x2220 <__stack+0x21>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xE0);	}
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	6f ef       	ldi	r22, 0xFF	; 255
    2210:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	60 ee       	ldi	r22, 0xE0	; 224
    221a:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    221e:	5b c0       	rjmp	.+182    	; 0x22d6 <__stack+0xd7>
		else if (gun_AdcValue < 200 && gun_AdcValue >= 160)
    2220:	c9 01       	movw	r24, r18
    2222:	80 5a       	subi	r24, 0xA0	; 160
    2224:	90 40       	sbci	r25, 0x00	; 0
    2226:	88 32       	cpi	r24, 0x28	; 40
    2228:	91 05       	cpc	r25, r1
    222a:	58 f4       	brcc	.+22     	; 0x2242 <__stack+0x43>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xF0);	}
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	6f ef       	ldi	r22, 0xFF	; 255
    2232:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	60 ef       	ldi	r22, 0xF0	; 240
    223c:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    2240:	4a c0       	rjmp	.+148    	; 0x22d6 <__stack+0xd7>
		else if (gun_AdcValue < 160 && gun_AdcValue >= 120)
    2242:	c9 01       	movw	r24, r18
    2244:	88 57       	subi	r24, 0x78	; 120
    2246:	90 40       	sbci	r25, 0x00	; 0
    2248:	88 32       	cpi	r24, 0x28	; 40
    224a:	91 05       	cpc	r25, r1
    224c:	58 f4       	brcc	.+22     	; 0x2264 <__stack+0x65>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xF8);	}
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	6f ef       	ldi	r22, 0xFF	; 255
    2254:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	68 ef       	ldi	r22, 0xF8	; 248
    225e:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    2262:	39 c0       	rjmp	.+114    	; 0x22d6 <__stack+0xd7>
		else if (gun_AdcValue < 120 && gun_AdcValue >= 80)
    2264:	c9 01       	movw	r24, r18
    2266:	80 55       	subi	r24, 0x50	; 80
    2268:	90 40       	sbci	r25, 0x00	; 0
    226a:	88 32       	cpi	r24, 0x28	; 40
    226c:	91 05       	cpc	r25, r1
    226e:	58 f4       	brcc	.+22     	; 0x2286 <__stack+0x87>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xFC);	}
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	6f ef       	ldi	r22, 0xFF	; 255
    2276:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	6c ef       	ldi	r22, 0xFC	; 252
    2280:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    2284:	28 c0       	rjmp	.+80     	; 0x22d6 <__stack+0xd7>
		else if (gun_AdcValue < 80 && gun_AdcValue >= 40)
    2286:	c9 01       	movw	r24, r18
    2288:	88 97       	sbiw	r24, 0x28	; 40
    228a:	88 32       	cpi	r24, 0x28	; 40
    228c:	91 05       	cpc	r25, r1
    228e:	58 f4       	brcc	.+22     	; 0x22a6 <__stack+0xa7>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xFE);	}
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	6f ef       	ldi	r22, 0xFF	; 255
    2296:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	6e ef       	ldi	r22, 0xFE	; 254
    22a0:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    22a4:	18 c0       	rjmp	.+48     	; 0x22d6 <__stack+0xd7>
		else if (gun_AdcValue < 40 && gun_AdcValue >= 0)
    22a6:	28 32       	cpi	r18, 0x28	; 40
    22a8:	31 05       	cpc	r19, r1
    22aa:	58 f4       	brcc	.+22     	; 0x22c2 <__stack+0xc3>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xFF);	}
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	6f ef       	ldi	r22, 0xFF	; 255
    22b2:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	6f ef       	ldi	r22, 0xFF	; 255
    22bc:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    22c0:	0a c0       	rjmp	.+20     	; 0x22d6 <__stack+0xd7>
		else
		{	controlLED (GREEN, 0x00);	controlLED (RED, 0x00);	}//-------------------------^ºˆ¡§∫Œ∫–
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	0e 94 35 01 	call	0x26a	; 0x26a <controlLED>
		
		//µ•¿Ã≈Õ ¿¸º€ ∫Œ∫–
        
		wifiMain();
    22d6:	0e 94 43 05 	call	0xa86	; 0xa86 <wifiMain>
		
		if ( isElapsed())
    22da:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <isElapsed>
    22de:	88 23       	and	r24, r24
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <__stack+0xe5>
    22e2:	b0 ce       	rjmp	.-672    	; 0x2044 <main+0x20c>
		{
			sprintf(strTemp,"hello:%d CDS : %d temp : %d humi : %d\n",counter++, gun_AdcValue, tempc, humic);		//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫– 
    22e4:	75 01       	movw	r14, r10
    22e6:	08 94       	sec
    22e8:	e1 1c       	adc	r14, r1
    22ea:	f1 1c       	adc	r15, r1
    22ec:	8d b7       	in	r24, 0x3d	; 61
    22ee:	9e b7       	in	r25, 0x3e	; 62
    22f0:	0c 97       	sbiw	r24, 0x0c	; 12
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	9e bf       	out	0x3e, r25	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	8d bf       	out	0x3d, r24	; 61
    22fc:	ed b7       	in	r30, 0x3d	; 61
    22fe:	fe b7       	in	r31, 0x3e	; 62
    2300:	31 96       	adiw	r30, 0x01	; 1
    2302:	ad b7       	in	r26, 0x3d	; 61
    2304:	be b7       	in	r27, 0x3e	; 62
    2306:	12 96       	adiw	r26, 0x02	; 2
    2308:	dc 92       	st	X, r13
    230a:	ce 92       	st	-X, r12
    230c:	11 97       	sbiw	r26, 0x01	; 1
    230e:	93 82       	std	Z+3, r9	; 0x03
    2310:	82 82       	std	Z+2, r8	; 0x02
    2312:	b5 82       	std	Z+5, r11	; 0x05
    2314:	a4 82       	std	Z+4, r10	; 0x04
    2316:	80 91 63 04 	lds	r24, 0x0463
    231a:	90 91 64 04 	lds	r25, 0x0464
    231e:	97 83       	std	Z+7, r25	; 0x07
    2320:	86 83       	std	Z+6, r24	; 0x06
    2322:	00 87       	std	Z+8, r16	; 0x08
    2324:	11 86       	std	Z+9, r1	; 0x09
    2326:	12 87       	std	Z+10, r17	; 0x0a
    2328:	13 86       	std	Z+11, r1	; 0x0b
    232a:	0e 94 be 13 	call	0x277c	; 0x277c <sprintf>
			wifiSendData(strTemp, strlen(strTemp));			//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
    232e:	f6 01       	movw	r30, r12
    2330:	01 90       	ld	r0, Z+
    2332:	00 20       	and	r0, r0
    2334:	e9 f7       	brne	.-6      	; 0x2330 <__stack+0x131>
    2336:	bf 01       	movw	r22, r30
    2338:	61 50       	subi	r22, 0x01	; 1
    233a:	70 40       	sbci	r23, 0x00	; 0
    233c:	6c 19       	sub	r22, r12
    233e:	7d 09       	sbc	r23, r13
    2340:	8d b7       	in	r24, 0x3d	; 61
    2342:	9e b7       	in	r25, 0x3e	; 62
    2344:	0c 96       	adiw	r24, 0x0c	; 12
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	9e bf       	out	0x3e, r25	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	8d bf       	out	0x3d, r24	; 61
    2350:	c6 01       	movw	r24, r12
    2352:	0e 94 4d 08 	call	0x109a	; 0x109a <wifiSendData>
			debugprint("TX:%s\r\n",strTemp);				//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
    2356:	00 d0       	rcall	.+0      	; 0x2358 <__stack+0x159>
    2358:	0f 92       	push	r0
    235a:	ad b7       	in	r26, 0x3d	; 61
    235c:	be b7       	in	r27, 0x3e	; 62
    235e:	12 96       	adiw	r26, 0x02	; 2
    2360:	7c 92       	st	X, r7
    2362:	6e 92       	st	-X, r6
    2364:	11 97       	sbiw	r26, 0x01	; 1
    2366:	14 96       	adiw	r26, 0x04	; 4
    2368:	dc 92       	st	X, r13
    236a:	ce 92       	st	-X, r12
    236c:	13 97       	sbiw	r26, 0x03	; 3
    236e:	0e 94 c0 01 	call	0x380	; 0x380 <debugprint>
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
        
		wifiMain();
		
		if ( isElapsed())
		{
			sprintf(strTemp,"hello:%d CDS : %d temp : %d humi : %d\n",counter++, gun_AdcValue, tempc, humic);		//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫– 
    237a:	57 01       	movw	r10, r14
    237c:	63 ce       	rjmp	.-826    	; 0x2044 <main+0x20c>

0000237e <__subsf3>:
    237e:	50 58       	subi	r21, 0x80	; 128

00002380 <__addsf3>:
    2380:	bb 27       	eor	r27, r27
    2382:	aa 27       	eor	r26, r26
    2384:	0e d0       	rcall	.+28     	; 0x23a2 <__addsf3x>
    2386:	08 c1       	rjmp	.+528    	; 0x2598 <__fp_round>
    2388:	f9 d0       	rcall	.+498    	; 0x257c <__fp_pscA>
    238a:	30 f0       	brcs	.+12     	; 0x2398 <__addsf3+0x18>
    238c:	fe d0       	rcall	.+508    	; 0x258a <__fp_pscB>
    238e:	20 f0       	brcs	.+8      	; 0x2398 <__addsf3+0x18>
    2390:	31 f4       	brne	.+12     	; 0x239e <__addsf3+0x1e>
    2392:	9f 3f       	cpi	r25, 0xFF	; 255
    2394:	11 f4       	brne	.+4      	; 0x239a <__addsf3+0x1a>
    2396:	1e f4       	brtc	.+6      	; 0x239e <__addsf3+0x1e>
    2398:	ee c0       	rjmp	.+476    	; 0x2576 <__fp_nan>
    239a:	0e f4       	brtc	.+2      	; 0x239e <__addsf3+0x1e>
    239c:	e0 95       	com	r30
    239e:	e7 fb       	bst	r30, 7
    23a0:	e4 c0       	rjmp	.+456    	; 0x256a <__fp_inf>

000023a2 <__addsf3x>:
    23a2:	e9 2f       	mov	r30, r25
    23a4:	0a d1       	rcall	.+532    	; 0x25ba <__fp_split3>
    23a6:	80 f3       	brcs	.-32     	; 0x2388 <__addsf3+0x8>
    23a8:	ba 17       	cp	r27, r26
    23aa:	62 07       	cpc	r22, r18
    23ac:	73 07       	cpc	r23, r19
    23ae:	84 07       	cpc	r24, r20
    23b0:	95 07       	cpc	r25, r21
    23b2:	18 f0       	brcs	.+6      	; 0x23ba <__addsf3x+0x18>
    23b4:	71 f4       	brne	.+28     	; 0x23d2 <__addsf3x+0x30>
    23b6:	9e f5       	brtc	.+102    	; 0x241e <__addsf3x+0x7c>
    23b8:	22 c1       	rjmp	.+580    	; 0x25fe <__fp_zero>
    23ba:	0e f4       	brtc	.+2      	; 0x23be <__addsf3x+0x1c>
    23bc:	e0 95       	com	r30
    23be:	0b 2e       	mov	r0, r27
    23c0:	ba 2f       	mov	r27, r26
    23c2:	a0 2d       	mov	r26, r0
    23c4:	0b 01       	movw	r0, r22
    23c6:	b9 01       	movw	r22, r18
    23c8:	90 01       	movw	r18, r0
    23ca:	0c 01       	movw	r0, r24
    23cc:	ca 01       	movw	r24, r20
    23ce:	a0 01       	movw	r20, r0
    23d0:	11 24       	eor	r1, r1
    23d2:	ff 27       	eor	r31, r31
    23d4:	59 1b       	sub	r21, r25
    23d6:	99 f0       	breq	.+38     	; 0x23fe <__addsf3x+0x5c>
    23d8:	59 3f       	cpi	r21, 0xF9	; 249
    23da:	50 f4       	brcc	.+20     	; 0x23f0 <__addsf3x+0x4e>
    23dc:	50 3e       	cpi	r21, 0xE0	; 224
    23de:	68 f1       	brcs	.+90     	; 0x243a <__addsf3x+0x98>
    23e0:	1a 16       	cp	r1, r26
    23e2:	f0 40       	sbci	r31, 0x00	; 0
    23e4:	a2 2f       	mov	r26, r18
    23e6:	23 2f       	mov	r18, r19
    23e8:	34 2f       	mov	r19, r20
    23ea:	44 27       	eor	r20, r20
    23ec:	58 5f       	subi	r21, 0xF8	; 248
    23ee:	f3 cf       	rjmp	.-26     	; 0x23d6 <__addsf3x+0x34>
    23f0:	46 95       	lsr	r20
    23f2:	37 95       	ror	r19
    23f4:	27 95       	ror	r18
    23f6:	a7 95       	ror	r26
    23f8:	f0 40       	sbci	r31, 0x00	; 0
    23fa:	53 95       	inc	r21
    23fc:	c9 f7       	brne	.-14     	; 0x23f0 <__addsf3x+0x4e>
    23fe:	7e f4       	brtc	.+30     	; 0x241e <__addsf3x+0x7c>
    2400:	1f 16       	cp	r1, r31
    2402:	ba 0b       	sbc	r27, r26
    2404:	62 0b       	sbc	r22, r18
    2406:	73 0b       	sbc	r23, r19
    2408:	84 0b       	sbc	r24, r20
    240a:	ba f0       	brmi	.+46     	; 0x243a <__addsf3x+0x98>
    240c:	91 50       	subi	r25, 0x01	; 1
    240e:	a1 f0       	breq	.+40     	; 0x2438 <__addsf3x+0x96>
    2410:	ff 0f       	add	r31, r31
    2412:	bb 1f       	adc	r27, r27
    2414:	66 1f       	adc	r22, r22
    2416:	77 1f       	adc	r23, r23
    2418:	88 1f       	adc	r24, r24
    241a:	c2 f7       	brpl	.-16     	; 0x240c <__addsf3x+0x6a>
    241c:	0e c0       	rjmp	.+28     	; 0x243a <__addsf3x+0x98>
    241e:	ba 0f       	add	r27, r26
    2420:	62 1f       	adc	r22, r18
    2422:	73 1f       	adc	r23, r19
    2424:	84 1f       	adc	r24, r20
    2426:	48 f4       	brcc	.+18     	; 0x243a <__addsf3x+0x98>
    2428:	87 95       	ror	r24
    242a:	77 95       	ror	r23
    242c:	67 95       	ror	r22
    242e:	b7 95       	ror	r27
    2430:	f7 95       	ror	r31
    2432:	9e 3f       	cpi	r25, 0xFE	; 254
    2434:	08 f0       	brcs	.+2      	; 0x2438 <__addsf3x+0x96>
    2436:	b3 cf       	rjmp	.-154    	; 0x239e <__addsf3+0x1e>
    2438:	93 95       	inc	r25
    243a:	88 0f       	add	r24, r24
    243c:	08 f0       	brcs	.+2      	; 0x2440 <__addsf3x+0x9e>
    243e:	99 27       	eor	r25, r25
    2440:	ee 0f       	add	r30, r30
    2442:	97 95       	ror	r25
    2444:	87 95       	ror	r24
    2446:	08 95       	ret

00002448 <__cmpsf2>:
    2448:	6c d0       	rcall	.+216    	; 0x2522 <__fp_cmp>
    244a:	08 f4       	brcc	.+2      	; 0x244e <__cmpsf2+0x6>
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	08 95       	ret

00002450 <__fixunssfsi>:
    2450:	bc d0       	rcall	.+376    	; 0x25ca <__fp_splitA>
    2452:	88 f0       	brcs	.+34     	; 0x2476 <__fixunssfsi+0x26>
    2454:	9f 57       	subi	r25, 0x7F	; 127
    2456:	90 f0       	brcs	.+36     	; 0x247c <__fixunssfsi+0x2c>
    2458:	b9 2f       	mov	r27, r25
    245a:	99 27       	eor	r25, r25
    245c:	b7 51       	subi	r27, 0x17	; 23
    245e:	a0 f0       	brcs	.+40     	; 0x2488 <__fixunssfsi+0x38>
    2460:	d1 f0       	breq	.+52     	; 0x2496 <__fixunssfsi+0x46>
    2462:	66 0f       	add	r22, r22
    2464:	77 1f       	adc	r23, r23
    2466:	88 1f       	adc	r24, r24
    2468:	99 1f       	adc	r25, r25
    246a:	1a f0       	brmi	.+6      	; 0x2472 <__fixunssfsi+0x22>
    246c:	ba 95       	dec	r27
    246e:	c9 f7       	brne	.-14     	; 0x2462 <__fixunssfsi+0x12>
    2470:	12 c0       	rjmp	.+36     	; 0x2496 <__fixunssfsi+0x46>
    2472:	b1 30       	cpi	r27, 0x01	; 1
    2474:	81 f0       	breq	.+32     	; 0x2496 <__fixunssfsi+0x46>
    2476:	c3 d0       	rcall	.+390    	; 0x25fe <__fp_zero>
    2478:	b1 e0       	ldi	r27, 0x01	; 1
    247a:	08 95       	ret
    247c:	c0 c0       	rjmp	.+384    	; 0x25fe <__fp_zero>
    247e:	67 2f       	mov	r22, r23
    2480:	78 2f       	mov	r23, r24
    2482:	88 27       	eor	r24, r24
    2484:	b8 5f       	subi	r27, 0xF8	; 248
    2486:	39 f0       	breq	.+14     	; 0x2496 <__fixunssfsi+0x46>
    2488:	b9 3f       	cpi	r27, 0xF9	; 249
    248a:	cc f3       	brlt	.-14     	; 0x247e <__fixunssfsi+0x2e>
    248c:	86 95       	lsr	r24
    248e:	77 95       	ror	r23
    2490:	67 95       	ror	r22
    2492:	b3 95       	inc	r27
    2494:	d9 f7       	brne	.-10     	; 0x248c <__fixunssfsi+0x3c>
    2496:	3e f4       	brtc	.+14     	; 0x24a6 <__fixunssfsi+0x56>
    2498:	90 95       	com	r25
    249a:	80 95       	com	r24
    249c:	70 95       	com	r23
    249e:	61 95       	neg	r22
    24a0:	7f 4f       	sbci	r23, 0xFF	; 255
    24a2:	8f 4f       	sbci	r24, 0xFF	; 255
    24a4:	9f 4f       	sbci	r25, 0xFF	; 255
    24a6:	08 95       	ret

000024a8 <__floatunsisf>:
    24a8:	e8 94       	clt
    24aa:	09 c0       	rjmp	.+18     	; 0x24be <__floatsisf+0x12>

000024ac <__floatsisf>:
    24ac:	97 fb       	bst	r25, 7
    24ae:	3e f4       	brtc	.+14     	; 0x24be <__floatsisf+0x12>
    24b0:	90 95       	com	r25
    24b2:	80 95       	com	r24
    24b4:	70 95       	com	r23
    24b6:	61 95       	neg	r22
    24b8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ba:	8f 4f       	sbci	r24, 0xFF	; 255
    24bc:	9f 4f       	sbci	r25, 0xFF	; 255
    24be:	99 23       	and	r25, r25
    24c0:	a9 f0       	breq	.+42     	; 0x24ec <__floatsisf+0x40>
    24c2:	f9 2f       	mov	r31, r25
    24c4:	96 e9       	ldi	r25, 0x96	; 150
    24c6:	bb 27       	eor	r27, r27
    24c8:	93 95       	inc	r25
    24ca:	f6 95       	lsr	r31
    24cc:	87 95       	ror	r24
    24ce:	77 95       	ror	r23
    24d0:	67 95       	ror	r22
    24d2:	b7 95       	ror	r27
    24d4:	f1 11       	cpse	r31, r1
    24d6:	f8 cf       	rjmp	.-16     	; 0x24c8 <__floatsisf+0x1c>
    24d8:	fa f4       	brpl	.+62     	; 0x2518 <__floatsisf+0x6c>
    24da:	bb 0f       	add	r27, r27
    24dc:	11 f4       	brne	.+4      	; 0x24e2 <__floatsisf+0x36>
    24de:	60 ff       	sbrs	r22, 0
    24e0:	1b c0       	rjmp	.+54     	; 0x2518 <__floatsisf+0x6c>
    24e2:	6f 5f       	subi	r22, 0xFF	; 255
    24e4:	7f 4f       	sbci	r23, 0xFF	; 255
    24e6:	8f 4f       	sbci	r24, 0xFF	; 255
    24e8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ea:	16 c0       	rjmp	.+44     	; 0x2518 <__floatsisf+0x6c>
    24ec:	88 23       	and	r24, r24
    24ee:	11 f0       	breq	.+4      	; 0x24f4 <__floatsisf+0x48>
    24f0:	96 e9       	ldi	r25, 0x96	; 150
    24f2:	11 c0       	rjmp	.+34     	; 0x2516 <__floatsisf+0x6a>
    24f4:	77 23       	and	r23, r23
    24f6:	21 f0       	breq	.+8      	; 0x2500 <__floatsisf+0x54>
    24f8:	9e e8       	ldi	r25, 0x8E	; 142
    24fa:	87 2f       	mov	r24, r23
    24fc:	76 2f       	mov	r23, r22
    24fe:	05 c0       	rjmp	.+10     	; 0x250a <__floatsisf+0x5e>
    2500:	66 23       	and	r22, r22
    2502:	71 f0       	breq	.+28     	; 0x2520 <__floatsisf+0x74>
    2504:	96 e8       	ldi	r25, 0x86	; 134
    2506:	86 2f       	mov	r24, r22
    2508:	70 e0       	ldi	r23, 0x00	; 0
    250a:	60 e0       	ldi	r22, 0x00	; 0
    250c:	2a f0       	brmi	.+10     	; 0x2518 <__floatsisf+0x6c>
    250e:	9a 95       	dec	r25
    2510:	66 0f       	add	r22, r22
    2512:	77 1f       	adc	r23, r23
    2514:	88 1f       	adc	r24, r24
    2516:	da f7       	brpl	.-10     	; 0x250e <__floatsisf+0x62>
    2518:	88 0f       	add	r24, r24
    251a:	96 95       	lsr	r25
    251c:	87 95       	ror	r24
    251e:	97 f9       	bld	r25, 7
    2520:	08 95       	ret

00002522 <__fp_cmp>:
    2522:	99 0f       	add	r25, r25
    2524:	00 08       	sbc	r0, r0
    2526:	55 0f       	add	r21, r21
    2528:	aa 0b       	sbc	r26, r26
    252a:	e0 e8       	ldi	r30, 0x80	; 128
    252c:	fe ef       	ldi	r31, 0xFE	; 254
    252e:	16 16       	cp	r1, r22
    2530:	17 06       	cpc	r1, r23
    2532:	e8 07       	cpc	r30, r24
    2534:	f9 07       	cpc	r31, r25
    2536:	c0 f0       	brcs	.+48     	; 0x2568 <__fp_cmp+0x46>
    2538:	12 16       	cp	r1, r18
    253a:	13 06       	cpc	r1, r19
    253c:	e4 07       	cpc	r30, r20
    253e:	f5 07       	cpc	r31, r21
    2540:	98 f0       	brcs	.+38     	; 0x2568 <__fp_cmp+0x46>
    2542:	62 1b       	sub	r22, r18
    2544:	73 0b       	sbc	r23, r19
    2546:	84 0b       	sbc	r24, r20
    2548:	95 0b       	sbc	r25, r21
    254a:	39 f4       	brne	.+14     	; 0x255a <__fp_cmp+0x38>
    254c:	0a 26       	eor	r0, r26
    254e:	61 f0       	breq	.+24     	; 0x2568 <__fp_cmp+0x46>
    2550:	23 2b       	or	r18, r19
    2552:	24 2b       	or	r18, r20
    2554:	25 2b       	or	r18, r21
    2556:	21 f4       	brne	.+8      	; 0x2560 <__fp_cmp+0x3e>
    2558:	08 95       	ret
    255a:	0a 26       	eor	r0, r26
    255c:	09 f4       	brne	.+2      	; 0x2560 <__fp_cmp+0x3e>
    255e:	a1 40       	sbci	r26, 0x01	; 1
    2560:	a6 95       	lsr	r26
    2562:	8f ef       	ldi	r24, 0xFF	; 255
    2564:	81 1d       	adc	r24, r1
    2566:	81 1d       	adc	r24, r1
    2568:	08 95       	ret

0000256a <__fp_inf>:
    256a:	97 f9       	bld	r25, 7
    256c:	9f 67       	ori	r25, 0x7F	; 127
    256e:	80 e8       	ldi	r24, 0x80	; 128
    2570:	70 e0       	ldi	r23, 0x00	; 0
    2572:	60 e0       	ldi	r22, 0x00	; 0
    2574:	08 95       	ret

00002576 <__fp_nan>:
    2576:	9f ef       	ldi	r25, 0xFF	; 255
    2578:	80 ec       	ldi	r24, 0xC0	; 192
    257a:	08 95       	ret

0000257c <__fp_pscA>:
    257c:	00 24       	eor	r0, r0
    257e:	0a 94       	dec	r0
    2580:	16 16       	cp	r1, r22
    2582:	17 06       	cpc	r1, r23
    2584:	18 06       	cpc	r1, r24
    2586:	09 06       	cpc	r0, r25
    2588:	08 95       	ret

0000258a <__fp_pscB>:
    258a:	00 24       	eor	r0, r0
    258c:	0a 94       	dec	r0
    258e:	12 16       	cp	r1, r18
    2590:	13 06       	cpc	r1, r19
    2592:	14 06       	cpc	r1, r20
    2594:	05 06       	cpc	r0, r21
    2596:	08 95       	ret

00002598 <__fp_round>:
    2598:	09 2e       	mov	r0, r25
    259a:	03 94       	inc	r0
    259c:	00 0c       	add	r0, r0
    259e:	11 f4       	brne	.+4      	; 0x25a4 <__fp_round+0xc>
    25a0:	88 23       	and	r24, r24
    25a2:	52 f0       	brmi	.+20     	; 0x25b8 <__fp_round+0x20>
    25a4:	bb 0f       	add	r27, r27
    25a6:	40 f4       	brcc	.+16     	; 0x25b8 <__fp_round+0x20>
    25a8:	bf 2b       	or	r27, r31
    25aa:	11 f4       	brne	.+4      	; 0x25b0 <__fp_round+0x18>
    25ac:	60 ff       	sbrs	r22, 0
    25ae:	04 c0       	rjmp	.+8      	; 0x25b8 <__fp_round+0x20>
    25b0:	6f 5f       	subi	r22, 0xFF	; 255
    25b2:	7f 4f       	sbci	r23, 0xFF	; 255
    25b4:	8f 4f       	sbci	r24, 0xFF	; 255
    25b6:	9f 4f       	sbci	r25, 0xFF	; 255
    25b8:	08 95       	ret

000025ba <__fp_split3>:
    25ba:	57 fd       	sbrc	r21, 7
    25bc:	90 58       	subi	r25, 0x80	; 128
    25be:	44 0f       	add	r20, r20
    25c0:	55 1f       	adc	r21, r21
    25c2:	59 f0       	breq	.+22     	; 0x25da <__fp_splitA+0x10>
    25c4:	5f 3f       	cpi	r21, 0xFF	; 255
    25c6:	71 f0       	breq	.+28     	; 0x25e4 <__fp_splitA+0x1a>
    25c8:	47 95       	ror	r20

000025ca <__fp_splitA>:
    25ca:	88 0f       	add	r24, r24
    25cc:	97 fb       	bst	r25, 7
    25ce:	99 1f       	adc	r25, r25
    25d0:	61 f0       	breq	.+24     	; 0x25ea <__fp_splitA+0x20>
    25d2:	9f 3f       	cpi	r25, 0xFF	; 255
    25d4:	79 f0       	breq	.+30     	; 0x25f4 <__fp_splitA+0x2a>
    25d6:	87 95       	ror	r24
    25d8:	08 95       	ret
    25da:	12 16       	cp	r1, r18
    25dc:	13 06       	cpc	r1, r19
    25de:	14 06       	cpc	r1, r20
    25e0:	55 1f       	adc	r21, r21
    25e2:	f2 cf       	rjmp	.-28     	; 0x25c8 <__fp_split3+0xe>
    25e4:	46 95       	lsr	r20
    25e6:	f1 df       	rcall	.-30     	; 0x25ca <__fp_splitA>
    25e8:	08 c0       	rjmp	.+16     	; 0x25fa <__fp_splitA+0x30>
    25ea:	16 16       	cp	r1, r22
    25ec:	17 06       	cpc	r1, r23
    25ee:	18 06       	cpc	r1, r24
    25f0:	99 1f       	adc	r25, r25
    25f2:	f1 cf       	rjmp	.-30     	; 0x25d6 <__fp_splitA+0xc>
    25f4:	86 95       	lsr	r24
    25f6:	71 05       	cpc	r23, r1
    25f8:	61 05       	cpc	r22, r1
    25fa:	08 94       	sec
    25fc:	08 95       	ret

000025fe <__fp_zero>:
    25fe:	e8 94       	clt

00002600 <__fp_szero>:
    2600:	bb 27       	eor	r27, r27
    2602:	66 27       	eor	r22, r22
    2604:	77 27       	eor	r23, r23
    2606:	cb 01       	movw	r24, r22
    2608:	97 f9       	bld	r25, 7
    260a:	08 95       	ret

0000260c <__gesf2>:
    260c:	8a df       	rcall	.-236    	; 0x2522 <__fp_cmp>
    260e:	08 f4       	brcc	.+2      	; 0x2612 <__gesf2+0x6>
    2610:	8f ef       	ldi	r24, 0xFF	; 255
    2612:	08 95       	ret

00002614 <__mulsf3>:
    2614:	0b d0       	rcall	.+22     	; 0x262c <__mulsf3x>
    2616:	c0 cf       	rjmp	.-128    	; 0x2598 <__fp_round>
    2618:	b1 df       	rcall	.-158    	; 0x257c <__fp_pscA>
    261a:	28 f0       	brcs	.+10     	; 0x2626 <__mulsf3+0x12>
    261c:	b6 df       	rcall	.-148    	; 0x258a <__fp_pscB>
    261e:	18 f0       	brcs	.+6      	; 0x2626 <__mulsf3+0x12>
    2620:	95 23       	and	r25, r21
    2622:	09 f0       	breq	.+2      	; 0x2626 <__mulsf3+0x12>
    2624:	a2 cf       	rjmp	.-188    	; 0x256a <__fp_inf>
    2626:	a7 cf       	rjmp	.-178    	; 0x2576 <__fp_nan>
    2628:	11 24       	eor	r1, r1
    262a:	ea cf       	rjmp	.-44     	; 0x2600 <__fp_szero>

0000262c <__mulsf3x>:
    262c:	c6 df       	rcall	.-116    	; 0x25ba <__fp_split3>
    262e:	a0 f3       	brcs	.-24     	; 0x2618 <__mulsf3+0x4>

00002630 <__mulsf3_pse>:
    2630:	95 9f       	mul	r25, r21
    2632:	d1 f3       	breq	.-12     	; 0x2628 <__mulsf3+0x14>
    2634:	95 0f       	add	r25, r21
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	55 1f       	adc	r21, r21
    263a:	62 9f       	mul	r22, r18
    263c:	f0 01       	movw	r30, r0
    263e:	72 9f       	mul	r23, r18
    2640:	bb 27       	eor	r27, r27
    2642:	f0 0d       	add	r31, r0
    2644:	b1 1d       	adc	r27, r1
    2646:	63 9f       	mul	r22, r19
    2648:	aa 27       	eor	r26, r26
    264a:	f0 0d       	add	r31, r0
    264c:	b1 1d       	adc	r27, r1
    264e:	aa 1f       	adc	r26, r26
    2650:	64 9f       	mul	r22, r20
    2652:	66 27       	eor	r22, r22
    2654:	b0 0d       	add	r27, r0
    2656:	a1 1d       	adc	r26, r1
    2658:	66 1f       	adc	r22, r22
    265a:	82 9f       	mul	r24, r18
    265c:	22 27       	eor	r18, r18
    265e:	b0 0d       	add	r27, r0
    2660:	a1 1d       	adc	r26, r1
    2662:	62 1f       	adc	r22, r18
    2664:	73 9f       	mul	r23, r19
    2666:	b0 0d       	add	r27, r0
    2668:	a1 1d       	adc	r26, r1
    266a:	62 1f       	adc	r22, r18
    266c:	83 9f       	mul	r24, r19
    266e:	a0 0d       	add	r26, r0
    2670:	61 1d       	adc	r22, r1
    2672:	22 1f       	adc	r18, r18
    2674:	74 9f       	mul	r23, r20
    2676:	33 27       	eor	r19, r19
    2678:	a0 0d       	add	r26, r0
    267a:	61 1d       	adc	r22, r1
    267c:	23 1f       	adc	r18, r19
    267e:	84 9f       	mul	r24, r20
    2680:	60 0d       	add	r22, r0
    2682:	21 1d       	adc	r18, r1
    2684:	82 2f       	mov	r24, r18
    2686:	76 2f       	mov	r23, r22
    2688:	6a 2f       	mov	r22, r26
    268a:	11 24       	eor	r1, r1
    268c:	9f 57       	subi	r25, 0x7F	; 127
    268e:	50 40       	sbci	r21, 0x00	; 0
    2690:	8a f0       	brmi	.+34     	; 0x26b4 <__mulsf3_pse+0x84>
    2692:	e1 f0       	breq	.+56     	; 0x26cc <__mulsf3_pse+0x9c>
    2694:	88 23       	and	r24, r24
    2696:	4a f0       	brmi	.+18     	; 0x26aa <__mulsf3_pse+0x7a>
    2698:	ee 0f       	add	r30, r30
    269a:	ff 1f       	adc	r31, r31
    269c:	bb 1f       	adc	r27, r27
    269e:	66 1f       	adc	r22, r22
    26a0:	77 1f       	adc	r23, r23
    26a2:	88 1f       	adc	r24, r24
    26a4:	91 50       	subi	r25, 0x01	; 1
    26a6:	50 40       	sbci	r21, 0x00	; 0
    26a8:	a9 f7       	brne	.-22     	; 0x2694 <__mulsf3_pse+0x64>
    26aa:	9e 3f       	cpi	r25, 0xFE	; 254
    26ac:	51 05       	cpc	r21, r1
    26ae:	70 f0       	brcs	.+28     	; 0x26cc <__mulsf3_pse+0x9c>
    26b0:	5c cf       	rjmp	.-328    	; 0x256a <__fp_inf>
    26b2:	a6 cf       	rjmp	.-180    	; 0x2600 <__fp_szero>
    26b4:	5f 3f       	cpi	r21, 0xFF	; 255
    26b6:	ec f3       	brlt	.-6      	; 0x26b2 <__mulsf3_pse+0x82>
    26b8:	98 3e       	cpi	r25, 0xE8	; 232
    26ba:	dc f3       	brlt	.-10     	; 0x26b2 <__mulsf3_pse+0x82>
    26bc:	86 95       	lsr	r24
    26be:	77 95       	ror	r23
    26c0:	67 95       	ror	r22
    26c2:	b7 95       	ror	r27
    26c4:	f7 95       	ror	r31
    26c6:	e7 95       	ror	r30
    26c8:	9f 5f       	subi	r25, 0xFF	; 255
    26ca:	c1 f7       	brne	.-16     	; 0x26bc <__mulsf3_pse+0x8c>
    26cc:	fe 2b       	or	r31, r30
    26ce:	88 0f       	add	r24, r24
    26d0:	91 1d       	adc	r25, r1
    26d2:	96 95       	lsr	r25
    26d4:	87 95       	ror	r24
    26d6:	97 f9       	bld	r25, 7
    26d8:	08 95       	ret

000026da <__udivmodhi4>:
    26da:	aa 1b       	sub	r26, r26
    26dc:	bb 1b       	sub	r27, r27
    26de:	51 e1       	ldi	r21, 0x11	; 17
    26e0:	07 c0       	rjmp	.+14     	; 0x26f0 <__udivmodhi4_ep>

000026e2 <__udivmodhi4_loop>:
    26e2:	aa 1f       	adc	r26, r26
    26e4:	bb 1f       	adc	r27, r27
    26e6:	a6 17       	cp	r26, r22
    26e8:	b7 07       	cpc	r27, r23
    26ea:	10 f0       	brcs	.+4      	; 0x26f0 <__udivmodhi4_ep>
    26ec:	a6 1b       	sub	r26, r22
    26ee:	b7 0b       	sbc	r27, r23

000026f0 <__udivmodhi4_ep>:
    26f0:	88 1f       	adc	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	5a 95       	dec	r21
    26f6:	a9 f7       	brne	.-22     	; 0x26e2 <__udivmodhi4_loop>
    26f8:	80 95       	com	r24
    26fa:	90 95       	com	r25
    26fc:	bc 01       	movw	r22, r24
    26fe:	cd 01       	movw	r24, r26
    2700:	08 95       	ret

00002702 <atoi>:
    2702:	fc 01       	movw	r30, r24
    2704:	88 27       	eor	r24, r24
    2706:	99 27       	eor	r25, r25
    2708:	e8 94       	clt
    270a:	21 91       	ld	r18, Z+
    270c:	20 32       	cpi	r18, 0x20	; 32
    270e:	e9 f3       	breq	.-6      	; 0x270a <atoi+0x8>
    2710:	29 30       	cpi	r18, 0x09	; 9
    2712:	10 f0       	brcs	.+4      	; 0x2718 <atoi+0x16>
    2714:	2e 30       	cpi	r18, 0x0E	; 14
    2716:	c8 f3       	brcs	.-14     	; 0x270a <atoi+0x8>
    2718:	2b 32       	cpi	r18, 0x2B	; 43
    271a:	41 f0       	breq	.+16     	; 0x272c <atoi+0x2a>
    271c:	2d 32       	cpi	r18, 0x2D	; 45
    271e:	39 f4       	brne	.+14     	; 0x272e <atoi+0x2c>
    2720:	68 94       	set
    2722:	04 c0       	rjmp	.+8      	; 0x272c <atoi+0x2a>
    2724:	0e 94 b6 13 	call	0x276c	; 0x276c <__mulhi_const_10>
    2728:	82 0f       	add	r24, r18
    272a:	91 1d       	adc	r25, r1
    272c:	21 91       	ld	r18, Z+
    272e:	20 53       	subi	r18, 0x30	; 48
    2730:	2a 30       	cpi	r18, 0x0A	; 10
    2732:	c0 f3       	brcs	.-16     	; 0x2724 <atoi+0x22>
    2734:	1e f4       	brtc	.+6      	; 0x273c <atoi+0x3a>
    2736:	90 95       	com	r25
    2738:	81 95       	neg	r24
    273a:	9f 4f       	sbci	r25, 0xFF	; 255
    273c:	08 95       	ret

0000273e <memcpy>:
    273e:	fb 01       	movw	r30, r22
    2740:	dc 01       	movw	r26, r24
    2742:	02 c0       	rjmp	.+4      	; 0x2748 <memcpy+0xa>
    2744:	01 90       	ld	r0, Z+
    2746:	0d 92       	st	X+, r0
    2748:	41 50       	subi	r20, 0x01	; 1
    274a:	50 40       	sbci	r21, 0x00	; 0
    274c:	d8 f7       	brcc	.-10     	; 0x2744 <memcpy+0x6>
    274e:	08 95       	ret

00002750 <strncmp>:
    2750:	fb 01       	movw	r30, r22
    2752:	dc 01       	movw	r26, r24
    2754:	41 50       	subi	r20, 0x01	; 1
    2756:	50 40       	sbci	r21, 0x00	; 0
    2758:	30 f0       	brcs	.+12     	; 0x2766 <strncmp+0x16>
    275a:	8d 91       	ld	r24, X+
    275c:	01 90       	ld	r0, Z+
    275e:	80 19       	sub	r24, r0
    2760:	19 f4       	brne	.+6      	; 0x2768 <strncmp+0x18>
    2762:	00 20       	and	r0, r0
    2764:	b9 f7       	brne	.-18     	; 0x2754 <strncmp+0x4>
    2766:	88 1b       	sub	r24, r24
    2768:	99 0b       	sbc	r25, r25
    276a:	08 95       	ret

0000276c <__mulhi_const_10>:
    276c:	7a e0       	ldi	r23, 0x0A	; 10
    276e:	97 9f       	mul	r25, r23
    2770:	90 2d       	mov	r25, r0
    2772:	87 9f       	mul	r24, r23
    2774:	80 2d       	mov	r24, r0
    2776:	91 0d       	add	r25, r1
    2778:	11 24       	eor	r1, r1
    277a:	08 95       	ret

0000277c <sprintf>:
    277c:	0f 93       	push	r16
    277e:	1f 93       	push	r17
    2780:	cf 93       	push	r28
    2782:	df 93       	push	r29
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	2e 97       	sbiw	r28, 0x0e	; 14
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	0e 89       	ldd	r16, Y+22	; 0x16
    2796:	1f 89       	ldd	r17, Y+23	; 0x17
    2798:	86 e0       	ldi	r24, 0x06	; 6
    279a:	8c 83       	std	Y+4, r24	; 0x04
    279c:	1a 83       	std	Y+2, r17	; 0x02
    279e:	09 83       	std	Y+1, r16	; 0x01
    27a0:	8f ef       	ldi	r24, 0xFF	; 255
    27a2:	9f e7       	ldi	r25, 0x7F	; 127
    27a4:	9e 83       	std	Y+6, r25	; 0x06
    27a6:	8d 83       	std	Y+5, r24	; 0x05
    27a8:	ae 01       	movw	r20, r28
    27aa:	46 5e       	subi	r20, 0xE6	; 230
    27ac:	5f 4f       	sbci	r21, 0xFF	; 255
    27ae:	ce 01       	movw	r24, r28
    27b0:	01 96       	adiw	r24, 0x01	; 1
    27b2:	68 8d       	ldd	r22, Y+24	; 0x18
    27b4:	79 8d       	ldd	r23, Y+25	; 0x19
    27b6:	0e 94 16 14 	call	0x282c	; 0x282c <vfprintf>
    27ba:	ef 81       	ldd	r30, Y+7	; 0x07
    27bc:	f8 85       	ldd	r31, Y+8	; 0x08
    27be:	e0 0f       	add	r30, r16
    27c0:	f1 1f       	adc	r31, r17
    27c2:	10 82       	st	Z, r1
    27c4:	2e 96       	adiw	r28, 0x0e	; 14
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	1f 91       	pop	r17
    27d6:	0f 91       	pop	r16
    27d8:	08 95       	ret

000027da <vsprintf>:
    27da:	0f 93       	push	r16
    27dc:	1f 93       	push	r17
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
    27e2:	cd b7       	in	r28, 0x3d	; 61
    27e4:	de b7       	in	r29, 0x3e	; 62
    27e6:	2e 97       	sbiw	r28, 0x0e	; 14
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	cd bf       	out	0x3d, r28	; 61
    27f2:	8c 01       	movw	r16, r24
    27f4:	86 e0       	ldi	r24, 0x06	; 6
    27f6:	8c 83       	std	Y+4, r24	; 0x04
    27f8:	1a 83       	std	Y+2, r17	; 0x02
    27fa:	09 83       	std	Y+1, r16	; 0x01
    27fc:	8f ef       	ldi	r24, 0xFF	; 255
    27fe:	9f e7       	ldi	r25, 0x7F	; 127
    2800:	9e 83       	std	Y+6, r25	; 0x06
    2802:	8d 83       	std	Y+5, r24	; 0x05
    2804:	ce 01       	movw	r24, r28
    2806:	01 96       	adiw	r24, 0x01	; 1
    2808:	0e 94 16 14 	call	0x282c	; 0x282c <vfprintf>
    280c:	ef 81       	ldd	r30, Y+7	; 0x07
    280e:	f8 85       	ldd	r31, Y+8	; 0x08
    2810:	e0 0f       	add	r30, r16
    2812:	f1 1f       	adc	r31, r17
    2814:	10 82       	st	Z, r1
    2816:	2e 96       	adiw	r28, 0x0e	; 14
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	f8 94       	cli
    281c:	de bf       	out	0x3e, r29	; 62
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	cd bf       	out	0x3d, r28	; 61
    2822:	df 91       	pop	r29
    2824:	cf 91       	pop	r28
    2826:	1f 91       	pop	r17
    2828:	0f 91       	pop	r16
    282a:	08 95       	ret

0000282c <vfprintf>:
    282c:	2f 92       	push	r2
    282e:	3f 92       	push	r3
    2830:	4f 92       	push	r4
    2832:	5f 92       	push	r5
    2834:	6f 92       	push	r6
    2836:	7f 92       	push	r7
    2838:	8f 92       	push	r8
    283a:	9f 92       	push	r9
    283c:	af 92       	push	r10
    283e:	bf 92       	push	r11
    2840:	cf 92       	push	r12
    2842:	df 92       	push	r13
    2844:	ef 92       	push	r14
    2846:	ff 92       	push	r15
    2848:	0f 93       	push	r16
    284a:	1f 93       	push	r17
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	2d 97       	sbiw	r28, 0x0d	; 13
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	3c 01       	movw	r6, r24
    2862:	7d 87       	std	Y+13, r23	; 0x0d
    2864:	6c 87       	std	Y+12, r22	; 0x0c
    2866:	5a 01       	movw	r10, r20
    2868:	fc 01       	movw	r30, r24
    286a:	17 82       	std	Z+7, r1	; 0x07
    286c:	16 82       	std	Z+6, r1	; 0x06
    286e:	83 81       	ldd	r24, Z+3	; 0x03
    2870:	81 ff       	sbrs	r24, 1
    2872:	c8 c1       	rjmp	.+912    	; 0x2c04 <vfprintf+0x3d8>
    2874:	2e 01       	movw	r4, r28
    2876:	08 94       	sec
    2878:	41 1c       	adc	r4, r1
    287a:	51 1c       	adc	r5, r1
    287c:	f3 01       	movw	r30, r6
    287e:	93 81       	ldd	r25, Z+3	; 0x03
    2880:	ec 85       	ldd	r30, Y+12	; 0x0c
    2882:	fd 85       	ldd	r31, Y+13	; 0x0d
    2884:	93 fd       	sbrc	r25, 3
    2886:	85 91       	lpm	r24, Z+
    2888:	93 ff       	sbrs	r25, 3
    288a:	81 91       	ld	r24, Z+
    288c:	fd 87       	std	Y+13, r31	; 0x0d
    288e:	ec 87       	std	Y+12, r30	; 0x0c
    2890:	88 23       	and	r24, r24
    2892:	09 f4       	brne	.+2      	; 0x2896 <vfprintf+0x6a>
    2894:	b3 c1       	rjmp	.+870    	; 0x2bfc <vfprintf+0x3d0>
    2896:	85 32       	cpi	r24, 0x25	; 37
    2898:	41 f4       	brne	.+16     	; 0x28aa <vfprintf+0x7e>
    289a:	93 fd       	sbrc	r25, 3
    289c:	85 91       	lpm	r24, Z+
    289e:	93 ff       	sbrs	r25, 3
    28a0:	81 91       	ld	r24, Z+
    28a2:	fd 87       	std	Y+13, r31	; 0x0d
    28a4:	ec 87       	std	Y+12, r30	; 0x0c
    28a6:	85 32       	cpi	r24, 0x25	; 37
    28a8:	29 f4       	brne	.+10     	; 0x28b4 <vfprintf+0x88>
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	b3 01       	movw	r22, r6
    28ae:	0e 94 33 16 	call	0x2c66	; 0x2c66 <fputc>
    28b2:	e4 cf       	rjmp	.-56     	; 0x287c <vfprintf+0x50>
    28b4:	ff 24       	eor	r15, r15
    28b6:	ee 24       	eor	r14, r14
    28b8:	10 e0       	ldi	r17, 0x00	; 0
    28ba:	10 32       	cpi	r17, 0x20	; 32
    28bc:	b0 f4       	brcc	.+44     	; 0x28ea <vfprintf+0xbe>
    28be:	8b 32       	cpi	r24, 0x2B	; 43
    28c0:	69 f0       	breq	.+26     	; 0x28dc <vfprintf+0xb0>
    28c2:	8c 32       	cpi	r24, 0x2C	; 44
    28c4:	28 f4       	brcc	.+10     	; 0x28d0 <vfprintf+0xa4>
    28c6:	80 32       	cpi	r24, 0x20	; 32
    28c8:	51 f0       	breq	.+20     	; 0x28de <vfprintf+0xb2>
    28ca:	83 32       	cpi	r24, 0x23	; 35
    28cc:	71 f4       	brne	.+28     	; 0x28ea <vfprintf+0xbe>
    28ce:	0b c0       	rjmp	.+22     	; 0x28e6 <vfprintf+0xba>
    28d0:	8d 32       	cpi	r24, 0x2D	; 45
    28d2:	39 f0       	breq	.+14     	; 0x28e2 <vfprintf+0xb6>
    28d4:	80 33       	cpi	r24, 0x30	; 48
    28d6:	49 f4       	brne	.+18     	; 0x28ea <vfprintf+0xbe>
    28d8:	11 60       	ori	r17, 0x01	; 1
    28da:	2c c0       	rjmp	.+88     	; 0x2934 <vfprintf+0x108>
    28dc:	12 60       	ori	r17, 0x02	; 2
    28de:	14 60       	ori	r17, 0x04	; 4
    28e0:	29 c0       	rjmp	.+82     	; 0x2934 <vfprintf+0x108>
    28e2:	18 60       	ori	r17, 0x08	; 8
    28e4:	27 c0       	rjmp	.+78     	; 0x2934 <vfprintf+0x108>
    28e6:	10 61       	ori	r17, 0x10	; 16
    28e8:	25 c0       	rjmp	.+74     	; 0x2934 <vfprintf+0x108>
    28ea:	17 fd       	sbrc	r17, 7
    28ec:	2e c0       	rjmp	.+92     	; 0x294a <vfprintf+0x11e>
    28ee:	28 2f       	mov	r18, r24
    28f0:	20 53       	subi	r18, 0x30	; 48
    28f2:	2a 30       	cpi	r18, 0x0A	; 10
    28f4:	98 f4       	brcc	.+38     	; 0x291c <vfprintf+0xf0>
    28f6:	16 ff       	sbrs	r17, 6
    28f8:	08 c0       	rjmp	.+16     	; 0x290a <vfprintf+0xde>
    28fa:	8f 2d       	mov	r24, r15
    28fc:	88 0f       	add	r24, r24
    28fe:	f8 2e       	mov	r15, r24
    2900:	ff 0c       	add	r15, r15
    2902:	ff 0c       	add	r15, r15
    2904:	f8 0e       	add	r15, r24
    2906:	f2 0e       	add	r15, r18
    2908:	15 c0       	rjmp	.+42     	; 0x2934 <vfprintf+0x108>
    290a:	8e 2d       	mov	r24, r14
    290c:	88 0f       	add	r24, r24
    290e:	e8 2e       	mov	r14, r24
    2910:	ee 0c       	add	r14, r14
    2912:	ee 0c       	add	r14, r14
    2914:	e8 0e       	add	r14, r24
    2916:	e2 0e       	add	r14, r18
    2918:	10 62       	ori	r17, 0x20	; 32
    291a:	0c c0       	rjmp	.+24     	; 0x2934 <vfprintf+0x108>
    291c:	8e 32       	cpi	r24, 0x2E	; 46
    291e:	21 f4       	brne	.+8      	; 0x2928 <vfprintf+0xfc>
    2920:	16 fd       	sbrc	r17, 6
    2922:	6c c1       	rjmp	.+728    	; 0x2bfc <vfprintf+0x3d0>
    2924:	10 64       	ori	r17, 0x40	; 64
    2926:	06 c0       	rjmp	.+12     	; 0x2934 <vfprintf+0x108>
    2928:	8c 36       	cpi	r24, 0x6C	; 108
    292a:	11 f4       	brne	.+4      	; 0x2930 <vfprintf+0x104>
    292c:	10 68       	ori	r17, 0x80	; 128
    292e:	02 c0       	rjmp	.+4      	; 0x2934 <vfprintf+0x108>
    2930:	88 36       	cpi	r24, 0x68	; 104
    2932:	59 f4       	brne	.+22     	; 0x294a <vfprintf+0x11e>
    2934:	ec 85       	ldd	r30, Y+12	; 0x0c
    2936:	fd 85       	ldd	r31, Y+13	; 0x0d
    2938:	93 fd       	sbrc	r25, 3
    293a:	85 91       	lpm	r24, Z+
    293c:	93 ff       	sbrs	r25, 3
    293e:	81 91       	ld	r24, Z+
    2940:	fd 87       	std	Y+13, r31	; 0x0d
    2942:	ec 87       	std	Y+12, r30	; 0x0c
    2944:	88 23       	and	r24, r24
    2946:	09 f0       	breq	.+2      	; 0x294a <vfprintf+0x11e>
    2948:	b8 cf       	rjmp	.-144    	; 0x28ba <vfprintf+0x8e>
    294a:	98 2f       	mov	r25, r24
    294c:	95 54       	subi	r25, 0x45	; 69
    294e:	93 30       	cpi	r25, 0x03	; 3
    2950:	18 f0       	brcs	.+6      	; 0x2958 <vfprintf+0x12c>
    2952:	90 52       	subi	r25, 0x20	; 32
    2954:	93 30       	cpi	r25, 0x03	; 3
    2956:	38 f4       	brcc	.+14     	; 0x2966 <vfprintf+0x13a>
    2958:	24 e0       	ldi	r18, 0x04	; 4
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	a2 0e       	add	r10, r18
    295e:	b3 1e       	adc	r11, r19
    2960:	3f e3       	ldi	r19, 0x3F	; 63
    2962:	39 83       	std	Y+1, r19	; 0x01
    2964:	0f c0       	rjmp	.+30     	; 0x2984 <vfprintf+0x158>
    2966:	83 36       	cpi	r24, 0x63	; 99
    2968:	31 f0       	breq	.+12     	; 0x2976 <vfprintf+0x14a>
    296a:	83 37       	cpi	r24, 0x73	; 115
    296c:	81 f0       	breq	.+32     	; 0x298e <vfprintf+0x162>
    296e:	83 35       	cpi	r24, 0x53	; 83
    2970:	09 f0       	breq	.+2      	; 0x2974 <vfprintf+0x148>
    2972:	5a c0       	rjmp	.+180    	; 0x2a28 <vfprintf+0x1fc>
    2974:	22 c0       	rjmp	.+68     	; 0x29ba <vfprintf+0x18e>
    2976:	f5 01       	movw	r30, r10
    2978:	80 81       	ld	r24, Z
    297a:	89 83       	std	Y+1, r24	; 0x01
    297c:	22 e0       	ldi	r18, 0x02	; 2
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	a2 0e       	add	r10, r18
    2982:	b3 1e       	adc	r11, r19
    2984:	21 e0       	ldi	r18, 0x01	; 1
    2986:	c2 2e       	mov	r12, r18
    2988:	d1 2c       	mov	r13, r1
    298a:	42 01       	movw	r8, r4
    298c:	14 c0       	rjmp	.+40     	; 0x29b6 <vfprintf+0x18a>
    298e:	92 e0       	ldi	r25, 0x02	; 2
    2990:	29 2e       	mov	r2, r25
    2992:	31 2c       	mov	r3, r1
    2994:	2a 0c       	add	r2, r10
    2996:	3b 1c       	adc	r3, r11
    2998:	f5 01       	movw	r30, r10
    299a:	80 80       	ld	r8, Z
    299c:	91 80       	ldd	r9, Z+1	; 0x01
    299e:	16 ff       	sbrs	r17, 6
    29a0:	03 c0       	rjmp	.+6      	; 0x29a8 <vfprintf+0x17c>
    29a2:	6f 2d       	mov	r22, r15
    29a4:	70 e0       	ldi	r23, 0x00	; 0
    29a6:	02 c0       	rjmp	.+4      	; 0x29ac <vfprintf+0x180>
    29a8:	6f ef       	ldi	r22, 0xFF	; 255
    29aa:	7f ef       	ldi	r23, 0xFF	; 255
    29ac:	c4 01       	movw	r24, r8
    29ae:	0e 94 28 16 	call	0x2c50	; 0x2c50 <strnlen>
    29b2:	6c 01       	movw	r12, r24
    29b4:	51 01       	movw	r10, r2
    29b6:	1f 77       	andi	r17, 0x7F	; 127
    29b8:	15 c0       	rjmp	.+42     	; 0x29e4 <vfprintf+0x1b8>
    29ba:	82 e0       	ldi	r24, 0x02	; 2
    29bc:	28 2e       	mov	r2, r24
    29be:	31 2c       	mov	r3, r1
    29c0:	2a 0c       	add	r2, r10
    29c2:	3b 1c       	adc	r3, r11
    29c4:	f5 01       	movw	r30, r10
    29c6:	80 80       	ld	r8, Z
    29c8:	91 80       	ldd	r9, Z+1	; 0x01
    29ca:	16 ff       	sbrs	r17, 6
    29cc:	03 c0       	rjmp	.+6      	; 0x29d4 <vfprintf+0x1a8>
    29ce:	6f 2d       	mov	r22, r15
    29d0:	70 e0       	ldi	r23, 0x00	; 0
    29d2:	02 c0       	rjmp	.+4      	; 0x29d8 <vfprintf+0x1ac>
    29d4:	6f ef       	ldi	r22, 0xFF	; 255
    29d6:	7f ef       	ldi	r23, 0xFF	; 255
    29d8:	c4 01       	movw	r24, r8
    29da:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <strnlen_P>
    29de:	6c 01       	movw	r12, r24
    29e0:	10 68       	ori	r17, 0x80	; 128
    29e2:	51 01       	movw	r10, r2
    29e4:	13 fd       	sbrc	r17, 3
    29e6:	1c c0       	rjmp	.+56     	; 0x2a20 <vfprintf+0x1f4>
    29e8:	06 c0       	rjmp	.+12     	; 0x29f6 <vfprintf+0x1ca>
    29ea:	80 e2       	ldi	r24, 0x20	; 32
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	b3 01       	movw	r22, r6
    29f0:	0e 94 33 16 	call	0x2c66	; 0x2c66 <fputc>
    29f4:	ea 94       	dec	r14
    29f6:	8e 2d       	mov	r24, r14
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	c8 16       	cp	r12, r24
    29fc:	d9 06       	cpc	r13, r25
    29fe:	a8 f3       	brcs	.-22     	; 0x29ea <vfprintf+0x1be>
    2a00:	0f c0       	rjmp	.+30     	; 0x2a20 <vfprintf+0x1f4>
    2a02:	f4 01       	movw	r30, r8
    2a04:	17 fd       	sbrc	r17, 7
    2a06:	85 91       	lpm	r24, Z+
    2a08:	17 ff       	sbrs	r17, 7
    2a0a:	81 91       	ld	r24, Z+
    2a0c:	4f 01       	movw	r8, r30
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	b3 01       	movw	r22, r6
    2a12:	0e 94 33 16 	call	0x2c66	; 0x2c66 <fputc>
    2a16:	e1 10       	cpse	r14, r1
    2a18:	ea 94       	dec	r14
    2a1a:	08 94       	sec
    2a1c:	c1 08       	sbc	r12, r1
    2a1e:	d1 08       	sbc	r13, r1
    2a20:	c1 14       	cp	r12, r1
    2a22:	d1 04       	cpc	r13, r1
    2a24:	71 f7       	brne	.-36     	; 0x2a02 <vfprintf+0x1d6>
    2a26:	e7 c0       	rjmp	.+462    	; 0x2bf6 <vfprintf+0x3ca>
    2a28:	84 36       	cpi	r24, 0x64	; 100
    2a2a:	11 f0       	breq	.+4      	; 0x2a30 <vfprintf+0x204>
    2a2c:	89 36       	cpi	r24, 0x69	; 105
    2a2e:	51 f5       	brne	.+84     	; 0x2a84 <vfprintf+0x258>
    2a30:	f5 01       	movw	r30, r10
    2a32:	17 ff       	sbrs	r17, 7
    2a34:	07 c0       	rjmp	.+14     	; 0x2a44 <vfprintf+0x218>
    2a36:	80 81       	ld	r24, Z
    2a38:	91 81       	ldd	r25, Z+1	; 0x01
    2a3a:	a2 81       	ldd	r26, Z+2	; 0x02
    2a3c:	b3 81       	ldd	r27, Z+3	; 0x03
    2a3e:	24 e0       	ldi	r18, 0x04	; 4
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	08 c0       	rjmp	.+16     	; 0x2a54 <vfprintf+0x228>
    2a44:	80 81       	ld	r24, Z
    2a46:	91 81       	ldd	r25, Z+1	; 0x01
    2a48:	aa 27       	eor	r26, r26
    2a4a:	97 fd       	sbrc	r25, 7
    2a4c:	a0 95       	com	r26
    2a4e:	ba 2f       	mov	r27, r26
    2a50:	22 e0       	ldi	r18, 0x02	; 2
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	a2 0e       	add	r10, r18
    2a56:	b3 1e       	adc	r11, r19
    2a58:	01 2f       	mov	r16, r17
    2a5a:	0f 76       	andi	r16, 0x6F	; 111
    2a5c:	b7 ff       	sbrs	r27, 7
    2a5e:	08 c0       	rjmp	.+16     	; 0x2a70 <vfprintf+0x244>
    2a60:	b0 95       	com	r27
    2a62:	a0 95       	com	r26
    2a64:	90 95       	com	r25
    2a66:	81 95       	neg	r24
    2a68:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6a:	af 4f       	sbci	r26, 0xFF	; 255
    2a6c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a6e:	00 68       	ori	r16, 0x80	; 128
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	a2 01       	movw	r20, r4
    2a76:	2a e0       	ldi	r18, 0x0A	; 10
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__ultoa_invert>
    2a7e:	d8 2e       	mov	r13, r24
    2a80:	d4 18       	sub	r13, r4
    2a82:	3f c0       	rjmp	.+126    	; 0x2b02 <vfprintf+0x2d6>
    2a84:	85 37       	cpi	r24, 0x75	; 117
    2a86:	21 f4       	brne	.+8      	; 0x2a90 <vfprintf+0x264>
    2a88:	1f 7e       	andi	r17, 0xEF	; 239
    2a8a:	2a e0       	ldi	r18, 0x0A	; 10
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	20 c0       	rjmp	.+64     	; 0x2ad0 <vfprintf+0x2a4>
    2a90:	19 7f       	andi	r17, 0xF9	; 249
    2a92:	8f 36       	cpi	r24, 0x6F	; 111
    2a94:	a9 f0       	breq	.+42     	; 0x2ac0 <vfprintf+0x294>
    2a96:	80 37       	cpi	r24, 0x70	; 112
    2a98:	20 f4       	brcc	.+8      	; 0x2aa2 <vfprintf+0x276>
    2a9a:	88 35       	cpi	r24, 0x58	; 88
    2a9c:	09 f0       	breq	.+2      	; 0x2aa0 <vfprintf+0x274>
    2a9e:	ae c0       	rjmp	.+348    	; 0x2bfc <vfprintf+0x3d0>
    2aa0:	0b c0       	rjmp	.+22     	; 0x2ab8 <vfprintf+0x28c>
    2aa2:	80 37       	cpi	r24, 0x70	; 112
    2aa4:	21 f0       	breq	.+8      	; 0x2aae <vfprintf+0x282>
    2aa6:	88 37       	cpi	r24, 0x78	; 120
    2aa8:	09 f0       	breq	.+2      	; 0x2aac <vfprintf+0x280>
    2aaa:	a8 c0       	rjmp	.+336    	; 0x2bfc <vfprintf+0x3d0>
    2aac:	01 c0       	rjmp	.+2      	; 0x2ab0 <vfprintf+0x284>
    2aae:	10 61       	ori	r17, 0x10	; 16
    2ab0:	14 ff       	sbrs	r17, 4
    2ab2:	09 c0       	rjmp	.+18     	; 0x2ac6 <vfprintf+0x29a>
    2ab4:	14 60       	ori	r17, 0x04	; 4
    2ab6:	07 c0       	rjmp	.+14     	; 0x2ac6 <vfprintf+0x29a>
    2ab8:	14 ff       	sbrs	r17, 4
    2aba:	08 c0       	rjmp	.+16     	; 0x2acc <vfprintf+0x2a0>
    2abc:	16 60       	ori	r17, 0x06	; 6
    2abe:	06 c0       	rjmp	.+12     	; 0x2acc <vfprintf+0x2a0>
    2ac0:	28 e0       	ldi	r18, 0x08	; 8
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	05 c0       	rjmp	.+10     	; 0x2ad0 <vfprintf+0x2a4>
    2ac6:	20 e1       	ldi	r18, 0x10	; 16
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	02 c0       	rjmp	.+4      	; 0x2ad0 <vfprintf+0x2a4>
    2acc:	20 e1       	ldi	r18, 0x10	; 16
    2ace:	32 e0       	ldi	r19, 0x02	; 2
    2ad0:	f5 01       	movw	r30, r10
    2ad2:	17 ff       	sbrs	r17, 7
    2ad4:	07 c0       	rjmp	.+14     	; 0x2ae4 <vfprintf+0x2b8>
    2ad6:	60 81       	ld	r22, Z
    2ad8:	71 81       	ldd	r23, Z+1	; 0x01
    2ada:	82 81       	ldd	r24, Z+2	; 0x02
    2adc:	93 81       	ldd	r25, Z+3	; 0x03
    2ade:	44 e0       	ldi	r20, 0x04	; 4
    2ae0:	50 e0       	ldi	r21, 0x00	; 0
    2ae2:	06 c0       	rjmp	.+12     	; 0x2af0 <vfprintf+0x2c4>
    2ae4:	60 81       	ld	r22, Z
    2ae6:	71 81       	ldd	r23, Z+1	; 0x01
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	42 e0       	ldi	r20, 0x02	; 2
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	a4 0e       	add	r10, r20
    2af2:	b5 1e       	adc	r11, r21
    2af4:	a2 01       	movw	r20, r4
    2af6:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__ultoa_invert>
    2afa:	d8 2e       	mov	r13, r24
    2afc:	d4 18       	sub	r13, r4
    2afe:	01 2f       	mov	r16, r17
    2b00:	0f 77       	andi	r16, 0x7F	; 127
    2b02:	06 ff       	sbrs	r16, 6
    2b04:	09 c0       	rjmp	.+18     	; 0x2b18 <vfprintf+0x2ec>
    2b06:	0e 7f       	andi	r16, 0xFE	; 254
    2b08:	df 14       	cp	r13, r15
    2b0a:	30 f4       	brcc	.+12     	; 0x2b18 <vfprintf+0x2ec>
    2b0c:	04 ff       	sbrs	r16, 4
    2b0e:	06 c0       	rjmp	.+12     	; 0x2b1c <vfprintf+0x2f0>
    2b10:	02 fd       	sbrc	r16, 2
    2b12:	04 c0       	rjmp	.+8      	; 0x2b1c <vfprintf+0x2f0>
    2b14:	0f 7e       	andi	r16, 0xEF	; 239
    2b16:	02 c0       	rjmp	.+4      	; 0x2b1c <vfprintf+0x2f0>
    2b18:	1d 2d       	mov	r17, r13
    2b1a:	01 c0       	rjmp	.+2      	; 0x2b1e <vfprintf+0x2f2>
    2b1c:	1f 2d       	mov	r17, r15
    2b1e:	80 2f       	mov	r24, r16
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	04 ff       	sbrs	r16, 4
    2b24:	0c c0       	rjmp	.+24     	; 0x2b3e <vfprintf+0x312>
    2b26:	fe 01       	movw	r30, r28
    2b28:	ed 0d       	add	r30, r13
    2b2a:	f1 1d       	adc	r31, r1
    2b2c:	20 81       	ld	r18, Z
    2b2e:	20 33       	cpi	r18, 0x30	; 48
    2b30:	11 f4       	brne	.+4      	; 0x2b36 <vfprintf+0x30a>
    2b32:	09 7e       	andi	r16, 0xE9	; 233
    2b34:	09 c0       	rjmp	.+18     	; 0x2b48 <vfprintf+0x31c>
    2b36:	02 ff       	sbrs	r16, 2
    2b38:	06 c0       	rjmp	.+12     	; 0x2b46 <vfprintf+0x31a>
    2b3a:	1e 5f       	subi	r17, 0xFE	; 254
    2b3c:	05 c0       	rjmp	.+10     	; 0x2b48 <vfprintf+0x31c>
    2b3e:	86 78       	andi	r24, 0x86	; 134
    2b40:	90 70       	andi	r25, 0x00	; 0
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	09 f0       	breq	.+2      	; 0x2b48 <vfprintf+0x31c>
    2b46:	1f 5f       	subi	r17, 0xFF	; 255
    2b48:	80 2e       	mov	r8, r16
    2b4a:	99 24       	eor	r9, r9
    2b4c:	03 fd       	sbrc	r16, 3
    2b4e:	12 c0       	rjmp	.+36     	; 0x2b74 <vfprintf+0x348>
    2b50:	00 ff       	sbrs	r16, 0
    2b52:	0d c0       	rjmp	.+26     	; 0x2b6e <vfprintf+0x342>
    2b54:	fd 2c       	mov	r15, r13
    2b56:	1e 15       	cp	r17, r14
    2b58:	50 f4       	brcc	.+20     	; 0x2b6e <vfprintf+0x342>
    2b5a:	fe 0c       	add	r15, r14
    2b5c:	f1 1a       	sub	r15, r17
    2b5e:	1e 2d       	mov	r17, r14
    2b60:	06 c0       	rjmp	.+12     	; 0x2b6e <vfprintf+0x342>
    2b62:	80 e2       	ldi	r24, 0x20	; 32
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	b3 01       	movw	r22, r6
    2b68:	0e 94 33 16 	call	0x2c66	; 0x2c66 <fputc>
    2b6c:	1f 5f       	subi	r17, 0xFF	; 255
    2b6e:	1e 15       	cp	r17, r14
    2b70:	c0 f3       	brcs	.-16     	; 0x2b62 <vfprintf+0x336>
    2b72:	04 c0       	rjmp	.+8      	; 0x2b7c <vfprintf+0x350>
    2b74:	1e 15       	cp	r17, r14
    2b76:	10 f4       	brcc	.+4      	; 0x2b7c <vfprintf+0x350>
    2b78:	e1 1a       	sub	r14, r17
    2b7a:	01 c0       	rjmp	.+2      	; 0x2b7e <vfprintf+0x352>
    2b7c:	ee 24       	eor	r14, r14
    2b7e:	84 fe       	sbrs	r8, 4
    2b80:	0f c0       	rjmp	.+30     	; 0x2ba0 <vfprintf+0x374>
    2b82:	80 e3       	ldi	r24, 0x30	; 48
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	b3 01       	movw	r22, r6
    2b88:	0e 94 33 16 	call	0x2c66	; 0x2c66 <fputc>
    2b8c:	82 fe       	sbrs	r8, 2
    2b8e:	1f c0       	rjmp	.+62     	; 0x2bce <vfprintf+0x3a2>
    2b90:	81 fe       	sbrs	r8, 1
    2b92:	03 c0       	rjmp	.+6      	; 0x2b9a <vfprintf+0x36e>
    2b94:	88 e5       	ldi	r24, 0x58	; 88
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	10 c0       	rjmp	.+32     	; 0x2bba <vfprintf+0x38e>
    2b9a:	88 e7       	ldi	r24, 0x78	; 120
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	0d c0       	rjmp	.+26     	; 0x2bba <vfprintf+0x38e>
    2ba0:	c4 01       	movw	r24, r8
    2ba2:	86 78       	andi	r24, 0x86	; 134
    2ba4:	90 70       	andi	r25, 0x00	; 0
    2ba6:	00 97       	sbiw	r24, 0x00	; 0
    2ba8:	91 f0       	breq	.+36     	; 0x2bce <vfprintf+0x3a2>
    2baa:	81 fc       	sbrc	r8, 1
    2bac:	02 c0       	rjmp	.+4      	; 0x2bb2 <vfprintf+0x386>
    2bae:	80 e2       	ldi	r24, 0x20	; 32
    2bb0:	01 c0       	rjmp	.+2      	; 0x2bb4 <vfprintf+0x388>
    2bb2:	8b e2       	ldi	r24, 0x2B	; 43
    2bb4:	07 fd       	sbrc	r16, 7
    2bb6:	8d e2       	ldi	r24, 0x2D	; 45
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	b3 01       	movw	r22, r6
    2bbc:	0e 94 33 16 	call	0x2c66	; 0x2c66 <fputc>
    2bc0:	06 c0       	rjmp	.+12     	; 0x2bce <vfprintf+0x3a2>
    2bc2:	80 e3       	ldi	r24, 0x30	; 48
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	b3 01       	movw	r22, r6
    2bc8:	0e 94 33 16 	call	0x2c66	; 0x2c66 <fputc>
    2bcc:	fa 94       	dec	r15
    2bce:	df 14       	cp	r13, r15
    2bd0:	c0 f3       	brcs	.-16     	; 0x2bc2 <vfprintf+0x396>
    2bd2:	da 94       	dec	r13
    2bd4:	f2 01       	movw	r30, r4
    2bd6:	ed 0d       	add	r30, r13
    2bd8:	f1 1d       	adc	r31, r1
    2bda:	80 81       	ld	r24, Z
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	b3 01       	movw	r22, r6
    2be0:	0e 94 33 16 	call	0x2c66	; 0x2c66 <fputc>
    2be4:	dd 20       	and	r13, r13
    2be6:	a9 f7       	brne	.-22     	; 0x2bd2 <vfprintf+0x3a6>
    2be8:	06 c0       	rjmp	.+12     	; 0x2bf6 <vfprintf+0x3ca>
    2bea:	80 e2       	ldi	r24, 0x20	; 32
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	b3 01       	movw	r22, r6
    2bf0:	0e 94 33 16 	call	0x2c66	; 0x2c66 <fputc>
    2bf4:	ea 94       	dec	r14
    2bf6:	ee 20       	and	r14, r14
    2bf8:	c1 f7       	brne	.-16     	; 0x2bea <vfprintf+0x3be>
    2bfa:	40 ce       	rjmp	.-896    	; 0x287c <vfprintf+0x50>
    2bfc:	f3 01       	movw	r30, r6
    2bfe:	86 81       	ldd	r24, Z+6	; 0x06
    2c00:	97 81       	ldd	r25, Z+7	; 0x07
    2c02:	02 c0       	rjmp	.+4      	; 0x2c08 <vfprintf+0x3dc>
    2c04:	8f ef       	ldi	r24, 0xFF	; 255
    2c06:	9f ef       	ldi	r25, 0xFF	; 255
    2c08:	2d 96       	adiw	r28, 0x0d	; 13
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	0f be       	out	0x3f, r0	; 63
    2c12:	cd bf       	out	0x3d, r28	; 61
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	1f 91       	pop	r17
    2c1a:	0f 91       	pop	r16
    2c1c:	ff 90       	pop	r15
    2c1e:	ef 90       	pop	r14
    2c20:	df 90       	pop	r13
    2c22:	cf 90       	pop	r12
    2c24:	bf 90       	pop	r11
    2c26:	af 90       	pop	r10
    2c28:	9f 90       	pop	r9
    2c2a:	8f 90       	pop	r8
    2c2c:	7f 90       	pop	r7
    2c2e:	6f 90       	pop	r6
    2c30:	5f 90       	pop	r5
    2c32:	4f 90       	pop	r4
    2c34:	3f 90       	pop	r3
    2c36:	2f 90       	pop	r2
    2c38:	08 95       	ret

00002c3a <strnlen_P>:
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	05 90       	lpm	r0, Z+
    2c3e:	61 50       	subi	r22, 0x01	; 1
    2c40:	70 40       	sbci	r23, 0x00	; 0
    2c42:	01 10       	cpse	r0, r1
    2c44:	d8 f7       	brcc	.-10     	; 0x2c3c <strnlen_P+0x2>
    2c46:	80 95       	com	r24
    2c48:	90 95       	com	r25
    2c4a:	8e 0f       	add	r24, r30
    2c4c:	9f 1f       	adc	r25, r31
    2c4e:	08 95       	ret

00002c50 <strnlen>:
    2c50:	fc 01       	movw	r30, r24
    2c52:	61 50       	subi	r22, 0x01	; 1
    2c54:	70 40       	sbci	r23, 0x00	; 0
    2c56:	01 90       	ld	r0, Z+
    2c58:	01 10       	cpse	r0, r1
    2c5a:	d8 f7       	brcc	.-10     	; 0x2c52 <strnlen+0x2>
    2c5c:	80 95       	com	r24
    2c5e:	90 95       	com	r25
    2c60:	8e 0f       	add	r24, r30
    2c62:	9f 1f       	adc	r25, r31
    2c64:	08 95       	ret

00002c66 <fputc>:
    2c66:	0f 93       	push	r16
    2c68:	1f 93       	push	r17
    2c6a:	cf 93       	push	r28
    2c6c:	df 93       	push	r29
    2c6e:	8c 01       	movw	r16, r24
    2c70:	eb 01       	movw	r28, r22
    2c72:	8b 81       	ldd	r24, Y+3	; 0x03
    2c74:	81 ff       	sbrs	r24, 1
    2c76:	1b c0       	rjmp	.+54     	; 0x2cae <fputc+0x48>
    2c78:	82 ff       	sbrs	r24, 2
    2c7a:	0d c0       	rjmp	.+26     	; 0x2c96 <fputc+0x30>
    2c7c:	2e 81       	ldd	r18, Y+6	; 0x06
    2c7e:	3f 81       	ldd	r19, Y+7	; 0x07
    2c80:	8c 81       	ldd	r24, Y+4	; 0x04
    2c82:	9d 81       	ldd	r25, Y+5	; 0x05
    2c84:	28 17       	cp	r18, r24
    2c86:	39 07       	cpc	r19, r25
    2c88:	64 f4       	brge	.+24     	; 0x2ca2 <fputc+0x3c>
    2c8a:	e8 81       	ld	r30, Y
    2c8c:	f9 81       	ldd	r31, Y+1	; 0x01
    2c8e:	01 93       	st	Z+, r16
    2c90:	f9 83       	std	Y+1, r31	; 0x01
    2c92:	e8 83       	st	Y, r30
    2c94:	06 c0       	rjmp	.+12     	; 0x2ca2 <fputc+0x3c>
    2c96:	e8 85       	ldd	r30, Y+8	; 0x08
    2c98:	f9 85       	ldd	r31, Y+9	; 0x09
    2c9a:	80 2f       	mov	r24, r16
    2c9c:	19 95       	eicall
    2c9e:	00 97       	sbiw	r24, 0x00	; 0
    2ca0:	31 f4       	brne	.+12     	; 0x2cae <fputc+0x48>
    2ca2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ca4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ca6:	01 96       	adiw	r24, 0x01	; 1
    2ca8:	9f 83       	std	Y+7, r25	; 0x07
    2caa:	8e 83       	std	Y+6, r24	; 0x06
    2cac:	02 c0       	rjmp	.+4      	; 0x2cb2 <fputc+0x4c>
    2cae:	0f ef       	ldi	r16, 0xFF	; 255
    2cb0:	1f ef       	ldi	r17, 0xFF	; 255
    2cb2:	c8 01       	movw	r24, r16
    2cb4:	df 91       	pop	r29
    2cb6:	cf 91       	pop	r28
    2cb8:	1f 91       	pop	r17
    2cba:	0f 91       	pop	r16
    2cbc:	08 95       	ret

00002cbe <__ultoa_invert>:
    2cbe:	fa 01       	movw	r30, r20
    2cc0:	aa 27       	eor	r26, r26
    2cc2:	28 30       	cpi	r18, 0x08	; 8
    2cc4:	51 f1       	breq	.+84     	; 0x2d1a <__ultoa_invert+0x5c>
    2cc6:	20 31       	cpi	r18, 0x10	; 16
    2cc8:	81 f1       	breq	.+96     	; 0x2d2a <__ultoa_invert+0x6c>
    2cca:	e8 94       	clt
    2ccc:	6f 93       	push	r22
    2cce:	6e 7f       	andi	r22, 0xFE	; 254
    2cd0:	6e 5f       	subi	r22, 0xFE	; 254
    2cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd4:	8f 4f       	sbci	r24, 0xFF	; 255
    2cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd8:	af 4f       	sbci	r26, 0xFF	; 255
    2cda:	b1 e0       	ldi	r27, 0x01	; 1
    2cdc:	3e d0       	rcall	.+124    	; 0x2d5a <__ultoa_invert+0x9c>
    2cde:	b4 e0       	ldi	r27, 0x04	; 4
    2ce0:	3c d0       	rcall	.+120    	; 0x2d5a <__ultoa_invert+0x9c>
    2ce2:	67 0f       	add	r22, r23
    2ce4:	78 1f       	adc	r23, r24
    2ce6:	89 1f       	adc	r24, r25
    2ce8:	9a 1f       	adc	r25, r26
    2cea:	a1 1d       	adc	r26, r1
    2cec:	68 0f       	add	r22, r24
    2cee:	79 1f       	adc	r23, r25
    2cf0:	8a 1f       	adc	r24, r26
    2cf2:	91 1d       	adc	r25, r1
    2cf4:	a1 1d       	adc	r26, r1
    2cf6:	6a 0f       	add	r22, r26
    2cf8:	71 1d       	adc	r23, r1
    2cfa:	81 1d       	adc	r24, r1
    2cfc:	91 1d       	adc	r25, r1
    2cfe:	a1 1d       	adc	r26, r1
    2d00:	20 d0       	rcall	.+64     	; 0x2d42 <__ultoa_invert+0x84>
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <__ultoa_invert+0x48>
    2d04:	68 94       	set
    2d06:	3f 91       	pop	r19
    2d08:	2a e0       	ldi	r18, 0x0A	; 10
    2d0a:	26 9f       	mul	r18, r22
    2d0c:	11 24       	eor	r1, r1
    2d0e:	30 19       	sub	r19, r0
    2d10:	30 5d       	subi	r19, 0xD0	; 208
    2d12:	31 93       	st	Z+, r19
    2d14:	de f6       	brtc	.-74     	; 0x2ccc <__ultoa_invert+0xe>
    2d16:	cf 01       	movw	r24, r30
    2d18:	08 95       	ret
    2d1a:	46 2f       	mov	r20, r22
    2d1c:	47 70       	andi	r20, 0x07	; 7
    2d1e:	40 5d       	subi	r20, 0xD0	; 208
    2d20:	41 93       	st	Z+, r20
    2d22:	b3 e0       	ldi	r27, 0x03	; 3
    2d24:	0f d0       	rcall	.+30     	; 0x2d44 <__ultoa_invert+0x86>
    2d26:	c9 f7       	brne	.-14     	; 0x2d1a <__ultoa_invert+0x5c>
    2d28:	f6 cf       	rjmp	.-20     	; 0x2d16 <__ultoa_invert+0x58>
    2d2a:	46 2f       	mov	r20, r22
    2d2c:	4f 70       	andi	r20, 0x0F	; 15
    2d2e:	40 5d       	subi	r20, 0xD0	; 208
    2d30:	4a 33       	cpi	r20, 0x3A	; 58
    2d32:	18 f0       	brcs	.+6      	; 0x2d3a <__ultoa_invert+0x7c>
    2d34:	49 5d       	subi	r20, 0xD9	; 217
    2d36:	31 fd       	sbrc	r19, 1
    2d38:	40 52       	subi	r20, 0x20	; 32
    2d3a:	41 93       	st	Z+, r20
    2d3c:	02 d0       	rcall	.+4      	; 0x2d42 <__ultoa_invert+0x84>
    2d3e:	a9 f7       	brne	.-22     	; 0x2d2a <__ultoa_invert+0x6c>
    2d40:	ea cf       	rjmp	.-44     	; 0x2d16 <__ultoa_invert+0x58>
    2d42:	b4 e0       	ldi	r27, 0x04	; 4
    2d44:	a6 95       	lsr	r26
    2d46:	97 95       	ror	r25
    2d48:	87 95       	ror	r24
    2d4a:	77 95       	ror	r23
    2d4c:	67 95       	ror	r22
    2d4e:	ba 95       	dec	r27
    2d50:	c9 f7       	brne	.-14     	; 0x2d44 <__ultoa_invert+0x86>
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	61 05       	cpc	r22, r1
    2d56:	71 05       	cpc	r23, r1
    2d58:	08 95       	ret
    2d5a:	9b 01       	movw	r18, r22
    2d5c:	ac 01       	movw	r20, r24
    2d5e:	0a 2e       	mov	r0, r26
    2d60:	06 94       	lsr	r0
    2d62:	57 95       	ror	r21
    2d64:	47 95       	ror	r20
    2d66:	37 95       	ror	r19
    2d68:	27 95       	ror	r18
    2d6a:	ba 95       	dec	r27
    2d6c:	c9 f7       	brne	.-14     	; 0x2d60 <__ultoa_invert+0xa2>
    2d6e:	62 0f       	add	r22, r18
    2d70:	73 1f       	adc	r23, r19
    2d72:	84 1f       	adc	r24, r20
    2d74:	95 1f       	adc	r25, r21
    2d76:	a0 1d       	adc	r26, r0
    2d78:	08 95       	ret

00002d7a <_exit>:
    2d7a:	f8 94       	cli

00002d7c <__stop_program>:
    2d7c:	ff cf       	rjmp	.-2      	; 0x2d7c <__stop_program>
