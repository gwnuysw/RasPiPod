
WifiTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023e  00800200  000024be  00002552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000657  0080043e  0080043e  00002790  2**0
                  ALLOC
  3 .stab         00000fcc  00000000  00000000  00002790  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000033a  00000000  00000000  0000375c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00003a98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001efc  00000000  00000000  00003c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d25  00000000  00000000  00005b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000140d  00000000  00000000  00006879  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d8  00000000  00000000  00007c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000850  00000000  00000000  00008460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002115  00000000  00000000  00008cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000adc5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_23>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_51>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee eb       	ldi	r30, 0xBE	; 190
      fc:	f4 e2       	ldi	r31, 0x24	; 36
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 33       	cpi	r26, 0x3E	; 62
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	1a e0       	ldi	r17, 0x0A	; 10
     112:	ae e3       	ldi	r26, 0x3E	; 62
     114:	b4 e0       	ldi	r27, 0x04	; 4
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a5 39       	cpi	r26, 0x95	; 149
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 a3 0c 	call	0x1946	; 0x1946 <main>
     124:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <AdcInit>:
// ATmega2560 ADC Channel : 0(ADC0) ~ 7(ADC7), Single Ended Input
void AdcInit(unsigned char ucAdcChannel)
{
	// Internal 2.56V Voltage Reference with external capacitor at AREF pin
//	ADMUX	=	0xC0 | ucAdcChannel;     		// ADC Channel
	ADMUX	=	(1<<REFS1) | (1<<REFS0) | ucAdcChannel;     		// ADC Channel
     12c:	80 6c       	ori	r24, 0xC0	; 192
     12e:	80 93 7c 00 	sts	0x007C, r24

	// ADC Module Enable, Free Running Mode, ADC Prescaler : 64
	// ADC Auto Trigger Enable
//	ADCSRA	=	0xA7;
	ADCSRA	=	(1<<ADEN)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     132:	ea e7       	ldi	r30, 0x7A	; 122
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	87 ea       	ldi	r24, 0xA7	; 167
     138:	80 83       	st	Z, r24
//	ADCSRA	|=	0x40;			// ADC start conversion
	ADCSRA	|=	(1<<ADSC);		// ADC start conversion
     13a:	80 81       	ld	r24, Z
     13c:	80 64       	ori	r24, 0x40	; 64
     13e:	80 83       	st	Z, r24
}
     140:	08 95       	ret

00000142 <AdcRead>:
unsigned int AdcRead(void)
{
	unsigned char ucLowValue = 0;
	unsigned char ucHighValue = 0;
	unsigned int unAdcValue = 0;
	while ((ADCSRA&0x10)==0x00);	// ADC Î≥ÄÌôòÏù¥ ÎÅùÎÇ†ÎñÑ ÍπåÏßÄ ÎåÄÍ∏∞
     142:	ea e7       	ldi	r30, 0x7A	; 122
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	84 ff       	sbrs	r24, 4
     14a:	fd cf       	rjmp	.-6      	; 0x146 <AdcRead+0x4>
	
	ucLowValue = ADCL;				//ÌïòÏúÑ 8bit
     14c:	80 91 78 00 	lds	r24, 0x0078
	ucHighValue	= ADCH ;			//ÏÉÅÏúÑ 2bit
     150:	90 91 79 00 	lds	r25, 0x0079
	
	unAdcValue = (ucHighValue << 8) | ucLowValue;
     154:	39 2f       	mov	r19, r25
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	82 2b       	or	r24, r18
     15c:	93 2b       	or	r25, r19
//	debugprint("unAdcValue : %d\r\n", unAdcValue);
	
	return unAdcValue;
     15e:	08 95       	ret

00000160 <__vector_23>:
//unsigned int gun_AdcValue	=	0;
unsigned char guc_OverflowCnt	=	0;
int n_flag_getADC = 0;

ISR (TIMER0_OVF_vect)	// Timer0 Overflow0 ISR
{
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	0f 92       	push	r0
     168:	11 24       	eor	r1, r1
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
	cli();																	//----------------v ±‚¥… ∫π∫Ÿ
     17a:	f8 94       	cli
	// 0.01sø° ø¿πˆ«√∑ŒøÏ πﬂª˝, 1/(14745600Hz/1024)•™144 = 0.01s
	TCNT0	=	0xff - 144;
     17c:	8f e6       	ldi	r24, 0x6F	; 111
     17e:	86 bd       	out	0x26, r24	; 38

	timerCouter++;
     180:	80 91 4d 04 	lds	r24, 0x044D
     184:	90 91 4e 04 	lds	r25, 0x044E
     188:	a0 91 4f 04 	lds	r26, 0x044F
     18c:	b0 91 50 04 	lds	r27, 0x0450
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	a1 1d       	adc	r26, r1
     194:	b1 1d       	adc	r27, r1
     196:	80 93 4d 04 	sts	0x044D, r24
     19a:	90 93 4e 04 	sts	0x044E, r25
     19e:	a0 93 4f 04 	sts	0x044F, r26
     1a2:	b0 93 50 04 	sts	0x0450, r27
	
	if ( timerCouter >= setTimerCheckCounter )
     1a6:	40 91 4d 04 	lds	r20, 0x044D
     1aa:	50 91 4e 04 	lds	r21, 0x044E
     1ae:	60 91 4f 04 	lds	r22, 0x044F
     1b2:	70 91 50 04 	lds	r23, 0x0450
     1b6:	80 91 49 04 	lds	r24, 0x0449
     1ba:	90 91 4a 04 	lds	r25, 0x044A
     1be:	a0 91 4b 04 	lds	r26, 0x044B
     1c2:	b0 91 4c 04 	lds	r27, 0x044C
     1c6:	48 17       	cp	r20, r24
     1c8:	59 07       	cpc	r21, r25
     1ca:	6a 07       	cpc	r22, r26
     1cc:	7b 07       	cpc	r23, r27
     1ce:	58 f0       	brcs	.+22     	; 0x1e6 <__vector_23+0x86>
	{
		flagOverflowSetTimer = 1;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	80 93 48 04 	sts	0x0448, r24
		timerCouter = 0;
     1d6:	10 92 4d 04 	sts	0x044D, r1
     1da:	10 92 4e 04 	sts	0x044E, r1
     1de:	10 92 4f 04 	sts	0x044F, r1
     1e2:	10 92 50 04 	sts	0x0450, r1
	}
	sei();
     1e6:	78 94       	sei
														//-------------------------------------^±‚¥… ∫π∫Ÿ
	guc_OverflowCnt++;
     1e8:	80 91 40 04 	lds	r24, 0x0440
     1ec:	8f 5f       	subi	r24, 0xFF	; 255
     1ee:	80 93 40 04 	sts	0x0440, r24

	if (guc_OverflowCnt == 100)		// 0.003s * 100 = 0.3s
     1f2:	84 36       	cpi	r24, 0x64	; 100
     1f4:	41 f4       	brne	.+16     	; 0x206 <__vector_23+0xa6>
	{
		guc_OverflowCnt	=	0;
     1f6:	10 92 40 04 	sts	0x0440, r1
		n_flag_getADC = 1;
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	90 93 3f 04 	sts	0x043F, r25
     202:	80 93 3e 04 	sts	0x043E, r24
	}
}
     206:	bf 91       	pop	r27
     208:	af 91       	pop	r26
     20a:	9f 91       	pop	r25
     20c:	8f 91       	pop	r24
     20e:	7f 91       	pop	r23
     210:	6f 91       	pop	r22
     212:	5f 91       	pop	r21
     214:	4f 91       	pop	r20
     216:	0f 90       	pop	r0
     218:	0f be       	out	0x3f, r0	; 63
     21a:	0f 90       	pop	r0
     21c:	1f 90       	pop	r1
     21e:	18 95       	reti

00000220 <TIMER_Init>:

void TIMER_Init (void)
{
	
	TCCR0B	=	0x05;
     220:	85 e0       	ldi	r24, 0x05	; 5
     222:	85 bd       	out	0x25, r24	; 37
	
	TCNT0	=	0xff - 45;		// 0.003s
     224:	82 ed       	ldi	r24, 0xD2	; 210
     226:	86 bd       	out	0x26, r24	; 38
	TIMSK0	|=	1 << TOIE0;		
     228:	ee e6       	ldi	r30, 0x6E	; 110
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	81 60       	ori	r24, 0x01	; 1
     230:	80 83       	st	Z, r24
	TIFR0	|=	1 << TOV0;	// set Overflow Interupt Flag
     232:	a8 9a       	sbi	0x15, 0	; 21
}
     234:	08 95       	ret

00000236 <LED_Init>:

void LED_Init (void)
{
     236:	cf 93       	push	r28
     238:	c0 e0       	ldi	r28, 0x00	; 0
	int i = 0;
	
	for(i=0; i<MAX_LED_NUM; i++)
	{
		pinMode(RED_PORT, i, OUTPUT);
     23a:	82 e0       	ldi	r24, 0x02	; 2
     23c:	6c 2f       	mov	r22, r28
     23e:	41 e0       	ldi	r20, 0x01	; 1
     240:	0e 94 12 09 	call	0x1224	; 0x1224 <pinMode>
		digitalWrite(RED_PORT, i, LOW);
     244:	82 e0       	ldi	r24, 0x02	; 2
     246:	6c 2f       	mov	r22, r28
     248:	40 e0       	ldi	r20, 0x00	; 0
     24a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
		pinMode(GREEN_PORT, i, OUTPUT);
     24e:	8a e0       	ldi	r24, 0x0A	; 10
     250:	6c 2f       	mov	r22, r28
     252:	41 e0       	ldi	r20, 0x01	; 1
     254:	0e 94 12 09 	call	0x1224	; 0x1224 <pinMode>
		digitalWrite(GREEN_PORT, i, LOW);
     258:	8a e0       	ldi	r24, 0x0A	; 10
     25a:	6c 2f       	mov	r22, r28
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
     262:	cf 5f       	subi	r28, 0xFF	; 255

void LED_Init (void)
{
	int i = 0;
	
	for(i=0; i<MAX_LED_NUM; i++)
     264:	c8 30       	cpi	r28, 0x08	; 8
     266:	49 f7       	brne	.-46     	; 0x23a <LED_Init+0x4>
		pinMode(RED_PORT, i, OUTPUT);
		digitalWrite(RED_PORT, i, LOW);
		pinMode(GREEN_PORT, i, OUTPUT);
		digitalWrite(GREEN_PORT, i, LOW);
	}
}
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <controlLED>:

// color : RED(0), GREEN(1)
void controlLED (int color, unsigned char data)
{
     26c:	ef 92       	push	r14
     26e:	ff 92       	push	r15
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	8c 01       	movw	r16, r24
	int i = 0;
	unsigned char nLedStatus = 0;
	nLedStatus	=	data;
	
	for(i=0; i<MAX_LED_NUM; i++)
     27a:	c0 e0       	ldi	r28, 0x00	; 0
     27c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if((nLedStatus & (1<<i)))
     27e:	e6 2e       	mov	r14, r22
     280:	ff 24       	eor	r15, r15
     282:	c7 01       	movw	r24, r14
     284:	0c 2e       	mov	r0, r28
     286:	02 c0       	rjmp	.+4      	; 0x28c <controlLED+0x20>
     288:	95 95       	asr	r25
     28a:	87 95       	ror	r24
     28c:	0a 94       	dec	r0
     28e:	e2 f7       	brpl	.-8      	; 0x288 <controlLED+0x1c>
     290:	80 ff       	sbrs	r24, 0
     292:	12 c0       	rjmp	.+36     	; 0x2b8 <controlLED+0x4c>
		{
			if (color == RED)
     294:	01 15       	cp	r16, r1
     296:	11 05       	cpc	r17, r1
     298:	31 f4       	brne	.+12     	; 0x2a6 <controlLED+0x3a>
				digitalWrite(RED_PORT, i, HIGH);
     29a:	82 e0       	ldi	r24, 0x02	; 2
     29c:	6c 2f       	mov	r22, r28
     29e:	41 e0       	ldi	r20, 0x01	; 1
     2a0:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
     2a4:	1a c0       	rjmp	.+52     	; 0x2da <controlLED+0x6e>
			else if (color == GREEN)
     2a6:	01 30       	cpi	r16, 0x01	; 1
     2a8:	11 05       	cpc	r17, r1
     2aa:	b9 f4       	brne	.+46     	; 0x2da <controlLED+0x6e>
				digitalWrite(GREEN_PORT, i, HIGH);
     2ac:	8a e0       	ldi	r24, 0x0A	; 10
     2ae:	6c 2f       	mov	r22, r28
     2b0:	41 e0       	ldi	r20, 0x01	; 1
     2b2:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
     2b6:	11 c0       	rjmp	.+34     	; 0x2da <controlLED+0x6e>
		}
		else
		{
			if (color == RED)
     2b8:	01 15       	cp	r16, r1
     2ba:	11 05       	cpc	r17, r1
     2bc:	31 f4       	brne	.+12     	; 0x2ca <controlLED+0x5e>
				digitalWrite(RED_PORT, i, LOW);
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	6c 2f       	mov	r22, r28
     2c2:	40 e0       	ldi	r20, 0x00	; 0
     2c4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
     2c8:	08 c0       	rjmp	.+16     	; 0x2da <controlLED+0x6e>
			else if (color == GREEN)
     2ca:	01 30       	cpi	r16, 0x01	; 1
     2cc:	11 05       	cpc	r17, r1
     2ce:	29 f4       	brne	.+10     	; 0x2da <controlLED+0x6e>
				digitalWrite(GREEN_PORT, i, LOW);
     2d0:	8a e0       	ldi	r24, 0x0A	; 10
     2d2:	6c 2f       	mov	r22, r28
     2d4:	40 e0       	ldi	r20, 0x00	; 0
     2d6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <digitalWrite>
{
	int i = 0;
	unsigned char nLedStatus = 0;
	nLedStatus	=	data;
	
	for(i=0; i<MAX_LED_NUM; i++)
     2da:	21 96       	adiw	r28, 0x01	; 1
     2dc:	c8 30       	cpi	r28, 0x08	; 8
     2de:	d1 05       	cpc	r29, r1
     2e0:	81 f6       	brne	.-96     	; 0x282 <controlLED+0x16>
				digitalWrite(RED_PORT, i, LOW);
			else if (color == GREEN)
				digitalWrite(GREEN_PORT, i, LOW);
		}
	}
}		
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
     2ea:	ff 90       	pop	r15
     2ec:	ef 90       	pop	r14
     2ee:	08 95       	ret

000002f0 <putCh2>:
     2f0:	e0 ed       	ldi	r30, 0xD0	; 208
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	90 81       	ld	r25, Z
     2f6:	95 ff       	sbrs	r25, 5
     2f8:	fd cf       	rjmp	.-6      	; 0x2f4 <putCh2+0x4>
     2fa:	80 93 d6 00 	sts	0x00D6, r24
     2fe:	08 95       	ret

00000300 <__vector_51>:
     300:	1f 92       	push	r1
     302:	0f 92       	push	r0
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	0f 92       	push	r0
     308:	0b b6       	in	r0, 0x3b	; 59
     30a:	0f 92       	push	r0
     30c:	11 24       	eor	r1, r1
     30e:	8f 93       	push	r24
     310:	9f 93       	push	r25
     312:	ef 93       	push	r30
     314:	ff 93       	push	r31
     316:	90 91 41 04 	lds	r25, 0x0441
     31a:	80 91 d6 00 	lds	r24, 0x00D6
     31e:	e3 e5       	ldi	r30, 0x53	; 83
     320:	f4 e0       	ldi	r31, 0x04	; 4
     322:	e9 0f       	add	r30, r25
     324:	f1 1d       	adc	r31, r1
     326:	80 83       	st	Z, r24
     328:	80 91 41 04 	lds	r24, 0x0441
     32c:	8f 5f       	subi	r24, 0xFF	; 255
     32e:	80 93 41 04 	sts	0x0441, r24
     332:	80 91 41 04 	lds	r24, 0x0441
     336:	80 34       	cpi	r24, 0x40	; 64
     338:	10 f0       	brcs	.+4      	; 0x33e <__vector_51+0x3e>
     33a:	10 92 41 04 	sts	0x0441, r1
     33e:	ff 91       	pop	r31
     340:	ef 91       	pop	r30
     342:	9f 91       	pop	r25
     344:	8f 91       	pop	r24
     346:	0f 90       	pop	r0
     348:	0b be       	out	0x3b, r0	; 59
     34a:	0f 90       	pop	r0
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	0f 90       	pop	r0
     350:	1f 90       	pop	r1
     352:	18 95       	reti

00000354 <debugInit>:
     354:	e1 e0       	ldi	r30, 0x01	; 1
     356:	f1 e0       	ldi	r31, 0x01	; 1
     358:	80 81       	ld	r24, Z
     35a:	8c 7f       	andi	r24, 0xFC	; 252
     35c:	80 83       	st	Z, r24
     35e:	e2 e0       	ldi	r30, 0x02	; 2
     360:	f1 e0       	ldi	r31, 0x01	; 1
     362:	80 81       	ld	r24, Z
     364:	80 83       	st	Z, r24
     366:	10 92 d0 00 	sts	0x00D0, r1
     36a:	88 e9       	ldi	r24, 0x98	; 152
     36c:	80 93 d1 00 	sts	0x00D1, r24
     370:	86 e0       	ldi	r24, 0x06	; 6
     372:	80 93 d2 00 	sts	0x00D2, r24
     376:	10 92 d5 00 	sts	0x00D5, r1
     37a:	87 e0       	ldi	r24, 0x07	; 7
     37c:	80 93 d4 00 	sts	0x00D4, r24
     380:	08 95       	ret

00000382 <debugprint>:
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	c0 58       	subi	r28, 0x80	; 128
     390:	d0 40       	sbci	r29, 0x00	; 0
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	de bf       	out	0x3e, r29	; 62
     398:	0f be       	out	0x3f, r0	; 63
     39a:	cd bf       	out	0x3d, r28	; 61
     39c:	fe 01       	movw	r30, r28
     39e:	e8 57       	subi	r30, 0x78	; 120
     3a0:	ff 4f       	sbci	r31, 0xFF	; 255
     3a2:	61 91       	ld	r22, Z+
     3a4:	71 91       	ld	r23, Z+
     3a6:	ce 01       	movw	r24, r28
     3a8:	01 96       	adiw	r24, 0x01	; 1
     3aa:	4e 2f       	mov	r20, r30
     3ac:	5f 2f       	mov	r21, r31
     3ae:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <vsprintf>
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
     3b4:	88 23       	and	r24, r24
     3b6:	51 f0       	breq	.+20     	; 0x3cc <debugprint+0x4a>
     3b8:	8e 01       	movw	r16, r28
     3ba:	0e 5f       	subi	r16, 0xFE	; 254
     3bc:	1f 4f       	sbci	r17, 0xFF	; 255
     3be:	0e 94 78 01 	call	0x2f0	; 0x2f0 <putCh2>
     3c2:	f8 01       	movw	r30, r16
     3c4:	81 91       	ld	r24, Z+
     3c6:	8f 01       	movw	r16, r30
     3c8:	88 23       	and	r24, r24
     3ca:	c9 f7       	brne	.-14     	; 0x3be <debugprint+0x3c>
     3cc:	c0 58       	subi	r28, 0x80	; 128
     3ce:	df 4f       	sbci	r29, 0xFF	; 255
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	cd bf       	out	0x3d, r28	; 61
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	08 95       	ret

000003e4 <debugConsoleMain>:
     3e4:	80 91 41 04 	lds	r24, 0x0441
     3e8:	88 23       	and	r24, r24
     3ea:	79 f0       	breq	.+30     	; 0x40a <debugConsoleMain+0x26>
     3ec:	80 91 41 04 	lds	r24, 0x0441
     3f0:	88 23       	and	r24, r24
     3f2:	49 f0       	breq	.+18     	; 0x406 <debugConsoleMain+0x22>
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	20 91 41 04 	lds	r18, 0x0441
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	82 17       	cp	r24, r18
     402:	93 07       	cpc	r25, r19
     404:	cc f3       	brlt	.-14     	; 0x3f8 <debugConsoleMain+0x14>
     406:	10 92 41 04 	sts	0x0441, r1
     40a:	08 95       	ret

0000040c <putCh0>:
     40c:	e0 ec       	ldi	r30, 0xC0	; 192
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	90 81       	ld	r25, Z
     412:	95 ff       	sbrs	r25, 5
     414:	fd cf       	rjmp	.-6      	; 0x410 <putCh0+0x4>
     416:	80 93 c6 00 	sts	0x00C6, r24
     41a:	08 95       	ret

0000041c <__vector_25>:
     41c:	1f 92       	push	r1
     41e:	0f 92       	push	r0
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	0f 92       	push	r0
     424:	0b b6       	in	r0, 0x3b	; 59
     426:	0f 92       	push	r0
     428:	11 24       	eor	r1, r1
     42a:	8f 93       	push	r24
     42c:	9f 93       	push	r25
     42e:	ef 93       	push	r30
     430:	ff 93       	push	r31
     432:	90 91 47 04 	lds	r25, 0x0447
     436:	80 91 c6 00 	lds	r24, 0x00C6
     43a:	e3 e9       	ldi	r30, 0x93	; 147
     43c:	f6 e0       	ldi	r31, 0x06	; 6
     43e:	e9 0f       	add	r30, r25
     440:	f1 1d       	adc	r31, r1
     442:	80 83       	st	Z, r24
     444:	80 91 47 04 	lds	r24, 0x0447
     448:	8f 5f       	subi	r24, 0xFF	; 255
     44a:	80 93 47 04 	sts	0x0447, r24
     44e:	80 91 47 04 	lds	r24, 0x0447
     452:	ff 91       	pop	r31
     454:	ef 91       	pop	r30
     456:	9f 91       	pop	r25
     458:	8f 91       	pop	r24
     45a:	0f 90       	pop	r0
     45c:	0b be       	out	0x3b, r0	; 59
     45e:	0f 90       	pop	r0
     460:	0f be       	out	0x3f, r0	; 63
     462:	0f 90       	pop	r0
     464:	1f 90       	pop	r1
     466:	18 95       	reti

00000468 <wifiAndBTModuleReset>:
     468:	56 98       	cbi	0x0a, 6	; 10
     46a:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     46c:	89 e9       	ldi	r24, 0x99	; 153
     46e:	99 e5       	ldi	r25, 0x59	; 89
     470:	a1 e0       	ldi	r26, 0x01	; 1
     472:	81 50       	subi	r24, 0x01	; 1
     474:	90 40       	sbci	r25, 0x00	; 0
     476:	a0 40       	sbci	r26, 0x00	; 0
     478:	e1 f7       	brne	.-8      	; 0x472 <wifiAndBTModuleReset+0xa>
     47a:	00 00       	nop
     47c:	56 9a       	sbi	0x0a, 6	; 10
     47e:	8f ef       	ldi	r24, 0xFF	; 255
     480:	9f e3       	ldi	r25, 0x3F	; 63
     482:	a2 e0       	ldi	r26, 0x02	; 2
     484:	81 50       	subi	r24, 0x01	; 1
     486:	90 40       	sbci	r25, 0x00	; 0
     488:	a0 40       	sbci	r26, 0x00	; 0
     48a:	e1 f7       	brne	.-8      	; 0x484 <wifiAndBTModuleReset+0x1c>
     48c:	00 c0       	rjmp	.+0      	; 0x48e <wifiAndBTModuleReset+0x26>
     48e:	00 00       	nop
     490:	56 98       	cbi	0x0a, 6	; 10
     492:	5e 9a       	sbi	0x0b, 6	; 11
     494:	8f ef       	ldi	r24, 0xFF	; 255
     496:	9f ef       	ldi	r25, 0xFF	; 255
     498:	a9 e5       	ldi	r26, 0x59	; 89
     49a:	81 50       	subi	r24, 0x01	; 1
     49c:	90 40       	sbci	r25, 0x00	; 0
     49e:	a0 40       	sbci	r26, 0x00	; 0
     4a0:	e1 f7       	brne	.-8      	; 0x49a <wifiAndBTModuleReset+0x32>
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <wifiAndBTModuleReset+0x3c>
     4a4:	00 00       	nop
     4a6:	08 95       	ret

000004a8 <wifiEnable>:
     4a8:	88 23       	and	r24, r24
     4aa:	11 f0       	breq	.+4      	; 0x4b0 <wifiEnable+0x8>
     4ac:	5f 9a       	sbi	0x0b, 7	; 11
     4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <wifiEnable+0xa>
     4b0:	5f 98       	cbi	0x0b, 7	; 11
     4b2:	8f ef       	ldi	r24, 0xFF	; 255
     4b4:	9f ef       	ldi	r25, 0xFF	; 255
     4b6:	a8 e0       	ldi	r26, 0x08	; 8
     4b8:	81 50       	subi	r24, 0x01	; 1
     4ba:	90 40       	sbci	r25, 0x00	; 0
     4bc:	a0 40       	sbci	r26, 0x00	; 0
     4be:	e1 f7       	brne	.-8      	; 0x4b8 <wifiEnable+0x10>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <wifiEnable+0x1a>
     4c2:	00 00       	nop
     4c4:	08 95       	ret

000004c6 <wifiInit>:
     4c6:	8d b1       	in	r24, 0x0d	; 13
     4c8:	8c 7f       	andi	r24, 0xFC	; 252
     4ca:	8d b9       	out	0x0d, r24	; 13
     4cc:	8e b1       	in	r24, 0x0e	; 14
     4ce:	8e b9       	out	0x0e, r24	; 14
     4d0:	10 92 c0 00 	sts	0x00C0, r1
     4d4:	88 e9       	ldi	r24, 0x98	; 152
     4d6:	80 93 c1 00 	sts	0x00C1, r24
     4da:	86 e0       	ldi	r24, 0x06	; 6
     4dc:	80 93 c2 00 	sts	0x00C2, r24
     4e0:	10 92 c5 00 	sts	0x00C5, r1
     4e4:	87 e0       	ldi	r24, 0x07	; 7
     4e6:	80 93 c4 00 	sts	0x00C4, r24
     4ea:	57 9a       	sbi	0x0a, 7	; 10
     4ec:	5f 9a       	sbi	0x0b, 7	; 11
     4ee:	0e 94 34 02 	call	0x468	; 0x468 <wifiAndBTModuleReset>
     4f2:	8f ef       	ldi	r24, 0xFF	; 255
     4f4:	9f e7       	ldi	r25, 0x7F	; 127
     4f6:	a4 e0       	ldi	r26, 0x04	; 4
     4f8:	81 50       	subi	r24, 0x01	; 1
     4fa:	90 40       	sbci	r25, 0x00	; 0
     4fc:	a0 40       	sbci	r26, 0x00	; 0
     4fe:	e1 f7       	brne	.-8      	; 0x4f8 <wifiInit+0x32>
     500:	00 c0       	rjmp	.+0      	; 0x502 <wifiInit+0x3c>
     502:	00 00       	nop
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	0e 94 54 02 	call	0x4a8	; 0x4a8 <wifiEnable>
     50a:	10 92 94 0a 	sts	0x0A94, r1
     50e:	10 92 93 0a 	sts	0x0A93, r1
     512:	08 95       	ret

00000514 <wifiprint>:
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	c0 58       	subi	r28, 0x80	; 128
     522:	d0 40       	sbci	r29, 0x00	; 0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	f8 94       	cli
     528:	de bf       	out	0x3e, r29	; 62
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	fe 01       	movw	r30, r28
     530:	e8 57       	subi	r30, 0x78	; 120
     532:	ff 4f       	sbci	r31, 0xFF	; 255
     534:	61 91       	ld	r22, Z+
     536:	71 91       	ld	r23, Z+
     538:	ce 01       	movw	r24, r28
     53a:	01 96       	adiw	r24, 0x01	; 1
     53c:	4e 2f       	mov	r20, r30
     53e:	5f 2f       	mov	r21, r31
     540:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <vsprintf>
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	88 23       	and	r24, r24
     548:	51 f0       	breq	.+20     	; 0x55e <wifiprint+0x4a>
     54a:	8e 01       	movw	r16, r28
     54c:	0e 5f       	subi	r16, 0xFE	; 254
     54e:	1f 4f       	sbci	r17, 0xFF	; 255
     550:	0e 94 06 02 	call	0x40c	; 0x40c <putCh0>
     554:	f8 01       	movw	r30, r16
     556:	81 91       	ld	r24, Z+
     558:	8f 01       	movw	r16, r30
     55a:	88 23       	and	r24, r24
     55c:	c9 f7       	brne	.-14     	; 0x550 <wifiprint+0x3c>
     55e:	c0 58       	subi	r28, 0x80	; 128
     560:	df 4f       	sbci	r29, 0xFF	; 255
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	f8 94       	cli
     566:	de bf       	out	0x3e, r29	; 62
     568:	0f be       	out	0x3f, r0	; 63
     56a:	cd bf       	out	0x3d, r28	; 61
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	08 95       	ret

00000576 <parsingIPDRxData>:
     576:	8f 92       	push	r8
     578:	9f 92       	push	r9
     57a:	af 92       	push	r10
     57c:	bf 92       	push	r11
     57e:	cf 92       	push	r12
     580:	df 92       	push	r13
     582:	ef 92       	push	r14
     584:	ff 92       	push	r15
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
     592:	2a 97       	sbiw	r28, 0x0a	; 10
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	6c 01       	movw	r12, r24
     5a0:	7b 01       	movw	r14, r22
     5a2:	16 16       	cp	r1, r22
     5a4:	17 06       	cpc	r1, r23
     5a6:	0c f0       	brlt	.+2      	; 0x5aa <parsingIPDRxData+0x34>
     5a8:	76 c0       	rjmp	.+236    	; 0x696 <parsingIPDRxData+0x120>
     5aa:	fc 01       	movw	r30, r24
     5ac:	80 81       	ld	r24, Z
     5ae:	8a 33       	cpi	r24, 0x3A	; 58
     5b0:	c1 f0       	breq	.+48     	; 0x5e2 <parsingIPDRxData+0x6c>
     5b2:	31 96       	adiw	r30, 0x01	; 1
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	03 c0       	rjmp	.+6      	; 0x5c0 <parsingIPDRxData+0x4a>
     5ba:	21 91       	ld	r18, Z+
     5bc:	2a 33       	cpi	r18, 0x3A	; 58
     5be:	31 f0       	breq	.+12     	; 0x5cc <parsingIPDRxData+0x56>
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	8e 15       	cp	r24, r14
     5c4:	9f 05       	cpc	r25, r15
     5c6:	c9 f7       	brne	.-14     	; 0x5ba <parsingIPDRxData+0x44>
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	6e c0       	rjmp	.+220    	; 0x6a8 <parsingIPDRxData+0x132>
     5cc:	ff ef       	ldi	r31, 0xFF	; 255
     5ce:	8f 3f       	cpi	r24, 0xFF	; 255
     5d0:	9f 07       	cpc	r25, r31
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <parsingIPDRxData+0x60>
     5d4:	62 c0       	rjmp	.+196    	; 0x69a <parsingIPDRxData+0x124>
     5d6:	5c 01       	movw	r10, r24
     5d8:	8c 30       	cpi	r24, 0x0C	; 12
     5da:	91 05       	cpc	r25, r1
     5dc:	0c f0       	brlt	.+2      	; 0x5e0 <parsingIPDRxData+0x6a>
     5de:	5f c0       	rjmp	.+190    	; 0x69e <parsingIPDRxData+0x128>
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <parsingIPDRxData+0x70>
     5e2:	aa 24       	eor	r10, r10
     5e4:	bb 24       	eor	r11, r11
     5e6:	85 01       	movw	r16, r10
     5e8:	05 50       	subi	r16, 0x05	; 5
     5ea:	10 40       	sbci	r17, 0x00	; 0
     5ec:	b6 01       	movw	r22, r12
     5ee:	6b 5f       	subi	r22, 0xFB	; 251
     5f0:	7f 4f       	sbci	r23, 0xFF	; 255
     5f2:	ce 01       	movw	r24, r28
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	40 2f       	mov	r20, r16
     5f8:	51 2f       	mov	r21, r17
     5fa:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <memcpy>
     5fe:	e1 e0       	ldi	r30, 0x01	; 1
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	ec 0f       	add	r30, r28
     604:	fd 1f       	adc	r31, r29
     606:	e0 0f       	add	r30, r16
     608:	f1 1f       	adc	r31, r17
     60a:	10 82       	st	Z, r1
     60c:	ce 01       	movw	r24, r28
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <atoi>
     614:	ac 01       	movw	r20, r24
     616:	00 97       	sbiw	r24, 0x00	; 0
     618:	09 f4       	brne	.+2      	; 0x61c <parsingIPDRxData+0xa6>
     61a:	43 c0       	rjmp	.+134    	; 0x6a2 <parsingIPDRxData+0x12c>
     61c:	ea 18       	sub	r14, r10
     61e:	fb 08       	sbc	r15, r11
     620:	87 01       	movw	r16, r14
     622:	01 50       	subi	r16, 0x01	; 1
     624:	10 40       	sbci	r17, 0x00	; 0
     626:	08 17       	cp	r16, r24
     628:	19 07       	cpc	r17, r25
     62a:	34 f5       	brge	.+76     	; 0x678 <parsingIPDRxData+0x102>
     62c:	c7 01       	movw	r24, r14
     62e:	01 96       	adiw	r24, 0x01	; 1
     630:	84 17       	cp	r24, r20
     632:	95 07       	cpc	r25, r21
     634:	c1 f5       	brne	.+112    	; 0x6a6 <parsingIPDRxData+0x130>
     636:	90 93 46 04 	sts	0x0446, r25
     63a:	80 93 45 04 	sts	0x0445, r24
     63e:	0f 2e       	mov	r0, r31
     640:	f3 e9       	ldi	r31, 0x93	; 147
     642:	8f 2e       	mov	r8, r31
     644:	f4 e0       	ldi	r31, 0x04	; 4
     646:	9f 2e       	mov	r9, r31
     648:	f0 2d       	mov	r31, r0
     64a:	b5 01       	movw	r22, r10
     64c:	6f 5f       	subi	r22, 0xFF	; 255
     64e:	7f 4f       	sbci	r23, 0xFF	; 255
     650:	6c 0d       	add	r22, r12
     652:	7d 1d       	adc	r23, r13
     654:	88 2d       	mov	r24, r8
     656:	99 2d       	mov	r25, r9
     658:	40 2f       	mov	r20, r16
     65a:	51 2f       	mov	r21, r17
     65c:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <memcpy>
     660:	f4 01       	movw	r30, r8
     662:	e0 0f       	add	r30, r16
     664:	f1 1f       	adc	r31, r17
     666:	8d e0       	ldi	r24, 0x0D	; 13
     668:	80 83       	st	Z, r24
     66a:	f4 01       	movw	r30, r8
     66c:	ee 0d       	add	r30, r14
     66e:	ff 1d       	adc	r31, r15
     670:	8a e0       	ldi	r24, 0x0A	; 10
     672:	80 83       	st	Z, r24
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	18 c0       	rjmp	.+48     	; 0x6a8 <parsingIPDRxData+0x132>
     678:	90 93 46 04 	sts	0x0446, r25
     67c:	80 93 45 04 	sts	0x0445, r24
     680:	83 e9       	ldi	r24, 0x93	; 147
     682:	94 e0       	ldi	r25, 0x04	; 4
     684:	b5 01       	movw	r22, r10
     686:	6f 5f       	subi	r22, 0xFF	; 255
     688:	7f 4f       	sbci	r23, 0xFF	; 255
     68a:	6c 0d       	add	r22, r12
     68c:	7d 1d       	adc	r23, r13
     68e:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <memcpy>
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	09 c0       	rjmp	.+18     	; 0x6a8 <parsingIPDRxData+0x132>
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	07 c0       	rjmp	.+14     	; 0x6a8 <parsingIPDRxData+0x132>
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	05 c0       	rjmp	.+10     	; 0x6a8 <parsingIPDRxData+0x132>
     69e:	82 e0       	ldi	r24, 0x02	; 2
     6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <parsingIPDRxData+0x132>
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <parsingIPDRxData+0x132>
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	2a 96       	adiw	r28, 0x0a	; 10
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	de bf       	out	0x3e, r29	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	cd bf       	out	0x3d, r28	; 61
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	ff 90       	pop	r15
     6be:	ef 90       	pop	r14
     6c0:	df 90       	pop	r13
     6c2:	cf 90       	pop	r12
     6c4:	bf 90       	pop	r11
     6c6:	af 90       	pop	r10
     6c8:	9f 90       	pop	r9
     6ca:	8f 90       	pop	r8
     6cc:	08 95       	ret

000006ce <parsingMsg>:
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	ec 01       	movw	r28, r24
     6d8:	8b 01       	movw	r16, r22
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	72 e0       	ldi	r23, 0x02	; 2
     6de:	42 e0       	ldi	r20, 0x02	; 2
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <strncmp>
     6e6:	28 2f       	mov	r18, r24
     6e8:	39 2f       	mov	r19, r25
     6ea:	21 15       	cp	r18, r1
     6ec:	31 05       	cpc	r19, r1
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <parsingMsg+0x24>
     6f0:	6a c0       	rjmp	.+212    	; 0x7c6 <parsingMsg+0xf8>
     6f2:	88 81       	ld	r24, Y
     6f4:	8e 33       	cpi	r24, 0x3E	; 62
     6f6:	09 f4       	brne	.+2      	; 0x6fa <parsingMsg+0x2c>
     6f8:	68 c0       	rjmp	.+208    	; 0x7ca <parsingMsg+0xfc>
     6fa:	07 30       	cpi	r16, 0x07	; 7
     6fc:	11 05       	cpc	r17, r1
     6fe:	6c f0       	brlt	.+26     	; 0x71a <parsingMsg+0x4c>
     700:	ce 01       	movw	r24, r28
     702:	63 e0       	ldi	r22, 0x03	; 3
     704:	72 e0       	ldi	r23, 0x02	; 2
     706:	47 e0       	ldi	r20, 0x07	; 7
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <strncmp>
     70e:	28 2f       	mov	r18, r24
     710:	39 2f       	mov	r19, r25
     712:	21 15       	cp	r18, r1
     714:	31 05       	cpc	r19, r1
     716:	09 f4       	brne	.+2      	; 0x71a <parsingMsg+0x4c>
     718:	5a c0       	rjmp	.+180    	; 0x7ce <parsingMsg+0x100>
     71a:	04 30       	cpi	r16, 0x04	; 4
     71c:	11 05       	cpc	r17, r1
     71e:	c4 f0       	brlt	.+48     	; 0x750 <parsingMsg+0x82>
     720:	ce 01       	movw	r24, r28
     722:	6b e0       	ldi	r22, 0x0B	; 11
     724:	72 e0       	ldi	r23, 0x02	; 2
     726:	44 e0       	ldi	r20, 0x04	; 4
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <strncmp>
     72e:	28 2f       	mov	r18, r24
     730:	39 2f       	mov	r19, r25
     732:	21 15       	cp	r18, r1
     734:	31 05       	cpc	r19, r1
     736:	61 f4       	brne	.+24     	; 0x750 <parsingMsg+0x82>
     738:	ce 01       	movw	r24, r28
     73a:	b8 01       	movw	r22, r16
     73c:	0e 94 bb 02 	call	0x576	; 0x576 <parsingIPDRxData>
     740:	88 23       	and	r24, r24
     742:	09 f4       	brne	.+2      	; 0x746 <parsingMsg+0x78>
     744:	46 c0       	rjmp	.+140    	; 0x7d2 <parsingMsg+0x104>
     746:	81 30       	cpi	r24, 0x01	; 1
     748:	09 f0       	breq	.+2      	; 0x74c <parsingMsg+0x7e>
     74a:	45 c0       	rjmp	.+138    	; 0x7d6 <parsingMsg+0x108>
     74c:	84 e0       	ldi	r24, 0x04	; 4
     74e:	4e c0       	rjmp	.+156    	; 0x7ec <parsingMsg+0x11e>
     750:	05 30       	cpi	r16, 0x05	; 5
     752:	11 05       	cpc	r17, r1
     754:	64 f0       	brlt	.+24     	; 0x76e <parsingMsg+0xa0>
     756:	ce 01       	movw	r24, r28
     758:	61 e1       	ldi	r22, 0x11	; 17
     75a:	72 e0       	ldi	r23, 0x02	; 2
     75c:	45 e0       	ldi	r20, 0x05	; 5
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <strncmp>
     764:	28 2f       	mov	r18, r24
     766:	39 2f       	mov	r19, r25
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	b1 f1       	breq	.+108    	; 0x7da <parsingMsg+0x10c>
     76e:	04 30       	cpi	r16, 0x04	; 4
     770:	11 05       	cpc	r17, r1
     772:	64 f0       	brlt	.+24     	; 0x78c <parsingMsg+0xbe>
     774:	ce 01       	movw	r24, r28
     776:	67 e1       	ldi	r22, 0x17	; 23
     778:	72 e0       	ldi	r23, 0x02	; 2
     77a:	45 e0       	ldi	r20, 0x05	; 5
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <strncmp>
     782:	28 2f       	mov	r18, r24
     784:	39 2f       	mov	r19, r25
     786:	21 15       	cp	r18, r1
     788:	31 05       	cpc	r19, r1
     78a:	49 f1       	breq	.+82     	; 0x7de <parsingMsg+0x110>
     78c:	07 30       	cpi	r16, 0x07	; 7
     78e:	11 05       	cpc	r17, r1
     790:	44 f1       	brlt	.+80     	; 0x7e2 <parsingMsg+0x114>
     792:	ce 01       	movw	r24, r28
     794:	6c e1       	ldi	r22, 0x1C	; 28
     796:	72 e0       	ldi	r23, 0x02	; 2
     798:	47 e0       	ldi	r20, 0x07	; 7
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <strncmp>
     7a0:	28 2f       	mov	r18, r24
     7a2:	39 2f       	mov	r19, r25
     7a4:	21 15       	cp	r18, r1
     7a6:	31 05       	cpc	r19, r1
     7a8:	f1 f0       	breq	.+60     	; 0x7e6 <parsingMsg+0x118>
     7aa:	ce 01       	movw	r24, r28
     7ac:	64 e2       	ldi	r22, 0x24	; 36
     7ae:	72 e0       	ldi	r23, 0x02	; 2
     7b0:	47 e0       	ldi	r20, 0x07	; 7
     7b2:	50 e0       	ldi	r21, 0x00	; 0
     7b4:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <strncmp>
     7b8:	28 2f       	mov	r18, r24
     7ba:	39 2f       	mov	r19, r25
     7bc:	21 15       	cp	r18, r1
     7be:	31 05       	cpc	r19, r1
     7c0:	a1 f4       	brne	.+40     	; 0x7ea <parsingMsg+0x11c>
     7c2:	89 e0       	ldi	r24, 0x09	; 9
     7c4:	13 c0       	rjmp	.+38     	; 0x7ec <parsingMsg+0x11e>
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	11 c0       	rjmp	.+34     	; 0x7ec <parsingMsg+0x11e>
     7ca:	88 e0       	ldi	r24, 0x08	; 8
     7cc:	0f c0       	rjmp	.+30     	; 0x7ec <parsingMsg+0x11e>
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	0d c0       	rjmp	.+26     	; 0x7ec <parsingMsg+0x11e>
     7d2:	83 e0       	ldi	r24, 0x03	; 3
     7d4:	0b c0       	rjmp	.+22     	; 0x7ec <parsingMsg+0x11e>
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	09 c0       	rjmp	.+18     	; 0x7ec <parsingMsg+0x11e>
     7da:	85 e0       	ldi	r24, 0x05	; 5
     7dc:	07 c0       	rjmp	.+14     	; 0x7ec <parsingMsg+0x11e>
     7de:	86 e0       	ldi	r24, 0x06	; 6
     7e0:	05 c0       	rjmp	.+10     	; 0x7ec <parsingMsg+0x11e>
     7e2:	8a e0       	ldi	r24, 0x0A	; 10
     7e4:	03 c0       	rjmp	.+6      	; 0x7ec <parsingMsg+0x11e>
     7e6:	87 e0       	ldi	r24, 0x07	; 7
     7e8:	01 c0       	rjmp	.+2      	; 0x7ec <parsingMsg+0x11e>
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	08 95       	ret

000007f6 <rxDataProcess>:
     7f6:	2f 92       	push	r2
     7f8:	3f 92       	push	r3
     7fa:	4f 92       	push	r4
     7fc:	5f 92       	push	r5
     7fe:	6f 92       	push	r6
     800:	7f 92       	push	r7
     802:	8f 92       	push	r8
     804:	9f 92       	push	r9
     806:	af 92       	push	r10
     808:	bf 92       	push	r11
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	c2 50       	subi	r28, 0x02	; 2
     820:	d2 40       	sbci	r29, 0x02	; 2
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
     82c:	3c 01       	movw	r6, r24
     82e:	c6 2e       	mov	r12, r22
     830:	80 91 47 04 	lds	r24, 0x0447
     834:	88 23       	and	r24, r24
     836:	09 f4       	brne	.+2      	; 0x83a <rxDataProcess+0x44>
     838:	0b c1       	rjmp	.+534    	; 0xa50 <rxDataProcess+0x25a>
     83a:	20 91 47 04 	lds	r18, 0x0447
     83e:	80 91 42 04 	lds	r24, 0x0442
     842:	90 91 43 04 	lds	r25, 0x0443
     846:	82 0f       	add	r24, r18
     848:	91 1d       	adc	r25, r1
     84a:	22 e0       	ldi	r18, 0x02	; 2
     84c:	80 30       	cpi	r24, 0x00	; 0
     84e:	92 07       	cpc	r25, r18
     850:	44 f0       	brlt	.+16     	; 0x862 <rxDataProcess+0x6c>
     852:	10 92 43 04 	sts	0x0443, r1
     856:	10 92 42 04 	sts	0x0442, r1
     85a:	10 92 44 04 	sts	0x0444, r1
     85e:	dd 24       	eor	r13, r13
     860:	f8 c0       	rjmp	.+496    	; 0xa52 <rxDataProcess+0x25c>
     862:	40 91 47 04 	lds	r20, 0x0447
     866:	83 e9       	ldi	r24, 0x93	; 147
     868:	98 e0       	ldi	r25, 0x08	; 8
     86a:	63 e9       	ldi	r22, 0x93	; 147
     86c:	76 e0       	ldi	r23, 0x06	; 6
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <memcpy>
     874:	20 91 47 04 	lds	r18, 0x0447
     878:	80 91 42 04 	lds	r24, 0x0442
     87c:	90 91 43 04 	lds	r25, 0x0443
     880:	82 0f       	add	r24, r18
     882:	91 1d       	adc	r25, r1
     884:	90 93 43 04 	sts	0x0443, r25
     888:	80 93 42 04 	sts	0x0442, r24
     88c:	10 92 47 04 	sts	0x0447, r1
     890:	dd 24       	eor	r13, r13
     892:	aa 24       	eor	r10, r10
     894:	bb 24       	eor	r11, r11
     896:	88 24       	eor	r8, r8
     898:	8a 94       	dec	r8
     89a:	98 2c       	mov	r9, r8
     89c:	0f 2e       	mov	r0, r31
     89e:	f3 e9       	ldi	r31, 0x93	; 147
     8a0:	ef 2e       	mov	r14, r31
     8a2:	f8 e0       	ldi	r31, 0x08	; 8
     8a4:	ff 2e       	mov	r15, r31
     8a6:	f0 2d       	mov	r31, r0
     8a8:	cf 5f       	subi	r28, 0xFF	; 255
     8aa:	dd 4f       	sbci	r29, 0xFD	; 253
     8ac:	e8 82       	st	Y, r14
     8ae:	c1 50       	subi	r28, 0x01	; 1
     8b0:	d2 40       	sbci	r29, 0x02	; 2
     8b2:	ce 5f       	subi	r28, 0xFE	; 254
     8b4:	dd 4f       	sbci	r29, 0xFD	; 253
     8b6:	f8 82       	st	Y, r15
     8b8:	c2 50       	subi	r28, 0x02	; 2
     8ba:	d2 40       	sbci	r29, 0x02	; 2
     8bc:	0f 2e       	mov	r0, r31
     8be:	f5 e9       	ldi	r31, 0x95	; 149
     8c0:	4f 2e       	mov	r4, r31
     8c2:	f8 e0       	ldi	r31, 0x08	; 8
     8c4:	5f 2e       	mov	r5, r31
     8c6:	f0 2d       	mov	r31, r0
     8c8:	0f 2e       	mov	r0, r31
     8ca:	fe ef       	ldi	r31, 0xFE	; 254
     8cc:	2f 2e       	mov	r2, r31
     8ce:	ff ef       	ldi	r31, 0xFF	; 255
     8d0:	3f 2e       	mov	r3, r31
     8d2:	f0 2d       	mov	r31, r0
     8d4:	24 0c       	add	r2, r4
     8d6:	35 1c       	adc	r3, r5
     8d8:	80 91 42 04 	lds	r24, 0x0442
     8dc:	90 91 43 04 	lds	r25, 0x0443
     8e0:	18 16       	cp	r1, r24
     8e2:	19 06       	cpc	r1, r25
     8e4:	0c f0       	brlt	.+2      	; 0x8e8 <rxDataProcess+0xf2>
     8e6:	9b c0       	rjmp	.+310    	; 0xa1e <rxDataProcess+0x228>
     8e8:	85 01       	movw	r16, r10
     8ea:	b4 01       	movw	r22, r8
     8ec:	8f ef       	ldi	r24, 0xFF	; 255
     8ee:	6f 3f       	cpi	r22, 0xFF	; 255
     8f0:	78 07       	cpc	r23, r24
     8f2:	09 f4       	brne	.+2      	; 0x8f6 <rxDataProcess+0x100>
     8f4:	83 c0       	rjmp	.+262    	; 0x9fc <rxDataProcess+0x206>
     8f6:	f7 01       	movw	r30, r14
     8f8:	e0 0f       	add	r30, r16
     8fa:	f1 1f       	adc	r31, r17
     8fc:	80 81       	ld	r24, Z
     8fe:	8a 30       	cpi	r24, 0x0A	; 10
     900:	09 f0       	breq	.+2      	; 0x904 <rxDataProcess+0x10e>
     902:	83 c0       	rjmp	.+262    	; 0xa0a <rxDataProcess+0x214>
     904:	cb 01       	movw	r24, r22
     906:	01 96       	adiw	r24, 0x01	; 1
     908:	80 17       	cp	r24, r16
     90a:	91 07       	cpc	r25, r17
     90c:	09 f0       	breq	.+2      	; 0x910 <rxDataProcess+0x11a>
     90e:	7d c0       	rjmp	.+250    	; 0xa0a <rxDataProcess+0x214>
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	91 05       	cpc	r25, r1
     914:	19 f5       	brne	.+70     	; 0x95c <rxDataProcess+0x166>
     916:	40 91 42 04 	lds	r20, 0x0442
     91a:	50 91 43 04 	lds	r21, 0x0443
     91e:	42 50       	subi	r20, 0x02	; 2
     920:	50 40       	sbci	r21, 0x00	; 0
     922:	ce 01       	movw	r24, r28
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	64 2d       	mov	r22, r4
     928:	75 2d       	mov	r23, r5
     92a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <memcpy>
     92e:	40 91 42 04 	lds	r20, 0x0442
     932:	50 91 43 04 	lds	r21, 0x0443
     936:	42 50       	subi	r20, 0x02	; 2
     938:	50 40       	sbci	r21, 0x00	; 0
     93a:	82 2d       	mov	r24, r2
     93c:	93 2d       	mov	r25, r3
     93e:	be 01       	movw	r22, r28
     940:	6f 5f       	subi	r22, 0xFF	; 255
     942:	7f 4f       	sbci	r23, 0xFF	; 255
     944:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <memcpy>
     948:	80 91 42 04 	lds	r24, 0x0442
     94c:	90 91 43 04 	lds	r25, 0x0443
     950:	02 97       	sbiw	r24, 0x02	; 2
     952:	90 93 43 04 	sts	0x0443, r25
     956:	80 93 42 04 	sts	0x0442, r24
     95a:	be cf       	rjmp	.-132    	; 0x8d8 <rxDataProcess+0xe2>
     95c:	cf 5f       	subi	r28, 0xFF	; 255
     95e:	dd 4f       	sbci	r29, 0xFD	; 253
     960:	88 81       	ld	r24, Y
     962:	c1 50       	subi	r28, 0x01	; 1
     964:	d2 40       	sbci	r29, 0x02	; 2
     966:	ce 5f       	subi	r28, 0xFE	; 254
     968:	dd 4f       	sbci	r29, 0xFD	; 253
     96a:	98 81       	ld	r25, Y
     96c:	c2 50       	subi	r28, 0x02	; 2
     96e:	d2 40       	sbci	r29, 0x02	; 2
     970:	0e 94 67 03 	call	0x6ce	; 0x6ce <parsingMsg>
     974:	dc 14       	cp	r13, r12
     976:	28 f4       	brcc	.+10     	; 0x982 <rxDataProcess+0x18c>
     978:	f3 01       	movw	r30, r6
     97a:	ed 0d       	add	r30, r13
     97c:	f1 1d       	adc	r31, r1
     97e:	80 83       	st	Z, r24
     980:	d3 94       	inc	r13
     982:	20 91 42 04 	lds	r18, 0x0442
     986:	30 91 43 04 	lds	r19, 0x0443
     98a:	c8 01       	movw	r24, r16
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	82 17       	cp	r24, r18
     990:	93 07       	cpc	r25, r19
     992:	19 f4       	brne	.+6      	; 0x99a <rxDataProcess+0x1a4>
     994:	10 92 44 04 	sts	0x0444, r1
     998:	5c c0       	rjmp	.+184    	; 0xa52 <rxDataProcess+0x25c>
     99a:	b8 01       	movw	r22, r16
     99c:	6c 56       	subi	r22, 0x6C	; 108
     99e:	77 4f       	sbci	r23, 0xF7	; 247
     9a0:	40 91 42 04 	lds	r20, 0x0442
     9a4:	50 91 43 04 	lds	r21, 0x0443
     9a8:	40 1b       	sub	r20, r16
     9aa:	51 0b       	sbc	r21, r17
     9ac:	41 50       	subi	r20, 0x01	; 1
     9ae:	50 40       	sbci	r21, 0x00	; 0
     9b0:	ce 01       	movw	r24, r28
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <memcpy>
     9b8:	40 91 42 04 	lds	r20, 0x0442
     9bc:	50 91 43 04 	lds	r21, 0x0443
     9c0:	40 1b       	sub	r20, r16
     9c2:	51 0b       	sbc	r21, r17
     9c4:	41 50       	subi	r20, 0x01	; 1
     9c6:	50 40       	sbci	r21, 0x00	; 0
     9c8:	8e 2d       	mov	r24, r14
     9ca:	9f 2d       	mov	r25, r15
     9cc:	be 01       	movw	r22, r28
     9ce:	6f 5f       	subi	r22, 0xFF	; 255
     9d0:	7f 4f       	sbci	r23, 0xFF	; 255
     9d2:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <memcpy>
     9d6:	20 91 42 04 	lds	r18, 0x0442
     9da:	30 91 43 04 	lds	r19, 0x0443
     9de:	c8 01       	movw	r24, r16
     9e0:	80 95       	com	r24
     9e2:	90 95       	com	r25
     9e4:	82 0f       	add	r24, r18
     9e6:	93 1f       	adc	r25, r19
     9e8:	90 93 43 04 	sts	0x0443, r25
     9ec:	80 93 42 04 	sts	0x0442, r24
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	0f 3f       	cpi	r16, 0xFF	; 255
     9f4:	12 07       	cpc	r17, r18
     9f6:	09 f0       	breq	.+2      	; 0x9fa <rxDataProcess+0x204>
     9f8:	6f cf       	rjmp	.-290    	; 0x8d8 <rxDataProcess+0xe2>
     9fa:	11 c0       	rjmp	.+34     	; 0xa1e <rxDataProcess+0x228>
     9fc:	f7 01       	movw	r30, r14
     9fe:	e0 0f       	add	r30, r16
     a00:	f1 1f       	adc	r31, r17
     a02:	80 81       	ld	r24, Z
     a04:	8d 30       	cpi	r24, 0x0D	; 13
     a06:	09 f4       	brne	.+2      	; 0xa0a <rxDataProcess+0x214>
     a08:	b8 01       	movw	r22, r16
     a0a:	0f 5f       	subi	r16, 0xFF	; 255
     a0c:	1f 4f       	sbci	r17, 0xFF	; 255
     a0e:	80 91 42 04 	lds	r24, 0x0442
     a12:	90 91 43 04 	lds	r25, 0x0443
     a16:	08 17       	cp	r16, r24
     a18:	19 07       	cpc	r17, r25
     a1a:	0c f4       	brge	.+2      	; 0xa1e <rxDataProcess+0x228>
     a1c:	67 cf       	rjmp	.-306    	; 0x8ec <rxDataProcess+0xf6>
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	80 93 44 04 	sts	0x0444, r24
     a24:	60 91 42 04 	lds	r22, 0x0442
     a28:	70 91 43 04 	lds	r23, 0x0443
     a2c:	83 e9       	ldi	r24, 0x93	; 147
     a2e:	98 e0       	ldi	r25, 0x08	; 8
     a30:	0e 94 67 03 	call	0x6ce	; 0x6ce <parsingMsg>
     a34:	8a 30       	cpi	r24, 0x0A	; 10
     a36:	31 f0       	breq	.+12     	; 0xa44 <rxDataProcess+0x24e>
     a38:	84 30       	cpi	r24, 0x04	; 4
     a3a:	21 f0       	breq	.+8      	; 0xa44 <rxDataProcess+0x24e>
     a3c:	10 92 43 04 	sts	0x0443, r1
     a40:	10 92 42 04 	sts	0x0442, r1
     a44:	f3 01       	movw	r30, r6
     a46:	ed 0d       	add	r30, r13
     a48:	f1 1d       	adc	r31, r1
     a4a:	80 83       	st	Z, r24
     a4c:	d3 94       	inc	r13
     a4e:	01 c0       	rjmp	.+2      	; 0xa52 <rxDataProcess+0x25c>
     a50:	dd 24       	eor	r13, r13
     a52:	8d 2d       	mov	r24, r13
     a54:	ce 5f       	subi	r28, 0xFE	; 254
     a56:	dd 4f       	sbci	r29, 0xFD	; 253
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	bf 90       	pop	r11
     a74:	af 90       	pop	r10
     a76:	9f 90       	pop	r9
     a78:	8f 90       	pop	r8
     a7a:	7f 90       	pop	r7
     a7c:	6f 90       	pop	r6
     a7e:	5f 90       	pop	r5
     a80:	4f 90       	pop	r4
     a82:	3f 90       	pop	r3
     a84:	2f 90       	pop	r2
     a86:	08 95       	ret

00000a88 <wifiMain>:
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	00 d0       	rcall	.+0      	; 0xa8e <wifiMain+0x6>
     a8e:	0f 92       	push	r0
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	80 91 45 04 	lds	r24, 0x0445
     a98:	90 91 46 04 	lds	r25, 0x0446
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	99 f0       	breq	.+38     	; 0xac6 <wifiMain+0x3e>
     aa0:	e0 91 93 0a 	lds	r30, 0x0A93
     aa4:	f0 91 94 0a 	lds	r31, 0x0A94
     aa8:	30 97       	sbiw	r30, 0x00	; 0
     aaa:	49 f0       	breq	.+18     	; 0xabe <wifiMain+0x36>
     aac:	40 91 45 04 	lds	r20, 0x0445
     ab0:	50 91 46 04 	lds	r21, 0x0446
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	63 e9       	ldi	r22, 0x93	; 147
     aba:	74 e0       	ldi	r23, 0x04	; 4
     abc:	19 95       	eicall
     abe:	10 92 46 04 	sts	0x0446, r1
     ac2:	10 92 45 04 	sts	0x0445, r1
     ac6:	80 91 47 04 	lds	r24, 0x0447
     aca:	88 23       	and	r24, r24
     acc:	f1 f0       	breq	.+60     	; 0xb0a <wifiMain+0x82>
     ace:	ce 01       	movw	r24, r28
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	64 e0       	ldi	r22, 0x04	; 4
     ad4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <rxDataProcess>
     ad8:	80 91 45 04 	lds	r24, 0x0445
     adc:	90 91 46 04 	lds	r25, 0x0446
     ae0:	00 97       	sbiw	r24, 0x00	; 0
     ae2:	99 f0       	breq	.+38     	; 0xb0a <wifiMain+0x82>
     ae4:	e0 91 93 0a 	lds	r30, 0x0A93
     ae8:	f0 91 94 0a 	lds	r31, 0x0A94
     aec:	30 97       	sbiw	r30, 0x00	; 0
     aee:	49 f0       	breq	.+18     	; 0xb02 <wifiMain+0x7a>
     af0:	40 91 45 04 	lds	r20, 0x0445
     af4:	50 91 46 04 	lds	r21, 0x0446
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	63 e9       	ldi	r22, 0x93	; 147
     afe:	74 e0       	ldi	r23, 0x04	; 4
     b00:	19 95       	eicall
     b02:	10 92 46 04 	sts	0x0446, r1
     b06:	10 92 45 04 	sts	0x0445, r1
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <WaitOKWithPrint>:
     b18:	2f 92       	push	r2
     b1a:	3f 92       	push	r3
     b1c:	4f 92       	push	r4
     b1e:	5f 92       	push	r5
     b20:	6f 92       	push	r6
     b22:	7f 92       	push	r7
     b24:	8f 92       	push	r8
     b26:	9f 92       	push	r9
     b28:	af 92       	push	r10
     b2a:	bf 92       	push	r11
     b2c:	cf 92       	push	r12
     b2e:	df 92       	push	r13
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	c0 50       	subi	r28, 0x00	; 0
     b42:	d2 40       	sbci	r29, 0x02	; 2
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
     b4e:	ee 24       	eor	r14, r14
     b50:	ff 24       	eor	r15, r15
     b52:	0f 2e       	mov	r0, r31
     b54:	f3 e9       	ldi	r31, 0x93	; 147
     b56:	af 2e       	mov	r10, r31
     b58:	f6 e0       	ldi	r31, 0x06	; 6
     b5a:	bf 2e       	mov	r11, r31
     b5c:	f0 2d       	mov	r31, r0
     b5e:	0f 2e       	mov	r0, r31
     b60:	f1 e1       	ldi	r31, 0x11	; 17
     b62:	2f 2e       	mov	r2, r31
     b64:	f2 e0       	ldi	r31, 0x02	; 2
     b66:	3f 2e       	mov	r3, r31
     b68:	f0 2d       	mov	r31, r0
     b6a:	0f 2e       	mov	r0, r31
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	6f 2e       	mov	r6, r31
     b70:	f2 e0       	ldi	r31, 0x02	; 2
     b72:	7f 2e       	mov	r7, r31
     b74:	f0 2d       	mov	r31, r0
     b76:	0f 2e       	mov	r0, r31
     b78:	fb e0       	ldi	r31, 0x0B	; 11
     b7a:	4f 2e       	mov	r4, r31
     b7c:	f2 e0       	ldi	r31, 0x02	; 2
     b7e:	5f 2e       	mov	r5, r31
     b80:	f0 2d       	mov	r31, r0
     b82:	80 91 47 04 	lds	r24, 0x0447
     b86:	88 23       	and	r24, r24
     b88:	e1 f3       	breq	.-8      	; 0xb82 <WaitOKWithPrint+0x6a>
     b8a:	80 91 47 04 	lds	r24, 0x0447
     b8e:	88 23       	and	r24, r24
     b90:	09 f4       	brne	.+2      	; 0xb94 <WaitOKWithPrint+0x7c>
     b92:	a9 c0       	rjmp	.+338    	; 0xce6 <WaitOKWithPrint+0x1ce>
     b94:	cc 24       	eor	r12, r12
     b96:	dd 24       	eor	r13, r13
     b98:	88 24       	eor	r8, r8
     b9a:	99 24       	eor	r9, r9
     b9c:	85 01       	movw	r16, r10
     b9e:	0c 0d       	add	r16, r12
     ba0:	1d 1d       	adc	r17, r13
     ba2:	f8 01       	movw	r30, r16
     ba4:	80 81       	ld	r24, Z
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	ec 0f       	add	r30, r28
     bac:	fd 1f       	adc	r31, r29
     bae:	ee 0d       	add	r30, r14
     bb0:	ff 1d       	adc	r31, r15
     bb2:	80 83       	st	Z, r24
     bb4:	08 94       	sec
     bb6:	e1 1c       	adc	r14, r1
     bb8:	f1 1c       	adc	r15, r1
     bba:	f8 01       	movw	r30, r16
     bbc:	80 81       	ld	r24, Z
     bbe:	0e 94 78 01 	call	0x2f0	; 0x2f0 <putCh2>
     bc2:	f8 01       	movw	r30, r16
     bc4:	80 81       	ld	r24, Z
     bc6:	8a 30       	cpi	r24, 0x0A	; 10
     bc8:	09 f0       	breq	.+2      	; 0xbcc <WaitOKWithPrint+0xb4>
     bca:	83 c0       	rjmp	.+262    	; 0xcd2 <WaitOKWithPrint+0x1ba>
     bcc:	f4 e0       	ldi	r31, 0x04	; 4
     bce:	ef 16       	cp	r14, r31
     bd0:	f1 04       	cpc	r15, r1
     bd2:	0c f4       	brge	.+2      	; 0xbd6 <WaitOKWithPrint+0xbe>
     bd4:	79 c0       	rjmp	.+242    	; 0xcc8 <WaitOKWithPrint+0x1b0>
     bd6:	ce 01       	movw	r24, r28
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	b3 01       	movw	r22, r6
     bdc:	42 e0       	ldi	r20, 0x02	; 2
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <strncmp>
     be4:	28 2f       	mov	r18, r24
     be6:	39 2f       	mov	r19, r25
     be8:	21 15       	cp	r18, r1
     bea:	31 05       	cpc	r19, r1
     bec:	29 f4       	brne	.+10     	; 0xbf8 <WaitOKWithPrint+0xe0>
     bee:	10 92 47 04 	sts	0x0447, r1
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	7a c0       	rjmp	.+244    	; 0xcec <WaitOKWithPrint+0x1d4>
     bf8:	ce 01       	movw	r24, r28
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	b2 01       	movw	r22, r4
     bfe:	44 e0       	ldi	r20, 0x04	; 4
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <strncmp>
     c06:	28 2f       	mov	r18, r24
     c08:	39 2f       	mov	r19, r25
     c0a:	21 15       	cp	r18, r1
     c0c:	31 05       	cpc	r19, r1
     c0e:	29 f4       	brne	.+10     	; 0xc1a <WaitOKWithPrint+0x102>
     c10:	10 92 47 04 	sts	0x0447, r1
     c14:	8f ef       	ldi	r24, 0xFF	; 255
     c16:	9f ef       	ldi	r25, 0xFF	; 255
     c18:	69 c0       	rjmp	.+210    	; 0xcec <WaitOKWithPrint+0x1d4>
     c1a:	87 e0       	ldi	r24, 0x07	; 7
     c1c:	e8 16       	cp	r14, r24
     c1e:	f1 04       	cpc	r15, r1
     c20:	8c f0       	brlt	.+34     	; 0xc44 <WaitOKWithPrint+0x12c>
     c22:	ce 01       	movw	r24, r28
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	b1 01       	movw	r22, r2
     c28:	45 e0       	ldi	r20, 0x05	; 5
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <strncmp>
     c30:	28 2f       	mov	r18, r24
     c32:	39 2f       	mov	r19, r25
     c34:	21 15       	cp	r18, r1
     c36:	31 05       	cpc	r19, r1
     c38:	29 f4       	brne	.+10     	; 0xc44 <WaitOKWithPrint+0x12c>
     c3a:	10 92 47 04 	sts	0x0447, r1
     c3e:	8f ef       	ldi	r24, 0xFF	; 255
     c40:	9f ef       	ldi	r25, 0xFF	; 255
     c42:	54 c0       	rjmp	.+168    	; 0xcec <WaitOKWithPrint+0x1d4>
     c44:	e6 e0       	ldi	r30, 0x06	; 6
     c46:	ee 16       	cp	r14, r30
     c48:	f1 04       	cpc	r15, r1
     c4a:	94 f0       	brlt	.+36     	; 0xc70 <WaitOKWithPrint+0x158>
     c4c:	ce 01       	movw	r24, r28
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	67 e1       	ldi	r22, 0x17	; 23
     c52:	72 e0       	ldi	r23, 0x02	; 2
     c54:	45 e0       	ldi	r20, 0x05	; 5
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <strncmp>
     c5c:	28 2f       	mov	r18, r24
     c5e:	39 2f       	mov	r19, r25
     c60:	21 15       	cp	r18, r1
     c62:	31 05       	cpc	r19, r1
     c64:	29 f4       	brne	.+10     	; 0xc70 <WaitOKWithPrint+0x158>
     c66:	10 92 47 04 	sts	0x0447, r1
     c6a:	8f ef       	ldi	r24, 0xFF	; 255
     c6c:	9f ef       	ldi	r25, 0xFF	; 255
     c6e:	3e c0       	rjmp	.+124    	; 0xcec <WaitOKWithPrint+0x1d4>
     c70:	f7 e0       	ldi	r31, 0x07	; 7
     c72:	ef 16       	cp	r14, r31
     c74:	f1 04       	cpc	r15, r1
     c76:	94 f0       	brlt	.+36     	; 0xc9c <WaitOKWithPrint+0x184>
     c78:	ce 01       	movw	r24, r28
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	6c e2       	ldi	r22, 0x2C	; 44
     c7e:	72 e0       	ldi	r23, 0x02	; 2
     c80:	45 e0       	ldi	r20, 0x05	; 5
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <strncmp>
     c88:	28 2f       	mov	r18, r24
     c8a:	39 2f       	mov	r19, r25
     c8c:	21 15       	cp	r18, r1
     c8e:	31 05       	cpc	r19, r1
     c90:	29 f4       	brne	.+10     	; 0xc9c <WaitOKWithPrint+0x184>
     c92:	10 92 47 04 	sts	0x0447, r1
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	28 c0       	rjmp	.+80     	; 0xcec <WaitOKWithPrint+0x1d4>
     c9c:	89 e0       	ldi	r24, 0x09	; 9
     c9e:	e8 16       	cp	r14, r24
     ca0:	f1 04       	cpc	r15, r1
     ca2:	a4 f0       	brlt	.+40     	; 0xccc <WaitOKWithPrint+0x1b4>
     ca4:	ce 01       	movw	r24, r28
     ca6:	01 96       	adiw	r24, 0x01	; 1
     ca8:	63 e0       	ldi	r22, 0x03	; 3
     caa:	72 e0       	ldi	r23, 0x02	; 2
     cac:	47 e0       	ldi	r20, 0x07	; 7
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <strncmp>
     cb4:	28 2f       	mov	r18, r24
     cb6:	39 2f       	mov	r19, r25
     cb8:	21 15       	cp	r18, r1
     cba:	31 05       	cpc	r19, r1
     cbc:	49 f4       	brne	.+18     	; 0xcd0 <WaitOKWithPrint+0x1b8>
     cbe:	10 92 47 04 	sts	0x0447, r1
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	12 c0       	rjmp	.+36     	; 0xcec <WaitOKWithPrint+0x1d4>
     cc8:	74 01       	movw	r14, r8
     cca:	03 c0       	rjmp	.+6      	; 0xcd2 <WaitOKWithPrint+0x1ba>
     ccc:	74 01       	movw	r14, r8
     cce:	01 c0       	rjmp	.+2      	; 0xcd2 <WaitOKWithPrint+0x1ba>
     cd0:	74 01       	movw	r14, r8
     cd2:	08 94       	sec
     cd4:	c1 1c       	adc	r12, r1
     cd6:	d1 1c       	adc	r13, r1
     cd8:	80 91 47 04 	lds	r24, 0x0447
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	c8 16       	cp	r12, r24
     ce0:	d9 06       	cpc	r13, r25
     ce2:	0c f4       	brge	.+2      	; 0xce6 <WaitOKWithPrint+0x1ce>
     ce4:	5b cf       	rjmp	.-330    	; 0xb9c <WaitOKWithPrint+0x84>
     ce6:	10 92 47 04 	sts	0x0447, r1
     cea:	4b cf       	rjmp	.-362    	; 0xb82 <WaitOKWithPrint+0x6a>
     cec:	c0 50       	subi	r28, 0x00	; 0
     cee:	de 4f       	sbci	r29, 0xFE	; 254
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	df 90       	pop	r13
     d08:	cf 90       	pop	r12
     d0a:	bf 90       	pop	r11
     d0c:	af 90       	pop	r10
     d0e:	9f 90       	pop	r9
     d10:	8f 90       	pop	r8
     d12:	7f 90       	pop	r7
     d14:	6f 90       	pop	r6
     d16:	5f 90       	pop	r5
     d18:	4f 90       	pop	r4
     d1a:	3f 90       	pop	r3
     d1c:	2f 90       	pop	r2
     d1e:	08 95       	ret

00000d20 <WaitSendReadyWithoutPrint>:
     d20:	cf 92       	push	r12
     d22:	df 92       	push	r13
     d24:	ff 92       	push	r15
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <WaitSendReadyWithoutPrint+0x10>
     d30:	0f 92       	push	r0
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	0f 2e       	mov	r0, r31
     d38:	f5 e6       	ldi	r31, 0x65	; 101
     d3a:	cf 2e       	mov	r12, r31
     d3c:	dd 24       	eor	r13, r13
     d3e:	f0 2d       	mov	r31, r0
     d40:	00 e0       	ldi	r16, 0x00	; 0
     d42:	ff 24       	eor	r15, r15
     d44:	11 e0       	ldi	r17, 0x01	; 1
     d46:	ce 01       	movw	r24, r28
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	64 e0       	ldi	r22, 0x04	; 4
     d4c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <rxDataProcess>
     d50:	88 23       	and	r24, r24
     d52:	a1 f0       	breq	.+40     	; 0xd7c <WaitSendReadyWithoutPrint+0x5c>
     d54:	fe 01       	movw	r30, r28
     d56:	31 96       	adiw	r30, 0x01	; 1
     d58:	9f 01       	movw	r18, r30
     d5a:	28 0f       	add	r18, r24
     d5c:	31 1d       	adc	r19, r1
     d5e:	c9 01       	movw	r24, r18
     d60:	21 91       	ld	r18, Z+
     d62:	28 30       	cpi	r18, 0x08	; 8
     d64:	29 f0       	breq	.+10     	; 0xd70 <WaitSendReadyWithoutPrint+0x50>
     d66:	22 30       	cpi	r18, 0x02	; 2
     d68:	29 f0       	breq	.+10     	; 0xd74 <WaitSendReadyWithoutPrint+0x54>
     d6a:	25 30       	cpi	r18, 0x05	; 5
     d6c:	21 f4       	brne	.+8      	; 0xd76 <WaitSendReadyWithoutPrint+0x56>
     d6e:	26 c0       	rjmp	.+76     	; 0xdbc <WaitSendReadyWithoutPrint+0x9c>
     d70:	01 2f       	mov	r16, r17
     d72:	01 c0       	rjmp	.+2      	; 0xd76 <WaitSendReadyWithoutPrint+0x56>
     d74:	f1 2e       	mov	r15, r17
     d76:	e8 17       	cp	r30, r24
     d78:	f9 07       	cpc	r31, r25
     d7a:	91 f7       	brne	.-28     	; 0xd60 <WaitSendReadyWithoutPrint+0x40>
     d7c:	00 23       	and	r16, r16
     d7e:	11 f0       	breq	.+4      	; 0xd84 <WaitSendReadyWithoutPrint+0x64>
     d80:	ff 20       	and	r15, r15
     d82:	f9 f4       	brne	.+62     	; 0xdc2 <WaitSendReadyWithoutPrint+0xa2>
     d84:	08 94       	sec
     d86:	c1 08       	sbc	r12, r1
     d88:	d1 08       	sbc	r13, r1
     d8a:	c1 14       	cp	r12, r1
     d8c:	d1 04       	cpc	r13, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <WaitSendReadyWithoutPrint+0x8e>
     d90:	0f 92       	push	r0
     d92:	0f 92       	push	r0
     d94:	83 e3       	ldi	r24, 0x33	; 51
     d96:	92 e0       	ldi	r25, 0x02	; 2
     d98:	ed b7       	in	r30, 0x3d	; 61
     d9a:	fe b7       	in	r31, 0x3e	; 62
     d9c:	92 83       	std	Z+2, r25	; 0x02
     d9e:	81 83       	std	Z+1, r24	; 0x01
     da0:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	8f ef       	ldi	r24, 0xFF	; 255
     daa:	9f ef       	ldi	r25, 0xFF	; 255
     dac:	0c c0       	rjmp	.+24     	; 0xdc6 <WaitSendReadyWithoutPrint+0xa6>
     dae:	8f ef       	ldi	r24, 0xFF	; 255
     db0:	9f e8       	ldi	r25, 0x8F	; 143
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <WaitSendReadyWithoutPrint+0x92>
     db6:	00 c0       	rjmp	.+0      	; 0xdb8 <WaitSendReadyWithoutPrint+0x98>
     db8:	00 00       	nop
     dba:	c5 cf       	rjmp	.-118    	; 0xd46 <WaitSendReadyWithoutPrint+0x26>
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	9f ef       	ldi	r25, 0xFF	; 255
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <WaitSendReadyWithoutPrint+0xa6>
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	08 95       	ret

00000dde <WaitSendOKWithoutPrint>:
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	00 d0       	rcall	.+0      	; 0xde8 <WaitSendOKWithoutPrint+0xa>
     de8:	0f 92       	push	r0
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	05 e6       	ldi	r16, 0x65	; 101
     df0:	10 e0       	ldi	r17, 0x00	; 0
     df2:	ce 01       	movw	r24, r28
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	64 e0       	ldi	r22, 0x04	; 4
     df8:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <rxDataProcess>
     dfc:	88 23       	and	r24, r24
     dfe:	b9 f0       	breq	.+46     	; 0xe2e <WaitSendOKWithoutPrint+0x50>
     e00:	99 81       	ldd	r25, Y+1	; 0x01
     e02:	91 30       	cpi	r25, 0x01	; 1
     e04:	69 f1       	breq	.+90     	; 0xe60 <WaitSendOKWithoutPrint+0x82>
     e06:	95 30       	cpi	r25, 0x05	; 5
     e08:	71 f1       	breq	.+92     	; 0xe66 <WaitSendOKWithoutPrint+0x88>
     e0a:	fe 01       	movw	r30, r28
     e0c:	32 96       	adiw	r30, 0x02	; 2
     e0e:	21 e0       	ldi	r18, 0x01	; 1
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	2c 0f       	add	r18, r28
     e14:	3d 1f       	adc	r19, r29
     e16:	28 0f       	add	r18, r24
     e18:	31 1d       	adc	r19, r1
     e1a:	c9 01       	movw	r24, r18
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <WaitSendOKWithoutPrint+0x4a>
     e1e:	21 91       	ld	r18, Z+
     e20:	21 30       	cpi	r18, 0x01	; 1
     e22:	21 f1       	breq	.+72     	; 0xe6c <WaitSendOKWithoutPrint+0x8e>
     e24:	25 30       	cpi	r18, 0x05	; 5
     e26:	29 f1       	breq	.+74     	; 0xe72 <WaitSendOKWithoutPrint+0x94>
     e28:	e8 17       	cp	r30, r24
     e2a:	f9 07       	cpc	r31, r25
     e2c:	c1 f7       	brne	.-16     	; 0xe1e <WaitSendOKWithoutPrint+0x40>
     e2e:	01 50       	subi	r16, 0x01	; 1
     e30:	10 40       	sbci	r17, 0x00	; 0
     e32:	79 f4       	brne	.+30     	; 0xe52 <WaitSendOKWithoutPrint+0x74>
     e34:	0f 92       	push	r0
     e36:	0f 92       	push	r0
     e38:	8b e5       	ldi	r24, 0x5B	; 91
     e3a:	92 e0       	ldi	r25, 0x02	; 2
     e3c:	ed b7       	in	r30, 0x3d	; 61
     e3e:	fe b7       	in	r31, 0x3e	; 62
     e40:	92 83       	std	Z+2, r25	; 0x02
     e42:	81 83       	std	Z+1, r24	; 0x01
     e44:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	8f ef       	ldi	r24, 0xFF	; 255
     e4e:	9f ef       	ldi	r25, 0xFF	; 255
     e50:	12 c0       	rjmp	.+36     	; 0xe76 <WaitSendOKWithoutPrint+0x98>
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	9f e8       	ldi	r25, 0x8F	; 143
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <WaitSendOKWithoutPrint+0x78>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <WaitSendOKWithoutPrint+0x7e>
     e5c:	00 00       	nop
     e5e:	c9 cf       	rjmp	.-110    	; 0xdf2 <WaitSendOKWithoutPrint+0x14>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	08 c0       	rjmp	.+16     	; 0xe76 <WaitSendOKWithoutPrint+0x98>
     e66:	8f ef       	ldi	r24, 0xFF	; 255
     e68:	9f ef       	ldi	r25, 0xFF	; 255
     e6a:	05 c0       	rjmp	.+10     	; 0xe76 <WaitSendOKWithoutPrint+0x98>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <WaitSendOKWithoutPrint+0x98>
     e72:	8f ef       	ldi	r24, 0xFF	; 255
     e74:	9f ef       	ldi	r25, 0xFF	; 255
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	08 95       	ret

00000e88 <WaitOk>:
     e88:	cf 92       	push	r12
     e8a:	df 92       	push	r13
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	c0 50       	subi	r28, 0x00	; 0
     e9e:	d1 40       	sbci	r29, 0x01	; 1
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	dd 24       	eor	r13, r13
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	be 01       	movw	r22, r28
     eb2:	6f 5f       	subi	r22, 0xFF	; 255
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
     eb6:	ee 24       	eor	r14, r14
     eb8:	ff 24       	eor	r15, r15
     eba:	03 e9       	ldi	r16, 0x93	; 147
     ebc:	16 e0       	ldi	r17, 0x06	; 6
     ebe:	cc 24       	eor	r12, r12
     ec0:	c3 94       	inc	r12
     ec2:	80 91 47 04 	lds	r24, 0x0447
     ec6:	88 23       	and	r24, r24
     ec8:	e1 f3       	breq	.-8      	; 0xec2 <WaitOk+0x3a>
     eca:	80 91 47 04 	lds	r24, 0x0447
     ece:	88 23       	and	r24, r24
     ed0:	c1 f3       	breq	.-16     	; 0xec2 <WaitOk+0x3a>
     ed2:	db 01       	movw	r26, r22
     ed4:	a4 0f       	add	r26, r20
     ed6:	b5 1f       	adc	r27, r21
     ed8:	97 01       	movw	r18, r14
     eda:	f8 01       	movw	r30, r16
     edc:	e2 0f       	add	r30, r18
     ede:	f3 1f       	adc	r31, r19
     ee0:	80 81       	ld	r24, Z
     ee2:	8d 93       	st	X+, r24
     ee4:	80 81       	ld	r24, Z
     ee6:	8a 30       	cpi	r24, 0x0A	; 10
     ee8:	39 f5       	brne	.+78     	; 0xf38 <WaitOk+0xb0>
     eea:	dd 20       	and	r13, r13
     eec:	21 f1       	breq	.+72     	; 0xf36 <WaitOk+0xae>
     eee:	ce 01       	movw	r24, r28
     ef0:	03 96       	adiw	r24, 0x03	; 3
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	72 e0       	ldi	r23, 0x02	; 2
     ef6:	42 e0       	ldi	r20, 0x02	; 2
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <strncmp>
     efe:	28 2f       	mov	r18, r24
     f00:	39 2f       	mov	r19, r25
     f02:	21 15       	cp	r18, r1
     f04:	31 05       	cpc	r19, r1
     f06:	29 f4       	brne	.+10     	; 0xf12 <WaitOk+0x8a>
     f08:	10 92 47 04 	sts	0x0447, r1
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	22 c0       	rjmp	.+68     	; 0xf56 <WaitOk+0xce>
     f12:	ce 01       	movw	r24, r28
     f14:	03 96       	adiw	r24, 0x03	; 3
     f16:	61 e1       	ldi	r22, 0x11	; 17
     f18:	72 e0       	ldi	r23, 0x02	; 2
     f1a:	45 e0       	ldi	r20, 0x05	; 5
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <strncmp>
     f22:	28 2f       	mov	r18, r24
     f24:	39 2f       	mov	r19, r25
     f26:	21 15       	cp	r18, r1
     f28:	31 05       	cpc	r19, r1
     f2a:	99 f4       	brne	.+38     	; 0xf52 <WaitOk+0xca>
     f2c:	10 92 47 04 	sts	0x0447, r1
     f30:	8f ef       	ldi	r24, 0xFF	; 255
     f32:	9f ef       	ldi	r25, 0xFF	; 255
     f34:	10 c0       	rjmp	.+32     	; 0xf56 <WaitOk+0xce>
     f36:	dc 2c       	mov	r13, r12
     f38:	ad 01       	movw	r20, r26
     f3a:	46 1b       	sub	r20, r22
     f3c:	57 0b       	sbc	r21, r23
     f3e:	2f 5f       	subi	r18, 0xFF	; 255
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	80 91 47 04 	lds	r24, 0x0447
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	28 17       	cp	r18, r24
     f4a:	39 07       	cpc	r19, r25
     f4c:	0c f0       	brlt	.+2      	; 0xf50 <WaitOk+0xc8>
     f4e:	b9 cf       	rjmp	.-142    	; 0xec2 <WaitOk+0x3a>
     f50:	c4 cf       	rjmp	.-120    	; 0xeda <WaitOk+0x52>
     f52:	8f ef       	ldi	r24, 0xFF	; 255
     f54:	9f ef       	ldi	r25, 0xFF	; 255
     f56:	c0 50       	subi	r28, 0x00	; 0
     f58:	df 4f       	sbci	r29, 0xFF	; 255
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	ff 90       	pop	r15
     f6e:	ef 90       	pop	r14
     f70:	df 90       	pop	r13
     f72:	cf 90       	pop	r12
     f74:	08 95       	ret

00000f76 <wifiDisplayAPlist>:
     f76:	0f 92       	push	r0
     f78:	0f 92       	push	r0
     f7a:	8c e7       	ldi	r24, 0x7C	; 124
     f7c:	92 e0       	ldi	r25, 0x02	; 2
     f7e:	ad b7       	in	r26, 0x3d	; 61
     f80:	be b7       	in	r27, 0x3e	; 62
     f82:	12 96       	adiw	r26, 0x02	; 2
     f84:	9c 93       	st	X, r25
     f86:	8e 93       	st	-X, r24
     f88:	11 97       	sbiw	r26, 0x01	; 1
     f8a:	0e 94 8a 02 	call	0x514	; 0x514 <wifiprint>
     f8e:	8f ef       	ldi	r24, 0xFF	; 255
     f90:	9f ef       	ldi	r25, 0xFF	; 255
     f92:	a9 e5       	ldi	r26, 0x59	; 89
     f94:	81 50       	subi	r24, 0x01	; 1
     f96:	90 40       	sbci	r25, 0x00	; 0
     f98:	a0 40       	sbci	r26, 0x00	; 0
     f9a:	e1 f7       	brne	.-8      	; 0xf94 <wifiDisplayAPlist+0x1e>
     f9c:	00 c0       	rjmp	.+0      	; 0xf9e <wifiDisplayAPlist+0x28>
     f9e:	00 00       	nop
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0e 94 8c 05 	call	0xb18	; 0xb18 <WaitOKWithPrint>
     fa8:	08 95       	ret

00000faa <wifiConnectAP>:
     faa:	00 d0       	rcall	.+0      	; 0xfac <wifiConnectAP+0x2>
     fac:	00 d0       	rcall	.+0      	; 0xfae <wifiConnectAP+0x4>
     fae:	ed b7       	in	r30, 0x3d	; 61
     fb0:	fe b7       	in	r31, 0x3e	; 62
     fb2:	31 96       	adiw	r30, 0x01	; 1
     fb4:	27 e8       	ldi	r18, 0x87	; 135
     fb6:	32 e0       	ldi	r19, 0x02	; 2
     fb8:	ad b7       	in	r26, 0x3d	; 61
     fba:	be b7       	in	r27, 0x3e	; 62
     fbc:	12 96       	adiw	r26, 0x02	; 2
     fbe:	3c 93       	st	X, r19
     fc0:	2e 93       	st	-X, r18
     fc2:	11 97       	sbiw	r26, 0x01	; 1
     fc4:	93 83       	std	Z+3, r25	; 0x03
     fc6:	82 83       	std	Z+2, r24	; 0x02
     fc8:	75 83       	std	Z+5, r23	; 0x05
     fca:	64 83       	std	Z+4, r22	; 0x04
     fcc:	0e 94 8a 02 	call	0x514	; 0x514 <wifiprint>
     fd0:	8d b7       	in	r24, 0x3d	; 61
     fd2:	9e b7       	in	r25, 0x3e	; 62
     fd4:	06 96       	adiw	r24, 0x06	; 6
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	9e bf       	out	0x3e, r25	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	8d bf       	out	0x3d, r24	; 61
     fe0:	0e 94 8c 05 	call	0xb18	; 0xb18 <WaitOKWithPrint>
     fe4:	08 95       	ret

00000fe6 <wifiModeSet>:
     fe6:	0f 92       	push	r0
     fe8:	0f 92       	push	r0
     fea:	80 ea       	ldi	r24, 0xA0	; 160
     fec:	92 e0       	ldi	r25, 0x02	; 2
     fee:	ed b7       	in	r30, 0x3d	; 61
     ff0:	fe b7       	in	r31, 0x3e	; 62
     ff2:	92 83       	std	Z+2, r25	; 0x02
     ff4:	81 83       	std	Z+1, r24	; 0x01
     ff6:	0e 94 8a 02 	call	0x514	; 0x514 <wifiprint>
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0e 94 8c 05 	call	0xb18	; 0xb18 <WaitOKWithPrint>
    1002:	08 95       	ret

00001004 <wifiDisplayLocalIP>:
    1004:	0f 92       	push	r0
    1006:	0f 92       	push	r0
    1008:	8e ea       	ldi	r24, 0xAE	; 174
    100a:	92 e0       	ldi	r25, 0x02	; 2
    100c:	ed b7       	in	r30, 0x3d	; 61
    100e:	fe b7       	in	r31, 0x3e	; 62
    1010:	92 83       	std	Z+2, r25	; 0x02
    1012:	81 83       	std	Z+1, r24	; 0x01
    1014:	0e 94 8a 02 	call	0x514	; 0x514 <wifiprint>
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0e 94 8c 05 	call	0xb18	; 0xb18 <WaitOKWithPrint>
    1020:	08 95       	ret

00001022 <wifiEnableDHCP>:
    1022:	0f 92       	push	r0
    1024:	0f 92       	push	r0
    1026:	8f eb       	ldi	r24, 0xBF	; 191
    1028:	92 e0       	ldi	r25, 0x02	; 2
    102a:	ed b7       	in	r30, 0x3d	; 61
    102c:	fe b7       	in	r31, 0x3e	; 62
    102e:	92 83       	std	Z+2, r25	; 0x02
    1030:	81 83       	std	Z+1, r24	; 0x01
    1032:	0e 94 8a 02 	call	0x514	; 0x514 <wifiprint>
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0e 94 8c 05 	call	0xb18	; 0xb18 <WaitOKWithPrint>
    103e:	08 95       	ret

00001040 <wifiConnectTCPServer>:
    1040:	2d b7       	in	r18, 0x3d	; 61
    1042:	3e b7       	in	r19, 0x3e	; 62
    1044:	28 50       	subi	r18, 0x08	; 8
    1046:	30 40       	sbci	r19, 0x00	; 0
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	3e bf       	out	0x3e, r19	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	2d bf       	out	0x3d, r18	; 61
    1052:	ed b7       	in	r30, 0x3d	; 61
    1054:	fe b7       	in	r31, 0x3e	; 62
    1056:	31 96       	adiw	r30, 0x01	; 1
    1058:	23 ed       	ldi	r18, 0xD3	; 211
    105a:	32 e0       	ldi	r19, 0x02	; 2
    105c:	ad b7       	in	r26, 0x3d	; 61
    105e:	be b7       	in	r27, 0x3e	; 62
    1060:	12 96       	adiw	r26, 0x02	; 2
    1062:	3c 93       	st	X, r19
    1064:	2e 93       	st	-X, r18
    1066:	11 97       	sbiw	r26, 0x01	; 1
    1068:	93 83       	std	Z+3, r25	; 0x03
    106a:	82 83       	std	Z+2, r24	; 0x02
    106c:	44 83       	std	Z+4, r20	; 0x04
    106e:	55 83       	std	Z+5, r21	; 0x05
    1070:	66 83       	std	Z+6, r22	; 0x06
    1072:	77 83       	std	Z+7, r23	; 0x07
    1074:	0e 94 8a 02 	call	0x514	; 0x514 <wifiprint>
    1078:	2d b7       	in	r18, 0x3d	; 61
    107a:	3e b7       	in	r19, 0x3e	; 62
    107c:	28 5f       	subi	r18, 0xF8	; 248
    107e:	3f 4f       	sbci	r19, 0xFF	; 255
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	3e bf       	out	0x3e, r19	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	2d bf       	out	0x3d, r18	; 61
    108a:	0e 94 8c 05 	call	0xb18	; 0xb18 <WaitOKWithPrint>
    108e:	08 95       	ret

00001090 <wifiSetEventCallback>:
    1090:	90 93 94 0a 	sts	0x0A94, r25
    1094:	80 93 93 0a 	sts	0x0A93, r24
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	08 95       	ret

0000109c <wifiSendData>:
    109c:	ef 92       	push	r14
    109e:	ff 92       	push	r15
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	08 2f       	mov	r16, r24
    10aa:	19 2f       	mov	r17, r25
    10ac:	eb 01       	movw	r28, r22
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <wifiSendData+0x14>
    10b0:	0f 92       	push	r0
    10b2:	8f ee       	ldi	r24, 0xEF	; 239
    10b4:	92 e0       	ldi	r25, 0x02	; 2
    10b6:	ad b7       	in	r26, 0x3d	; 61
    10b8:	be b7       	in	r27, 0x3e	; 62
    10ba:	12 96       	adiw	r26, 0x02	; 2
    10bc:	9c 93       	st	X, r25
    10be:	8e 93       	st	-X, r24
    10c0:	11 97       	sbiw	r26, 0x01	; 1
    10c2:	14 96       	adiw	r26, 0x04	; 4
    10c4:	7c 93       	st	X, r23
    10c6:	6e 93       	st	-X, r22
    10c8:	13 97       	sbiw	r26, 0x03	; 3
    10ca:	0e 94 8a 02 	call	0x514	; 0x514 <wifiprint>
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0e 94 90 06 	call	0xd20	; 0xd20 <WaitSendReadyWithoutPrint>
    10da:	99 23       	and	r25, r25
    10dc:	2c f0       	brlt	.+10     	; 0x10e8 <wifiSendData+0x4c>
    10de:	1c 16       	cp	r1, r28
    10e0:	1d 06       	cpc	r1, r29
    10e2:	0c f4       	brge	.+2      	; 0x10e6 <wifiSendData+0x4a>
    10e4:	4a c0       	rjmp	.+148    	; 0x117a <wifiSendData+0xde>
    10e6:	57 c0       	rjmp	.+174    	; 0x1196 <wifiSendData+0xfa>
    10e8:	0f 92       	push	r0
    10ea:	0f 92       	push	r0
    10ec:	8f ef       	ldi	r24, 0xFF	; 255
    10ee:	92 e0       	ldi	r25, 0x02	; 2
    10f0:	ed b7       	in	r30, 0x3d	; 61
    10f2:	fe b7       	in	r31, 0x3e	; 62
    10f4:	92 83       	std	Z+2, r25	; 0x02
    10f6:	81 83       	std	Z+1, r24	; 0x01
    10f8:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
    10fc:	88 e1       	ldi	r24, 0x18	; 24
    10fe:	93 e0       	ldi	r25, 0x03	; 3
    1100:	ad b7       	in	r26, 0x3d	; 61
    1102:	be b7       	in	r27, 0x3e	; 62
    1104:	12 96       	adiw	r26, 0x02	; 2
    1106:	9c 93       	st	X, r25
    1108:	8e 93       	st	-X, r24
    110a:	11 97       	sbiw	r26, 0x01	; 1
    110c:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
    1110:	80 91 42 04 	lds	r24, 0x0442
    1114:	90 91 43 04 	lds	r25, 0x0443
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	18 16       	cp	r1, r24
    111e:	19 06       	cpc	r1, r25
    1120:	ec f5       	brge	.+122    	; 0x119c <wifiSendData+0x100>
    1122:	c0 e0       	ldi	r28, 0x00	; 0
    1124:	d0 e0       	ldi	r29, 0x00	; 0
    1126:	03 e9       	ldi	r16, 0x93	; 147
    1128:	18 e0       	ldi	r17, 0x08	; 8
    112a:	0f 2e       	mov	r0, r31
    112c:	fb e1       	ldi	r31, 0x1B	; 27
    112e:	ef 2e       	mov	r14, r31
    1130:	f3 e0       	ldi	r31, 0x03	; 3
    1132:	ff 2e       	mov	r15, r31
    1134:	f0 2d       	mov	r31, r0
    1136:	f8 01       	movw	r30, r16
    1138:	ec 0f       	add	r30, r28
    113a:	fd 1f       	adc	r31, r29
    113c:	80 81       	ld	r24, Z
    113e:	00 d0       	rcall	.+0      	; 0x1140 <wifiSendData+0xa4>
    1140:	0f 92       	push	r0
    1142:	ed b7       	in	r30, 0x3d	; 61
    1144:	fe b7       	in	r31, 0x3e	; 62
    1146:	31 96       	adiw	r30, 0x01	; 1
    1148:	ad b7       	in	r26, 0x3d	; 61
    114a:	be b7       	in	r27, 0x3e	; 62
    114c:	12 96       	adiw	r26, 0x02	; 2
    114e:	fc 92       	st	X, r15
    1150:	ee 92       	st	-X, r14
    1152:	11 97       	sbiw	r26, 0x01	; 1
    1154:	82 83       	std	Z+2, r24	; 0x02
    1156:	13 82       	std	Z+3, r1	; 0x03
    1158:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
    115c:	21 96       	adiw	r28, 0x01	; 1
    115e:	80 91 42 04 	lds	r24, 0x0442
    1162:	90 91 43 04 	lds	r25, 0x0443
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	c8 17       	cp	r28, r24
    1170:	d9 07       	cpc	r29, r25
    1172:	0c f3       	brlt	.-62     	; 0x1136 <wifiSendData+0x9a>
    1174:	8f ef       	ldi	r24, 0xFF	; 255
    1176:	9f ef       	ldi	r25, 0xFF	; 255
    1178:	13 c0       	rjmp	.+38     	; 0x11a0 <wifiSendData+0x104>
    117a:	e0 2e       	mov	r14, r16
    117c:	f1 2e       	mov	r15, r17
    117e:	00 e0       	ldi	r16, 0x00	; 0
    1180:	10 e0       	ldi	r17, 0x00	; 0
    1182:	f7 01       	movw	r30, r14
    1184:	81 91       	ld	r24, Z+
    1186:	7f 01       	movw	r14, r30
    1188:	0e 94 06 02 	call	0x40c	; 0x40c <putCh0>
    118c:	0f 5f       	subi	r16, 0xFF	; 255
    118e:	1f 4f       	sbci	r17, 0xFF	; 255
    1190:	0c 17       	cp	r16, r28
    1192:	1d 07       	cpc	r17, r29
    1194:	b1 f7       	brne	.-20     	; 0x1182 <wifiSendData+0xe6>
    1196:	0e 94 ef 06 	call	0xdde	; 0xdde <WaitSendOKWithoutPrint>
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <wifiSendData+0x104>
    119c:	8f ef       	ldi	r24, 0xFF	; 255
    119e:	9f ef       	ldi	r25, 0xFF	; 255
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	08 95       	ret

000011ae <wificlearUartBuff>:
    11ae:	10 92 47 04 	sts	0x0447, r1
    11b2:	10 92 43 04 	sts	0x0443, r1
    11b6:	10 92 42 04 	sts	0x0442, r1
    11ba:	08 95       	ret

000011bc <wifiAutoConnectDisable>:
    11bc:	0f 92       	push	r0
    11be:	0f 92       	push	r0
    11c0:	82 e2       	ldi	r24, 0x22	; 34
    11c2:	93 e0       	ldi	r25, 0x03	; 3
    11c4:	ad b7       	in	r26, 0x3d	; 61
    11c6:	be b7       	in	r27, 0x3e	; 62
    11c8:	12 96       	adiw	r26, 0x02	; 2
    11ca:	9c 93       	st	X, r25
    11cc:	8e 93       	st	-X, r24
    11ce:	11 97       	sbiw	r26, 0x01	; 1
    11d0:	0e 94 8a 02 	call	0x514	; 0x514 <wifiprint>
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	9f e3       	ldi	r25, 0x3F	; 63
    11d8:	a2 e0       	ldi	r26, 0x02	; 2
    11da:	81 50       	subi	r24, 0x01	; 1
    11dc:	90 40       	sbci	r25, 0x00	; 0
    11de:	a0 40       	sbci	r26, 0x00	; 0
    11e0:	e1 f7       	brne	.-8      	; 0x11da <wifiAutoConnectDisable+0x1e>
    11e2:	00 c0       	rjmp	.+0      	; 0x11e4 <wifiAutoConnectDisable+0x28>
    11e4:	00 00       	nop
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0e 94 44 07 	call	0xe88	; 0xe88 <WaitOk>
    11ee:	08 95       	ret

000011f0 <wifiEchoDisable>:
    11f0:	0f 92       	push	r0
    11f2:	0f 92       	push	r0
    11f4:	84 e3       	ldi	r24, 0x34	; 52
    11f6:	93 e0       	ldi	r25, 0x03	; 3
    11f8:	ad b7       	in	r26, 0x3d	; 61
    11fa:	be b7       	in	r27, 0x3e	; 62
    11fc:	12 96       	adiw	r26, 0x02	; 2
    11fe:	9c 93       	st	X, r25
    1200:	8e 93       	st	-X, r24
    1202:	11 97       	sbiw	r26, 0x01	; 1
    1204:	0e 94 8a 02 	call	0x514	; 0x514 <wifiprint>
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	9f e7       	ldi	r25, 0x7F	; 127
    120c:	a4 e0       	ldi	r26, 0x04	; 4
    120e:	81 50       	subi	r24, 0x01	; 1
    1210:	90 40       	sbci	r25, 0x00	; 0
    1212:	a0 40       	sbci	r26, 0x00	; 0
    1214:	e1 f7       	brne	.-8      	; 0x120e <wifiEchoDisable+0x1e>
    1216:	00 c0       	rjmp	.+0      	; 0x1218 <wifiEchoDisable+0x28>
    1218:	00 00       	nop
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <wificlearUartBuff>
    1222:	08 95       	ret

00001224 <pinMode>:
//	G (PORTG), H (PORTH), J (PORTJ), K (PORTK), L (PORTL),
// pin  = 0~7
// mode = 0(Input), 1(OutPut)
void pinMode(uint8_t port,uint8_t pin,uint8_t mode)
{
	if(port == A) {
    1224:	88 23       	and	r24, r24
    1226:	e9 f4       	brne	.+58     	; 0x1262 <pinMode+0x3e>
		if(mode) {
    1228:	44 23       	and	r20, r20
    122a:	69 f0       	breq	.+26     	; 0x1246 <pinMode+0x22>
			sbit(DDRA,pin);	
    122c:	21 b1       	in	r18, 0x01	; 1
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	ac 01       	movw	r20, r24
    1234:	02 c0       	rjmp	.+4      	; 0x123a <pinMode+0x16>
    1236:	44 0f       	add	r20, r20
    1238:	55 1f       	adc	r21, r21
    123a:	6a 95       	dec	r22
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <pinMode+0x12>
    123e:	ba 01       	movw	r22, r20
    1240:	62 2b       	or	r22, r18
    1242:	61 b9       	out	0x01, r22	; 1
    1244:	08 95       	ret
		}
		else {
			cbit(DDRA,pin);
    1246:	21 b1       	in	r18, 0x01	; 1
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	ac 01       	movw	r20, r24
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <pinMode+0x30>
    1250:	44 0f       	add	r20, r20
    1252:	55 1f       	adc	r21, r21
    1254:	6a 95       	dec	r22
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <pinMode+0x2c>
    1258:	ba 01       	movw	r22, r20
    125a:	60 95       	com	r22
    125c:	62 23       	and	r22, r18
    125e:	61 b9       	out	0x01, r22	; 1
    1260:	08 95       	ret
		}	
	}
	else if(port == B) {
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	e9 f4       	brne	.+58     	; 0x12a0 <pinMode+0x7c>
		if(mode) {
    1266:	44 23       	and	r20, r20
    1268:	69 f0       	breq	.+26     	; 0x1284 <pinMode+0x60>
			sbit(DDRB,pin);	
    126a:	24 b1       	in	r18, 0x04	; 4
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	ac 01       	movw	r20, r24
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <pinMode+0x54>
    1274:	44 0f       	add	r20, r20
    1276:	55 1f       	adc	r21, r21
    1278:	6a 95       	dec	r22
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <pinMode+0x50>
    127c:	ba 01       	movw	r22, r20
    127e:	62 2b       	or	r22, r18
    1280:	64 b9       	out	0x04, r22	; 4
    1282:	08 95       	ret
		}
		else {
			cbit(DDRB,pin);
    1284:	24 b1       	in	r18, 0x04	; 4
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	ac 01       	movw	r20, r24
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <pinMode+0x6e>
    128e:	44 0f       	add	r20, r20
    1290:	55 1f       	adc	r21, r21
    1292:	6a 95       	dec	r22
    1294:	e2 f7       	brpl	.-8      	; 0x128e <pinMode+0x6a>
    1296:	ba 01       	movw	r22, r20
    1298:	60 95       	com	r22
    129a:	62 23       	and	r22, r18
    129c:	64 b9       	out	0x04, r22	; 4
    129e:	08 95       	ret
		}	
	}
	else if(port == C) {
    12a0:	82 30       	cpi	r24, 0x02	; 2
    12a2:	e9 f4       	brne	.+58     	; 0x12de <pinMode+0xba>
		if(mode) {
    12a4:	44 23       	and	r20, r20
    12a6:	69 f0       	breq	.+26     	; 0x12c2 <pinMode+0x9e>
			sbit(DDRC,pin);	
    12a8:	27 b1       	in	r18, 0x07	; 7
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	ac 01       	movw	r20, r24
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <pinMode+0x92>
    12b2:	44 0f       	add	r20, r20
    12b4:	55 1f       	adc	r21, r21
    12b6:	6a 95       	dec	r22
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <pinMode+0x8e>
    12ba:	ba 01       	movw	r22, r20
    12bc:	62 2b       	or	r22, r18
    12be:	67 b9       	out	0x07, r22	; 7
    12c0:	08 95       	ret
		}
		else {
			cbit(DDRC,pin);
    12c2:	27 b1       	in	r18, 0x07	; 7
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	ac 01       	movw	r20, r24
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <pinMode+0xac>
    12cc:	44 0f       	add	r20, r20
    12ce:	55 1f       	adc	r21, r21
    12d0:	6a 95       	dec	r22
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <pinMode+0xa8>
    12d4:	ba 01       	movw	r22, r20
    12d6:	60 95       	com	r22
    12d8:	62 23       	and	r22, r18
    12da:	67 b9       	out	0x07, r22	; 7
    12dc:	08 95       	ret
		}
	}	
	else if(port == D) {
    12de:	83 30       	cpi	r24, 0x03	; 3
    12e0:	e9 f4       	brne	.+58     	; 0x131c <pinMode+0xf8>
		if(mode) {
    12e2:	44 23       	and	r20, r20
    12e4:	69 f0       	breq	.+26     	; 0x1300 <pinMode+0xdc>
			sbit(DDRD,pin);	
    12e6:	2a b1       	in	r18, 0x0a	; 10
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	ac 01       	movw	r20, r24
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <pinMode+0xd0>
    12f0:	44 0f       	add	r20, r20
    12f2:	55 1f       	adc	r21, r21
    12f4:	6a 95       	dec	r22
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <pinMode+0xcc>
    12f8:	ba 01       	movw	r22, r20
    12fa:	62 2b       	or	r22, r18
    12fc:	6a b9       	out	0x0a, r22	; 10
    12fe:	08 95       	ret
		}
		else {
			cbit(DDRD,pin);
    1300:	2a b1       	in	r18, 0x0a	; 10
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	ac 01       	movw	r20, r24
    1308:	02 c0       	rjmp	.+4      	; 0x130e <pinMode+0xea>
    130a:	44 0f       	add	r20, r20
    130c:	55 1f       	adc	r21, r21
    130e:	6a 95       	dec	r22
    1310:	e2 f7       	brpl	.-8      	; 0x130a <pinMode+0xe6>
    1312:	ba 01       	movw	r22, r20
    1314:	60 95       	com	r22
    1316:	62 23       	and	r22, r18
    1318:	6a b9       	out	0x0a, r22	; 10
    131a:	08 95       	ret
		}
	}
	else if(port == E) {
    131c:	84 30       	cpi	r24, 0x04	; 4
    131e:	e9 f4       	brne	.+58     	; 0x135a <pinMode+0x136>
		if(mode) {
    1320:	44 23       	and	r20, r20
    1322:	69 f0       	breq	.+26     	; 0x133e <pinMode+0x11a>
			sbit(DDRE,pin);	
    1324:	2d b1       	in	r18, 0x0d	; 13
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	ac 01       	movw	r20, r24
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <pinMode+0x10e>
    132e:	44 0f       	add	r20, r20
    1330:	55 1f       	adc	r21, r21
    1332:	6a 95       	dec	r22
    1334:	e2 f7       	brpl	.-8      	; 0x132e <pinMode+0x10a>
    1336:	ba 01       	movw	r22, r20
    1338:	62 2b       	or	r22, r18
    133a:	6d b9       	out	0x0d, r22	; 13
    133c:	08 95       	ret
		}
		else {
			cbit(DDRE,pin);
    133e:	2d b1       	in	r18, 0x0d	; 13
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	ac 01       	movw	r20, r24
    1346:	02 c0       	rjmp	.+4      	; 0x134c <pinMode+0x128>
    1348:	44 0f       	add	r20, r20
    134a:	55 1f       	adc	r21, r21
    134c:	6a 95       	dec	r22
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <pinMode+0x124>
    1350:	ba 01       	movw	r22, r20
    1352:	60 95       	com	r22
    1354:	62 23       	and	r22, r18
    1356:	6d b9       	out	0x0d, r22	; 13
    1358:	08 95       	ret
		}
	}
	else if(port == F) {
    135a:	85 30       	cpi	r24, 0x05	; 5
    135c:	e9 f4       	brne	.+58     	; 0x1398 <pinMode+0x174>
		if(mode) {
    135e:	44 23       	and	r20, r20
    1360:	69 f0       	breq	.+26     	; 0x137c <pinMode+0x158>
			sbit(DDRF,pin);	
    1362:	20 b3       	in	r18, 0x10	; 16
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	ac 01       	movw	r20, r24
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <pinMode+0x14c>
    136c:	44 0f       	add	r20, r20
    136e:	55 1f       	adc	r21, r21
    1370:	6a 95       	dec	r22
    1372:	e2 f7       	brpl	.-8      	; 0x136c <pinMode+0x148>
    1374:	ba 01       	movw	r22, r20
    1376:	62 2b       	or	r22, r18
    1378:	60 bb       	out	0x10, r22	; 16
    137a:	08 95       	ret
		}
		else {
			cbit(DDRF,pin);
    137c:	20 b3       	in	r18, 0x10	; 16
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	ac 01       	movw	r20, r24
    1384:	02 c0       	rjmp	.+4      	; 0x138a <pinMode+0x166>
    1386:	44 0f       	add	r20, r20
    1388:	55 1f       	adc	r21, r21
    138a:	6a 95       	dec	r22
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <pinMode+0x162>
    138e:	ba 01       	movw	r22, r20
    1390:	60 95       	com	r22
    1392:	62 23       	and	r22, r18
    1394:	60 bb       	out	0x10, r22	; 16
    1396:	08 95       	ret
		}
	}
	else if(port == G) {
    1398:	86 30       	cpi	r24, 0x06	; 6
    139a:	e9 f4       	brne	.+58     	; 0x13d6 <pinMode+0x1b2>
		if(mode) {
    139c:	44 23       	and	r20, r20
    139e:	69 f0       	breq	.+26     	; 0x13ba <pinMode+0x196>
			sbit(DDRG,pin);	
    13a0:	23 b3       	in	r18, 0x13	; 19
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	ac 01       	movw	r20, r24
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <pinMode+0x18a>
    13aa:	44 0f       	add	r20, r20
    13ac:	55 1f       	adc	r21, r21
    13ae:	6a 95       	dec	r22
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <pinMode+0x186>
    13b2:	ba 01       	movw	r22, r20
    13b4:	62 2b       	or	r22, r18
    13b6:	63 bb       	out	0x13, r22	; 19
    13b8:	08 95       	ret
		}
		else {
			cbit(DDRG,pin);
    13ba:	23 b3       	in	r18, 0x13	; 19
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	ac 01       	movw	r20, r24
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <pinMode+0x1a4>
    13c4:	44 0f       	add	r20, r20
    13c6:	55 1f       	adc	r21, r21
    13c8:	6a 95       	dec	r22
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <pinMode+0x1a0>
    13cc:	ba 01       	movw	r22, r20
    13ce:	60 95       	com	r22
    13d0:	62 23       	and	r22, r18
    13d2:	63 bb       	out	0x13, r22	; 19
    13d4:	08 95       	ret
		}
	}
	else if(port == H) {
    13d6:	87 30       	cpi	r24, 0x07	; 7
    13d8:	09 f5       	brne	.+66     	; 0x141c <pinMode+0x1f8>
		if(mode) {
    13da:	44 23       	and	r20, r20
    13dc:	79 f0       	breq	.+30     	; 0x13fc <pinMode+0x1d8>
			sbit(DDRH,pin);	
    13de:	e1 e0       	ldi	r30, 0x01	; 1
    13e0:	f1 e0       	ldi	r31, 0x01	; 1
    13e2:	20 81       	ld	r18, Z
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	ac 01       	movw	r20, r24
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <pinMode+0x1cc>
    13ec:	44 0f       	add	r20, r20
    13ee:	55 1f       	adc	r21, r21
    13f0:	6a 95       	dec	r22
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <pinMode+0x1c8>
    13f4:	ba 01       	movw	r22, r20
    13f6:	62 2b       	or	r22, r18
    13f8:	60 83       	st	Z, r22
    13fa:	08 95       	ret
		}
		else {
			cbit(DDRH,pin);
    13fc:	e1 e0       	ldi	r30, 0x01	; 1
    13fe:	f1 e0       	ldi	r31, 0x01	; 1
    1400:	20 81       	ld	r18, Z
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	ac 01       	movw	r20, r24
    1408:	02 c0       	rjmp	.+4      	; 0x140e <pinMode+0x1ea>
    140a:	44 0f       	add	r20, r20
    140c:	55 1f       	adc	r21, r21
    140e:	6a 95       	dec	r22
    1410:	e2 f7       	brpl	.-8      	; 0x140a <pinMode+0x1e6>
    1412:	ba 01       	movw	r22, r20
    1414:	60 95       	com	r22
    1416:	62 23       	and	r22, r18
    1418:	60 83       	st	Z, r22
    141a:	08 95       	ret
		}
	}
	// PORTI is not present
	else if(port == J) {
    141c:	89 30       	cpi	r24, 0x09	; 9
    141e:	09 f5       	brne	.+66     	; 0x1462 <pinMode+0x23e>
		if(mode) {
    1420:	44 23       	and	r20, r20
    1422:	79 f0       	breq	.+30     	; 0x1442 <pinMode+0x21e>
			sbit(DDRJ,pin);	
    1424:	e4 e0       	ldi	r30, 0x04	; 4
    1426:	f1 e0       	ldi	r31, 0x01	; 1
    1428:	20 81       	ld	r18, Z
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	ac 01       	movw	r20, r24
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <pinMode+0x212>
    1432:	44 0f       	add	r20, r20
    1434:	55 1f       	adc	r21, r21
    1436:	6a 95       	dec	r22
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <pinMode+0x20e>
    143a:	ba 01       	movw	r22, r20
    143c:	62 2b       	or	r22, r18
    143e:	60 83       	st	Z, r22
    1440:	08 95       	ret
		}
		else {
			cbit(DDRJ,pin);
    1442:	e4 e0       	ldi	r30, 0x04	; 4
    1444:	f1 e0       	ldi	r31, 0x01	; 1
    1446:	20 81       	ld	r18, Z
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	ac 01       	movw	r20, r24
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <pinMode+0x230>
    1450:	44 0f       	add	r20, r20
    1452:	55 1f       	adc	r21, r21
    1454:	6a 95       	dec	r22
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <pinMode+0x22c>
    1458:	ba 01       	movw	r22, r20
    145a:	60 95       	com	r22
    145c:	62 23       	and	r22, r18
    145e:	60 83       	st	Z, r22
    1460:	08 95       	ret
		}
	}
	else if(port == K) {
    1462:	8a 30       	cpi	r24, 0x0A	; 10
    1464:	09 f5       	brne	.+66     	; 0x14a8 <pinMode+0x284>
		if(mode) {
    1466:	44 23       	and	r20, r20
    1468:	79 f0       	breq	.+30     	; 0x1488 <pinMode+0x264>
			sbit(DDRK,pin);
    146a:	e7 e0       	ldi	r30, 0x07	; 7
    146c:	f1 e0       	ldi	r31, 0x01	; 1
    146e:	20 81       	ld	r18, Z
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	ac 01       	movw	r20, r24
    1476:	02 c0       	rjmp	.+4      	; 0x147c <pinMode+0x258>
    1478:	44 0f       	add	r20, r20
    147a:	55 1f       	adc	r21, r21
    147c:	6a 95       	dec	r22
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <pinMode+0x254>
    1480:	ba 01       	movw	r22, r20
    1482:	62 2b       	or	r22, r18
    1484:	60 83       	st	Z, r22
    1486:	08 95       	ret
		}
		else {
			cbit(DDRK,pin);
    1488:	e7 e0       	ldi	r30, 0x07	; 7
    148a:	f1 e0       	ldi	r31, 0x01	; 1
    148c:	20 81       	ld	r18, Z
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	ac 01       	movw	r20, r24
    1494:	02 c0       	rjmp	.+4      	; 0x149a <pinMode+0x276>
    1496:	44 0f       	add	r20, r20
    1498:	55 1f       	adc	r21, r21
    149a:	6a 95       	dec	r22
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <pinMode+0x272>
    149e:	ba 01       	movw	r22, r20
    14a0:	60 95       	com	r22
    14a2:	62 23       	and	r22, r18
    14a4:	60 83       	st	Z, r22
    14a6:	08 95       	ret
		}
	}
	else if(port == L) {
    14a8:	8b 30       	cpi	r24, 0x0B	; 11
    14aa:	01 f5       	brne	.+64     	; 0x14ec <pinMode+0x2c8>
		if(mode) {
    14ac:	44 23       	and	r20, r20
    14ae:	79 f0       	breq	.+30     	; 0x14ce <pinMode+0x2aa>
			sbit(DDRL,pin);
    14b0:	ea e0       	ldi	r30, 0x0A	; 10
    14b2:	f1 e0       	ldi	r31, 0x01	; 1
    14b4:	20 81       	ld	r18, Z
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	ac 01       	movw	r20, r24
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <pinMode+0x29e>
    14be:	44 0f       	add	r20, r20
    14c0:	55 1f       	adc	r21, r21
    14c2:	6a 95       	dec	r22
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <pinMode+0x29a>
    14c6:	ba 01       	movw	r22, r20
    14c8:	62 2b       	or	r22, r18
    14ca:	60 83       	st	Z, r22
    14cc:	08 95       	ret
		}
		else {
			cbit(DDRL,pin);
    14ce:	ea e0       	ldi	r30, 0x0A	; 10
    14d0:	f1 e0       	ldi	r31, 0x01	; 1
    14d2:	20 81       	ld	r18, Z
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	ac 01       	movw	r20, r24
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <pinMode+0x2bc>
    14dc:	44 0f       	add	r20, r20
    14de:	55 1f       	adc	r21, r21
    14e0:	6a 95       	dec	r22
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <pinMode+0x2b8>
    14e4:	ba 01       	movw	r22, r20
    14e6:	60 95       	com	r22
    14e8:	62 23       	and	r22, r18
    14ea:	60 83       	st	Z, r22
    14ec:	08 95       	ret

000014ee <digitalWrite>:
//	G (PORTG), H (PORTH), J (PORTJ), K (PORTK), L (PORTL),
// pin  = 0~7
// signal = 0(LOW), 1(HIGH)
void digitalWrite(uint8_t port, uint8_t pin, uint8_t signal)
{
	if(port == A) {
    14ee:	88 23       	and	r24, r24
    14f0:	e9 f4       	brne	.+58     	; 0x152c <digitalWrite+0x3e>
		if(signal) {
    14f2:	44 23       	and	r20, r20
    14f4:	69 f0       	breq	.+26     	; 0x1510 <digitalWrite+0x22>
			sbit(PORTA,pin);
    14f6:	22 b1       	in	r18, 0x02	; 2
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	ac 01       	movw	r20, r24
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <digitalWrite+0x16>
    1500:	44 0f       	add	r20, r20
    1502:	55 1f       	adc	r21, r21
    1504:	6a 95       	dec	r22
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <digitalWrite+0x12>
    1508:	ba 01       	movw	r22, r20
    150a:	62 2b       	or	r22, r18
    150c:	62 b9       	out	0x02, r22	; 2
    150e:	08 95       	ret
		}
		else {
			cbit(PORTA,pin);
    1510:	22 b1       	in	r18, 0x02	; 2
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	ac 01       	movw	r20, r24
    1518:	02 c0       	rjmp	.+4      	; 0x151e <digitalWrite+0x30>
    151a:	44 0f       	add	r20, r20
    151c:	55 1f       	adc	r21, r21
    151e:	6a 95       	dec	r22
    1520:	e2 f7       	brpl	.-8      	; 0x151a <digitalWrite+0x2c>
    1522:	ba 01       	movw	r22, r20
    1524:	60 95       	com	r22
    1526:	62 23       	and	r22, r18
    1528:	62 b9       	out	0x02, r22	; 2
    152a:	08 95       	ret
		}
	}
	else if(port == B) {
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	e9 f4       	brne	.+58     	; 0x156a <digitalWrite+0x7c>
		if(signal) {
    1530:	44 23       	and	r20, r20
    1532:	69 f0       	breq	.+26     	; 0x154e <digitalWrite+0x60>
			sbit(PORTB,pin);
    1534:	25 b1       	in	r18, 0x05	; 5
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	ac 01       	movw	r20, r24
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <digitalWrite+0x54>
    153e:	44 0f       	add	r20, r20
    1540:	55 1f       	adc	r21, r21
    1542:	6a 95       	dec	r22
    1544:	e2 f7       	brpl	.-8      	; 0x153e <digitalWrite+0x50>
    1546:	ba 01       	movw	r22, r20
    1548:	62 2b       	or	r22, r18
    154a:	65 b9       	out	0x05, r22	; 5
    154c:	08 95       	ret
		}
		else {
			cbit(PORTB,pin);
    154e:	25 b1       	in	r18, 0x05	; 5
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	ac 01       	movw	r20, r24
    1556:	02 c0       	rjmp	.+4      	; 0x155c <digitalWrite+0x6e>
    1558:	44 0f       	add	r20, r20
    155a:	55 1f       	adc	r21, r21
    155c:	6a 95       	dec	r22
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <digitalWrite+0x6a>
    1560:	ba 01       	movw	r22, r20
    1562:	60 95       	com	r22
    1564:	62 23       	and	r22, r18
    1566:	65 b9       	out	0x05, r22	; 5
    1568:	08 95       	ret
		}
	}
	else if(port == C) {
    156a:	82 30       	cpi	r24, 0x02	; 2
    156c:	e9 f4       	brne	.+58     	; 0x15a8 <digitalWrite+0xba>
		if(signal) {
    156e:	44 23       	and	r20, r20
    1570:	69 f0       	breq	.+26     	; 0x158c <digitalWrite+0x9e>
			sbit(PORTC,pin);
    1572:	28 b1       	in	r18, 0x08	; 8
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	ac 01       	movw	r20, r24
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <digitalWrite+0x92>
    157c:	44 0f       	add	r20, r20
    157e:	55 1f       	adc	r21, r21
    1580:	6a 95       	dec	r22
    1582:	e2 f7       	brpl	.-8      	; 0x157c <digitalWrite+0x8e>
    1584:	ba 01       	movw	r22, r20
    1586:	62 2b       	or	r22, r18
    1588:	68 b9       	out	0x08, r22	; 8
    158a:	08 95       	ret
		}
		else {
			cbit(PORTC,pin);
    158c:	28 b1       	in	r18, 0x08	; 8
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	ac 01       	movw	r20, r24
    1594:	02 c0       	rjmp	.+4      	; 0x159a <digitalWrite+0xac>
    1596:	44 0f       	add	r20, r20
    1598:	55 1f       	adc	r21, r21
    159a:	6a 95       	dec	r22
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <digitalWrite+0xa8>
    159e:	ba 01       	movw	r22, r20
    15a0:	60 95       	com	r22
    15a2:	62 23       	and	r22, r18
    15a4:	68 b9       	out	0x08, r22	; 8
    15a6:	08 95       	ret
		}
	}
	else if(port == D) {
    15a8:	83 30       	cpi	r24, 0x03	; 3
    15aa:	e9 f4       	brne	.+58     	; 0x15e6 <digitalWrite+0xf8>
		if(signal) {
    15ac:	44 23       	and	r20, r20
    15ae:	69 f0       	breq	.+26     	; 0x15ca <digitalWrite+0xdc>
			sbit(PORTD,pin);
    15b0:	2b b1       	in	r18, 0x0b	; 11
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	ac 01       	movw	r20, r24
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <digitalWrite+0xd0>
    15ba:	44 0f       	add	r20, r20
    15bc:	55 1f       	adc	r21, r21
    15be:	6a 95       	dec	r22
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <digitalWrite+0xcc>
    15c2:	ba 01       	movw	r22, r20
    15c4:	62 2b       	or	r22, r18
    15c6:	6b b9       	out	0x0b, r22	; 11
    15c8:	08 95       	ret
		}
		else {
			cbit(PORTD,pin);
    15ca:	2b b1       	in	r18, 0x0b	; 11
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	ac 01       	movw	r20, r24
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <digitalWrite+0xea>
    15d4:	44 0f       	add	r20, r20
    15d6:	55 1f       	adc	r21, r21
    15d8:	6a 95       	dec	r22
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <digitalWrite+0xe6>
    15dc:	ba 01       	movw	r22, r20
    15de:	60 95       	com	r22
    15e0:	62 23       	and	r22, r18
    15e2:	6b b9       	out	0x0b, r22	; 11
    15e4:	08 95       	ret
		}
	}
	else if(port == E) {
    15e6:	84 30       	cpi	r24, 0x04	; 4
    15e8:	e9 f4       	brne	.+58     	; 0x1624 <digitalWrite+0x136>
		if(signal) {
    15ea:	44 23       	and	r20, r20
    15ec:	69 f0       	breq	.+26     	; 0x1608 <digitalWrite+0x11a>
			sbit(PORTE,pin);
    15ee:	2e b1       	in	r18, 0x0e	; 14
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	ac 01       	movw	r20, r24
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <digitalWrite+0x10e>
    15f8:	44 0f       	add	r20, r20
    15fa:	55 1f       	adc	r21, r21
    15fc:	6a 95       	dec	r22
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <digitalWrite+0x10a>
    1600:	ba 01       	movw	r22, r20
    1602:	62 2b       	or	r22, r18
    1604:	6e b9       	out	0x0e, r22	; 14
    1606:	08 95       	ret
		}
		else {
			cbit(PORTE,pin);
    1608:	2e b1       	in	r18, 0x0e	; 14
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	ac 01       	movw	r20, r24
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <digitalWrite+0x128>
    1612:	44 0f       	add	r20, r20
    1614:	55 1f       	adc	r21, r21
    1616:	6a 95       	dec	r22
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <digitalWrite+0x124>
    161a:	ba 01       	movw	r22, r20
    161c:	60 95       	com	r22
    161e:	62 23       	and	r22, r18
    1620:	6e b9       	out	0x0e, r22	; 14
    1622:	08 95       	ret
		}
	}
	else if(port == F) {
    1624:	85 30       	cpi	r24, 0x05	; 5
    1626:	e9 f4       	brne	.+58     	; 0x1662 <digitalWrite+0x174>
		if(signal) {
    1628:	44 23       	and	r20, r20
    162a:	69 f0       	breq	.+26     	; 0x1646 <digitalWrite+0x158>
			sbit(PORTF,pin);
    162c:	21 b3       	in	r18, 0x11	; 17
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	ac 01       	movw	r20, r24
    1634:	02 c0       	rjmp	.+4      	; 0x163a <digitalWrite+0x14c>
    1636:	44 0f       	add	r20, r20
    1638:	55 1f       	adc	r21, r21
    163a:	6a 95       	dec	r22
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <digitalWrite+0x148>
    163e:	ba 01       	movw	r22, r20
    1640:	62 2b       	or	r22, r18
    1642:	61 bb       	out	0x11, r22	; 17
    1644:	08 95       	ret
		}
		else {
			cbit(PORTF,pin);
    1646:	21 b3       	in	r18, 0x11	; 17
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	ac 01       	movw	r20, r24
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <digitalWrite+0x166>
    1650:	44 0f       	add	r20, r20
    1652:	55 1f       	adc	r21, r21
    1654:	6a 95       	dec	r22
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <digitalWrite+0x162>
    1658:	ba 01       	movw	r22, r20
    165a:	60 95       	com	r22
    165c:	62 23       	and	r22, r18
    165e:	61 bb       	out	0x11, r22	; 17
    1660:	08 95       	ret
		}
	}
	else if(port == G) {
    1662:	86 30       	cpi	r24, 0x06	; 6
    1664:	e9 f4       	brne	.+58     	; 0x16a0 <digitalWrite+0x1b2>
		if(signal) {
    1666:	44 23       	and	r20, r20
    1668:	69 f0       	breq	.+26     	; 0x1684 <digitalWrite+0x196>
			sbit(PORTG,pin);
    166a:	24 b3       	in	r18, 0x14	; 20
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	ac 01       	movw	r20, r24
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <digitalWrite+0x18a>
    1674:	44 0f       	add	r20, r20
    1676:	55 1f       	adc	r21, r21
    1678:	6a 95       	dec	r22
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <digitalWrite+0x186>
    167c:	ba 01       	movw	r22, r20
    167e:	62 2b       	or	r22, r18
    1680:	64 bb       	out	0x14, r22	; 20
    1682:	08 95       	ret
		}
		else {
			cbit(PORTG,pin);
    1684:	24 b3       	in	r18, 0x14	; 20
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	ac 01       	movw	r20, r24
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <digitalWrite+0x1a4>
    168e:	44 0f       	add	r20, r20
    1690:	55 1f       	adc	r21, r21
    1692:	6a 95       	dec	r22
    1694:	e2 f7       	brpl	.-8      	; 0x168e <digitalWrite+0x1a0>
    1696:	ba 01       	movw	r22, r20
    1698:	60 95       	com	r22
    169a:	62 23       	and	r22, r18
    169c:	64 bb       	out	0x14, r22	; 20
    169e:	08 95       	ret
		}
	}
	else if(port == H) {
    16a0:	87 30       	cpi	r24, 0x07	; 7
    16a2:	09 f5       	brne	.+66     	; 0x16e6 <digitalWrite+0x1f8>
		if(signal) {
    16a4:	44 23       	and	r20, r20
    16a6:	79 f0       	breq	.+30     	; 0x16c6 <digitalWrite+0x1d8>
			sbit(PORTH,pin);
    16a8:	e2 e0       	ldi	r30, 0x02	; 2
    16aa:	f1 e0       	ldi	r31, 0x01	; 1
    16ac:	20 81       	ld	r18, Z
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	ac 01       	movw	r20, r24
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <digitalWrite+0x1cc>
    16b6:	44 0f       	add	r20, r20
    16b8:	55 1f       	adc	r21, r21
    16ba:	6a 95       	dec	r22
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <digitalWrite+0x1c8>
    16be:	ba 01       	movw	r22, r20
    16c0:	62 2b       	or	r22, r18
    16c2:	60 83       	st	Z, r22
    16c4:	08 95       	ret
		}
		else {
			cbit(PORTH,pin);
    16c6:	e2 e0       	ldi	r30, 0x02	; 2
    16c8:	f1 e0       	ldi	r31, 0x01	; 1
    16ca:	20 81       	ld	r18, Z
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	ac 01       	movw	r20, r24
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <digitalWrite+0x1ea>
    16d4:	44 0f       	add	r20, r20
    16d6:	55 1f       	adc	r21, r21
    16d8:	6a 95       	dec	r22
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <digitalWrite+0x1e6>
    16dc:	ba 01       	movw	r22, r20
    16de:	60 95       	com	r22
    16e0:	62 23       	and	r22, r18
    16e2:	60 83       	st	Z, r22
    16e4:	08 95       	ret
		}
	}
	// PORTI is not present
	else if(port == J) {
    16e6:	89 30       	cpi	r24, 0x09	; 9
    16e8:	09 f5       	brne	.+66     	; 0x172c <digitalWrite+0x23e>
		if(signal) {
    16ea:	44 23       	and	r20, r20
    16ec:	79 f0       	breq	.+30     	; 0x170c <digitalWrite+0x21e>
			sbit(PORTJ,pin);
    16ee:	e5 e0       	ldi	r30, 0x05	; 5
    16f0:	f1 e0       	ldi	r31, 0x01	; 1
    16f2:	20 81       	ld	r18, Z
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	ac 01       	movw	r20, r24
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <digitalWrite+0x212>
    16fc:	44 0f       	add	r20, r20
    16fe:	55 1f       	adc	r21, r21
    1700:	6a 95       	dec	r22
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <digitalWrite+0x20e>
    1704:	ba 01       	movw	r22, r20
    1706:	62 2b       	or	r22, r18
    1708:	60 83       	st	Z, r22
    170a:	08 95       	ret
		}
		else {
			cbit(PORTJ,pin);
    170c:	e5 e0       	ldi	r30, 0x05	; 5
    170e:	f1 e0       	ldi	r31, 0x01	; 1
    1710:	20 81       	ld	r18, Z
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	ac 01       	movw	r20, r24
    1718:	02 c0       	rjmp	.+4      	; 0x171e <digitalWrite+0x230>
    171a:	44 0f       	add	r20, r20
    171c:	55 1f       	adc	r21, r21
    171e:	6a 95       	dec	r22
    1720:	e2 f7       	brpl	.-8      	; 0x171a <digitalWrite+0x22c>
    1722:	ba 01       	movw	r22, r20
    1724:	60 95       	com	r22
    1726:	62 23       	and	r22, r18
    1728:	60 83       	st	Z, r22
    172a:	08 95       	ret
		}
	}
	else if(port == K) {
    172c:	8a 30       	cpi	r24, 0x0A	; 10
    172e:	09 f5       	brne	.+66     	; 0x1772 <digitalWrite+0x284>
		if(signal) {
    1730:	44 23       	and	r20, r20
    1732:	79 f0       	breq	.+30     	; 0x1752 <digitalWrite+0x264>
			sbit(PORTK,pin);
    1734:	e8 e0       	ldi	r30, 0x08	; 8
    1736:	f1 e0       	ldi	r31, 0x01	; 1
    1738:	20 81       	ld	r18, Z
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	ac 01       	movw	r20, r24
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <digitalWrite+0x258>
    1742:	44 0f       	add	r20, r20
    1744:	55 1f       	adc	r21, r21
    1746:	6a 95       	dec	r22
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <digitalWrite+0x254>
    174a:	ba 01       	movw	r22, r20
    174c:	62 2b       	or	r22, r18
    174e:	60 83       	st	Z, r22
    1750:	08 95       	ret
		}
		else {
			cbit(PORTK,pin);
    1752:	e8 e0       	ldi	r30, 0x08	; 8
    1754:	f1 e0       	ldi	r31, 0x01	; 1
    1756:	20 81       	ld	r18, Z
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	ac 01       	movw	r20, r24
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <digitalWrite+0x276>
    1760:	44 0f       	add	r20, r20
    1762:	55 1f       	adc	r21, r21
    1764:	6a 95       	dec	r22
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <digitalWrite+0x272>
    1768:	ba 01       	movw	r22, r20
    176a:	60 95       	com	r22
    176c:	62 23       	and	r22, r18
    176e:	60 83       	st	Z, r22
    1770:	08 95       	ret
		}
	}
	else if(port == L) {
    1772:	8b 30       	cpi	r24, 0x0B	; 11
    1774:	01 f5       	brne	.+64     	; 0x17b6 <digitalWrite+0x2c8>
		if(signal) {
    1776:	44 23       	and	r20, r20
    1778:	79 f0       	breq	.+30     	; 0x1798 <digitalWrite+0x2aa>
			sbit(PORTL,pin);
    177a:	eb e0       	ldi	r30, 0x0B	; 11
    177c:	f1 e0       	ldi	r31, 0x01	; 1
    177e:	20 81       	ld	r18, Z
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	ac 01       	movw	r20, r24
    1786:	02 c0       	rjmp	.+4      	; 0x178c <digitalWrite+0x29e>
    1788:	44 0f       	add	r20, r20
    178a:	55 1f       	adc	r21, r21
    178c:	6a 95       	dec	r22
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <digitalWrite+0x29a>
    1790:	ba 01       	movw	r22, r20
    1792:	62 2b       	or	r22, r18
    1794:	60 83       	st	Z, r22
    1796:	08 95       	ret
		}
		else {
			cbit(PORTL,pin);
    1798:	eb e0       	ldi	r30, 0x0B	; 11
    179a:	f1 e0       	ldi	r31, 0x01	; 1
    179c:	20 81       	ld	r18, Z
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	ac 01       	movw	r20, r24
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <digitalWrite+0x2bc>
    17a6:	44 0f       	add	r20, r20
    17a8:	55 1f       	adc	r21, r21
    17aa:	6a 95       	dec	r22
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <digitalWrite+0x2b8>
    17ae:	ba 01       	movw	r22, r20
    17b0:	60 95       	com	r22
    17b2:	62 23       	and	r22, r18
    17b4:	60 83       	st	Z, r22
    17b6:	08 95       	ret

000017b8 <digitalRead>:
//	G (PORTG), H (PORTH), J (PORTJ), K (PORTK), L (PORTL),
// pin  = 0~7
int digitalRead(uint8_t port, uint8_t pin)
{
	unsigned char ucReadValue;
	if(port == A)
    17b8:	88 23       	and	r24, r24
    17ba:	59 f4       	brne	.+22     	; 0x17d2 <digitalRead+0x1a>
	{
		ucReadValue = (PINA>>pin)&0x01;
    17bc:	20 b1       	in	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	c9 01       	movw	r24, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <digitalRead+0x10>
    17c4:	95 95       	asr	r25
    17c6:	87 95       	ror	r24
    17c8:	6a 95       	dec	r22
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <digitalRead+0xc>
    17cc:	98 2f       	mov	r25, r24
    17ce:	91 70       	andi	r25, 0x01	; 1
    17d0:	7b c0       	rjmp	.+246    	; 0x18c8 <digitalRead+0x110>
	}
	else if(port == B)
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	59 f4       	brne	.+22     	; 0x17ec <digitalRead+0x34>
	{
		ucReadValue = (PINB>>pin)&0x01;
    17d6:	23 b1       	in	r18, 0x03	; 3
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	c9 01       	movw	r24, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <digitalRead+0x2a>
    17de:	95 95       	asr	r25
    17e0:	87 95       	ror	r24
    17e2:	6a 95       	dec	r22
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <digitalRead+0x26>
    17e6:	98 2f       	mov	r25, r24
    17e8:	91 70       	andi	r25, 0x01	; 1
    17ea:	6e c0       	rjmp	.+220    	; 0x18c8 <digitalRead+0x110>
	}
	else if(port == C)
    17ec:	82 30       	cpi	r24, 0x02	; 2
    17ee:	59 f4       	brne	.+22     	; 0x1806 <digitalRead+0x4e>
	{
		ucReadValue = (PINC>>pin)&0x01;
    17f0:	26 b1       	in	r18, 0x06	; 6
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	c9 01       	movw	r24, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <digitalRead+0x44>
    17f8:	95 95       	asr	r25
    17fa:	87 95       	ror	r24
    17fc:	6a 95       	dec	r22
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <digitalRead+0x40>
    1800:	98 2f       	mov	r25, r24
    1802:	91 70       	andi	r25, 0x01	; 1
    1804:	61 c0       	rjmp	.+194    	; 0x18c8 <digitalRead+0x110>
	}
	else if(port == D)
    1806:	83 30       	cpi	r24, 0x03	; 3
    1808:	39 f4       	brne	.+14     	; 0x1818 <digitalRead+0x60>
	{
		ucReadValue = (PIND>pin)&0x01;
    180a:	89 b1       	in	r24, 0x09	; 9
    180c:	91 e0       	ldi	r25, 0x01	; 1
    180e:	68 17       	cp	r22, r24
    1810:	08 f4       	brcc	.+2      	; 0x1814 <digitalRead+0x5c>
    1812:	5a c0       	rjmp	.+180    	; 0x18c8 <digitalRead+0x110>
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	58 c0       	rjmp	.+176    	; 0x18c8 <digitalRead+0x110>
	}
	else if(port == E)
    1818:	84 30       	cpi	r24, 0x04	; 4
    181a:	59 f4       	brne	.+22     	; 0x1832 <digitalRead+0x7a>
	{
		ucReadValue = (PINE>>pin)&0x01;
    181c:	2c b1       	in	r18, 0x0c	; 12
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	c9 01       	movw	r24, r18
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <digitalRead+0x70>
    1824:	95 95       	asr	r25
    1826:	87 95       	ror	r24
    1828:	6a 95       	dec	r22
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <digitalRead+0x6c>
    182c:	98 2f       	mov	r25, r24
    182e:	91 70       	andi	r25, 0x01	; 1
    1830:	4b c0       	rjmp	.+150    	; 0x18c8 <digitalRead+0x110>
	}
	else if(port == F)
    1832:	85 30       	cpi	r24, 0x05	; 5
    1834:	51 f4       	brne	.+20     	; 0x184a <digitalRead+0x92>
	{
		ucReadValue = (PINF>>pin)&0x01;
    1836:	8f b1       	in	r24, 0x0f	; 15
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <digitalRead+0x88>
    183c:	95 95       	asr	r25
    183e:	87 95       	ror	r24
    1840:	6a 95       	dec	r22
    1842:	e2 f7       	brpl	.-8      	; 0x183c <digitalRead+0x84>
    1844:	98 2f       	mov	r25, r24
    1846:	91 70       	andi	r25, 0x01	; 1
    1848:	3f c0       	rjmp	.+126    	; 0x18c8 <digitalRead+0x110>
	}
	else if(port == G)
    184a:	86 30       	cpi	r24, 0x06	; 6
    184c:	51 f4       	brne	.+20     	; 0x1862 <digitalRead+0xaa>
	{
		ucReadValue = (PING>>pin)&0x01;
    184e:	82 b3       	in	r24, 0x12	; 18
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <digitalRead+0xa0>
    1854:	95 95       	asr	r25
    1856:	87 95       	ror	r24
    1858:	6a 95       	dec	r22
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <digitalRead+0x9c>
    185c:	98 2f       	mov	r25, r24
    185e:	91 70       	andi	r25, 0x01	; 1
    1860:	33 c0       	rjmp	.+102    	; 0x18c8 <digitalRead+0x110>
	}
	else if(port == H)
    1862:	87 30       	cpi	r24, 0x07	; 7
    1864:	59 f4       	brne	.+22     	; 0x187c <digitalRead+0xc4>
	{
		ucReadValue = (PINH>>pin)&0x01;
    1866:	80 91 00 01 	lds	r24, 0x0100
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <digitalRead+0xba>
    186e:	95 95       	asr	r25
    1870:	87 95       	ror	r24
    1872:	6a 95       	dec	r22
    1874:	e2 f7       	brpl	.-8      	; 0x186e <digitalRead+0xb6>
    1876:	98 2f       	mov	r25, r24
    1878:	91 70       	andi	r25, 0x01	; 1
    187a:	26 c0       	rjmp	.+76     	; 0x18c8 <digitalRead+0x110>
	}
	// PORTI is not present
	else if(port == J)
    187c:	89 30       	cpi	r24, 0x09	; 9
    187e:	59 f4       	brne	.+22     	; 0x1896 <digitalRead+0xde>
	{
		ucReadValue = (PINJ>>pin)&0x01;
    1880:	80 91 03 01 	lds	r24, 0x0103
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 c0       	rjmp	.+4      	; 0x188c <digitalRead+0xd4>
    1888:	95 95       	asr	r25
    188a:	87 95       	ror	r24
    188c:	6a 95       	dec	r22
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <digitalRead+0xd0>
    1890:	98 2f       	mov	r25, r24
    1892:	91 70       	andi	r25, 0x01	; 1
    1894:	19 c0       	rjmp	.+50     	; 0x18c8 <digitalRead+0x110>
	}
	else if(port == K)
    1896:	8a 30       	cpi	r24, 0x0A	; 10
    1898:	59 f4       	brne	.+22     	; 0x18b0 <digitalRead+0xf8>
	{
		ucReadValue = (PINK>>pin)&0x01;
    189a:	80 91 06 01 	lds	r24, 0x0106
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <digitalRead+0xee>
    18a2:	95 95       	asr	r25
    18a4:	87 95       	ror	r24
    18a6:	6a 95       	dec	r22
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <digitalRead+0xea>
    18aa:	98 2f       	mov	r25, r24
    18ac:	91 70       	andi	r25, 0x01	; 1
    18ae:	0c c0       	rjmp	.+24     	; 0x18c8 <digitalRead+0x110>
	}
	else if(port == L)
    18b0:	8b 30       	cpi	r24, 0x0B	; 11
    18b2:	51 f4       	brne	.+20     	; 0x18c8 <digitalRead+0x110>
	{
		ucReadValue = (PINL>>pin)&0x01;
    18b4:	80 91 09 01 	lds	r24, 0x0109
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <digitalRead+0x108>
    18bc:	95 95       	asr	r25
    18be:	87 95       	ror	r24
    18c0:	6a 95       	dec	r22
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <digitalRead+0x104>
    18c4:	98 2f       	mov	r25, r24
    18c6:	91 70       	andi	r25, 0x01	; 1
	}
	
	return ucReadValue;
}
    18c8:	89 2f       	mov	r24, r25
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	08 95       	ret

000018ce <TIMER_100mSInit>:
  
void TIMER_100mSInit (void)
{
	// Timer/Count0 ÏÇ¨Ïö©
	// ÎèôÏûëÎ™®ÎìúÏôÄ ÌÅ¥Îü≠ÏÜåÏä§ Î∞è ÌîÑÎ¶¨Ïä§ÏºÄÏùºÎü¨ Í≤∞Ï†ï
	TCCR0B	=	0x05;  //  fclk_io / 1024   
    18ce:	85 e0       	ldi	r24, 0x05	; 5
    18d0:	85 bd       	out	0x25, r24	; 37
	// 0.01sÏóê Ïò§Î≤ÑÌîåÎ°úÏö∞ Î∞úÏÉù, 1/(14745600Hz/1024)‚Öπ144 = 0.01s
	// Ïò§Î≤ÑÌîåÎ°úÏö∞ÍπåÏßÄ Ïπ¥Ïö¥Ìä∏Î•º 144Î°ú ÏÑ§Ï†ï
	TCNT0	=	0xff - 144;
    18d2:	8f e6       	ldi	r24, 0x6F	; 111
    18d4:	86 bd       	out	0x26, r24	; 38
	TIMSK0	|=	1 << TOIE0;	// Overflow Interupt Enable
    18d6:	ee e6       	ldi	r30, 0x6E	; 110
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	81 60       	ori	r24, 0x01	; 1
    18de:	80 83       	st	Z, r24
	TIFR0	|=	1 << TOV0;	// set Overflow Interupt Flag
    18e0:	a8 9a       	sbi	0x15, 0	; 21
}
    18e2:	08 95       	ret

000018e4 <setElapsedTime100mSUnit>:


void setElapsedTime100mSUnit(uint32_t Counter)
{
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
	setTimerCheckCounter = Counter;
    18e8:	80 93 49 04 	sts	0x0449, r24
    18ec:	90 93 4a 04 	sts	0x044A, r25
    18f0:	a0 93 4b 04 	sts	0x044B, r26
    18f4:	b0 93 4c 04 	sts	0x044C, r27
	timerCouter = 0;
    18f8:	10 92 4d 04 	sts	0x044D, r1
    18fc:	10 92 4e 04 	sts	0x044E, r1
    1900:	10 92 4f 04 	sts	0x044F, r1
    1904:	10 92 50 04 	sts	0x0450, r1
}
    1908:	08 95       	ret

0000190a <isElapsed>:

uint8_t isElapsed()
{
	if (flagOverflowSetTimer )
    190a:	80 91 48 04 	lds	r24, 0x0448
    190e:	88 23       	and	r24, r24
    1910:	21 f0       	breq	.+8      	; 0x191a <isElapsed+0x10>
	{
		flagOverflowSetTimer = 0;
    1912:	10 92 48 04 	sts	0x0448, r1
		return 1;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	08 95       	ret
	}
	
	return 0;
    191a:	80 e0       	ldi	r24, 0x00	; 0
}
    191c:	08 95       	ret

0000191e <eventCallback>:
unsigned int gun_AdcValue = 0;
extern int n_flag_getADC;//--------------^ºˆ¡§∫Œ∫–

static void eventCallback(int eventType,uint8_t* rxBuff, int rxSize)
{
	if (eventType == EVENT_RX_DATA) 
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	91 05       	cpc	r25, r1
    1922:	81 f4       	brne	.+32     	; 0x1944 <eventCallback+0x26>
	{
		debugprint("\r\nRX:%s\r\n", rxBuff);
    1924:	00 d0       	rcall	.+0      	; 0x1926 <eventCallback+0x8>
    1926:	0f 92       	push	r0
    1928:	8b e3       	ldi	r24, 0x3B	; 59
    192a:	93 e0       	ldi	r25, 0x03	; 3
    192c:	ed b7       	in	r30, 0x3d	; 61
    192e:	fe b7       	in	r31, 0x3e	; 62
    1930:	92 83       	std	Z+2, r25	; 0x02
    1932:	81 83       	std	Z+1, r24	; 0x01
    1934:	74 83       	std	Z+4, r23	; 0x04
    1936:	63 83       	std	Z+3, r22	; 0x03
    1938:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	08 95       	ret

00001946 <main>:
	}
}


int main(void)
{
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	c0 50       	subi	r28, 0x00	; 0
    1950:	d1 40       	sbci	r29, 0x01	; 1
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
	uint8_t strTemp[256];
	debugInit();
    195c:	0e 94 aa 01 	call	0x354	; 0x354 <debugInit>
	wifiInit();
    1960:	0e 94 63 02 	call	0x4c6	; 0x4c6 <wifiInit>
	
	sei();
    1964:	78 94       	sei
		
	debugprint("wifi test start\r\n");
    1966:	0f 92       	push	r0
    1968:	0f 92       	push	r0
    196a:	85 e4       	ldi	r24, 0x45	; 69
    196c:	93 e0       	ldi	r25, 0x03	; 3
    196e:	ad b7       	in	r26, 0x3d	; 61
    1970:	be b7       	in	r27, 0x3e	; 62
    1972:	12 96       	adiw	r26, 0x02	; 2
    1974:	9c 93       	st	X, r25
    1976:	8e 93       	st	-X, r24
    1978:	11 97       	sbiw	r26, 0x01	; 1
    197a:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
    197e:	8f ef       	ldi	r24, 0xFF	; 255
    1980:	9f ef       	ldi	r25, 0xFF	; 255
    1982:	ac e2       	ldi	r26, 0x2C	; 44
    1984:	81 50       	subi	r24, 0x01	; 1
    1986:	90 40       	sbci	r25, 0x00	; 0
    1988:	a0 40       	sbci	r26, 0x00	; 0
    198a:	e1 f7       	brne	.-8      	; 0x1984 <main+0x3e>
    198c:	00 c0       	rjmp	.+0      	; 0x198e <main+0x48>
    198e:	00 00       	nop
	_delay_ms(1000);
	
	wificlearUartBuff();
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0e 94 d7 08 	call	0x11ae	; 0x11ae <wificlearUartBuff>
	
	// UART echo disable 
	wifiEchoDisable();
    1998:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <wifiEchoDisable>
	wificlearUartBuff();
    199c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <wificlearUartBuff>
	
	// register callback function 
	wifiSetEventCallback(eventCallback);
    19a0:	8f e8       	ldi	r24, 0x8F	; 143
    19a2:	9c e0       	ldi	r25, 0x0C	; 12
    19a4:	0e 94 48 08 	call	0x1090	; 0x1090 <wifiSetEventCallback>
	
	// Auto connection disable
	wifiAutoConnectDisable();
    19a8:	0e 94 de 08 	call	0x11bc	; 0x11bc <wifiAutoConnectDisable>
	wificlearUartBuff();
    19ac:	0e 94 d7 08 	call	0x11ae	; 0x11ae <wificlearUartBuff>
	
	wifiModeSet();
    19b0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <wifiModeSet>
	
	wifiEnableDHCP();
    19b4:	0e 94 11 08 	call	0x1022	; 0x1022 <wifiEnableDHCP>
	
	debugprint("\r\nAP list display:\r\n");
    19b8:	0f 92       	push	r0
    19ba:	0f 92       	push	r0
    19bc:	87 e5       	ldi	r24, 0x57	; 87
    19be:	93 e0       	ldi	r25, 0x03	; 3
    19c0:	ad b7       	in	r26, 0x3d	; 61
    19c2:	be b7       	in	r27, 0x3e	; 62
    19c4:	12 96       	adiw	r26, 0x02	; 2
    19c6:	9c 93       	st	X, r25
    19c8:	8e 93       	st	-X, r24
    19ca:	11 97       	sbiw	r26, 0x01	; 1
    19cc:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
	wifiDisplayAPlist();
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0e 94 bb 07 	call	0xf76	; 0xf76 <wifiDisplayAPlist>
	
	// connect  AP 
	debugprint("\r\n");
    19d8:	0f 92       	push	r0
    19da:	0f 92       	push	r0
    19dc:	8c e6       	ldi	r24, 0x6C	; 108
    19de:	93 e0       	ldi	r25, 0x03	; 3
    19e0:	ed b7       	in	r30, 0x3d	; 61
    19e2:	fe b7       	in	r31, 0x3e	; 62
    19e4:	92 83       	std	Z+2, r25	; 0x02
    19e6:	81 83       	std	Z+1, r24	; 0x01
    19e8:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
	if ( !wifiConnectAP("CSNET-301", "gwnucomse"))
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	8f e6       	ldi	r24, 0x6F	; 111
    19f2:	93 e0       	ldi	r25, 0x03	; 3
    19f4:	69 e7       	ldi	r22, 0x79	; 121
    19f6:	73 e0       	ldi	r23, 0x03	; 3
    19f8:	0e 94 d5 07 	call	0xfaa	; 0xfaa <wifiConnectAP>
    19fc:	88 23       	and	r24, r24
    19fe:	79 f4       	brne	.+30     	; 0x1a1e <main+0xd8>
	{
		debugprint("AP connected.\r\n");
    1a00:	0f 92       	push	r0
    1a02:	0f 92       	push	r0
    1a04:	83 e8       	ldi	r24, 0x83	; 131
    1a06:	93 e0       	ldi	r25, 0x03	; 3
    1a08:	ad b7       	in	r26, 0x3d	; 61
    1a0a:	be b7       	in	r27, 0x3e	; 62
    1a0c:	12 96       	adiw	r26, 0x02	; 2
    1a0e:	9c 93       	st	X, r25
    1a10:	8e 93       	st	-X, r24
    1a12:	11 97       	sbiw	r26, 0x01	; 1
    1a14:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0c c0       	rjmp	.+24     	; 0x1a36 <main+0xf0>
	}
	else
	{
		debugprint("AP connection fail.\r\n");
    1a1e:	0f 92       	push	r0
    1a20:	0f 92       	push	r0
    1a22:	83 e9       	ldi	r24, 0x93	; 147
    1a24:	93 e0       	ldi	r25, 0x03	; 3
    1a26:	ed b7       	in	r30, 0x3d	; 61
    1a28:	fe b7       	in	r31, 0x3e	; 62
    1a2a:	92 83       	std	Z+2, r25	; 0x02
    1a2c:	81 83       	std	Z+1, r24	; 0x01
    1a2e:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
	}
	// display  local allocated IP 
	debugprint("\r\n Allocated local IP:\r\n");
    1a36:	0f 92       	push	r0
    1a38:	0f 92       	push	r0
    1a3a:	89 ea       	ldi	r24, 0xA9	; 169
    1a3c:	93 e0       	ldi	r25, 0x03	; 3
    1a3e:	ad b7       	in	r26, 0x3d	; 61
    1a40:	be b7       	in	r27, 0x3e	; 62
    1a42:	12 96       	adiw	r26, 0x02	; 2
    1a44:	9c 93       	st	X, r25
    1a46:	8e 93       	st	-X, r24
    1a48:	11 97       	sbiw	r26, 0x01	; 1
    1a4a:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
	wifiDisplayLocalIP();
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0e 94 02 08 	call	0x1004	; 0x1004 <wifiDisplayLocalIP>
	debugprint("\r\n");
    1a56:	0f 92       	push	r0
    1a58:	0f 92       	push	r0
    1a5a:	8c e6       	ldi	r24, 0x6C	; 108
    1a5c:	93 e0       	ldi	r25, 0x03	; 3
    1a5e:	ed b7       	in	r30, 0x3d	; 61
    1a60:	fe b7       	in	r31, 0x3e	; 62
    1a62:	92 83       	std	Z+2, r25	; 0x02
    1a64:	81 83       	std	Z+1, r24	; 0x01
    1a66:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>

	// TCP remote server connection
	if( !wifiConnectTCPServer(SERVER_IP_STR,SERVER_PORT))
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	82 ec       	ldi	r24, 0xC2	; 194
    1a70:	93 e0       	ldi	r25, 0x03	; 3
    1a72:	41 e5       	ldi	r20, 0x51	; 81
    1a74:	53 ec       	ldi	r21, 0xC3	; 195
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	0e 94 20 08 	call	0x1040	; 0x1040 <wifiConnectTCPServer>
    1a7e:	88 23       	and	r24, r24
    1a80:	79 f4       	brne	.+30     	; 0x1aa0 <main+0x15a>
	{
		debugprint("Connected Server.\r\n");
    1a82:	0f 92       	push	r0
    1a84:	0f 92       	push	r0
    1a86:	8f ec       	ldi	r24, 0xCF	; 207
    1a88:	93 e0       	ldi	r25, 0x03	; 3
    1a8a:	ad b7       	in	r26, 0x3d	; 61
    1a8c:	be b7       	in	r27, 0x3e	; 62
    1a8e:	12 96       	adiw	r26, 0x02	; 2
    1a90:	9c 93       	st	X, r25
    1a92:	8e 93       	st	-X, r24
    1a94:	11 97       	sbiw	r26, 0x01	; 1
    1a96:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0c c0       	rjmp	.+24     	; 0x1ab8 <main+0x172>
	}
	else
	{
		debugprint("Server connection fail.\r\n");
    1aa0:	0f 92       	push	r0
    1aa2:	0f 92       	push	r0
    1aa4:	83 ee       	ldi	r24, 0xE3	; 227
    1aa6:	93 e0       	ldi	r25, 0x03	; 3
    1aa8:	ed b7       	in	r30, 0x3d	; 61
    1aaa:	fe b7       	in	r31, 0x3e	; 62
    1aac:	92 83       	std	Z+2, r25	; 0x02
    1aae:	81 83       	std	Z+1, r24	; 0x01
    1ab0:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
	}				
	debugprint("\r\n");
    1ab8:	0f 92       	push	r0
    1aba:	0f 92       	push	r0
    1abc:	8c e6       	ldi	r24, 0x6C	; 108
    1abe:	93 e0       	ldi	r25, 0x03	; 3
    1ac0:	ad b7       	in	r26, 0x3d	; 61
    1ac2:	be b7       	in	r27, 0x3e	; 62
    1ac4:	12 96       	adiw	r26, 0x02	; 2
    1ac6:	9c 93       	st	X, r25
    1ac8:	8e 93       	st	-X, r24
    1aca:	11 97       	sbiw	r26, 0x01	; 1
    1acc:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
	
	// Send Test message 
	strcpy(strTemp,"test msessage: hello\r\n");
    1ad0:	de 01       	movw	r26, r28
    1ad2:	11 96       	adiw	r26, 0x01	; 1
    1ad4:	ed ef       	ldi	r30, 0xFD	; 253
    1ad6:	f3 e0       	ldi	r31, 0x03	; 3
    1ad8:	87 e1       	ldi	r24, 0x17	; 23
    1ada:	01 90       	ld	r0, Z+
    1adc:	0d 92       	st	X+, r0
    1ade:	81 50       	subi	r24, 0x01	; 1
    1ae0:	e1 f7       	brne	.-8      	; 0x1ada <main+0x194>
	wifiSendData(strTemp, sizeof("test msessage: hello\r\n"));
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	01 96       	adiw	r24, 0x01	; 1
    1aea:	67 e1       	ldi	r22, 0x17	; 23
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	0e 94 4e 08 	call	0x109c	; 0x109c <wifiSendData>
	
	 //ø©±‚º≠∫Œ≈Õ Ω«¡¶ µ•¿Ã≈Õ∞° ∞°∞¯µ»¥Ÿ. 
	TIMER_100mSInit ();
    1af2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <TIMER_100mSInit>
	setElapsedTime100mSUnit(100);
    1af6:	64 e6       	ldi	r22, 0x64	; 100
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <setElapsedTime100mSUnit>

	debugprint("start Loop\r\n");	
    1b02:	0f 92       	push	r0
    1b04:	0f 92       	push	r0
    1b06:	84 e1       	ldi	r24, 0x14	; 20
    1b08:	94 e0       	ldi	r25, 0x04	; 4
    1b0a:	ed b7       	in	r30, 0x3d	; 61
    1b0c:	fe b7       	in	r31, 0x3e	; 62
    1b0e:	92 83       	std	Z+2, r25	; 0x02
    1b10:	81 83       	std	Z+1, r24	; 0x01
    1b12:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
	
	int counter = 0;

	LED_Init ();		// PORTB = GREEN, PORTE = RED------------------------vºˆ¡§ ∫Œ∫–
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0e 94 1b 01 	call	0x236	; 0x236 <LED_Init>
	AdcInit(1);			// PORTF = ADC1
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	0e 94 96 00 	call	0x12c	; 0x12c <AdcInit>
	TIMER_Init();
    1b24:	0e 94 10 01 	call	0x220	; 0x220 <TIMER_Init>
		
	sei();//-------------------------------------------^ºˆ¡§∫Œ∫–
    1b28:	78 94       	sei
	TIMER_100mSInit ();
	setElapsedTime100mSUnit(100);

	debugprint("start Loop\r\n");	
	
	int counter = 0;
    1b2a:	cc 24       	eor	r12, r12
    1b2c:	dd 24       	eor	r13, r13
        //TODO:: Please write your application code 
		wifiMain();
		
		if ( isElapsed())
		{
			sprintf(strTemp,"hello:%d CDS : %d\r\n",counter++, gun_AdcValue);		//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫– 
    1b2e:	7e 01       	movw	r14, r28
    1b30:	08 94       	sec
    1b32:	e1 1c       	adc	r14, r1
    1b34:	f1 1c       	adc	r15, r1
    1b36:	0f 2e       	mov	r0, r31
    1b38:	f1 e2       	ldi	r31, 0x21	; 33
    1b3a:	af 2e       	mov	r10, r31
    1b3c:	f4 e0       	ldi	r31, 0x04	; 4
    1b3e:	bf 2e       	mov	r11, r31
    1b40:	f0 2d       	mov	r31, r0
			wifiSendData(strTemp, strlen(strTemp));			//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
			debugprint("TX:%s\r\n",strTemp);				//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
    1b42:	0f 2e       	mov	r0, r31
    1b44:	f5 e3       	ldi	r31, 0x35	; 53
    1b46:	8f 2e       	mov	r8, r31
    1b48:	f4 e0       	ldi	r31, 0x04	; 4
    1b4a:	9f 2e       	mov	r9, r31
    1b4c:	f0 2d       	mov	r31, r0
	
	
    while(1)
    {

		if(n_flag_getADC == 1)			//---------------------------------vºˆ¡§∫Œ∫–
    1b4e:	80 91 3e 04 	lds	r24, 0x043E
    1b52:	90 91 3f 04 	lds	r25, 0x043F
    1b56:	81 30       	cpi	r24, 0x01	; 1
    1b58:	91 05       	cpc	r25, r1
    1b5a:	51 f4       	brne	.+20     	; 0x1b70 <main+0x22a>
		{
			n_flag_getADC = 0;
    1b5c:	10 92 3f 04 	sts	0x043F, r1
    1b60:	10 92 3e 04 	sts	0x043E, r1
			
			gun_AdcValue	=	AdcRead();		//¡∂µµ∞™¡ﬂø‰!!!!!!
    1b64:	0e 94 a1 00 	call	0x142	; 0x142 <AdcRead>
    1b68:	90 93 52 04 	sts	0x0452, r25
    1b6c:	80 93 51 04 	sts	0x0451, r24
			
			//			debugprint("gun_AdcValue : %d\r\n", gun_AdcValue);
		}
		
		
		if (gun_AdcValue < 640 && gun_AdcValue >= 600)
    1b70:	20 91 51 04 	lds	r18, 0x0451
    1b74:	30 91 52 04 	lds	r19, 0x0452
    1b78:	c9 01       	movw	r24, r18
    1b7a:	88 55       	subi	r24, 0x58	; 88
    1b7c:	92 40       	sbci	r25, 0x02	; 2
    1b7e:	88 32       	cpi	r24, 0x28	; 40
    1b80:	91 05       	cpc	r25, r1
    1b82:	58 f4       	brcc	.+22     	; 0x1b9a <main+0x254>
		{	controlLED (GREEN, 0x80);	controlLED (RED, 0x00);	}
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	60 e8       	ldi	r22, 0x80	; 128
    1b8a:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	60 e0       	ldi	r22, 0x00	; 0
    1b94:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1b98:	05 c1       	rjmp	.+522    	; 0x1da4 <main+0x45e>
		else if (gun_AdcValue < 600 && gun_AdcValue >= 560)
    1b9a:	c9 01       	movw	r24, r18
    1b9c:	80 53       	subi	r24, 0x30	; 48
    1b9e:	92 40       	sbci	r25, 0x02	; 2
    1ba0:	88 32       	cpi	r24, 0x28	; 40
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	58 f4       	brcc	.+22     	; 0x1bbc <main+0x276>
		{	controlLED (GREEN, 0xC0);	controlLED (RED, 0x00);	}
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	60 ec       	ldi	r22, 0xC0	; 192
    1bac:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1bba:	f4 c0       	rjmp	.+488    	; 0x1da4 <main+0x45e>
		else if (gun_AdcValue < 560 && gun_AdcValue >= 520)
    1bbc:	c9 01       	movw	r24, r18
    1bbe:	88 50       	subi	r24, 0x08	; 8
    1bc0:	92 40       	sbci	r25, 0x02	; 2
    1bc2:	88 32       	cpi	r24, 0x28	; 40
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	58 f4       	brcc	.+22     	; 0x1bde <main+0x298>
		{	controlLED (GREEN, 0xE0);	controlLED (RED, 0x00);	}
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	60 ee       	ldi	r22, 0xE0	; 224
    1bce:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1bdc:	e3 c0       	rjmp	.+454    	; 0x1da4 <main+0x45e>
		else if (gun_AdcValue < 520 && gun_AdcValue >= 480)
    1bde:	c9 01       	movw	r24, r18
    1be0:	80 5e       	subi	r24, 0xE0	; 224
    1be2:	91 40       	sbci	r25, 0x01	; 1
    1be4:	88 32       	cpi	r24, 0x28	; 40
    1be6:	91 05       	cpc	r25, r1
    1be8:	58 f4       	brcc	.+22     	; 0x1c00 <main+0x2ba>
		{	controlLED (GREEN, 0xF0);	controlLED (RED, 0x00);	}
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	60 ef       	ldi	r22, 0xF0	; 240
    1bf0:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1bfe:	d2 c0       	rjmp	.+420    	; 0x1da4 <main+0x45e>
		else if (gun_AdcValue < 480 && gun_AdcValue >= 440)
    1c00:	c9 01       	movw	r24, r18
    1c02:	88 5b       	subi	r24, 0xB8	; 184
    1c04:	91 40       	sbci	r25, 0x01	; 1
    1c06:	88 32       	cpi	r24, 0x28	; 40
    1c08:	91 05       	cpc	r25, r1
    1c0a:	58 f4       	brcc	.+22     	; 0x1c22 <main+0x2dc>
		{	controlLED (GREEN, 0xF8);	controlLED (RED, 0x00);	}
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	68 ef       	ldi	r22, 0xF8	; 248
    1c12:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1c20:	c1 c0       	rjmp	.+386    	; 0x1da4 <main+0x45e>
		else if (gun_AdcValue < 440 && gun_AdcValue >= 400)
    1c22:	c9 01       	movw	r24, r18
    1c24:	80 59       	subi	r24, 0x90	; 144
    1c26:	91 40       	sbci	r25, 0x01	; 1
    1c28:	88 32       	cpi	r24, 0x28	; 40
    1c2a:	91 05       	cpc	r25, r1
    1c2c:	58 f4       	brcc	.+22     	; 0x1c44 <main+0x2fe>
		{	controlLED (GREEN, 0xFC);	controlLED (RED, 0x00);	}
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	6c ef       	ldi	r22, 0xFC	; 252
    1c34:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1c42:	b0 c0       	rjmp	.+352    	; 0x1da4 <main+0x45e>
		else if (gun_AdcValue < 400 && gun_AdcValue >= 360)
    1c44:	c9 01       	movw	r24, r18
    1c46:	88 56       	subi	r24, 0x68	; 104
    1c48:	91 40       	sbci	r25, 0x01	; 1
    1c4a:	88 32       	cpi	r24, 0x28	; 40
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	58 f4       	brcc	.+22     	; 0x1c66 <main+0x320>
		{	controlLED (GREEN, 0xFE);	controlLED (RED, 0x00);	}
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	6e ef       	ldi	r22, 0xFE	; 254
    1c56:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1c64:	9f c0       	rjmp	.+318    	; 0x1da4 <main+0x45e>
		else if (gun_AdcValue < 360 && gun_AdcValue >= 320)
    1c66:	c9 01       	movw	r24, r18
    1c68:	80 54       	subi	r24, 0x40	; 64
    1c6a:	91 40       	sbci	r25, 0x01	; 1
    1c6c:	88 32       	cpi	r24, 0x28	; 40
    1c6e:	91 05       	cpc	r25, r1
    1c70:	58 f4       	brcc	.+22     	; 0x1c88 <main+0x342>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0x00);	}
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	6f ef       	ldi	r22, 0xFF	; 255
    1c78:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1c86:	8e c0       	rjmp	.+284    	; 0x1da4 <main+0x45e>
		else if (gun_AdcValue < 320 && gun_AdcValue >= 280)
    1c88:	c9 01       	movw	r24, r18
    1c8a:	88 51       	subi	r24, 0x18	; 24
    1c8c:	91 40       	sbci	r25, 0x01	; 1
    1c8e:	88 32       	cpi	r24, 0x28	; 40
    1c90:	91 05       	cpc	r25, r1
    1c92:	58 f4       	brcc	.+22     	; 0x1caa <main+0x364>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0x80);	}
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	6f ef       	ldi	r22, 0xFF	; 255
    1c9a:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	60 e8       	ldi	r22, 0x80	; 128
    1ca4:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1ca8:	7d c0       	rjmp	.+250    	; 0x1da4 <main+0x45e>
		else if (gun_AdcValue < 280 && gun_AdcValue >= 240)
    1caa:	c9 01       	movw	r24, r18
    1cac:	80 5f       	subi	r24, 0xF0	; 240
    1cae:	90 40       	sbci	r25, 0x00	; 0
    1cb0:	88 32       	cpi	r24, 0x28	; 40
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	58 f4       	brcc	.+22     	; 0x1ccc <main+0x386>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xC0);	}	
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	6f ef       	ldi	r22, 0xFF	; 255
    1cbc:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	60 ec       	ldi	r22, 0xC0	; 192
    1cc6:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1cca:	6c c0       	rjmp	.+216    	; 0x1da4 <main+0x45e>
		else if (gun_AdcValue < 240 && gun_AdcValue >= 200)
    1ccc:	c9 01       	movw	r24, r18
    1cce:	88 5c       	subi	r24, 0xC8	; 200
    1cd0:	90 40       	sbci	r25, 0x00	; 0
    1cd2:	88 32       	cpi	r24, 0x28	; 40
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	58 f4       	brcc	.+22     	; 0x1cee <main+0x3a8>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xE0);	}
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	6f ef       	ldi	r22, 0xFF	; 255
    1cde:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	60 ee       	ldi	r22, 0xE0	; 224
    1ce8:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1cec:	5b c0       	rjmp	.+182    	; 0x1da4 <main+0x45e>
		else if (gun_AdcValue < 200 && gun_AdcValue >= 160)
    1cee:	c9 01       	movw	r24, r18
    1cf0:	80 5a       	subi	r24, 0xA0	; 160
    1cf2:	90 40       	sbci	r25, 0x00	; 0
    1cf4:	88 32       	cpi	r24, 0x28	; 40
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	58 f4       	brcc	.+22     	; 0x1d10 <main+0x3ca>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xF0);	}
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	6f ef       	ldi	r22, 0xFF	; 255
    1d00:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	60 ef       	ldi	r22, 0xF0	; 240
    1d0a:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1d0e:	4a c0       	rjmp	.+148    	; 0x1da4 <main+0x45e>
		else if (gun_AdcValue < 160 && gun_AdcValue >= 120)
    1d10:	c9 01       	movw	r24, r18
    1d12:	88 57       	subi	r24, 0x78	; 120
    1d14:	90 40       	sbci	r25, 0x00	; 0
    1d16:	88 32       	cpi	r24, 0x28	; 40
    1d18:	91 05       	cpc	r25, r1
    1d1a:	58 f4       	brcc	.+22     	; 0x1d32 <main+0x3ec>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xF8);	}
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	6f ef       	ldi	r22, 0xFF	; 255
    1d22:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	68 ef       	ldi	r22, 0xF8	; 248
    1d2c:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1d30:	39 c0       	rjmp	.+114    	; 0x1da4 <main+0x45e>
		else if (gun_AdcValue < 120 && gun_AdcValue >= 80)
    1d32:	c9 01       	movw	r24, r18
    1d34:	80 55       	subi	r24, 0x50	; 80
    1d36:	90 40       	sbci	r25, 0x00	; 0
    1d38:	88 32       	cpi	r24, 0x28	; 40
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	58 f4       	brcc	.+22     	; 0x1d54 <main+0x40e>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xFC);	}
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	6f ef       	ldi	r22, 0xFF	; 255
    1d44:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	6c ef       	ldi	r22, 0xFC	; 252
    1d4e:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1d52:	28 c0       	rjmp	.+80     	; 0x1da4 <main+0x45e>
		else if (gun_AdcValue < 80 && gun_AdcValue >= 40)
    1d54:	c9 01       	movw	r24, r18
    1d56:	88 97       	sbiw	r24, 0x28	; 40
    1d58:	88 32       	cpi	r24, 0x28	; 40
    1d5a:	91 05       	cpc	r25, r1
    1d5c:	58 f4       	brcc	.+22     	; 0x1d74 <main+0x42e>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xFE);	}
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	6f ef       	ldi	r22, 0xFF	; 255
    1d64:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	6e ef       	ldi	r22, 0xFE	; 254
    1d6e:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1d72:	18 c0       	rjmp	.+48     	; 0x1da4 <main+0x45e>
		else if (gun_AdcValue < 40 && gun_AdcValue >= 0)
    1d74:	28 32       	cpi	r18, 0x28	; 40
    1d76:	31 05       	cpc	r19, r1
    1d78:	58 f4       	brcc	.+22     	; 0x1d90 <main+0x44a>
		{	controlLED (GREEN, 0xFF);	controlLED (RED, 0xFF);	}
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	6f ef       	ldi	r22, 0xFF	; 255
    1d80:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	6f ef       	ldi	r22, 0xFF	; 255
    1d8a:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1d8e:	0a c0       	rjmp	.+20     	; 0x1da4 <main+0x45e>
		else
		{	controlLED (GREEN, 0x00);	controlLED (RED, 0x00);	}//-------------------------^ºˆ¡§∫Œ∫–
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	60 e0       	ldi	r22, 0x00	; 0
    1da0:	0e 94 36 01 	call	0x26c	; 0x26c <controlLED>
		



        //TODO:: Please write your application code 
		wifiMain();
    1da4:	0e 94 44 05 	call	0xa88	; 0xa88 <wifiMain>
		
		if ( isElapsed())
    1da8:	0e 94 85 0c 	call	0x190a	; 0x190a <isElapsed>
    1dac:	88 23       	and	r24, r24
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <main+0x46c>
    1db0:	ce ce       	rjmp	.-612    	; 0x1b4e <main+0x208>
		{
			sprintf(strTemp,"hello:%d CDS : %d\r\n",counter++, gun_AdcValue);		//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫– 
    1db2:	86 01       	movw	r16, r12
    1db4:	0f 5f       	subi	r16, 0xFF	; 255
    1db6:	1f 4f       	sbci	r17, 0xFF	; 255
    1db8:	8d b7       	in	r24, 0x3d	; 61
    1dba:	9e b7       	in	r25, 0x3e	; 62
    1dbc:	08 97       	sbiw	r24, 0x08	; 8
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	9e bf       	out	0x3e, r25	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	8d bf       	out	0x3d, r24	; 61
    1dc8:	ed b7       	in	r30, 0x3d	; 61
    1dca:	fe b7       	in	r31, 0x3e	; 62
    1dcc:	31 96       	adiw	r30, 0x01	; 1
    1dce:	ad b7       	in	r26, 0x3d	; 61
    1dd0:	be b7       	in	r27, 0x3e	; 62
    1dd2:	12 96       	adiw	r26, 0x02	; 2
    1dd4:	fc 92       	st	X, r15
    1dd6:	ee 92       	st	-X, r14
    1dd8:	11 97       	sbiw	r26, 0x01	; 1
    1dda:	b3 82       	std	Z+3, r11	; 0x03
    1ddc:	a2 82       	std	Z+2, r10	; 0x02
    1dde:	d5 82       	std	Z+5, r13	; 0x05
    1de0:	c4 82       	std	Z+4, r12	; 0x04
    1de2:	80 91 51 04 	lds	r24, 0x0451
    1de6:	90 91 52 04 	lds	r25, 0x0452
    1dea:	97 83       	std	Z+7, r25	; 0x07
    1dec:	86 83       	std	Z+6, r24	; 0x06
    1dee:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <sprintf>
			wifiSendData(strTemp, strlen(strTemp));			//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
    1df2:	f7 01       	movw	r30, r14
    1df4:	01 90       	ld	r0, Z+
    1df6:	00 20       	and	r0, r0
    1df8:	e9 f7       	brne	.-6      	; 0x1df4 <main+0x4ae>
    1dfa:	bf 01       	movw	r22, r30
    1dfc:	61 50       	subi	r22, 0x01	; 1
    1dfe:	70 40       	sbci	r23, 0x00	; 0
    1e00:	6e 19       	sub	r22, r14
    1e02:	7f 09       	sbc	r23, r15
    1e04:	8d b7       	in	r24, 0x3d	; 61
    1e06:	9e b7       	in	r25, 0x3e	; 62
    1e08:	08 96       	adiw	r24, 0x08	; 8
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	9e bf       	out	0x3e, r25	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	8d bf       	out	0x3d, r24	; 61
    1e14:	c7 01       	movw	r24, r14
    1e16:	0e 94 4e 08 	call	0x109c	; 0x109c <wifiSendData>
			debugprint("TX:%s\r\n",strTemp);				//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
    1e1a:	00 d0       	rcall	.+0      	; 0x1e1c <main+0x4d6>
    1e1c:	0f 92       	push	r0
    1e1e:	ad b7       	in	r26, 0x3d	; 61
    1e20:	be b7       	in	r27, 0x3e	; 62
    1e22:	12 96       	adiw	r26, 0x02	; 2
    1e24:	9c 92       	st	X, r9
    1e26:	8e 92       	st	-X, r8
    1e28:	11 97       	sbiw	r26, 0x01	; 1
    1e2a:	14 96       	adiw	r26, 0x04	; 4
    1e2c:	fc 92       	st	X, r15
    1e2e:	ee 92       	st	-X, r14
    1e30:	13 97       	sbiw	r26, 0x03	; 3
    1e32:	0e 94 c1 01 	call	0x382	; 0x382 <debugprint>
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
        //TODO:: Please write your application code 
		wifiMain();
		
		if ( isElapsed())
		{
			sprintf(strTemp,"hello:%d CDS : %d\r\n",counter++, gun_AdcValue);		//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫– 
    1e3e:	68 01       	movw	r12, r16
    1e40:	86 ce       	rjmp	.-756    	; 0x1b4e <main+0x208>

00001e42 <atoi>:
    1e42:	fc 01       	movw	r30, r24
    1e44:	88 27       	eor	r24, r24
    1e46:	99 27       	eor	r25, r25
    1e48:	e8 94       	clt
    1e4a:	21 91       	ld	r18, Z+
    1e4c:	20 32       	cpi	r18, 0x20	; 32
    1e4e:	e9 f3       	breq	.-6      	; 0x1e4a <atoi+0x8>
    1e50:	29 30       	cpi	r18, 0x09	; 9
    1e52:	10 f0       	brcs	.+4      	; 0x1e58 <atoi+0x16>
    1e54:	2e 30       	cpi	r18, 0x0E	; 14
    1e56:	c8 f3       	brcs	.-14     	; 0x1e4a <atoi+0x8>
    1e58:	2b 32       	cpi	r18, 0x2B	; 43
    1e5a:	41 f0       	breq	.+16     	; 0x1e6c <atoi+0x2a>
    1e5c:	2d 32       	cpi	r18, 0x2D	; 45
    1e5e:	39 f4       	brne	.+14     	; 0x1e6e <atoi+0x2c>
    1e60:	68 94       	set
    1e62:	04 c0       	rjmp	.+8      	; 0x1e6c <atoi+0x2a>
    1e64:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__mulhi_const_10>
    1e68:	82 0f       	add	r24, r18
    1e6a:	91 1d       	adc	r25, r1
    1e6c:	21 91       	ld	r18, Z+
    1e6e:	20 53       	subi	r18, 0x30	; 48
    1e70:	2a 30       	cpi	r18, 0x0A	; 10
    1e72:	c0 f3       	brcs	.-16     	; 0x1e64 <atoi+0x22>
    1e74:	1e f4       	brtc	.+6      	; 0x1e7c <atoi+0x3a>
    1e76:	90 95       	com	r25
    1e78:	81 95       	neg	r24
    1e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7c:	08 95       	ret

00001e7e <memcpy>:
    1e7e:	fb 01       	movw	r30, r22
    1e80:	dc 01       	movw	r26, r24
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <memcpy+0xa>
    1e84:	01 90       	ld	r0, Z+
    1e86:	0d 92       	st	X+, r0
    1e88:	41 50       	subi	r20, 0x01	; 1
    1e8a:	50 40       	sbci	r21, 0x00	; 0
    1e8c:	d8 f7       	brcc	.-10     	; 0x1e84 <memcpy+0x6>
    1e8e:	08 95       	ret

00001e90 <strncmp>:
    1e90:	fb 01       	movw	r30, r22
    1e92:	dc 01       	movw	r26, r24
    1e94:	41 50       	subi	r20, 0x01	; 1
    1e96:	50 40       	sbci	r21, 0x00	; 0
    1e98:	30 f0       	brcs	.+12     	; 0x1ea6 <strncmp+0x16>
    1e9a:	8d 91       	ld	r24, X+
    1e9c:	01 90       	ld	r0, Z+
    1e9e:	80 19       	sub	r24, r0
    1ea0:	19 f4       	brne	.+6      	; 0x1ea8 <strncmp+0x18>
    1ea2:	00 20       	and	r0, r0
    1ea4:	b9 f7       	brne	.-18     	; 0x1e94 <strncmp+0x4>
    1ea6:	88 1b       	sub	r24, r24
    1ea8:	99 0b       	sbc	r25, r25
    1eaa:	08 95       	ret

00001eac <__mulhi_const_10>:
    1eac:	7a e0       	ldi	r23, 0x0A	; 10
    1eae:	97 9f       	mul	r25, r23
    1eb0:	90 2d       	mov	r25, r0
    1eb2:	87 9f       	mul	r24, r23
    1eb4:	80 2d       	mov	r24, r0
    1eb6:	91 0d       	add	r25, r1
    1eb8:	11 24       	eor	r1, r1
    1eba:	08 95       	ret

00001ebc <sprintf>:
    1ebc:	0f 93       	push	r16
    1ebe:	1f 93       	push	r17
    1ec0:	cf 93       	push	r28
    1ec2:	df 93       	push	r29
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	2e 97       	sbiw	r28, 0x0e	; 14
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	0e 89       	ldd	r16, Y+22	; 0x16
    1ed6:	1f 89       	ldd	r17, Y+23	; 0x17
    1ed8:	86 e0       	ldi	r24, 0x06	; 6
    1eda:	8c 83       	std	Y+4, r24	; 0x04
    1edc:	1a 83       	std	Y+2, r17	; 0x02
    1ede:	09 83       	std	Y+1, r16	; 0x01
    1ee0:	8f ef       	ldi	r24, 0xFF	; 255
    1ee2:	9f e7       	ldi	r25, 0x7F	; 127
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
    1ee8:	ae 01       	movw	r20, r28
    1eea:	46 5e       	subi	r20, 0xE6	; 230
    1eec:	5f 4f       	sbci	r21, 0xFF	; 255
    1eee:	ce 01       	movw	r24, r28
    1ef0:	01 96       	adiw	r24, 0x01	; 1
    1ef2:	68 8d       	ldd	r22, Y+24	; 0x18
    1ef4:	79 8d       	ldd	r23, Y+25	; 0x19
    1ef6:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <vfprintf>
    1efa:	ef 81       	ldd	r30, Y+7	; 0x07
    1efc:	f8 85       	ldd	r31, Y+8	; 0x08
    1efe:	e0 0f       	add	r30, r16
    1f00:	f1 1f       	adc	r31, r17
    1f02:	10 82       	st	Z, r1
    1f04:	2e 96       	adiw	r28, 0x0e	; 14
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	1f 91       	pop	r17
    1f16:	0f 91       	pop	r16
    1f18:	08 95       	ret

00001f1a <vsprintf>:
    1f1a:	0f 93       	push	r16
    1f1c:	1f 93       	push	r17
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	2e 97       	sbiw	r28, 0x0e	; 14
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	8c 01       	movw	r16, r24
    1f34:	86 e0       	ldi	r24, 0x06	; 6
    1f36:	8c 83       	std	Y+4, r24	; 0x04
    1f38:	1a 83       	std	Y+2, r17	; 0x02
    1f3a:	09 83       	std	Y+1, r16	; 0x01
    1f3c:	8f ef       	ldi	r24, 0xFF	; 255
    1f3e:	9f e7       	ldi	r25, 0x7F	; 127
    1f40:	9e 83       	std	Y+6, r25	; 0x06
    1f42:	8d 83       	std	Y+5, r24	; 0x05
    1f44:	ce 01       	movw	r24, r28
    1f46:	01 96       	adiw	r24, 0x01	; 1
    1f48:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <vfprintf>
    1f4c:	ef 81       	ldd	r30, Y+7	; 0x07
    1f4e:	f8 85       	ldd	r31, Y+8	; 0x08
    1f50:	e0 0f       	add	r30, r16
    1f52:	f1 1f       	adc	r31, r17
    1f54:	10 82       	st	Z, r1
    1f56:	2e 96       	adiw	r28, 0x0e	; 14
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	1f 91       	pop	r17
    1f68:	0f 91       	pop	r16
    1f6a:	08 95       	ret

00001f6c <vfprintf>:
    1f6c:	2f 92       	push	r2
    1f6e:	3f 92       	push	r3
    1f70:	4f 92       	push	r4
    1f72:	5f 92       	push	r5
    1f74:	6f 92       	push	r6
    1f76:	7f 92       	push	r7
    1f78:	8f 92       	push	r8
    1f7a:	9f 92       	push	r9
    1f7c:	af 92       	push	r10
    1f7e:	bf 92       	push	r11
    1f80:	cf 92       	push	r12
    1f82:	df 92       	push	r13
    1f84:	ef 92       	push	r14
    1f86:	ff 92       	push	r15
    1f88:	0f 93       	push	r16
    1f8a:	1f 93       	push	r17
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	2d 97       	sbiw	r28, 0x0d	; 13
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	3c 01       	movw	r6, r24
    1fa2:	7d 87       	std	Y+13, r23	; 0x0d
    1fa4:	6c 87       	std	Y+12, r22	; 0x0c
    1fa6:	5a 01       	movw	r10, r20
    1fa8:	fc 01       	movw	r30, r24
    1faa:	17 82       	std	Z+7, r1	; 0x07
    1fac:	16 82       	std	Z+6, r1	; 0x06
    1fae:	83 81       	ldd	r24, Z+3	; 0x03
    1fb0:	81 ff       	sbrs	r24, 1
    1fb2:	c8 c1       	rjmp	.+912    	; 0x2344 <__stack+0x145>
    1fb4:	2e 01       	movw	r4, r28
    1fb6:	08 94       	sec
    1fb8:	41 1c       	adc	r4, r1
    1fba:	51 1c       	adc	r5, r1
    1fbc:	f3 01       	movw	r30, r6
    1fbe:	93 81       	ldd	r25, Z+3	; 0x03
    1fc0:	ec 85       	ldd	r30, Y+12	; 0x0c
    1fc2:	fd 85       	ldd	r31, Y+13	; 0x0d
    1fc4:	93 fd       	sbrc	r25, 3
    1fc6:	85 91       	lpm	r24, Z+
    1fc8:	93 ff       	sbrs	r25, 3
    1fca:	81 91       	ld	r24, Z+
    1fcc:	fd 87       	std	Y+13, r31	; 0x0d
    1fce:	ec 87       	std	Y+12, r30	; 0x0c
    1fd0:	88 23       	and	r24, r24
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <vfprintf+0x6a>
    1fd4:	b3 c1       	rjmp	.+870    	; 0x233c <__stack+0x13d>
    1fd6:	85 32       	cpi	r24, 0x25	; 37
    1fd8:	41 f4       	brne	.+16     	; 0x1fea <vfprintf+0x7e>
    1fda:	93 fd       	sbrc	r25, 3
    1fdc:	85 91       	lpm	r24, Z+
    1fde:	93 ff       	sbrs	r25, 3
    1fe0:	81 91       	ld	r24, Z+
    1fe2:	fd 87       	std	Y+13, r31	; 0x0d
    1fe4:	ec 87       	std	Y+12, r30	; 0x0c
    1fe6:	85 32       	cpi	r24, 0x25	; 37
    1fe8:	29 f4       	brne	.+10     	; 0x1ff4 <vfprintf+0x88>
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	b3 01       	movw	r22, r6
    1fee:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <fputc>
    1ff2:	e4 cf       	rjmp	.-56     	; 0x1fbc <vfprintf+0x50>
    1ff4:	ff 24       	eor	r15, r15
    1ff6:	ee 24       	eor	r14, r14
    1ff8:	10 e0       	ldi	r17, 0x00	; 0
    1ffa:	10 32       	cpi	r17, 0x20	; 32
    1ffc:	b0 f4       	brcc	.+44     	; 0x202a <vfprintf+0xbe>
    1ffe:	8b 32       	cpi	r24, 0x2B	; 43
    2000:	69 f0       	breq	.+26     	; 0x201c <vfprintf+0xb0>
    2002:	8c 32       	cpi	r24, 0x2C	; 44
    2004:	28 f4       	brcc	.+10     	; 0x2010 <vfprintf+0xa4>
    2006:	80 32       	cpi	r24, 0x20	; 32
    2008:	51 f0       	breq	.+20     	; 0x201e <vfprintf+0xb2>
    200a:	83 32       	cpi	r24, 0x23	; 35
    200c:	71 f4       	brne	.+28     	; 0x202a <vfprintf+0xbe>
    200e:	0b c0       	rjmp	.+22     	; 0x2026 <vfprintf+0xba>
    2010:	8d 32       	cpi	r24, 0x2D	; 45
    2012:	39 f0       	breq	.+14     	; 0x2022 <vfprintf+0xb6>
    2014:	80 33       	cpi	r24, 0x30	; 48
    2016:	49 f4       	brne	.+18     	; 0x202a <vfprintf+0xbe>
    2018:	11 60       	ori	r17, 0x01	; 1
    201a:	2c c0       	rjmp	.+88     	; 0x2074 <vfprintf+0x108>
    201c:	12 60       	ori	r17, 0x02	; 2
    201e:	14 60       	ori	r17, 0x04	; 4
    2020:	29 c0       	rjmp	.+82     	; 0x2074 <vfprintf+0x108>
    2022:	18 60       	ori	r17, 0x08	; 8
    2024:	27 c0       	rjmp	.+78     	; 0x2074 <vfprintf+0x108>
    2026:	10 61       	ori	r17, 0x10	; 16
    2028:	25 c0       	rjmp	.+74     	; 0x2074 <vfprintf+0x108>
    202a:	17 fd       	sbrc	r17, 7
    202c:	2e c0       	rjmp	.+92     	; 0x208a <vfprintf+0x11e>
    202e:	28 2f       	mov	r18, r24
    2030:	20 53       	subi	r18, 0x30	; 48
    2032:	2a 30       	cpi	r18, 0x0A	; 10
    2034:	98 f4       	brcc	.+38     	; 0x205c <vfprintf+0xf0>
    2036:	16 ff       	sbrs	r17, 6
    2038:	08 c0       	rjmp	.+16     	; 0x204a <vfprintf+0xde>
    203a:	8f 2d       	mov	r24, r15
    203c:	88 0f       	add	r24, r24
    203e:	f8 2e       	mov	r15, r24
    2040:	ff 0c       	add	r15, r15
    2042:	ff 0c       	add	r15, r15
    2044:	f8 0e       	add	r15, r24
    2046:	f2 0e       	add	r15, r18
    2048:	15 c0       	rjmp	.+42     	; 0x2074 <vfprintf+0x108>
    204a:	8e 2d       	mov	r24, r14
    204c:	88 0f       	add	r24, r24
    204e:	e8 2e       	mov	r14, r24
    2050:	ee 0c       	add	r14, r14
    2052:	ee 0c       	add	r14, r14
    2054:	e8 0e       	add	r14, r24
    2056:	e2 0e       	add	r14, r18
    2058:	10 62       	ori	r17, 0x20	; 32
    205a:	0c c0       	rjmp	.+24     	; 0x2074 <vfprintf+0x108>
    205c:	8e 32       	cpi	r24, 0x2E	; 46
    205e:	21 f4       	brne	.+8      	; 0x2068 <vfprintf+0xfc>
    2060:	16 fd       	sbrc	r17, 6
    2062:	6c c1       	rjmp	.+728    	; 0x233c <__stack+0x13d>
    2064:	10 64       	ori	r17, 0x40	; 64
    2066:	06 c0       	rjmp	.+12     	; 0x2074 <vfprintf+0x108>
    2068:	8c 36       	cpi	r24, 0x6C	; 108
    206a:	11 f4       	brne	.+4      	; 0x2070 <vfprintf+0x104>
    206c:	10 68       	ori	r17, 0x80	; 128
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <vfprintf+0x108>
    2070:	88 36       	cpi	r24, 0x68	; 104
    2072:	59 f4       	brne	.+22     	; 0x208a <vfprintf+0x11e>
    2074:	ec 85       	ldd	r30, Y+12	; 0x0c
    2076:	fd 85       	ldd	r31, Y+13	; 0x0d
    2078:	93 fd       	sbrc	r25, 3
    207a:	85 91       	lpm	r24, Z+
    207c:	93 ff       	sbrs	r25, 3
    207e:	81 91       	ld	r24, Z+
    2080:	fd 87       	std	Y+13, r31	; 0x0d
    2082:	ec 87       	std	Y+12, r30	; 0x0c
    2084:	88 23       	and	r24, r24
    2086:	09 f0       	breq	.+2      	; 0x208a <vfprintf+0x11e>
    2088:	b8 cf       	rjmp	.-144    	; 0x1ffa <vfprintf+0x8e>
    208a:	98 2f       	mov	r25, r24
    208c:	95 54       	subi	r25, 0x45	; 69
    208e:	93 30       	cpi	r25, 0x03	; 3
    2090:	18 f0       	brcs	.+6      	; 0x2098 <vfprintf+0x12c>
    2092:	90 52       	subi	r25, 0x20	; 32
    2094:	93 30       	cpi	r25, 0x03	; 3
    2096:	38 f4       	brcc	.+14     	; 0x20a6 <vfprintf+0x13a>
    2098:	24 e0       	ldi	r18, 0x04	; 4
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	a2 0e       	add	r10, r18
    209e:	b3 1e       	adc	r11, r19
    20a0:	3f e3       	ldi	r19, 0x3F	; 63
    20a2:	39 83       	std	Y+1, r19	; 0x01
    20a4:	0f c0       	rjmp	.+30     	; 0x20c4 <vfprintf+0x158>
    20a6:	83 36       	cpi	r24, 0x63	; 99
    20a8:	31 f0       	breq	.+12     	; 0x20b6 <vfprintf+0x14a>
    20aa:	83 37       	cpi	r24, 0x73	; 115
    20ac:	81 f0       	breq	.+32     	; 0x20ce <vfprintf+0x162>
    20ae:	83 35       	cpi	r24, 0x53	; 83
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <vfprintf+0x148>
    20b2:	5a c0       	rjmp	.+180    	; 0x2168 <vfprintf+0x1fc>
    20b4:	22 c0       	rjmp	.+68     	; 0x20fa <vfprintf+0x18e>
    20b6:	f5 01       	movw	r30, r10
    20b8:	80 81       	ld	r24, Z
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	22 e0       	ldi	r18, 0x02	; 2
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	a2 0e       	add	r10, r18
    20c2:	b3 1e       	adc	r11, r19
    20c4:	21 e0       	ldi	r18, 0x01	; 1
    20c6:	c2 2e       	mov	r12, r18
    20c8:	d1 2c       	mov	r13, r1
    20ca:	42 01       	movw	r8, r4
    20cc:	14 c0       	rjmp	.+40     	; 0x20f6 <vfprintf+0x18a>
    20ce:	92 e0       	ldi	r25, 0x02	; 2
    20d0:	29 2e       	mov	r2, r25
    20d2:	31 2c       	mov	r3, r1
    20d4:	2a 0c       	add	r2, r10
    20d6:	3b 1c       	adc	r3, r11
    20d8:	f5 01       	movw	r30, r10
    20da:	80 80       	ld	r8, Z
    20dc:	91 80       	ldd	r9, Z+1	; 0x01
    20de:	16 ff       	sbrs	r17, 6
    20e0:	03 c0       	rjmp	.+6      	; 0x20e8 <vfprintf+0x17c>
    20e2:	6f 2d       	mov	r22, r15
    20e4:	70 e0       	ldi	r23, 0x00	; 0
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <vfprintf+0x180>
    20e8:	6f ef       	ldi	r22, 0xFF	; 255
    20ea:	7f ef       	ldi	r23, 0xFF	; 255
    20ec:	c4 01       	movw	r24, r8
    20ee:	0e 94 c8 11 	call	0x2390	; 0x2390 <strnlen>
    20f2:	6c 01       	movw	r12, r24
    20f4:	51 01       	movw	r10, r2
    20f6:	1f 77       	andi	r17, 0x7F	; 127
    20f8:	15 c0       	rjmp	.+42     	; 0x2124 <vfprintf+0x1b8>
    20fa:	82 e0       	ldi	r24, 0x02	; 2
    20fc:	28 2e       	mov	r2, r24
    20fe:	31 2c       	mov	r3, r1
    2100:	2a 0c       	add	r2, r10
    2102:	3b 1c       	adc	r3, r11
    2104:	f5 01       	movw	r30, r10
    2106:	80 80       	ld	r8, Z
    2108:	91 80       	ldd	r9, Z+1	; 0x01
    210a:	16 ff       	sbrs	r17, 6
    210c:	03 c0       	rjmp	.+6      	; 0x2114 <vfprintf+0x1a8>
    210e:	6f 2d       	mov	r22, r15
    2110:	70 e0       	ldi	r23, 0x00	; 0
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <vfprintf+0x1ac>
    2114:	6f ef       	ldi	r22, 0xFF	; 255
    2116:	7f ef       	ldi	r23, 0xFF	; 255
    2118:	c4 01       	movw	r24, r8
    211a:	0e 94 bd 11 	call	0x237a	; 0x237a <strnlen_P>
    211e:	6c 01       	movw	r12, r24
    2120:	10 68       	ori	r17, 0x80	; 128
    2122:	51 01       	movw	r10, r2
    2124:	13 fd       	sbrc	r17, 3
    2126:	1c c0       	rjmp	.+56     	; 0x2160 <vfprintf+0x1f4>
    2128:	06 c0       	rjmp	.+12     	; 0x2136 <vfprintf+0x1ca>
    212a:	80 e2       	ldi	r24, 0x20	; 32
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	b3 01       	movw	r22, r6
    2130:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <fputc>
    2134:	ea 94       	dec	r14
    2136:	8e 2d       	mov	r24, r14
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	c8 16       	cp	r12, r24
    213c:	d9 06       	cpc	r13, r25
    213e:	a8 f3       	brcs	.-22     	; 0x212a <vfprintf+0x1be>
    2140:	0f c0       	rjmp	.+30     	; 0x2160 <vfprintf+0x1f4>
    2142:	f4 01       	movw	r30, r8
    2144:	17 fd       	sbrc	r17, 7
    2146:	85 91       	lpm	r24, Z+
    2148:	17 ff       	sbrs	r17, 7
    214a:	81 91       	ld	r24, Z+
    214c:	4f 01       	movw	r8, r30
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	b3 01       	movw	r22, r6
    2152:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <fputc>
    2156:	e1 10       	cpse	r14, r1
    2158:	ea 94       	dec	r14
    215a:	08 94       	sec
    215c:	c1 08       	sbc	r12, r1
    215e:	d1 08       	sbc	r13, r1
    2160:	c1 14       	cp	r12, r1
    2162:	d1 04       	cpc	r13, r1
    2164:	71 f7       	brne	.-36     	; 0x2142 <vfprintf+0x1d6>
    2166:	e7 c0       	rjmp	.+462    	; 0x2336 <__stack+0x137>
    2168:	84 36       	cpi	r24, 0x64	; 100
    216a:	11 f0       	breq	.+4      	; 0x2170 <vfprintf+0x204>
    216c:	89 36       	cpi	r24, 0x69	; 105
    216e:	51 f5       	brne	.+84     	; 0x21c4 <vfprintf+0x258>
    2170:	f5 01       	movw	r30, r10
    2172:	17 ff       	sbrs	r17, 7
    2174:	07 c0       	rjmp	.+14     	; 0x2184 <vfprintf+0x218>
    2176:	80 81       	ld	r24, Z
    2178:	91 81       	ldd	r25, Z+1	; 0x01
    217a:	a2 81       	ldd	r26, Z+2	; 0x02
    217c:	b3 81       	ldd	r27, Z+3	; 0x03
    217e:	24 e0       	ldi	r18, 0x04	; 4
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	08 c0       	rjmp	.+16     	; 0x2194 <vfprintf+0x228>
    2184:	80 81       	ld	r24, Z
    2186:	91 81       	ldd	r25, Z+1	; 0x01
    2188:	aa 27       	eor	r26, r26
    218a:	97 fd       	sbrc	r25, 7
    218c:	a0 95       	com	r26
    218e:	ba 2f       	mov	r27, r26
    2190:	22 e0       	ldi	r18, 0x02	; 2
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	a2 0e       	add	r10, r18
    2196:	b3 1e       	adc	r11, r19
    2198:	01 2f       	mov	r16, r17
    219a:	0f 76       	andi	r16, 0x6F	; 111
    219c:	b7 ff       	sbrs	r27, 7
    219e:	08 c0       	rjmp	.+16     	; 0x21b0 <vfprintf+0x244>
    21a0:	b0 95       	com	r27
    21a2:	a0 95       	com	r26
    21a4:	90 95       	com	r25
    21a6:	81 95       	neg	r24
    21a8:	9f 4f       	sbci	r25, 0xFF	; 255
    21aa:	af 4f       	sbci	r26, 0xFF	; 255
    21ac:	bf 4f       	sbci	r27, 0xFF	; 255
    21ae:	00 68       	ori	r16, 0x80	; 128
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	a2 01       	movw	r20, r4
    21b6:	2a e0       	ldi	r18, 0x0A	; 10
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__ultoa_invert>
    21be:	d8 2e       	mov	r13, r24
    21c0:	d4 18       	sub	r13, r4
    21c2:	3f c0       	rjmp	.+126    	; 0x2242 <__stack+0x43>
    21c4:	85 37       	cpi	r24, 0x75	; 117
    21c6:	21 f4       	brne	.+8      	; 0x21d0 <vfprintf+0x264>
    21c8:	1f 7e       	andi	r17, 0xEF	; 239
    21ca:	2a e0       	ldi	r18, 0x0A	; 10
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	20 c0       	rjmp	.+64     	; 0x2210 <__stack+0x11>
    21d0:	19 7f       	andi	r17, 0xF9	; 249
    21d2:	8f 36       	cpi	r24, 0x6F	; 111
    21d4:	a9 f0       	breq	.+42     	; 0x2200 <__stack+0x1>
    21d6:	80 37       	cpi	r24, 0x70	; 112
    21d8:	20 f4       	brcc	.+8      	; 0x21e2 <vfprintf+0x276>
    21da:	88 35       	cpi	r24, 0x58	; 88
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <vfprintf+0x274>
    21de:	ae c0       	rjmp	.+348    	; 0x233c <__stack+0x13d>
    21e0:	0b c0       	rjmp	.+22     	; 0x21f8 <vfprintf+0x28c>
    21e2:	80 37       	cpi	r24, 0x70	; 112
    21e4:	21 f0       	breq	.+8      	; 0x21ee <vfprintf+0x282>
    21e6:	88 37       	cpi	r24, 0x78	; 120
    21e8:	09 f0       	breq	.+2      	; 0x21ec <vfprintf+0x280>
    21ea:	a8 c0       	rjmp	.+336    	; 0x233c <__stack+0x13d>
    21ec:	01 c0       	rjmp	.+2      	; 0x21f0 <vfprintf+0x284>
    21ee:	10 61       	ori	r17, 0x10	; 16
    21f0:	14 ff       	sbrs	r17, 4
    21f2:	09 c0       	rjmp	.+18     	; 0x2206 <__stack+0x7>
    21f4:	14 60       	ori	r17, 0x04	; 4
    21f6:	07 c0       	rjmp	.+14     	; 0x2206 <__stack+0x7>
    21f8:	14 ff       	sbrs	r17, 4
    21fa:	08 c0       	rjmp	.+16     	; 0x220c <__stack+0xd>
    21fc:	16 60       	ori	r17, 0x06	; 6
    21fe:	06 c0       	rjmp	.+12     	; 0x220c <__stack+0xd>
    2200:	28 e0       	ldi	r18, 0x08	; 8
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	05 c0       	rjmp	.+10     	; 0x2210 <__stack+0x11>
    2206:	20 e1       	ldi	r18, 0x10	; 16
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <__stack+0x11>
    220c:	20 e1       	ldi	r18, 0x10	; 16
    220e:	32 e0       	ldi	r19, 0x02	; 2
    2210:	f5 01       	movw	r30, r10
    2212:	17 ff       	sbrs	r17, 7
    2214:	07 c0       	rjmp	.+14     	; 0x2224 <__stack+0x25>
    2216:	60 81       	ld	r22, Z
    2218:	71 81       	ldd	r23, Z+1	; 0x01
    221a:	82 81       	ldd	r24, Z+2	; 0x02
    221c:	93 81       	ldd	r25, Z+3	; 0x03
    221e:	44 e0       	ldi	r20, 0x04	; 4
    2220:	50 e0       	ldi	r21, 0x00	; 0
    2222:	06 c0       	rjmp	.+12     	; 0x2230 <__stack+0x31>
    2224:	60 81       	ld	r22, Z
    2226:	71 81       	ldd	r23, Z+1	; 0x01
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	42 e0       	ldi	r20, 0x02	; 2
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	a4 0e       	add	r10, r20
    2232:	b5 1e       	adc	r11, r21
    2234:	a2 01       	movw	r20, r4
    2236:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__ultoa_invert>
    223a:	d8 2e       	mov	r13, r24
    223c:	d4 18       	sub	r13, r4
    223e:	01 2f       	mov	r16, r17
    2240:	0f 77       	andi	r16, 0x7F	; 127
    2242:	06 ff       	sbrs	r16, 6
    2244:	09 c0       	rjmp	.+18     	; 0x2258 <__stack+0x59>
    2246:	0e 7f       	andi	r16, 0xFE	; 254
    2248:	df 14       	cp	r13, r15
    224a:	30 f4       	brcc	.+12     	; 0x2258 <__stack+0x59>
    224c:	04 ff       	sbrs	r16, 4
    224e:	06 c0       	rjmp	.+12     	; 0x225c <__stack+0x5d>
    2250:	02 fd       	sbrc	r16, 2
    2252:	04 c0       	rjmp	.+8      	; 0x225c <__stack+0x5d>
    2254:	0f 7e       	andi	r16, 0xEF	; 239
    2256:	02 c0       	rjmp	.+4      	; 0x225c <__stack+0x5d>
    2258:	1d 2d       	mov	r17, r13
    225a:	01 c0       	rjmp	.+2      	; 0x225e <__stack+0x5f>
    225c:	1f 2d       	mov	r17, r15
    225e:	80 2f       	mov	r24, r16
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	04 ff       	sbrs	r16, 4
    2264:	0c c0       	rjmp	.+24     	; 0x227e <__stack+0x7f>
    2266:	fe 01       	movw	r30, r28
    2268:	ed 0d       	add	r30, r13
    226a:	f1 1d       	adc	r31, r1
    226c:	20 81       	ld	r18, Z
    226e:	20 33       	cpi	r18, 0x30	; 48
    2270:	11 f4       	brne	.+4      	; 0x2276 <__stack+0x77>
    2272:	09 7e       	andi	r16, 0xE9	; 233
    2274:	09 c0       	rjmp	.+18     	; 0x2288 <__stack+0x89>
    2276:	02 ff       	sbrs	r16, 2
    2278:	06 c0       	rjmp	.+12     	; 0x2286 <__stack+0x87>
    227a:	1e 5f       	subi	r17, 0xFE	; 254
    227c:	05 c0       	rjmp	.+10     	; 0x2288 <__stack+0x89>
    227e:	86 78       	andi	r24, 0x86	; 134
    2280:	90 70       	andi	r25, 0x00	; 0
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	09 f0       	breq	.+2      	; 0x2288 <__stack+0x89>
    2286:	1f 5f       	subi	r17, 0xFF	; 255
    2288:	80 2e       	mov	r8, r16
    228a:	99 24       	eor	r9, r9
    228c:	03 fd       	sbrc	r16, 3
    228e:	12 c0       	rjmp	.+36     	; 0x22b4 <__stack+0xb5>
    2290:	00 ff       	sbrs	r16, 0
    2292:	0d c0       	rjmp	.+26     	; 0x22ae <__stack+0xaf>
    2294:	fd 2c       	mov	r15, r13
    2296:	1e 15       	cp	r17, r14
    2298:	50 f4       	brcc	.+20     	; 0x22ae <__stack+0xaf>
    229a:	fe 0c       	add	r15, r14
    229c:	f1 1a       	sub	r15, r17
    229e:	1e 2d       	mov	r17, r14
    22a0:	06 c0       	rjmp	.+12     	; 0x22ae <__stack+0xaf>
    22a2:	80 e2       	ldi	r24, 0x20	; 32
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	b3 01       	movw	r22, r6
    22a8:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <fputc>
    22ac:	1f 5f       	subi	r17, 0xFF	; 255
    22ae:	1e 15       	cp	r17, r14
    22b0:	c0 f3       	brcs	.-16     	; 0x22a2 <__stack+0xa3>
    22b2:	04 c0       	rjmp	.+8      	; 0x22bc <__stack+0xbd>
    22b4:	1e 15       	cp	r17, r14
    22b6:	10 f4       	brcc	.+4      	; 0x22bc <__stack+0xbd>
    22b8:	e1 1a       	sub	r14, r17
    22ba:	01 c0       	rjmp	.+2      	; 0x22be <__stack+0xbf>
    22bc:	ee 24       	eor	r14, r14
    22be:	84 fe       	sbrs	r8, 4
    22c0:	0f c0       	rjmp	.+30     	; 0x22e0 <__stack+0xe1>
    22c2:	80 e3       	ldi	r24, 0x30	; 48
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	b3 01       	movw	r22, r6
    22c8:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <fputc>
    22cc:	82 fe       	sbrs	r8, 2
    22ce:	1f c0       	rjmp	.+62     	; 0x230e <__stack+0x10f>
    22d0:	81 fe       	sbrs	r8, 1
    22d2:	03 c0       	rjmp	.+6      	; 0x22da <__stack+0xdb>
    22d4:	88 e5       	ldi	r24, 0x58	; 88
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	10 c0       	rjmp	.+32     	; 0x22fa <__stack+0xfb>
    22da:	88 e7       	ldi	r24, 0x78	; 120
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	0d c0       	rjmp	.+26     	; 0x22fa <__stack+0xfb>
    22e0:	c4 01       	movw	r24, r8
    22e2:	86 78       	andi	r24, 0x86	; 134
    22e4:	90 70       	andi	r25, 0x00	; 0
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	91 f0       	breq	.+36     	; 0x230e <__stack+0x10f>
    22ea:	81 fc       	sbrc	r8, 1
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <__stack+0xf3>
    22ee:	80 e2       	ldi	r24, 0x20	; 32
    22f0:	01 c0       	rjmp	.+2      	; 0x22f4 <__stack+0xf5>
    22f2:	8b e2       	ldi	r24, 0x2B	; 43
    22f4:	07 fd       	sbrc	r16, 7
    22f6:	8d e2       	ldi	r24, 0x2D	; 45
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	b3 01       	movw	r22, r6
    22fc:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <fputc>
    2300:	06 c0       	rjmp	.+12     	; 0x230e <__stack+0x10f>
    2302:	80 e3       	ldi	r24, 0x30	; 48
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	b3 01       	movw	r22, r6
    2308:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <fputc>
    230c:	fa 94       	dec	r15
    230e:	df 14       	cp	r13, r15
    2310:	c0 f3       	brcs	.-16     	; 0x2302 <__stack+0x103>
    2312:	da 94       	dec	r13
    2314:	f2 01       	movw	r30, r4
    2316:	ed 0d       	add	r30, r13
    2318:	f1 1d       	adc	r31, r1
    231a:	80 81       	ld	r24, Z
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	b3 01       	movw	r22, r6
    2320:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <fputc>
    2324:	dd 20       	and	r13, r13
    2326:	a9 f7       	brne	.-22     	; 0x2312 <__stack+0x113>
    2328:	06 c0       	rjmp	.+12     	; 0x2336 <__stack+0x137>
    232a:	80 e2       	ldi	r24, 0x20	; 32
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	b3 01       	movw	r22, r6
    2330:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <fputc>
    2334:	ea 94       	dec	r14
    2336:	ee 20       	and	r14, r14
    2338:	c1 f7       	brne	.-16     	; 0x232a <__stack+0x12b>
    233a:	40 ce       	rjmp	.-896    	; 0x1fbc <vfprintf+0x50>
    233c:	f3 01       	movw	r30, r6
    233e:	86 81       	ldd	r24, Z+6	; 0x06
    2340:	97 81       	ldd	r25, Z+7	; 0x07
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <__stack+0x149>
    2344:	8f ef       	ldi	r24, 0xFF	; 255
    2346:	9f ef       	ldi	r25, 0xFF	; 255
    2348:	2d 96       	adiw	r28, 0x0d	; 13
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	ff 90       	pop	r15
    235e:	ef 90       	pop	r14
    2360:	df 90       	pop	r13
    2362:	cf 90       	pop	r12
    2364:	bf 90       	pop	r11
    2366:	af 90       	pop	r10
    2368:	9f 90       	pop	r9
    236a:	8f 90       	pop	r8
    236c:	7f 90       	pop	r7
    236e:	6f 90       	pop	r6
    2370:	5f 90       	pop	r5
    2372:	4f 90       	pop	r4
    2374:	3f 90       	pop	r3
    2376:	2f 90       	pop	r2
    2378:	08 95       	ret

0000237a <strnlen_P>:
    237a:	fc 01       	movw	r30, r24
    237c:	05 90       	lpm	r0, Z+
    237e:	61 50       	subi	r22, 0x01	; 1
    2380:	70 40       	sbci	r23, 0x00	; 0
    2382:	01 10       	cpse	r0, r1
    2384:	d8 f7       	brcc	.-10     	; 0x237c <strnlen_P+0x2>
    2386:	80 95       	com	r24
    2388:	90 95       	com	r25
    238a:	8e 0f       	add	r24, r30
    238c:	9f 1f       	adc	r25, r31
    238e:	08 95       	ret

00002390 <strnlen>:
    2390:	fc 01       	movw	r30, r24
    2392:	61 50       	subi	r22, 0x01	; 1
    2394:	70 40       	sbci	r23, 0x00	; 0
    2396:	01 90       	ld	r0, Z+
    2398:	01 10       	cpse	r0, r1
    239a:	d8 f7       	brcc	.-10     	; 0x2392 <strnlen+0x2>
    239c:	80 95       	com	r24
    239e:	90 95       	com	r25
    23a0:	8e 0f       	add	r24, r30
    23a2:	9f 1f       	adc	r25, r31
    23a4:	08 95       	ret

000023a6 <fputc>:
    23a6:	0f 93       	push	r16
    23a8:	1f 93       	push	r17
    23aa:	cf 93       	push	r28
    23ac:	df 93       	push	r29
    23ae:	8c 01       	movw	r16, r24
    23b0:	eb 01       	movw	r28, r22
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	81 ff       	sbrs	r24, 1
    23b6:	1b c0       	rjmp	.+54     	; 0x23ee <fputc+0x48>
    23b8:	82 ff       	sbrs	r24, 2
    23ba:	0d c0       	rjmp	.+26     	; 0x23d6 <fputc+0x30>
    23bc:	2e 81       	ldd	r18, Y+6	; 0x06
    23be:	3f 81       	ldd	r19, Y+7	; 0x07
    23c0:	8c 81       	ldd	r24, Y+4	; 0x04
    23c2:	9d 81       	ldd	r25, Y+5	; 0x05
    23c4:	28 17       	cp	r18, r24
    23c6:	39 07       	cpc	r19, r25
    23c8:	64 f4       	brge	.+24     	; 0x23e2 <fputc+0x3c>
    23ca:	e8 81       	ld	r30, Y
    23cc:	f9 81       	ldd	r31, Y+1	; 0x01
    23ce:	01 93       	st	Z+, r16
    23d0:	f9 83       	std	Y+1, r31	; 0x01
    23d2:	e8 83       	st	Y, r30
    23d4:	06 c0       	rjmp	.+12     	; 0x23e2 <fputc+0x3c>
    23d6:	e8 85       	ldd	r30, Y+8	; 0x08
    23d8:	f9 85       	ldd	r31, Y+9	; 0x09
    23da:	80 2f       	mov	r24, r16
    23dc:	19 95       	eicall
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	31 f4       	brne	.+12     	; 0x23ee <fputc+0x48>
    23e2:	8e 81       	ldd	r24, Y+6	; 0x06
    23e4:	9f 81       	ldd	r25, Y+7	; 0x07
    23e6:	01 96       	adiw	r24, 0x01	; 1
    23e8:	9f 83       	std	Y+7, r25	; 0x07
    23ea:	8e 83       	std	Y+6, r24	; 0x06
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <fputc+0x4c>
    23ee:	0f ef       	ldi	r16, 0xFF	; 255
    23f0:	1f ef       	ldi	r17, 0xFF	; 255
    23f2:	c8 01       	movw	r24, r16
    23f4:	df 91       	pop	r29
    23f6:	cf 91       	pop	r28
    23f8:	1f 91       	pop	r17
    23fa:	0f 91       	pop	r16
    23fc:	08 95       	ret

000023fe <__ultoa_invert>:
    23fe:	fa 01       	movw	r30, r20
    2400:	aa 27       	eor	r26, r26
    2402:	28 30       	cpi	r18, 0x08	; 8
    2404:	51 f1       	breq	.+84     	; 0x245a <__ultoa_invert+0x5c>
    2406:	20 31       	cpi	r18, 0x10	; 16
    2408:	81 f1       	breq	.+96     	; 0x246a <__ultoa_invert+0x6c>
    240a:	e8 94       	clt
    240c:	6f 93       	push	r22
    240e:	6e 7f       	andi	r22, 0xFE	; 254
    2410:	6e 5f       	subi	r22, 0xFE	; 254
    2412:	7f 4f       	sbci	r23, 0xFF	; 255
    2414:	8f 4f       	sbci	r24, 0xFF	; 255
    2416:	9f 4f       	sbci	r25, 0xFF	; 255
    2418:	af 4f       	sbci	r26, 0xFF	; 255
    241a:	b1 e0       	ldi	r27, 0x01	; 1
    241c:	3e d0       	rcall	.+124    	; 0x249a <__ultoa_invert+0x9c>
    241e:	b4 e0       	ldi	r27, 0x04	; 4
    2420:	3c d0       	rcall	.+120    	; 0x249a <__ultoa_invert+0x9c>
    2422:	67 0f       	add	r22, r23
    2424:	78 1f       	adc	r23, r24
    2426:	89 1f       	adc	r24, r25
    2428:	9a 1f       	adc	r25, r26
    242a:	a1 1d       	adc	r26, r1
    242c:	68 0f       	add	r22, r24
    242e:	79 1f       	adc	r23, r25
    2430:	8a 1f       	adc	r24, r26
    2432:	91 1d       	adc	r25, r1
    2434:	a1 1d       	adc	r26, r1
    2436:	6a 0f       	add	r22, r26
    2438:	71 1d       	adc	r23, r1
    243a:	81 1d       	adc	r24, r1
    243c:	91 1d       	adc	r25, r1
    243e:	a1 1d       	adc	r26, r1
    2440:	20 d0       	rcall	.+64     	; 0x2482 <__ultoa_invert+0x84>
    2442:	09 f4       	brne	.+2      	; 0x2446 <__ultoa_invert+0x48>
    2444:	68 94       	set
    2446:	3f 91       	pop	r19
    2448:	2a e0       	ldi	r18, 0x0A	; 10
    244a:	26 9f       	mul	r18, r22
    244c:	11 24       	eor	r1, r1
    244e:	30 19       	sub	r19, r0
    2450:	30 5d       	subi	r19, 0xD0	; 208
    2452:	31 93       	st	Z+, r19
    2454:	de f6       	brtc	.-74     	; 0x240c <__ultoa_invert+0xe>
    2456:	cf 01       	movw	r24, r30
    2458:	08 95       	ret
    245a:	46 2f       	mov	r20, r22
    245c:	47 70       	andi	r20, 0x07	; 7
    245e:	40 5d       	subi	r20, 0xD0	; 208
    2460:	41 93       	st	Z+, r20
    2462:	b3 e0       	ldi	r27, 0x03	; 3
    2464:	0f d0       	rcall	.+30     	; 0x2484 <__ultoa_invert+0x86>
    2466:	c9 f7       	brne	.-14     	; 0x245a <__ultoa_invert+0x5c>
    2468:	f6 cf       	rjmp	.-20     	; 0x2456 <__ultoa_invert+0x58>
    246a:	46 2f       	mov	r20, r22
    246c:	4f 70       	andi	r20, 0x0F	; 15
    246e:	40 5d       	subi	r20, 0xD0	; 208
    2470:	4a 33       	cpi	r20, 0x3A	; 58
    2472:	18 f0       	brcs	.+6      	; 0x247a <__ultoa_invert+0x7c>
    2474:	49 5d       	subi	r20, 0xD9	; 217
    2476:	31 fd       	sbrc	r19, 1
    2478:	40 52       	subi	r20, 0x20	; 32
    247a:	41 93       	st	Z+, r20
    247c:	02 d0       	rcall	.+4      	; 0x2482 <__ultoa_invert+0x84>
    247e:	a9 f7       	brne	.-22     	; 0x246a <__ultoa_invert+0x6c>
    2480:	ea cf       	rjmp	.-44     	; 0x2456 <__ultoa_invert+0x58>
    2482:	b4 e0       	ldi	r27, 0x04	; 4
    2484:	a6 95       	lsr	r26
    2486:	97 95       	ror	r25
    2488:	87 95       	ror	r24
    248a:	77 95       	ror	r23
    248c:	67 95       	ror	r22
    248e:	ba 95       	dec	r27
    2490:	c9 f7       	brne	.-14     	; 0x2484 <__ultoa_invert+0x86>
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	61 05       	cpc	r22, r1
    2496:	71 05       	cpc	r23, r1
    2498:	08 95       	ret
    249a:	9b 01       	movw	r18, r22
    249c:	ac 01       	movw	r20, r24
    249e:	0a 2e       	mov	r0, r26
    24a0:	06 94       	lsr	r0
    24a2:	57 95       	ror	r21
    24a4:	47 95       	ror	r20
    24a6:	37 95       	ror	r19
    24a8:	27 95       	ror	r18
    24aa:	ba 95       	dec	r27
    24ac:	c9 f7       	brne	.-14     	; 0x24a0 <__ultoa_invert+0xa2>
    24ae:	62 0f       	add	r22, r18
    24b0:	73 1f       	adc	r23, r19
    24b2:	84 1f       	adc	r24, r20
    24b4:	95 1f       	adc	r25, r21
    24b6:	a0 1d       	adc	r26, r0
    24b8:	08 95       	ret

000024ba <_exit>:
    24ba:	f8 94       	cli

000024bc <__stop_program>:
    24bc:	ff cf       	rjmp	.-2      	; 0x24bc <__stop_program>
