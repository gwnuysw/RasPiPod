
WifiTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000024a  00800200  00002b40  00002bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000668  0080044a  0080044a  00002e1e  2**0
                  ALLOC
  3 .stab         00002784  00000000  00000000  00002e20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000095a  00000000  00000000  000055a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  00005f00  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025c5  00000000  00000000  00006120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f35  00000000  00000000  000086e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015ed  00000000  00000000  0000961a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000988  00000000  00000000  0000ac08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009c8  00000000  00000000  0000b590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027e6  00000000  00000000  0000bf58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000e73e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_23>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_51>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e4       	ldi	r30, 0x40	; 64
      fc:	fb e2       	ldi	r31, 0x2B	; 43
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 34       	cpi	r26, 0x4A	; 74
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	1a e0       	ldi	r17, 0x0A	; 10
     112:	aa e4       	ldi	r26, 0x4A	; 74
     114:	b4 e0       	ldi	r27, 0x04	; 4
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a2 3b       	cpi	r26, 0xB2	; 178
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <main>
     124:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <AdcInit>:
// ATmega2560 ADC Channel : 0(ADC0) ~ 7(ADC7), Single Ended Input
void AdcInit(unsigned char ucAdcChannel)
{
	// Internal 2.56V Voltage Reference with external capacitor at AREF pin
//	ADMUX	=	0xC0 | ucAdcChannel;     		// ADC Channel
	ADMUX	=	(1<<REFS1) | (1<<REFS0) | ucAdcChannel;     		// ADC Channel
     12c:	80 6c       	ori	r24, 0xC0	; 192
     12e:	80 93 7c 00 	sts	0x007C, r24

	// ADC Module Enable, Free Running Mode, ADC Prescaler : 64
	// ADC Auto Trigger Enable
//	ADCSRA	=	0xA7;
	ADCSRA	=	(1<<ADEN)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     132:	ea e7       	ldi	r30, 0x7A	; 122
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	87 ea       	ldi	r24, 0xA7	; 167
     138:	80 83       	st	Z, r24
//	ADCSRA	|=	0x40;			// ADC start conversion
	ADCSRA	|=	(1<<ADSC);		// ADC start conversion
     13a:	80 81       	ld	r24, Z
     13c:	80 64       	ori	r24, 0x40	; 64
     13e:	80 83       	st	Z, r24
}
     140:	08 95       	ret

00000142 <AdcRead>:
unsigned int AdcRead(void)
{
	unsigned char ucLowValue = 0;
	unsigned char ucHighValue = 0;
	unsigned int unAdcValue = 0;
	while ((ADCSRA&0x10)==0x00);	// ADC Î≥ÄÌôòÏù¥ ÎÅùÎÇ†ÎñÑ ÍπåÏßÄ ÎåÄÍ∏∞
     142:	ea e7       	ldi	r30, 0x7A	; 122
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	84 ff       	sbrs	r24, 4
     14a:	fd cf       	rjmp	.-6      	; 0x146 <AdcRead+0x4>
	
	ucLowValue = ADCL;				//ÌïòÏúÑ 8bit
     14c:	80 91 78 00 	lds	r24, 0x0078
	ucHighValue	= ADCH ;			//ÏÉÅÏúÑ 2bit
     150:	90 91 79 00 	lds	r25, 0x0079
	
	unAdcValue = (ucHighValue << 8) | ucLowValue;
     154:	39 2f       	mov	r19, r25
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	82 2b       	or	r24, r18
     15c:	93 2b       	or	r25, r19
//	debugprint("unAdcValue : %d\r\n", unAdcValue);
	
	return unAdcValue;
     15e:	08 95       	ret

00000160 <__vector_23>:
//unsigned int gun_AdcValue	=	0;
unsigned char guc_OverflowCnt	=	0;
unsigned int n_flag_getADC = 0;

ISR (TIMER0_OVF_vect)	// Timer0 Overflow0 ISR
{
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	0f 92       	push	r0
     168:	11 24       	eor	r1, r1
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
	cli();																	//----------------v ±‚¥… ∫π∫Ÿ
     17a:	f8 94       	cli
	// 0.01sø° ø¿πˆ«√∑ŒøÏ πﬂª˝, 1/(14745600Hz/1024)•™144 = 0.01s
	TCNT0	=	0xff - 45;
     17c:	82 ed       	ldi	r24, 0xD2	; 210
     17e:	86 bd       	out	0x26, r24	; 38

	timerCouter++;
     180:	80 91 59 04 	lds	r24, 0x0459
     184:	90 91 5a 04 	lds	r25, 0x045A
     188:	a0 91 5b 04 	lds	r26, 0x045B
     18c:	b0 91 5c 04 	lds	r27, 0x045C
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	a1 1d       	adc	r26, r1
     194:	b1 1d       	adc	r27, r1
     196:	80 93 59 04 	sts	0x0459, r24
     19a:	90 93 5a 04 	sts	0x045A, r25
     19e:	a0 93 5b 04 	sts	0x045B, r26
     1a2:	b0 93 5c 04 	sts	0x045C, r27
	
	if ( timerCouter >= setTimerCheckCounter )
     1a6:	40 91 59 04 	lds	r20, 0x0459
     1aa:	50 91 5a 04 	lds	r21, 0x045A
     1ae:	60 91 5b 04 	lds	r22, 0x045B
     1b2:	70 91 5c 04 	lds	r23, 0x045C
     1b6:	80 91 55 04 	lds	r24, 0x0455
     1ba:	90 91 56 04 	lds	r25, 0x0456
     1be:	a0 91 57 04 	lds	r26, 0x0457
     1c2:	b0 91 58 04 	lds	r27, 0x0458
     1c6:	48 17       	cp	r20, r24
     1c8:	59 07       	cpc	r21, r25
     1ca:	6a 07       	cpc	r22, r26
     1cc:	7b 07       	cpc	r23, r27
     1ce:	58 f0       	brcs	.+22     	; 0x1e6 <__vector_23+0x86>
	{
		flagOverflowSetTimer = 1;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	80 93 54 04 	sts	0x0454, r24
		timerCouter = 0;
     1d6:	10 92 59 04 	sts	0x0459, r1
     1da:	10 92 5a 04 	sts	0x045A, r1
     1de:	10 92 5b 04 	sts	0x045B, r1
     1e2:	10 92 5c 04 	sts	0x045C, r1
	}
	sei();
     1e6:	78 94       	sei
														//-------------------------------------^±‚¥… ∫π∫Ÿ
	guc_OverflowCnt++;
     1e8:	80 91 4c 04 	lds	r24, 0x044C
     1ec:	8f 5f       	subi	r24, 0xFF	; 255
     1ee:	80 93 4c 04 	sts	0x044C, r24

	if (guc_OverflowCnt == 10)		// 0.003s * 100 = 0.3s
     1f2:	8a 30       	cpi	r24, 0x0A	; 10
     1f4:	41 f4       	brne	.+16     	; 0x206 <__vector_23+0xa6>
	{
		guc_OverflowCnt	=	0;
     1f6:	10 92 4c 04 	sts	0x044C, r1
		n_flag_getADC = 1;
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	90 93 4b 04 	sts	0x044B, r25
     202:	80 93 4a 04 	sts	0x044A, r24
	}
}
     206:	bf 91       	pop	r27
     208:	af 91       	pop	r26
     20a:	9f 91       	pop	r25
     20c:	8f 91       	pop	r24
     20e:	7f 91       	pop	r23
     210:	6f 91       	pop	r22
     212:	5f 91       	pop	r21
     214:	4f 91       	pop	r20
     216:	0f 90       	pop	r0
     218:	0f be       	out	0x3f, r0	; 63
     21a:	0f 90       	pop	r0
     21c:	1f 90       	pop	r1
     21e:	18 95       	reti

00000220 <TIMER_Init>:
/*-----------------------------led ∫Œ∫–¡¶∞≈*/
void TIMER_Init (void)
{
	
	TCCR0B	=	0x05;
     220:	85 e0       	ldi	r24, 0x05	; 5
     222:	85 bd       	out	0x25, r24	; 37
	
	TCNT0	=	0xff - 45;		// 0.003s
     224:	82 ed       	ldi	r24, 0xD2	; 210
     226:	86 bd       	out	0x26, r24	; 38
	TIMSK0	|=	1 << TOIE0;		
     228:	ee e6       	ldi	r30, 0x6E	; 110
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	81 60       	ori	r24, 0x01	; 1
     230:	80 83       	st	Z, r24
	TIFR0	|=	1 << TOV0;	// set Overflow Interupt Flag
     232:	a8 9a       	sbi	0x15, 0	; 21
}
     234:	08 95       	ret

00000236 <putCh2>:
volatile unsigned char g_debugRxData[MAX_DEBUG_RX_DATA]; // Rx buff
volatile unsigned char g_debugRxCurrentIndex = 0;       // Rx buffer index

void putCh2(char ch)
{
	while (!(UCSR2A & 0x20));
     236:	e0 ed       	ldi	r30, 0xD0	; 208
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	90 81       	ld	r25, Z
     23c:	95 ff       	sbrs	r25, 5
     23e:	fd cf       	rjmp	.-6      	; 0x23a <putCh2+0x4>
		UDR2= ch;
     240:	80 93 d6 00 	sts	0x00D6, r24
}
     244:	08 95       	ret

00000246 <__vector_51>:

ISR(USART2_RX_vect)
{
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	0b b6       	in	r0, 0x3b	; 59
     250:	0f 92       	push	r0
     252:	11 24       	eor	r1, r1
     254:	8f 93       	push	r24
     256:	9f 93       	push	r25
     258:	ef 93       	push	r30
     25a:	ff 93       	push	r31
	g_debugRxData[g_debugRxCurrentIndex] = UDR2;
     25c:	90 91 4d 04 	lds	r25, 0x044D
     260:	80 91 d6 00 	lds	r24, 0x00D6
     264:	ef e5       	ldi	r30, 0x5F	; 95
     266:	f4 e0       	ldi	r31, 0x04	; 4
     268:	e9 0f       	add	r30, r25
     26a:	f1 1d       	adc	r31, r1
     26c:	80 83       	st	Z, r24
	g_debugRxCurrentIndex++;
     26e:	80 91 4d 04 	lds	r24, 0x044D
     272:	8f 5f       	subi	r24, 0xFF	; 255
     274:	80 93 4d 04 	sts	0x044D, r24
	if(g_debugRxCurrentIndex >= MAX_DEBUG_RX_DATA)
     278:	80 91 4d 04 	lds	r24, 0x044D
     27c:	80 34       	cpi	r24, 0x40	; 64
     27e:	10 f0       	brcs	.+4      	; 0x284 <__vector_51+0x3e>
		g_debugRxCurrentIndex = 0;
     280:	10 92 4d 04 	sts	0x044D, r1
}
     284:	ff 91       	pop	r31
     286:	ef 91       	pop	r30
     288:	9f 91       	pop	r25
     28a:	8f 91       	pop	r24
     28c:	0f 90       	pop	r0
     28e:	0b be       	out	0x3b, r0	; 59
     290:	0f 90       	pop	r0
     292:	0f be       	out	0x3f, r0	; 63
     294:	0f 90       	pop	r0
     296:	1f 90       	pop	r1
     298:	18 95       	reti

0000029a <debugInit>:
#define BAUD_RATE 115200L
void debugInit()
{
	// USART2 use
	// PH0 => RX, PH1 => TX
	DDRH  &= 0xFC;										// "0" input, "1" output
     29a:	e1 e0       	ldi	r30, 0x01	; 1
     29c:	f1 e0       	ldi	r31, 0x01	; 1
     29e:	80 81       	ld	r24, Z
     2a0:	8c 7f       	andi	r24, 0xFC	; 252
     2a2:	80 83       	st	Z, r24
	PORTH |= 0x00;
     2a4:	e2 e0       	ldi	r30, 0x02	; 2
     2a6:	f1 e0       	ldi	r31, 0x01	; 1
     2a8:	80 81       	ld	r24, Z
     2aa:	80 83       	st	Z, r24
	
	// Not Double mode, Not multi_communication
	UCSR2A = 0x00;								// x2 Mode
     2ac:	10 92 d0 00 	sts	0x00D0, r1
	UCSR2B = 0x98;
     2b0:	88 e9       	ldi	r24, 0x98	; 152
     2b2:	80 93 d1 00 	sts	0x00D1, r24
	UCSR2C = 0x06;
     2b6:	86 e0       	ldi	r24, 0x06	; 6
     2b8:	80 93 d2 00 	sts	0x00D2, r24
	//	UBRR0L = 0x3F;	// 0b00110011, (14745600 / (16 * 14400)) - 1 = 0x40
	//	UBRR0L = 0x2F;	// 0b00110011, (14745600 / (16 * 19200)) - 1 = 0x2F
	//	UBRR0L = 0x17;	// 0b00110011, (14745600 / (16 * 38400)) - 1 = 0x17
	//	UBRR0L = 0x0F;	// 0b00110011, (14745600 / (16 * 57600)) - 1 = 0x0F

	UBRR2H=(unsigned char) (baud >>8);                            // baud ?????? ??????  H???????? ????
     2bc:	10 92 d5 00 	sts	0x00D5, r1
	UBRR2L=(unsigned char) (baud & 0xFF);                         // baud ?????? ??????  L???????  ????
     2c0:	87 e0       	ldi	r24, 0x07	; 7
     2c2:	80 93 d4 00 	sts	0x00D4, r24
	
	//	UBRR2H = 0x00;
	//	UBRR2L = 16;								// 115200
}
     2c6:	08 95       	ret

000002c8 <debugprint>:

void debugprint(const char *fmt,...)
{
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	c0 58       	subi	r28, 0x80	; 128
     2d6:	d0 40       	sbci	r29, 0x00	; 0
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	cd bf       	out	0x3d, r28	; 61
     2e2:	fe 01       	movw	r30, r28
     2e4:	e8 57       	subi	r30, 0x78	; 120
     2e6:	ff 4f       	sbci	r31, 0xFF	; 255
     2e8:	61 91       	ld	r22, Z+
     2ea:	71 91       	ld	r23, Z+
	va_list ap;
	char s[128];
	char *p_char = s;
	va_start(ap, fmt);
	vsprintf(s, fmt,ap);
     2ec:	ce 01       	movw	r24, r28
     2ee:	01 96       	adiw	r24, 0x01	; 1
     2f0:	4e 2f       	mov	r20, r30
     2f2:	5f 2f       	mov	r21, r31
     2f4:	0e 94 ce 12 	call	0x259c	; 0x259c <vsprintf>
	va_end(ap);
	while(0 != *p_char){
     2f8:	89 81       	ldd	r24, Y+1	; 0x01
     2fa:	88 23       	and	r24, r24
     2fc:	51 f0       	breq	.+20     	; 0x312 <debugprint+0x4a>
     2fe:	8e 01       	movw	r16, r28
     300:	0e 5f       	subi	r16, 0xFE	; 254
     302:	1f 4f       	sbci	r17, 0xFF	; 255
		putCh2(*p_char++);
     304:	0e 94 1b 01 	call	0x236	; 0x236 <putCh2>
	char s[128];
	char *p_char = s;
	va_start(ap, fmt);
	vsprintf(s, fmt,ap);
	va_end(ap);
	while(0 != *p_char){
     308:	f8 01       	movw	r30, r16
     30a:	81 91       	ld	r24, Z+
     30c:	8f 01       	movw	r16, r30
     30e:	88 23       	and	r24, r24
     310:	c9 f7       	brne	.-14     	; 0x304 <debugprint+0x3c>
		putCh2(*p_char++);
	}	
}
     312:	c0 58       	subi	r28, 0x80	; 128
     314:	df 4f       	sbci	r29, 0xFF	; 255
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	cd bf       	out	0x3d, r28	; 61
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	1f 91       	pop	r17
     326:	0f 91       	pop	r16
     328:	08 95       	ret

0000032a <debugConsoleMain>:

void debugConsoleMain()
{
	int i;

	if ( !g_debugRxCurrentIndex ) 
     32a:	80 91 4d 04 	lds	r24, 0x044D
     32e:	88 23       	and	r24, r24
     330:	79 f0       	breq	.+30     	; 0x350 <debugConsoleMain+0x26>
		return;
	
	for(i = 0; i <g_debugRxCurrentIndex;i++)
     332:	80 91 4d 04 	lds	r24, 0x044D
     336:	88 23       	and	r24, r24
     338:	49 f0       	breq	.+18     	; 0x34c <debugConsoleMain+0x22>
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	20 91 4d 04 	lds	r18, 0x044D
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	82 17       	cp	r24, r18
     348:	93 07       	cpc	r25, r19
     34a:	cc f3       	brlt	.-14     	; 0x33e <debugConsoleMain+0x14>
	{

	}
	g_debugRxCurrentIndex = 0;
     34c:	10 92 4d 04 	sts	0x044D, r1
     350:	08 95       	ret

00000352 <putCh0>:
volatile int g_rxDataLen = 0;
volatile uint8_t g_rxDataBuff[MAX_WIFI_RX_DATA];

void putCh0(char ch)
{
	while (!(UCSR0A & 0x20));
     352:	e0 ec       	ldi	r30, 0xC0	; 192
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	90 81       	ld	r25, Z
     358:	95 ff       	sbrs	r25, 5
     35a:	fd cf       	rjmp	.-6      	; 0x356 <putCh0+0x4>
	UDR0= ch;
     35c:	80 93 c6 00 	sts	0x00C6, r24
}
     360:	08 95       	ret

00000362 <__vector_25>:

ISR(USART0_RX_vect)
{
     362:	1f 92       	push	r1
     364:	0f 92       	push	r0
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	0f 92       	push	r0
     36a:	0b b6       	in	r0, 0x3b	; 59
     36c:	0f 92       	push	r0
     36e:	11 24       	eor	r1, r1
     370:	8f 93       	push	r24
     372:	9f 93       	push	r25
     374:	ef 93       	push	r30
     376:	ff 93       	push	r31
	g_wifiRxData[g_wifiRxCurrentIndex] = UDR0;
     378:	90 91 53 04 	lds	r25, 0x0453
     37c:	80 91 c6 00 	lds	r24, 0x00C6
     380:	ef e9       	ldi	r30, 0x9F	; 159
     382:	f6 e0       	ldi	r31, 0x06	; 6
     384:	e9 0f       	add	r30, r25
     386:	f1 1d       	adc	r31, r1
     388:	80 83       	st	Z, r24
	g_wifiRxCurrentIndex++;
     38a:	80 91 53 04 	lds	r24, 0x0453
     38e:	8f 5f       	subi	r24, 0xFF	; 255
     390:	80 93 53 04 	sts	0x0453, r24
	if(g_wifiRxCurrentIndex >= MAX_WIFI_RX_DATA)
     394:	80 91 53 04 	lds	r24, 0x0453
	g_wifiRxCurrentIndex = 0;
}
     398:	ff 91       	pop	r31
     39a:	ef 91       	pop	r30
     39c:	9f 91       	pop	r25
     39e:	8f 91       	pop	r24
     3a0:	0f 90       	pop	r0
     3a2:	0b be       	out	0x3b, r0	; 59
     3a4:	0f 90       	pop	r0
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	0f 90       	pop	r0
     3aa:	1f 90       	pop	r1
     3ac:	18 95       	reti

000003ae <wifiAndBTModuleReset>:

void wifiAndBTModuleReset()
{
	// MOD_RESET(PD6) (wifi module and  BT module reset )  => bt + wifi  reset
	DDRD  &= 0xBF; // input										// "0" input, "1" output
     3ae:	56 98       	cbi	0x0a, 6	; 10
	PORTD &= 0xBF; // low
     3b0:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b2:	89 e9       	ldi	r24, 0x99	; 153
     3b4:	99 e5       	ldi	r25, 0x59	; 89
     3b6:	a1 e0       	ldi	r26, 0x01	; 1
     3b8:	81 50       	subi	r24, 0x01	; 1
     3ba:	90 40       	sbci	r25, 0x00	; 0
     3bc:	a0 40       	sbci	r26, 0x00	; 0
     3be:	e1 f7       	brne	.-8      	; 0x3b8 <wifiAndBTModuleReset+0xa>
     3c0:	00 00       	nop
	
	_delay_ms(30);
	DDRD  |= 0x40; // output
     3c2:	56 9a       	sbi	0x0a, 6	; 10
     3c4:	8f ef       	ldi	r24, 0xFF	; 255
     3c6:	9f e3       	ldi	r25, 0x3F	; 63
     3c8:	a2 e0       	ldi	r26, 0x02	; 2
     3ca:	81 50       	subi	r24, 0x01	; 1
     3cc:	90 40       	sbci	r25, 0x00	; 0
     3ce:	a0 40       	sbci	r26, 0x00	; 0
     3d0:	e1 f7       	brne	.-8      	; 0x3ca <wifiAndBTModuleReset+0x1c>
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <wifiAndBTModuleReset+0x26>
     3d4:	00 00       	nop
	_delay_ms(50);
	DDRD  &= 0xBF; // input
     3d6:	56 98       	cbi	0x0a, 6	; 10
	PORTD |= 0x40; // high
     3d8:	5e 9a       	sbi	0x0b, 6	; 11
     3da:	8f ef       	ldi	r24, 0xFF	; 255
     3dc:	9f ef       	ldi	r25, 0xFF	; 255
     3de:	a9 e5       	ldi	r26, 0x59	; 89
     3e0:	81 50       	subi	r24, 0x01	; 1
     3e2:	90 40       	sbci	r25, 0x00	; 0
     3e4:	a0 40       	sbci	r26, 0x00	; 0
     3e6:	e1 f7       	brne	.-8      	; 0x3e0 <wifiAndBTModuleReset+0x32>
     3e8:	00 c0       	rjmp	.+0      	; 0x3ea <wifiAndBTModuleReset+0x3c>
     3ea:	00 00       	nop
	
	_delay_ms(2000);
}
     3ec:	08 95       	ret

000003ee <wifiEnable>:

void wifiEnable(uint8_t bEnable)
{
	if ( bEnable)
     3ee:	88 23       	and	r24, r24
     3f0:	11 f0       	breq	.+4      	; 0x3f6 <wifiEnable+0x8>
	{
		PORTD |= 0x80;  // high output
     3f2:	5f 9a       	sbi	0x0b, 7	; 11
     3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <wifiEnable+0xa>
	}
	else
	{
		PORTD &= 0x7F;  // low output
     3f6:	5f 98       	cbi	0x0b, 7	; 11
     3f8:	8f ef       	ldi	r24, 0xFF	; 255
     3fa:	9f ef       	ldi	r25, 0xFF	; 255
     3fc:	a8 e0       	ldi	r26, 0x08	; 8
     3fe:	81 50       	subi	r24, 0x01	; 1
     400:	90 40       	sbci	r25, 0x00	; 0
     402:	a0 40       	sbci	r26, 0x00	; 0
     404:	e1 f7       	brne	.-8      	; 0x3fe <wifiEnable+0x10>
     406:	00 c0       	rjmp	.+0      	; 0x408 <wifiEnable+0x1a>
     408:	00 00       	nop
	}
	_delay_ms(200);
	
}
     40a:	08 95       	ret

0000040c <wifiInit>:
#define BAUD_RATE_WIFI 115200L
void wifiInit()
{
	// USART0 use
	// PE0 => RX, PE1 => TX
	DDRE  &= 0xFC;										// "0" input, "1" output
     40c:	8d b1       	in	r24, 0x0d	; 13
     40e:	8c 7f       	andi	r24, 0xFC	; 252
     410:	8d b9       	out	0x0d, r24	; 13
	PORTE |= 0x00;
     412:	8e b1       	in	r24, 0x0e	; 14
     414:	8e b9       	out	0x0e, r24	; 14
	
	// Not Double mode, Not multi_communication
	UCSR0A = 0x00;								// x2 Mode
     416:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x98;
     41a:	88 e9       	ldi	r24, 0x98	; 152
     41c:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = 0x06;
     420:	86 e0       	ldi	r24, 0x06	; 6
     422:	80 93 c2 00 	sts	0x00C2, r24
	//	UBRR0L = 16;								// 115200
	
	unsigned int baud=1;   									// ??? baud???? "1"?? ????
	baud = ((F_CPU+(BAUD_RATE_WIFI*8L))/(BAUD_RATE_WIFI*16L)-1);      // baud?? ???¨÷¨„?????? ????
	
	UBRR0H=(unsigned char) (baud >>8);                            // baud ?????? ??????  H???????? ????
     426:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=(unsigned char) (baud & 0xFF);                         // baud ?????? ??????  L???????  ????
     42a:	87 e0       	ldi	r24, 0x07	; 7
     42c:	80 93 c4 00 	sts	0x00C4, r24
	
	// wifi enable init
	// WIFI_EN  ( PD7 )
	DDRD  |= 0x80; // output										// "0" input, "1" output
     430:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= 0x80; // default high
     432:	5f 9a       	sbi	0x0b, 7	; 11
	
	wifiAndBTModuleReset();
     434:	0e 94 d7 01 	call	0x3ae	; 0x3ae <wifiAndBTModuleReset>
     438:	8f ef       	ldi	r24, 0xFF	; 255
     43a:	9f e7       	ldi	r25, 0x7F	; 127
     43c:	a4 e0       	ldi	r26, 0x04	; 4
     43e:	81 50       	subi	r24, 0x01	; 1
     440:	90 40       	sbci	r25, 0x00	; 0
     442:	a0 40       	sbci	r26, 0x00	; 0
     444:	e1 f7       	brne	.-8      	; 0x43e <wifiInit+0x32>
     446:	00 c0       	rjmp	.+0      	; 0x448 <wifiInit+0x3c>
     448:	00 00       	nop
	_delay_ms(100);
	wifiEnable(1);
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <wifiEnable>
	
	callbackFnc = NULL;
     450:	10 92 a0 0a 	sts	0x0AA0, r1
     454:	10 92 9f 0a 	sts	0x0A9F, r1
}
     458:	08 95       	ret

0000045a <wifiprint>:

void wifiprint(const char *fmt,...)
{
     45a:	0f 93       	push	r16
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	c0 58       	subi	r28, 0x80	; 128
     468:	d0 40       	sbci	r29, 0x00	; 0
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	fe 01       	movw	r30, r28
     476:	e8 57       	subi	r30, 0x78	; 120
     478:	ff 4f       	sbci	r31, 0xFF	; 255
     47a:	61 91       	ld	r22, Z+
     47c:	71 91       	ld	r23, Z+
	va_list ap;
	char s[128];
	char *p_char = s;
	va_start(ap, fmt);
	vsprintf(s, fmt,ap);
     47e:	ce 01       	movw	r24, r28
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	4e 2f       	mov	r20, r30
     484:	5f 2f       	mov	r21, r31
     486:	0e 94 ce 12 	call	0x259c	; 0x259c <vsprintf>
	va_end(ap);
	while(0 != *p_char){
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	88 23       	and	r24, r24
     48e:	51 f0       	breq	.+20     	; 0x4a4 <wifiprint+0x4a>
     490:	8e 01       	movw	r16, r28
     492:	0e 5f       	subi	r16, 0xFE	; 254
     494:	1f 4f       	sbci	r17, 0xFF	; 255
		putCh0(*p_char++);
     496:	0e 94 a9 01 	call	0x352	; 0x352 <putCh0>
	char s[128];
	char *p_char = s;
	va_start(ap, fmt);
	vsprintf(s, fmt,ap);
	va_end(ap);
	while(0 != *p_char){
     49a:	f8 01       	movw	r30, r16
     49c:	81 91       	ld	r24, Z+
     49e:	8f 01       	movw	r16, r30
     4a0:	88 23       	and	r24, r24
     4a2:	c9 f7       	brne	.-14     	; 0x496 <wifiprint+0x3c>
		putCh0(*p_char++);
	}
}
     4a4:	c0 58       	subi	r28, 0x80	; 128
     4a6:	df 4f       	sbci	r29, 0xFF	; 255
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	08 95       	ret

000004bc <parsingIPDRxData>:
// 1 => under rxing
// 2 => parcing fail

// +IPD,<len>:<data>
uint8_t parsingIPDRxData(uint8_t* buff, int buffLen)
{
     4bc:	8f 92       	push	r8
     4be:	9f 92       	push	r9
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	cd b7       	in	r28, 0x3d	; 61
     4d6:	de b7       	in	r29, 0x3e	; 62
     4d8:	2a 97       	sbiw	r28, 0x0a	; 10
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	f8 94       	cli
     4de:	de bf       	out	0x3e, r29	; 62
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	cd bf       	out	0x3d, r28	; 61
     4e4:	6c 01       	movw	r12, r24
     4e6:	7b 01       	movw	r14, r22
	int deliIndex = -1;
	int rxLen;
	char  strTemp[10];
	for( int i = 0; i < buffLen ; i++)
     4e8:	16 16       	cp	r1, r22
     4ea:	17 06       	cpc	r1, r23
     4ec:	0c f0       	brlt	.+2      	; 0x4f0 <parsingIPDRxData+0x34>
     4ee:	76 c0       	rjmp	.+236    	; 0x5dc <parsingIPDRxData+0x120>
	{
		if (buff[i] == ':')
     4f0:	fc 01       	movw	r30, r24
     4f2:	80 81       	ld	r24, Z
     4f4:	8a 33       	cpi	r24, 0x3A	; 58
     4f6:	c1 f0       	breq	.+48     	; 0x528 <parsingIPDRxData+0x6c>
// 0 => success
// 1 => under rxing
// 2 => parcing fail

// +IPD,<len>:<data>
uint8_t parsingIPDRxData(uint8_t* buff, int buffLen)
     4f8:	31 96       	adiw	r30, 0x01	; 1
{
	int deliIndex = -1;
	int rxLen;
	char  strTemp[10];
	for( int i = 0; i < buffLen ; i++)
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	03 c0       	rjmp	.+6      	; 0x506 <parsingIPDRxData+0x4a>
	{
		if (buff[i] == ':')
     500:	21 91       	ld	r18, Z+
     502:	2a 33       	cpi	r18, 0x3A	; 58
     504:	31 f0       	breq	.+12     	; 0x512 <parsingIPDRxData+0x56>
uint8_t parsingIPDRxData(uint8_t* buff, int buffLen)
{
	int deliIndex = -1;
	int rxLen;
	char  strTemp[10];
	for( int i = 0; i < buffLen ; i++)
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	8e 15       	cp	r24, r14
     50a:	9f 05       	cpc	r25, r15
     50c:	c9 f7       	brne	.-14     	; 0x500 <parsingIPDRxData+0x44>
			break;
		}
	}
	if ( deliIndex == -1)
	{
		return 1;
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	6e c0       	rjmp	.+220    	; 0x5ee <parsingIPDRxData+0x132>
		{
			deliIndex = i;
			break;
		}
	}
	if ( deliIndex == -1)
     512:	ff ef       	ldi	r31, 0xFF	; 255
     514:	8f 3f       	cpi	r24, 0xFF	; 255
     516:	9f 07       	cpc	r25, r31
     518:	09 f4       	brne	.+2      	; 0x51c <parsingIPDRxData+0x60>
     51a:	62 c0       	rjmp	.+196    	; 0x5e0 <parsingIPDRxData+0x124>
uint8_t parsingIPDRxData(uint8_t* buff, int buffLen)
{
	int deliIndex = -1;
	int rxLen;
	char  strTemp[10];
	for( int i = 0; i < buffLen ; i++)
     51c:	5c 01       	movw	r10, r24
	}
	if ( deliIndex == -1)
	{
		return 1;
	}
	if (deliIndex > 11 )
     51e:	8c 30       	cpi	r24, 0x0C	; 12
     520:	91 05       	cpc	r25, r1
     522:	0c f0       	brlt	.+2      	; 0x526 <parsingIPDRxData+0x6a>
     524:	5f c0       	rjmp	.+190    	; 0x5e4 <parsingIPDRxData+0x128>
     526:	02 c0       	rjmp	.+4      	; 0x52c <parsingIPDRxData+0x70>
uint8_t parsingIPDRxData(uint8_t* buff, int buffLen)
{
	int deliIndex = -1;
	int rxLen;
	char  strTemp[10];
	for( int i = 0; i < buffLen ; i++)
     528:	aa 24       	eor	r10, r10
     52a:	bb 24       	eor	r11, r11
	if (deliIndex > 11 )
	{
		
		return 2;
	}
	memcpy(strTemp,buff+5, deliIndex - 5 );
     52c:	85 01       	movw	r16, r10
     52e:	05 50       	subi	r16, 0x05	; 5
     530:	10 40       	sbci	r17, 0x00	; 0
     532:	b6 01       	movw	r22, r12
     534:	6b 5f       	subi	r22, 0xFB	; 251
     536:	7f 4f       	sbci	r23, 0xFF	; 255
     538:	ce 01       	movw	r24, r28
     53a:	01 96       	adiw	r24, 0x01	; 1
     53c:	40 2f       	mov	r20, r16
     53e:	51 2f       	mov	r21, r17
     540:	0e 94 80 12 	call	0x2500	; 0x2500 <memcpy>
	strTemp[deliIndex - 5] = NULL;
     544:	e1 e0       	ldi	r30, 0x01	; 1
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	ec 0f       	add	r30, r28
     54a:	fd 1f       	adc	r31, r29
     54c:	e0 0f       	add	r30, r16
     54e:	f1 1f       	adc	r31, r17
     550:	10 82       	st	Z, r1
	
	rxLen = atoi(strTemp);
     552:	ce 01       	movw	r24, r28
     554:	01 96       	adiw	r24, 0x01	; 1
     556:	0e 94 62 12 	call	0x24c4	; 0x24c4 <atoi>
     55a:	ac 01       	movw	r20, r24
	
	if ( rxLen == 0)
     55c:	00 97       	sbiw	r24, 0x00	; 0
     55e:	09 f4       	brne	.+2      	; 0x562 <parsingIPDRxData+0xa6>
     560:	43 c0       	rjmp	.+134    	; 0x5e8 <parsingIPDRxData+0x12c>
	{
		return 2;
	}
	
	if ( (buffLen -deliIndex-1) < rxLen )
     562:	ea 18       	sub	r14, r10
     564:	fb 08       	sbc	r15, r11
     566:	87 01       	movw	r16, r14
     568:	01 50       	subi	r16, 0x01	; 1
     56a:	10 40       	sbci	r17, 0x00	; 0
     56c:	08 17       	cp	r16, r24
     56e:	19 07       	cpc	r17, r25
     570:	34 f5       	brge	.+76     	; 0x5be <parsingIPDRxData+0x102>
	{
		if ( (buffLen-deliIndex+1) == rxLen ) // messageø°  \r\n ∫Ÿ¿∫ ∞ÊøÏ 
     572:	c7 01       	movw	r24, r14
     574:	01 96       	adiw	r24, 0x01	; 1
     576:	84 17       	cp	r24, r20
     578:	95 07       	cpc	r25, r21
     57a:	c1 f5       	brne	.+112    	; 0x5ec <parsingIPDRxData+0x130>
		{
			g_wifiIPDRxDataLen = rxLen;	
     57c:	90 93 52 04 	sts	0x0452, r25
     580:	80 93 51 04 	sts	0x0451, r24
			memcpy(g_wifiIPDRxData,buff+deliIndex+1,rxLen-2 );
     584:	0f 2e       	mov	r0, r31
     586:	ff e9       	ldi	r31, 0x9F	; 159
     588:	8f 2e       	mov	r8, r31
     58a:	f4 e0       	ldi	r31, 0x04	; 4
     58c:	9f 2e       	mov	r9, r31
     58e:	f0 2d       	mov	r31, r0
     590:	b5 01       	movw	r22, r10
     592:	6f 5f       	subi	r22, 0xFF	; 255
     594:	7f 4f       	sbci	r23, 0xFF	; 255
     596:	6c 0d       	add	r22, r12
     598:	7d 1d       	adc	r23, r13
     59a:	88 2d       	mov	r24, r8
     59c:	99 2d       	mov	r25, r9
     59e:	40 2f       	mov	r20, r16
     5a0:	51 2f       	mov	r21, r17
     5a2:	0e 94 80 12 	call	0x2500	; 0x2500 <memcpy>
			g_wifiIPDRxData[rxLen-2] = 0x0D;
     5a6:	f4 01       	movw	r30, r8
     5a8:	e0 0f       	add	r30, r16
     5aa:	f1 1f       	adc	r31, r17
     5ac:	8d e0       	ldi	r24, 0x0D	; 13
     5ae:	80 83       	st	Z, r24
			g_wifiIPDRxData[rxLen-1] = 0x0A;
     5b0:	f4 01       	movw	r30, r8
     5b2:	ee 0d       	add	r30, r14
     5b4:	ff 1d       	adc	r31, r15
     5b6:	8a e0       	ldi	r24, 0x0A	; 10
     5b8:	80 83       	st	Z, r24
			return 0;
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	18 c0       	rjmp	.+48     	; 0x5ee <parsingIPDRxData+0x132>
		}
		return 1;
	}
	g_wifiIPDRxDataLen = rxLen;
     5be:	90 93 52 04 	sts	0x0452, r25
     5c2:	80 93 51 04 	sts	0x0451, r24
	memcpy(g_wifiIPDRxData,buff+deliIndex+1,rxLen );
     5c6:	8f e9       	ldi	r24, 0x9F	; 159
     5c8:	94 e0       	ldi	r25, 0x04	; 4
     5ca:	b5 01       	movw	r22, r10
     5cc:	6f 5f       	subi	r22, 0xFF	; 255
     5ce:	7f 4f       	sbci	r23, 0xFF	; 255
     5d0:	6c 0d       	add	r22, r12
     5d2:	7d 1d       	adc	r23, r13
     5d4:	0e 94 80 12 	call	0x2500	; 0x2500 <memcpy>
	return 0;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	09 c0       	rjmp	.+18     	; 0x5ee <parsingIPDRxData+0x132>
			break;
		}
	}
	if ( deliIndex == -1)
	{
		return 1;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	07 c0       	rjmp	.+14     	; 0x5ee <parsingIPDRxData+0x132>
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	05 c0       	rjmp	.+10     	; 0x5ee <parsingIPDRxData+0x132>
	}
	if (deliIndex > 11 )
	{
		
		return 2;
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	03 c0       	rjmp	.+6      	; 0x5ee <parsingIPDRxData+0x132>
	
	rxLen = atoi(strTemp);
	
	if ( rxLen == 0)
	{
		return 2;
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <parsingIPDRxData+0x132>
			memcpy(g_wifiIPDRxData,buff+deliIndex+1,rxLen-2 );
			g_wifiIPDRxData[rxLen-2] = 0x0D;
			g_wifiIPDRxData[rxLen-1] = 0x0A;
			return 0;
		}
		return 1;
     5ec:	81 e0       	ldi	r24, 0x01	; 1
	}
	g_wifiIPDRxDataLen = rxLen;
	memcpy(g_wifiIPDRxData,buff+deliIndex+1,rxLen );
	return 0;
}
     5ee:	2a 96       	adiw	r28, 0x0a	; 10
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	de bf       	out	0x3e, r29	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	cd bf       	out	0x3d, r28	; 61
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	bf 90       	pop	r11
     60c:	af 90       	pop	r10
     60e:	9f 90       	pop	r9
     610:	8f 90       	pop	r8
     612:	08 95       	ret

00000614 <parsingMsg>:
#define  MSG_SEND_READY	8
#define  MSG_BYSY		9
#define  MSG_UNDER_MSG  10

uint8_t parsingMsg(uint8_t* buff, int buffLen)
{
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	ec 01       	movw	r28, r24
     61e:	8b 01       	movw	r16, r22
	//putCh2(g_wifiRxData[i]);
	debugprint("[%02X]",buff[i]);
}
debugprint("\r\n");
#endif	
	if (!strncmp((char*)buff,"OK",2))
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	72 e0       	ldi	r23, 0x02	; 2
     624:	42 e0       	ldi	r20, 0x02	; 2
     626:	50 e0       	ldi	r21, 0x00	; 0
     628:	0e 94 89 12 	call	0x2512	; 0x2512 <strncmp>
     62c:	28 2f       	mov	r18, r24
     62e:	39 2f       	mov	r19, r25
     630:	21 15       	cp	r18, r1
     632:	31 05       	cpc	r19, r1
     634:	09 f4       	brne	.+2      	; 0x638 <parsingMsg+0x24>
     636:	6a c0       	rjmp	.+212    	; 0x70c <parsingMsg+0xf8>
	{
		return MSG_OK;
	}
	else if (buff[0] == '>')
     638:	88 81       	ld	r24, Y
     63a:	8e 33       	cpi	r24, 0x3E	; 62
     63c:	09 f4       	brne	.+2      	; 0x640 <parsingMsg+0x2c>
     63e:	68 c0       	rjmp	.+208    	; 0x710 <parsingMsg+0xfc>
	{
		return MSG_SEND_READY;
	}
	else if ((buffLen >= 7) && !strncmp(buff,"SEND OK",7)  )
     640:	07 30       	cpi	r16, 0x07	; 7
     642:	11 05       	cpc	r17, r1
     644:	6c f0       	brlt	.+26     	; 0x660 <parsingMsg+0x4c>
     646:	ce 01       	movw	r24, r28
     648:	63 e0       	ldi	r22, 0x03	; 3
     64a:	72 e0       	ldi	r23, 0x02	; 2
     64c:	47 e0       	ldi	r20, 0x07	; 7
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	0e 94 89 12 	call	0x2512	; 0x2512 <strncmp>
     654:	28 2f       	mov	r18, r24
     656:	39 2f       	mov	r19, r25
     658:	21 15       	cp	r18, r1
     65a:	31 05       	cpc	r19, r1
     65c:	09 f4       	brne	.+2      	; 0x660 <parsingMsg+0x4c>
     65e:	5a c0       	rjmp	.+180    	; 0x714 <parsingMsg+0x100>
	{
		return MSG_SEND_OK;
	}
	else if ((buffLen >=4) &&  !strncmp(buff,"+IPD,",4) )
     660:	04 30       	cpi	r16, 0x04	; 4
     662:	11 05       	cpc	r17, r1
     664:	c4 f0       	brlt	.+48     	; 0x696 <parsingMsg+0x82>
     666:	ce 01       	movw	r24, r28
     668:	6b e0       	ldi	r22, 0x0B	; 11
     66a:	72 e0       	ldi	r23, 0x02	; 2
     66c:	44 e0       	ldi	r20, 0x04	; 4
     66e:	50 e0       	ldi	r21, 0x00	; 0
     670:	0e 94 89 12 	call	0x2512	; 0x2512 <strncmp>
     674:	28 2f       	mov	r18, r24
     676:	39 2f       	mov	r19, r25
     678:	21 15       	cp	r18, r1
     67a:	31 05       	cpc	r19, r1
     67c:	61 f4       	brne	.+24     	; 0x696 <parsingMsg+0x82>
	{
		uint8_t temp;
		temp = parsingIPDRxData(buff, buffLen);
     67e:	ce 01       	movw	r24, r28
     680:	b8 01       	movw	r22, r16
     682:	0e 94 5e 02 	call	0x4bc	; 0x4bc <parsingIPDRxData>
		if ( temp == 0)
     686:	88 23       	and	r24, r24
     688:	09 f4       	brne	.+2      	; 0x68c <parsingMsg+0x78>
     68a:	46 c0       	rjmp	.+140    	; 0x718 <parsingMsg+0x104>
			return MSG_RX;
		else if (temp == 1)
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	09 f0       	breq	.+2      	; 0x692 <parsingMsg+0x7e>
     690:	45 c0       	rjmp	.+138    	; 0x71c <parsingMsg+0x108>
			return MSG_RXING;
     692:	84 e0       	ldi	r24, 0x04	; 4
     694:	4e c0       	rjmp	.+156    	; 0x732 <parsingMsg+0x11e>
		
		return MSG_UNDEFINED;	// fail
	}
	else if ((buffLen >= 5) && !strncmp(buff,"ERROR",5)  )
     696:	05 30       	cpi	r16, 0x05	; 5
     698:	11 05       	cpc	r17, r1
     69a:	64 f0       	brlt	.+24     	; 0x6b4 <parsingMsg+0xa0>
     69c:	ce 01       	movw	r24, r28
     69e:	61 e1       	ldi	r22, 0x11	; 17
     6a0:	72 e0       	ldi	r23, 0x02	; 2
     6a2:	45 e0       	ldi	r20, 0x05	; 5
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	0e 94 89 12 	call	0x2512	; 0x2512 <strncmp>
     6aa:	28 2f       	mov	r18, r24
     6ac:	39 2f       	mov	r19, r25
     6ae:	21 15       	cp	r18, r1
     6b0:	31 05       	cpc	r19, r1
     6b2:	b1 f1       	breq	.+108    	; 0x720 <parsingMsg+0x10c>
	{
		return MSG_ERROR;
	}
	else if ((buffLen >= 4) && !strncmp(buff,"FAIL",5)  )
     6b4:	04 30       	cpi	r16, 0x04	; 4
     6b6:	11 05       	cpc	r17, r1
     6b8:	64 f0       	brlt	.+24     	; 0x6d2 <parsingMsg+0xbe>
     6ba:	ce 01       	movw	r24, r28
     6bc:	67 e1       	ldi	r22, 0x17	; 23
     6be:	72 e0       	ldi	r23, 0x02	; 2
     6c0:	45 e0       	ldi	r20, 0x05	; 5
     6c2:	50 e0       	ldi	r21, 0x00	; 0
     6c4:	0e 94 89 12 	call	0x2512	; 0x2512 <strncmp>
     6c8:	28 2f       	mov	r18, r24
     6ca:	39 2f       	mov	r19, r25
     6cc:	21 15       	cp	r18, r1
     6ce:	31 05       	cpc	r19, r1
     6d0:	49 f1       	breq	.+82     	; 0x724 <parsingMsg+0x110>
	{
		return MSG_FAIL;
	}
	else if ((buffLen >= 7) && !strncmp(buff,"ALREADY",7)  )
     6d2:	07 30       	cpi	r16, 0x07	; 7
     6d4:	11 05       	cpc	r17, r1
     6d6:	44 f1       	brlt	.+80     	; 0x728 <parsingMsg+0x114>
     6d8:	ce 01       	movw	r24, r28
     6da:	6c e1       	ldi	r22, 0x1C	; 28
     6dc:	72 e0       	ldi	r23, 0x02	; 2
     6de:	47 e0       	ldi	r20, 0x07	; 7
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	0e 94 89 12 	call	0x2512	; 0x2512 <strncmp>
     6e6:	28 2f       	mov	r18, r24
     6e8:	39 2f       	mov	r19, r25
     6ea:	21 15       	cp	r18, r1
     6ec:	31 05       	cpc	r19, r1
     6ee:	f1 f0       	breq	.+60     	; 0x72c <parsingMsg+0x118>
	{
		return MSG_ALREAD;
	}
	else if ((buffLen>= 7) && !strncmp(buff,"busy...",7) )
     6f0:	ce 01       	movw	r24, r28
     6f2:	64 e2       	ldi	r22, 0x24	; 36
     6f4:	72 e0       	ldi	r23, 0x02	; 2
     6f6:	47 e0       	ldi	r20, 0x07	; 7
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	0e 94 89 12 	call	0x2512	; 0x2512 <strncmp>
     6fe:	28 2f       	mov	r18, r24
     700:	39 2f       	mov	r19, r25
     702:	21 15       	cp	r18, r1
     704:	31 05       	cpc	r19, r1
     706:	a1 f4       	brne	.+40     	; 0x730 <parsingMsg+0x11c>
	{
		return MSG_BYSY;
     708:	89 e0       	ldi	r24, 0x09	; 9
     70a:	13 c0       	rjmp	.+38     	; 0x732 <parsingMsg+0x11e>
}
debugprint("\r\n");
#endif	
	if (!strncmp((char*)buff,"OK",2))
	{
		return MSG_OK;
     70c:	82 e0       	ldi	r24, 0x02	; 2
     70e:	11 c0       	rjmp	.+34     	; 0x732 <parsingMsg+0x11e>
	}
	else if (buff[0] == '>')
	{
		return MSG_SEND_READY;
     710:	88 e0       	ldi	r24, 0x08	; 8
     712:	0f c0       	rjmp	.+30     	; 0x732 <parsingMsg+0x11e>
	}
	else if ((buffLen >= 7) && !strncmp(buff,"SEND OK",7)  )
	{
		return MSG_SEND_OK;
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	0d c0       	rjmp	.+26     	; 0x732 <parsingMsg+0x11e>
	else if ((buffLen >=4) &&  !strncmp(buff,"+IPD,",4) )
	{
		uint8_t temp;
		temp = parsingIPDRxData(buff, buffLen);
		if ( temp == 0)
			return MSG_RX;
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	0b c0       	rjmp	.+22     	; 0x732 <parsingMsg+0x11e>
		else if (temp == 1)
			return MSG_RXING;
		
		return MSG_UNDEFINED;	// fail
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	09 c0       	rjmp	.+18     	; 0x732 <parsingMsg+0x11e>
	}
	else if ((buffLen >= 5) && !strncmp(buff,"ERROR",5)  )
	{
		return MSG_ERROR;
     720:	85 e0       	ldi	r24, 0x05	; 5
     722:	07 c0       	rjmp	.+14     	; 0x732 <parsingMsg+0x11e>
	}
	else if ((buffLen >= 4) && !strncmp(buff,"FAIL",5)  )
	{
		return MSG_FAIL;
     724:	86 e0       	ldi	r24, 0x06	; 6
     726:	05 c0       	rjmp	.+10     	; 0x732 <parsingMsg+0x11e>
	else if (buffLen>= 7)
	{
		return MSG_UNDEFINED;
	}
	
	return MSG_UNDER_MSG;
     728:	8a e0       	ldi	r24, 0x0A	; 10
     72a:	03 c0       	rjmp	.+6      	; 0x732 <parsingMsg+0x11e>
	{
		return MSG_FAIL;
	}
	else if ((buffLen >= 7) && !strncmp(buff,"ALREADY",7)  )
	{
		return MSG_ALREAD;
     72c:	87 e0       	ldi	r24, 0x07	; 7
     72e:	01 c0       	rjmp	.+2      	; 0x732 <parsingMsg+0x11e>
	{
		return MSG_BYSY;
	}
	else if (buffLen>= 7)
	{
		return MSG_UNDEFINED;
     730:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return MSG_UNDER_MSG;
}
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	08 95       	ret

0000073c <rxDataProcess>:

uint8_t rxDataProcess(uint8_t* msgBuff, uint8_t msgBuffLen)
{
     73c:	2f 92       	push	r2
     73e:	3f 92       	push	r3
     740:	4f 92       	push	r4
     742:	5f 92       	push	r5
     744:	6f 92       	push	r6
     746:	7f 92       	push	r7
     748:	8f 92       	push	r8
     74a:	9f 92       	push	r9
     74c:	af 92       	push	r10
     74e:	bf 92       	push	r11
     750:	cf 92       	push	r12
     752:	df 92       	push	r13
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	c2 50       	subi	r28, 0x02	; 2
     766:	d2 40       	sbci	r29, 0x02	; 2
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	de bf       	out	0x3e, r29	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	cd bf       	out	0x3d, r28	; 61
     772:	3c 01       	movw	r6, r24
     774:	c6 2e       	mov	r12, r22
	int lineFeedIndex;
	
	uint8_t syncDetected;
	uint8_t temp;
	uint8_t msgBuffIndex = 0;
	if (g_wifiRxCurrentIndex == 0 )
     776:	80 91 53 04 	lds	r24, 0x0453
     77a:	88 23       	and	r24, r24
     77c:	09 f4       	brne	.+2      	; 0x780 <rxDataProcess+0x44>
     77e:	0b c1       	rjmp	.+534    	; 0x996 <rxDataProcess+0x25a>
		return 0;
	
	if ((g_rxDataLen + g_wifiRxCurrentIndex) >= MAX_WIFI_RX_DATA )
     780:	20 91 53 04 	lds	r18, 0x0453
     784:	80 91 4e 04 	lds	r24, 0x044E
     788:	90 91 4f 04 	lds	r25, 0x044F
     78c:	82 0f       	add	r24, r18
     78e:	91 1d       	adc	r25, r1
     790:	22 e0       	ldi	r18, 0x02	; 2
     792:	80 30       	cpi	r24, 0x00	; 0
     794:	92 07       	cpc	r25, r18
     796:	44 f0       	brlt	.+16     	; 0x7a8 <rxDataProcess+0x6c>
	{
		g_rxDataLen = 0;
     798:	10 92 4f 04 	sts	0x044F, r1
     79c:	10 92 4e 04 	sts	0x044E, r1
		g_underRxDataFlag = 0;
     7a0:	10 92 50 04 	sts	0x0450, r1
		return msgBuffIndex;
     7a4:	dd 24       	eor	r13, r13
     7a6:	f8 c0       	rjmp	.+496    	; 0x998 <rxDataProcess+0x25c>
	}
	memcpy(g_rxDataBuff,g_wifiRxData,g_wifiRxCurrentIndex);
     7a8:	40 91 53 04 	lds	r20, 0x0453
     7ac:	8f e9       	ldi	r24, 0x9F	; 159
     7ae:	98 e0       	ldi	r25, 0x08	; 8
     7b0:	6f e9       	ldi	r22, 0x9F	; 159
     7b2:	76 e0       	ldi	r23, 0x06	; 6
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	0e 94 80 12 	call	0x2500	; 0x2500 <memcpy>
	g_rxDataLen += (int)g_wifiRxCurrentIndex;
     7ba:	20 91 53 04 	lds	r18, 0x0453
     7be:	80 91 4e 04 	lds	r24, 0x044E
     7c2:	90 91 4f 04 	lds	r25, 0x044F
     7c6:	82 0f       	add	r24, r18
     7c8:	91 1d       	adc	r25, r1
     7ca:	90 93 4f 04 	sts	0x044F, r25
     7ce:	80 93 4e 04 	sts	0x044E, r24
	g_wifiRxCurrentIndex = 0;
     7d2:	10 92 53 04 	sts	0x0453, r1
	int  carriageReturnIndex;
	int lineFeedIndex;
	
	uint8_t syncDetected;
	uint8_t temp;
	uint8_t msgBuffIndex = 0;
     7d6:	dd 24       	eor	r13, r13
	while(1)
	{
		carriageReturnIndex = -1;
		lineFeedIndex = -1;
		
		for ( int i = 0; i < g_rxDataLen ; i++ )
     7d8:	aa 24       	eor	r10, r10
     7da:	bb 24       	eor	r11, r11
	}
#endif

	while(1)
	{
		carriageReturnIndex = -1;
     7dc:	88 24       	eor	r8, r8
     7de:	8a 94       	dec	r8
     7e0:	98 2c       	mov	r9, r8
					break;
				}
			}
			else
			{
				if ( g_rxDataBuff[i] ==  CARRIAGE_RETURN )
     7e2:	0f 2e       	mov	r0, r31
     7e4:	ff e9       	ldi	r31, 0x9F	; 159
     7e6:	ef 2e       	mov	r14, r31
     7e8:	f8 e0       	ldi	r31, 0x08	; 8
     7ea:	ff 2e       	mov	r15, r31
     7ec:	f0 2d       	mov	r31, r0
     7ee:	cf 5f       	subi	r28, 0xFF	; 255
     7f0:	dd 4f       	sbci	r29, 0xFD	; 253
     7f2:	e8 82       	st	Y, r14
     7f4:	c1 50       	subi	r28, 0x01	; 1
     7f6:	d2 40       	sbci	r29, 0x02	; 2
     7f8:	ce 5f       	subi	r28, 0xFE	; 254
     7fa:	dd 4f       	sbci	r29, 0xFD	; 253
     7fc:	f8 82       	st	Y, r15
     7fe:	c2 50       	subi	r28, 0x02	; 2
     800:	d2 40       	sbci	r29, 0x02	; 2
				if ( (g_rxDataBuff[i] ==  LINE_FEED) && ((carriageReturnIndex+1) == i ) )
				{
					lineFeedIndex = i;
					if ( lineFeedIndex == 1)//
					{
						memcpy(strTemp, g_rxDataBuff+lineFeedIndex+1, g_rxDataLen - lineFeedIndex -1);
     802:	0f 2e       	mov	r0, r31
     804:	f1 ea       	ldi	r31, 0xA1	; 161
     806:	4f 2e       	mov	r4, r31
     808:	f8 e0       	ldi	r31, 0x08	; 8
     80a:	5f 2e       	mov	r5, r31
     80c:	f0 2d       	mov	r31, r0
						memcpy(g_rxDataBuff , strTemp, g_rxDataLen - lineFeedIndex -1);
     80e:	0f 2e       	mov	r0, r31
     810:	fe ef       	ldi	r31, 0xFE	; 254
     812:	2f 2e       	mov	r2, r31
     814:	ff ef       	ldi	r31, 0xFF	; 255
     816:	3f 2e       	mov	r3, r31
     818:	f0 2d       	mov	r31, r0
     81a:	24 0c       	add	r2, r4
     81c:	35 1c       	adc	r3, r5
	while(1)
	{
		carriageReturnIndex = -1;
		lineFeedIndex = -1;
		
		for ( int i = 0; i < g_rxDataLen ; i++ )
     81e:	80 91 4e 04 	lds	r24, 0x044E
     822:	90 91 4f 04 	lds	r25, 0x044F
     826:	18 16       	cp	r1, r24
     828:	19 06       	cpc	r1, r25
     82a:	0c f0       	brlt	.+2      	; 0x82e <rxDataProcess+0xf2>
     82c:	9b c0       	rjmp	.+310    	; 0x964 <rxDataProcess+0x228>
     82e:	85 01       	movw	r16, r10
	}
#endif

	while(1)
	{
		carriageReturnIndex = -1;
     830:	b4 01       	movw	r22, r8
		lineFeedIndex = -1;
		
		for ( int i = 0; i < g_rxDataLen ; i++ )
		{
			// check carriage return and line feed
			if ( carriageReturnIndex !=  -1)
     832:	8f ef       	ldi	r24, 0xFF	; 255
     834:	6f 3f       	cpi	r22, 0xFF	; 255
     836:	78 07       	cpc	r23, r24
     838:	09 f4       	brne	.+2      	; 0x83c <rxDataProcess+0x100>
     83a:	83 c0       	rjmp	.+262    	; 0x942 <rxDataProcess+0x206>
			{
				if ( (g_rxDataBuff[i] ==  LINE_FEED) && ((carriageReturnIndex+1) == i ) )
     83c:	f7 01       	movw	r30, r14
     83e:	e0 0f       	add	r30, r16
     840:	f1 1f       	adc	r31, r17
     842:	80 81       	ld	r24, Z
     844:	8a 30       	cpi	r24, 0x0A	; 10
     846:	09 f0       	breq	.+2      	; 0x84a <rxDataProcess+0x10e>
     848:	83 c0       	rjmp	.+262    	; 0x950 <rxDataProcess+0x214>
     84a:	cb 01       	movw	r24, r22
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	80 17       	cp	r24, r16
     850:	91 07       	cpc	r25, r17
     852:	09 f0       	breq	.+2      	; 0x856 <rxDataProcess+0x11a>
     854:	7d c0       	rjmp	.+250    	; 0x950 <rxDataProcess+0x214>
				{
					lineFeedIndex = i;
					if ( lineFeedIndex == 1)//
     856:	81 30       	cpi	r24, 0x01	; 1
     858:	91 05       	cpc	r25, r1
     85a:	19 f5       	brne	.+70     	; 0x8a2 <rxDataProcess+0x166>
					{
						memcpy(strTemp, g_rxDataBuff+lineFeedIndex+1, g_rxDataLen - lineFeedIndex -1);
     85c:	40 91 4e 04 	lds	r20, 0x044E
     860:	50 91 4f 04 	lds	r21, 0x044F
     864:	42 50       	subi	r20, 0x02	; 2
     866:	50 40       	sbci	r21, 0x00	; 0
     868:	ce 01       	movw	r24, r28
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	64 2d       	mov	r22, r4
     86e:	75 2d       	mov	r23, r5
     870:	0e 94 80 12 	call	0x2500	; 0x2500 <memcpy>
						memcpy(g_rxDataBuff , strTemp, g_rxDataLen - lineFeedIndex -1);
     874:	40 91 4e 04 	lds	r20, 0x044E
     878:	50 91 4f 04 	lds	r21, 0x044F
     87c:	42 50       	subi	r20, 0x02	; 2
     87e:	50 40       	sbci	r21, 0x00	; 0
     880:	82 2d       	mov	r24, r2
     882:	93 2d       	mov	r25, r3
     884:	be 01       	movw	r22, r28
     886:	6f 5f       	subi	r22, 0xFF	; 255
     888:	7f 4f       	sbci	r23, 0xFF	; 255
     88a:	0e 94 80 12 	call	0x2500	; 0x2500 <memcpy>
						g_rxDataLen -= (lineFeedIndex + 1);
     88e:	80 91 4e 04 	lds	r24, 0x044E
     892:	90 91 4f 04 	lds	r25, 0x044F
     896:	02 97       	sbiw	r24, 0x02	; 2
     898:	90 93 4f 04 	sts	0x044F, r25
     89c:	80 93 4e 04 	sts	0x044E, r24
     8a0:	be cf       	rjmp	.-132    	; 0x81e <rxDataProcess+0xe2>
						break;
					}
					temp = parsingMsg(g_rxDataBuff, carriageReturnIndex);
     8a2:	cf 5f       	subi	r28, 0xFF	; 255
     8a4:	dd 4f       	sbci	r29, 0xFD	; 253
     8a6:	88 81       	ld	r24, Y
     8a8:	c1 50       	subi	r28, 0x01	; 1
     8aa:	d2 40       	sbci	r29, 0x02	; 2
     8ac:	ce 5f       	subi	r28, 0xFE	; 254
     8ae:	dd 4f       	sbci	r29, 0xFD	; 253
     8b0:	98 81       	ld	r25, Y
     8b2:	c2 50       	subi	r28, 0x02	; 2
     8b4:	d2 40       	sbci	r29, 0x02	; 2
     8b6:	0e 94 0a 03 	call	0x614	; 0x614 <parsingMsg>
					//					debugprint("M1:%d\r\n",temp);
					if ( msgBuffIndex <  msgBuffLen )
     8ba:	dc 14       	cp	r13, r12
     8bc:	28 f4       	brcc	.+10     	; 0x8c8 <rxDataProcess+0x18c>
					{
						msgBuff[msgBuffIndex] = temp;
     8be:	f3 01       	movw	r30, r6
     8c0:	ed 0d       	add	r30, r13
     8c2:	f1 1d       	adc	r31, r1
     8c4:	80 83       	st	Z, r24
						msgBuffIndex++;
     8c6:	d3 94       	inc	r13
						
					}
					if ( (lineFeedIndex+1) == g_rxDataLen ) //when  line feed is data end
     8c8:	20 91 4e 04 	lds	r18, 0x044E
     8cc:	30 91 4f 04 	lds	r19, 0x044F
     8d0:	c8 01       	movw	r24, r16
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	82 17       	cp	r24, r18
     8d6:	93 07       	cpc	r25, r19
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <rxDataProcess+0x1a4>
					{
						g_underRxDataFlag = 0;
     8da:	10 92 50 04 	sts	0x0450, r1
						return msgBuffIndex;
     8de:	5c c0       	rjmp	.+184    	; 0x998 <rxDataProcess+0x25c>
					}
					memcpy(strTemp, g_rxDataBuff+lineFeedIndex+1, g_rxDataLen - lineFeedIndex -1);
     8e0:	b8 01       	movw	r22, r16
     8e2:	60 56       	subi	r22, 0x60	; 96
     8e4:	77 4f       	sbci	r23, 0xF7	; 247
     8e6:	40 91 4e 04 	lds	r20, 0x044E
     8ea:	50 91 4f 04 	lds	r21, 0x044F
     8ee:	40 1b       	sub	r20, r16
     8f0:	51 0b       	sbc	r21, r17
     8f2:	41 50       	subi	r20, 0x01	; 1
     8f4:	50 40       	sbci	r21, 0x00	; 0
     8f6:	ce 01       	movw	r24, r28
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	0e 94 80 12 	call	0x2500	; 0x2500 <memcpy>
					memcpy(g_rxDataBuff , strTemp, g_rxDataLen - lineFeedIndex -1);
     8fe:	40 91 4e 04 	lds	r20, 0x044E
     902:	50 91 4f 04 	lds	r21, 0x044F
     906:	40 1b       	sub	r20, r16
     908:	51 0b       	sbc	r21, r17
     90a:	41 50       	subi	r20, 0x01	; 1
     90c:	50 40       	sbci	r21, 0x00	; 0
     90e:	8e 2d       	mov	r24, r14
     910:	9f 2d       	mov	r25, r15
     912:	be 01       	movw	r22, r28
     914:	6f 5f       	subi	r22, 0xFF	; 255
     916:	7f 4f       	sbci	r23, 0xFF	; 255
     918:	0e 94 80 12 	call	0x2500	; 0x2500 <memcpy>
					g_rxDataLen -= (lineFeedIndex + 1);
     91c:	20 91 4e 04 	lds	r18, 0x044E
     920:	30 91 4f 04 	lds	r19, 0x044F
     924:	c8 01       	movw	r24, r16
     926:	80 95       	com	r24
     928:	90 95       	com	r25
     92a:	82 0f       	add	r24, r18
     92c:	93 1f       	adc	r25, r19
     92e:	90 93 4f 04 	sts	0x044F, r25
     932:	80 93 4e 04 	sts	0x044E, r24
					continue;
				}
			}
		}
		
		if ( lineFeedIndex == -1) // no find sync, check rxing data
     936:	2f ef       	ldi	r18, 0xFF	; 255
     938:	0f 3f       	cpi	r16, 0xFF	; 255
     93a:	12 07       	cpc	r17, r18
     93c:	09 f0       	breq	.+2      	; 0x940 <rxDataProcess+0x204>
     93e:	6f cf       	rjmp	.-290    	; 0x81e <rxDataProcess+0xe2>
     940:	11 c0       	rjmp	.+34     	; 0x964 <rxDataProcess+0x228>
					break;
				}
			}
			else
			{
				if ( g_rxDataBuff[i] ==  CARRIAGE_RETURN )
     942:	f7 01       	movw	r30, r14
     944:	e0 0f       	add	r30, r16
     946:	f1 1f       	adc	r31, r17
     948:	80 81       	ld	r24, Z
     94a:	8d 30       	cpi	r24, 0x0D	; 13
     94c:	09 f4       	brne	.+2      	; 0x950 <rxDataProcess+0x214>
     94e:	b8 01       	movw	r22, r16
	while(1)
	{
		carriageReturnIndex = -1;
		lineFeedIndex = -1;
		
		for ( int i = 0; i < g_rxDataLen ; i++ )
     950:	0f 5f       	subi	r16, 0xFF	; 255
     952:	1f 4f       	sbci	r17, 0xFF	; 255
     954:	80 91 4e 04 	lds	r24, 0x044E
     958:	90 91 4f 04 	lds	r25, 0x044F
     95c:	08 17       	cp	r16, r24
     95e:	19 07       	cpc	r17, r25
     960:	0c f4       	brge	.+2      	; 0x964 <rxDataProcess+0x228>
     962:	67 cf       	rjmp	.-306    	; 0x832 <rxDataProcess+0xf6>
			}
		}
		
		if ( lineFeedIndex == -1) // no find sync, check rxing data
		{
			g_underRxDataFlag = 1;
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	80 93 50 04 	sts	0x0450, r24
			
			temp = parsingMsg(g_rxDataBuff, g_rxDataLen);
     96a:	60 91 4e 04 	lds	r22, 0x044E
     96e:	70 91 4f 04 	lds	r23, 0x044F
     972:	8f e9       	ldi	r24, 0x9F	; 159
     974:	98 e0       	ldi	r25, 0x08	; 8
     976:	0e 94 0a 03 	call	0x614	; 0x614 <parsingMsg>
			//			debugprint("M2:%d\r\n",temp);
			if ((temp ==MSG_UNDER_MSG) || (temp ==MSG_RXING) )
     97a:	8a 30       	cpi	r24, 0x0A	; 10
     97c:	31 f0       	breq	.+12     	; 0x98a <rxDataProcess+0x24e>
     97e:	84 30       	cpi	r24, 0x04	; 4
     980:	21 f0       	breq	.+8      	; 0x98a <rxDataProcess+0x24e>
			{
			}
			else
			{
				g_rxDataLen = 0;
     982:	10 92 4f 04 	sts	0x044F, r1
     986:	10 92 4e 04 	sts	0x044E, r1
			}
			msgBuff[msgBuffIndex] = temp;
     98a:	f3 01       	movw	r30, r6
     98c:	ed 0d       	add	r30, r13
     98e:	f1 1d       	adc	r31, r1
     990:	80 83       	st	Z, r24
			msgBuffIndex++;
     992:	d3 94       	inc	r13
			return msgBuffIndex;
     994:	01 c0       	rjmp	.+2      	; 0x998 <rxDataProcess+0x25c>
	
	uint8_t syncDetected;
	uint8_t temp;
	uint8_t msgBuffIndex = 0;
	if (g_wifiRxCurrentIndex == 0 )
		return 0;
     996:	dd 24       	eor	r13, r13
			return msgBuffIndex;
		}
	}
	
	return msgBuffIndex;
}
     998:	8d 2d       	mov	r24, r13
     99a:	ce 5f       	subi	r28, 0xFE	; 254
     99c:	dd 4f       	sbci	r29, 0xFD	; 253
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	cd bf       	out	0x3d, r28	; 61
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	ff 90       	pop	r15
     9b2:	ef 90       	pop	r14
     9b4:	df 90       	pop	r13
     9b6:	cf 90       	pop	r12
     9b8:	bf 90       	pop	r11
     9ba:	af 90       	pop	r10
     9bc:	9f 90       	pop	r9
     9be:	8f 90       	pop	r8
     9c0:	7f 90       	pop	r7
     9c2:	6f 90       	pop	r6
     9c4:	5f 90       	pop	r5
     9c6:	4f 90       	pop	r4
     9c8:	3f 90       	pop	r3
     9ca:	2f 90       	pop	r2
     9cc:	08 95       	ret

000009ce <wifiMain>:
[04][00][00][00][00][00][00][00][00][00][00][00][00][01][02][04][00][00][00][00][00][00][00][00][03]
[00][00][00][00][1E][00][00][00][FF]
*/

void wifiMain()
{
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <wifiMain+0x6>
     9d4:	0f 92       	push	r0
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
	g_wifiRxCurrentIndex = 0;
#else
	int i;
	int  endIndex = -1;
	
	if ( g_wifiIPDRxDataLen )// no ipd data
     9da:	80 91 51 04 	lds	r24, 0x0451
     9de:	90 91 52 04 	lds	r25, 0x0452
     9e2:	00 97       	sbiw	r24, 0x00	; 0
     9e4:	99 f0       	breq	.+38     	; 0xa0c <wifiMain+0x3e>
	{
		if (callbackFnc != NULL )
     9e6:	e0 91 9f 0a 	lds	r30, 0x0A9F
     9ea:	f0 91 a0 0a 	lds	r31, 0x0AA0
     9ee:	30 97       	sbiw	r30, 0x00	; 0
     9f0:	49 f0       	breq	.+18     	; 0xa04 <wifiMain+0x36>
		{
			callbackFnc(EVENT_RX_DATA,g_wifiIPDRxData,g_wifiIPDRxDataLen);
     9f2:	40 91 51 04 	lds	r20, 0x0451
     9f6:	50 91 52 04 	lds	r21, 0x0452
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	6f e9       	ldi	r22, 0x9F	; 159
     a00:	74 e0       	ldi	r23, 0x04	; 4
     a02:	19 95       	eicall
		}
		g_wifiIPDRxDataLen = 0;
     a04:	10 92 52 04 	sts	0x0452, r1
     a08:	10 92 51 04 	sts	0x0451, r1
		
	}
	
	if ( !g_wifiRxCurrentIndex )
     a0c:	80 91 53 04 	lds	r24, 0x0453
     a10:	88 23       	and	r24, r24
     a12:	f1 f0       	breq	.+60     	; 0xa50 <wifiMain+0x82>
	}
#endif

	uint8_t msgBuff[4];
	uint8_t msgRxNum;
	msgRxNum = rxDataProcess(msgBuff,4);
     a14:	ce 01       	movw	r24, r28
     a16:	01 96       	adiw	r24, 0x01	; 1
     a18:	64 e0       	ldi	r22, 0x04	; 4
     a1a:	0e 94 9e 03 	call	0x73c	; 0x73c <rxDataProcess>
	
	
	if ( !g_wifiIPDRxDataLen )// no ipd data
     a1e:	80 91 51 04 	lds	r24, 0x0451
     a22:	90 91 52 04 	lds	r25, 0x0452
     a26:	00 97       	sbiw	r24, 0x00	; 0
     a28:	99 f0       	breq	.+38     	; 0xa50 <wifiMain+0x82>
		return;

	if (callbackFnc != NULL )
     a2a:	e0 91 9f 0a 	lds	r30, 0x0A9F
     a2e:	f0 91 a0 0a 	lds	r31, 0x0AA0
     a32:	30 97       	sbiw	r30, 0x00	; 0
     a34:	49 f0       	breq	.+18     	; 0xa48 <wifiMain+0x7a>
	{
		callbackFnc(EVENT_RX_DATA,g_wifiIPDRxData,g_wifiIPDRxDataLen);
     a36:	40 91 51 04 	lds	r20, 0x0451
     a3a:	50 91 52 04 	lds	r21, 0x0452
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	6f e9       	ldi	r22, 0x9F	; 159
     a44:	74 e0       	ldi	r23, 0x04	; 4
     a46:	19 95       	eicall
	}
	g_wifiIPDRxDataLen = 0;
     a48:	10 92 52 04 	sts	0x0452, r1
     a4c:	10 92 51 04 	sts	0x0451, r1

	#endif
}
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	08 95       	ret

00000a5e <WaitOKWithPrint>:

int WaitOKWithPrint()
{
     a5e:	2f 92       	push	r2
     a60:	3f 92       	push	r3
     a62:	4f 92       	push	r4
     a64:	5f 92       	push	r5
     a66:	6f 92       	push	r6
     a68:	7f 92       	push	r7
     a6a:	8f 92       	push	r8
     a6c:	9f 92       	push	r9
     a6e:	af 92       	push	r10
     a70:	bf 92       	push	r11
     a72:	cf 92       	push	r12
     a74:	df 92       	push	r13
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
     a86:	c0 50       	subi	r28, 0x00	; 0
     a88:	d2 40       	sbci	r29, 0x02	; 2
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	f8 94       	cli
     a8e:	de bf       	out	0x3e, r29	; 62
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	cd bf       	out	0x3d, r28	; 61
	uint8_t strTemp[512];
	int currentIndex = 0;
     a94:	ee 24       	eor	r14, r14
     a96:	ff 24       	eor	r15, r15
		if (g_wifiRxCurrentIndex)
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
			{
				//
				strTemp[currentIndex++] = g_wifiRxData[i];
     a98:	0f 2e       	mov	r0, r31
     a9a:	ff e9       	ldi	r31, 0x9F	; 159
     a9c:	af 2e       	mov	r10, r31
     a9e:	f6 e0       	ldi	r31, 0x06	; 6
     aa0:	bf 2e       	mov	r11, r31
     aa2:	f0 2d       	mov	r31, r0
						{
							g_wifiRxCurrentIndex = 0;
							//							debugprint("error\r\n");
							return -1;
						}
						else if ((currentIndex >= 7) && !strncmp(strTemp,"ERROR",5)  )
     aa4:	0f 2e       	mov	r0, r31
     aa6:	f1 e1       	ldi	r31, 0x11	; 17
     aa8:	2f 2e       	mov	r2, r31
     aaa:	f2 e0       	ldi	r31, 0x02	; 2
     aac:	3f 2e       	mov	r3, r31
     aae:	f0 2d       	mov	r31, r0
				{
					//debugprint("\r\n");
					if ( currentIndex >= 4) // "OK\r\n"
					{
						// check end  "OK\r\n"
						if (!strncmp((char*)strTemp,"OK",2))
     ab0:	0f 2e       	mov	r0, r31
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	6f 2e       	mov	r6, r31
     ab6:	f2 e0       	ldi	r31, 0x02	; 2
     ab8:	7f 2e       	mov	r7, r31
     aba:	f0 2d       	mov	r31, r0
						{
							g_wifiRxCurrentIndex = 0;
							return 0;
						}
						else if ((currentIndex >=4) &&  !strncmp(strTemp,"+IPD,",4) )
     abc:	0f 2e       	mov	r0, r31
     abe:	fb e0       	ldi	r31, 0x0B	; 11
     ac0:	4f 2e       	mov	r4, r31
     ac2:	f2 e0       	ldi	r31, 0x02	; 2
     ac4:	5f 2e       	mov	r5, r31
     ac6:	f0 2d       	mov	r31, r0
	OK\r\n
	*/
	
	while(1)
	{
		if (g_wifiRxCurrentIndex)
     ac8:	80 91 53 04 	lds	r24, 0x0453
     acc:	88 23       	and	r24, r24
     ace:	e1 f3       	breq	.-8      	; 0xac8 <WaitOKWithPrint+0x6a>
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
     ad0:	80 91 53 04 	lds	r24, 0x0453
     ad4:	88 23       	and	r24, r24
     ad6:	09 f4       	brne	.+2      	; 0xada <WaitOKWithPrint+0x7c>
     ad8:	a9 c0       	rjmp	.+338    	; 0xc2c <WaitOKWithPrint+0x1ce>
     ada:	cc 24       	eor	r12, r12
     adc:	dd 24       	eor	r13, r13
						
						#endif
						//						debugprint(strTemp);
						
					}
					currentIndex = 0;
     ade:	88 24       	eor	r8, r8
     ae0:	99 24       	eor	r9, r9
		if (g_wifiRxCurrentIndex)
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
			{
				//
				strTemp[currentIndex++] = g_wifiRxData[i];
     ae2:	85 01       	movw	r16, r10
     ae4:	0c 0d       	add	r16, r12
     ae6:	1d 1d       	adc	r17, r13
     ae8:	f8 01       	movw	r30, r16
     aea:	80 81       	ld	r24, Z
     aec:	e1 e0       	ldi	r30, 0x01	; 1
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	ec 0f       	add	r30, r28
     af2:	fd 1f       	adc	r31, r29
     af4:	ee 0d       	add	r30, r14
     af6:	ff 1d       	adc	r31, r15
     af8:	80 83       	st	Z, r24
     afa:	08 94       	sec
     afc:	e1 1c       	adc	r14, r1
     afe:	f1 1c       	adc	r15, r1
				//if((g_wifiRxData[i] !=0x0D) && (g_wifiRxData[i] !=0x0A)   )
				putCh2(g_wifiRxData[i]);
     b00:	f8 01       	movw	r30, r16
     b02:	80 81       	ld	r24, Z
     b04:	0e 94 1b 01 	call	0x236	; 0x236 <putCh2>
				
				if (g_wifiRxData[i] == 0x0A)
     b08:	f8 01       	movw	r30, r16
     b0a:	80 81       	ld	r24, Z
     b0c:	8a 30       	cpi	r24, 0x0A	; 10
     b0e:	09 f0       	breq	.+2      	; 0xb12 <WaitOKWithPrint+0xb4>
     b10:	83 c0       	rjmp	.+262    	; 0xc18 <WaitOKWithPrint+0x1ba>
				{
					//debugprint("\r\n");
					if ( currentIndex >= 4) // "OK\r\n"
     b12:	f4 e0       	ldi	r31, 0x04	; 4
     b14:	ef 16       	cp	r14, r31
     b16:	f1 04       	cpc	r15, r1
     b18:	0c f4       	brge	.+2      	; 0xb1c <WaitOKWithPrint+0xbe>
     b1a:	79 c0       	rjmp	.+242    	; 0xc0e <WaitOKWithPrint+0x1b0>
					{
						// check end  "OK\r\n"
						if (!strncmp((char*)strTemp,"OK",2))
     b1c:	ce 01       	movw	r24, r28
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	b3 01       	movw	r22, r6
     b22:	42 e0       	ldi	r20, 0x02	; 2
     b24:	50 e0       	ldi	r21, 0x00	; 0
     b26:	0e 94 89 12 	call	0x2512	; 0x2512 <strncmp>
     b2a:	28 2f       	mov	r18, r24
     b2c:	39 2f       	mov	r19, r25
     b2e:	21 15       	cp	r18, r1
     b30:	31 05       	cpc	r19, r1
     b32:	29 f4       	brne	.+10     	; 0xb3e <WaitOKWithPrint+0xe0>
						{
							g_wifiRxCurrentIndex = 0;
     b34:	10 92 53 04 	sts	0x0453, r1
							return 0;
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	7a c0       	rjmp	.+244    	; 0xc32 <WaitOKWithPrint+0x1d4>
						}
						else if ((currentIndex >=4) &&  !strncmp(strTemp,"+IPD,",4) )
     b3e:	ce 01       	movw	r24, r28
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	b2 01       	movw	r22, r4
     b44:	44 e0       	ldi	r20, 0x04	; 4
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	0e 94 89 12 	call	0x2512	; 0x2512 <strncmp>
     b4c:	28 2f       	mov	r18, r24
     b4e:	39 2f       	mov	r19, r25
     b50:	21 15       	cp	r18, r1
     b52:	31 05       	cpc	r19, r1
     b54:	29 f4       	brne	.+10     	; 0xb60 <WaitOKWithPrint+0x102>
						{
							g_wifiRxCurrentIndex = 0;
     b56:	10 92 53 04 	sts	0x0453, r1
							//							debugprint("error\r\n");
							return -1;
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	9f ef       	ldi	r25, 0xFF	; 255
     b5e:	69 c0       	rjmp	.+210    	; 0xc32 <WaitOKWithPrint+0x1d4>
						}
						else if ((currentIndex >= 7) && !strncmp(strTemp,"ERROR",5)  )
     b60:	87 e0       	ldi	r24, 0x07	; 7
     b62:	e8 16       	cp	r14, r24
     b64:	f1 04       	cpc	r15, r1
     b66:	8c f0       	brlt	.+34     	; 0xb8a <WaitOKWithPrint+0x12c>
     b68:	ce 01       	movw	r24, r28
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	b1 01       	movw	r22, r2
     b6e:	45 e0       	ldi	r20, 0x05	; 5
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	0e 94 89 12 	call	0x2512	; 0x2512 <strncmp>
     b76:	28 2f       	mov	r18, r24
     b78:	39 2f       	mov	r19, r25
     b7a:	21 15       	cp	r18, r1
     b7c:	31 05       	cpc	r19, r1
     b7e:	29 f4       	brne	.+10     	; 0xb8a <WaitOKWithPrint+0x12c>
						{
							g_wifiRxCurrentIndex = 0;
     b80:	10 92 53 04 	sts	0x0453, r1
							//							debugprint("error\r\n");
							return -1;
     b84:	8f ef       	ldi	r24, 0xFF	; 255
     b86:	9f ef       	ldi	r25, 0xFF	; 255
     b88:	54 c0       	rjmp	.+168    	; 0xc32 <WaitOKWithPrint+0x1d4>
						}
						else if ((currentIndex >= 6) && !strncmp(strTemp,"FAIL",5)  )
     b8a:	e6 e0       	ldi	r30, 0x06	; 6
     b8c:	ee 16       	cp	r14, r30
     b8e:	f1 04       	cpc	r15, r1
     b90:	94 f0       	brlt	.+36     	; 0xbb6 <WaitOKWithPrint+0x158>
     b92:	ce 01       	movw	r24, r28
     b94:	01 96       	adiw	r24, 0x01	; 1
     b96:	67 e1       	ldi	r22, 0x17	; 23
     b98:	72 e0       	ldi	r23, 0x02	; 2
     b9a:	45 e0       	ldi	r20, 0x05	; 5
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	0e 94 89 12 	call	0x2512	; 0x2512 <strncmp>
     ba2:	28 2f       	mov	r18, r24
     ba4:	39 2f       	mov	r19, r25
     ba6:	21 15       	cp	r18, r1
     ba8:	31 05       	cpc	r19, r1
     baa:	29 f4       	brne	.+10     	; 0xbb6 <WaitOKWithPrint+0x158>
						{
							g_wifiRxCurrentIndex = 0;
     bac:	10 92 53 04 	sts	0x0453, r1
							//							debugprint("fail\r\n");
							return -1;
     bb0:	8f ef       	ldi	r24, 0xFF	; 255
     bb2:	9f ef       	ldi	r25, 0xFF	; 255
     bb4:	3e c0       	rjmp	.+124    	; 0xc32 <WaitOKWithPrint+0x1d4>
						}
						else if ((currentIndex >= 7) && !strncmp(strTemp,"ALREAY",5)  )
     bb6:	f7 e0       	ldi	r31, 0x07	; 7
     bb8:	ef 16       	cp	r14, r31
     bba:	f1 04       	cpc	r15, r1
     bbc:	94 f0       	brlt	.+36     	; 0xbe2 <WaitOKWithPrint+0x184>
     bbe:	ce 01       	movw	r24, r28
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	6c e2       	ldi	r22, 0x2C	; 44
     bc4:	72 e0       	ldi	r23, 0x02	; 2
     bc6:	45 e0       	ldi	r20, 0x05	; 5
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	0e 94 89 12 	call	0x2512	; 0x2512 <strncmp>
     bce:	28 2f       	mov	r18, r24
     bd0:	39 2f       	mov	r19, r25
     bd2:	21 15       	cp	r18, r1
     bd4:	31 05       	cpc	r19, r1
     bd6:	29 f4       	brne	.+10     	; 0xbe2 <WaitOKWithPrint+0x184>
						{
							g_wifiRxCurrentIndex = 0;
     bd8:	10 92 53 04 	sts	0x0453, r1
							return 0;
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	28 c0       	rjmp	.+80     	; 0xc32 <WaitOKWithPrint+0x1d4>
						}
						else if ((currentIndex >= 9) && !strncmp(strTemp,"SEND OK",7)  )
     be2:	89 e0       	ldi	r24, 0x09	; 9
     be4:	e8 16       	cp	r14, r24
     be6:	f1 04       	cpc	r15, r1
     be8:	a4 f0       	brlt	.+40     	; 0xc12 <WaitOKWithPrint+0x1b4>
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	63 e0       	ldi	r22, 0x03	; 3
     bf0:	72 e0       	ldi	r23, 0x02	; 2
     bf2:	47 e0       	ldi	r20, 0x07	; 7
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	0e 94 89 12 	call	0x2512	; 0x2512 <strncmp>
     bfa:	28 2f       	mov	r18, r24
     bfc:	39 2f       	mov	r19, r25
     bfe:	21 15       	cp	r18, r1
     c00:	31 05       	cpc	r19, r1
     c02:	49 f4       	brne	.+18     	; 0xc16 <WaitOKWithPrint+0x1b8>
						{
							g_wifiRxCurrentIndex = 0;
     c04:	10 92 53 04 	sts	0x0453, r1
							return 0;
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	12 c0       	rjmp	.+36     	; 0xc32 <WaitOKWithPrint+0x1d4>
						
						#endif
						//						debugprint(strTemp);
						
					}
					currentIndex = 0;
     c0e:	74 01       	movw	r14, r8
     c10:	03 c0       	rjmp	.+6      	; 0xc18 <WaitOKWithPrint+0x1ba>
     c12:	74 01       	movw	r14, r8
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <WaitOKWithPrint+0x1ba>
     c16:	74 01       	movw	r14, r8
	
	while(1)
	{
		if (g_wifiRxCurrentIndex)
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
     c18:	08 94       	sec
     c1a:	c1 1c       	adc	r12, r1
     c1c:	d1 1c       	adc	r13, r1
     c1e:	80 91 53 04 	lds	r24, 0x0453
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	c8 16       	cp	r12, r24
     c26:	d9 06       	cpc	r13, r25
     c28:	0c f4       	brge	.+2      	; 0xc2c <WaitOKWithPrint+0x1ce>
     c2a:	5b cf       	rjmp	.-330    	; 0xae2 <WaitOKWithPrint+0x84>
						
					}
					currentIndex = 0;
				}
			}
			g_wifiRxCurrentIndex = 0;
     c2c:	10 92 53 04 	sts	0x0453, r1
     c30:	4b cf       	rjmp	.-362    	; 0xac8 <WaitOKWithPrint+0x6a>
		}
	}
}
     c32:	c0 50       	subi	r28, 0x00	; 0
     c34:	de 4f       	sbci	r29, 0xFE	; 254
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	cf 90       	pop	r12
     c50:	bf 90       	pop	r11
     c52:	af 90       	pop	r10
     c54:	9f 90       	pop	r9
     c56:	8f 90       	pop	r8
     c58:	7f 90       	pop	r7
     c5a:	6f 90       	pop	r6
     c5c:	5f 90       	pop	r5
     c5e:	4f 90       	pop	r4
     c60:	3f 90       	pop	r3
     c62:	2f 90       	pop	r2
     c64:	08 95       	ret

00000c66 <WaitSendReadyWithoutPrint>:


int WaitSendReadyWithoutPrint()
{
     c66:	cf 92       	push	r12
     c68:	df 92       	push	r13
     c6a:	ff 92       	push	r15
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	00 d0       	rcall	.+0      	; 0xc76 <WaitSendReadyWithoutPrint+0x10>
     c76:	0f 92       	push	r0
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	0f 2e       	mov	r0, r31
     c7e:	f5 e6       	ldi	r31, 0x65	; 101
     c80:	cf 2e       	mov	r12, r31
     c82:	dd 24       	eor	r13, r13
     c84:	f0 2d       	mov	r31, r0
	int counter = 0;
	uint8_t msgBuff[4];
	uint8_t msgRxNum;
	int i;
	uint8_t okFlag =0;
	uint8_t readyFlag = 0;
     c86:	00 e0       	ldi	r16, 0x00	; 0
{
	int counter = 0;
	uint8_t msgBuff[4];
	uint8_t msgRxNum;
	int i;
	uint8_t okFlag =0;
     c88:	ff 24       	eor	r15, r15
		for(i = 0 ; i< msgRxNum ; i++)
		{
			if (msgBuff[i] == MSG_SEND_READY)
			{
				
				readyFlag = 1;
     c8a:	11 e0       	ldi	r17, 0x01	; 1
	int i;
	uint8_t okFlag =0;
	uint8_t readyFlag = 0;
	while(1)
	{
		msgRxNum = rxDataProcess(msgBuff,4);
     c8c:	ce 01       	movw	r24, r28
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	64 e0       	ldi	r22, 0x04	; 4
     c92:	0e 94 9e 03 	call	0x73c	; 0x73c <rxDataProcess>
		for(i = 0 ; i< msgRxNum ; i++)
     c96:	88 23       	and	r24, r24
     c98:	a1 f0       	breq	.+40     	; 0xcc2 <WaitSendReadyWithoutPrint+0x5c>
     c9a:	fe 01       	movw	r30, r28
     c9c:	31 96       	adiw	r30, 0x01	; 1
		}
	}
}


int WaitSendReadyWithoutPrint()
     c9e:	9f 01       	movw	r18, r30
     ca0:	28 0f       	add	r18, r24
     ca2:	31 1d       	adc	r19, r1
     ca4:	c9 01       	movw	r24, r18
	while(1)
	{
		msgRxNum = rxDataProcess(msgBuff,4);
		for(i = 0 ; i< msgRxNum ; i++)
		{
			if (msgBuff[i] == MSG_SEND_READY)
     ca6:	21 91       	ld	r18, Z+
     ca8:	28 30       	cpi	r18, 0x08	; 8
     caa:	29 f0       	breq	.+10     	; 0xcb6 <WaitSendReadyWithoutPrint+0x50>
			{
				
				readyFlag = 1;
			}
			else if (msgBuff[i] == MSG_OK)
     cac:	22 30       	cpi	r18, 0x02	; 2
     cae:	29 f0       	breq	.+10     	; 0xcba <WaitSendReadyWithoutPrint+0x54>
			{
				okFlag = 1;
			}
			else if (msgBuff[i] == MSG_ERROR)
     cb0:	25 30       	cpi	r18, 0x05	; 5
     cb2:	21 f4       	brne	.+8      	; 0xcbc <WaitSendReadyWithoutPrint+0x56>
     cb4:	26 c0       	rjmp	.+76     	; 0xd02 <WaitSendReadyWithoutPrint+0x9c>
		for(i = 0 ; i< msgRxNum ; i++)
		{
			if (msgBuff[i] == MSG_SEND_READY)
			{
				
				readyFlag = 1;
     cb6:	01 2f       	mov	r16, r17
     cb8:	01 c0       	rjmp	.+2      	; 0xcbc <WaitSendReadyWithoutPrint+0x56>
			}
			else if (msgBuff[i] == MSG_OK)
			{
				okFlag = 1;
     cba:	f1 2e       	mov	r15, r17
	uint8_t okFlag =0;
	uint8_t readyFlag = 0;
	while(1)
	{
		msgRxNum = rxDataProcess(msgBuff,4);
		for(i = 0 ; i< msgRxNum ; i++)
     cbc:	e8 17       	cp	r30, r24
     cbe:	f9 07       	cpc	r31, r25
     cc0:	91 f7       	brne	.-28     	; 0xca6 <WaitSendReadyWithoutPrint+0x40>
			else if (msgBuff[i] == MSG_ERROR)
			{
				return -1;
			}
		}
		if ( readyFlag && okFlag )
     cc2:	00 23       	and	r16, r16
     cc4:	11 f0       	breq	.+4      	; 0xcca <WaitSendReadyWithoutPrint+0x64>
     cc6:	ff 20       	and	r15, r15
     cc8:	f9 f4       	brne	.+62     	; 0xd08 <WaitSendReadyWithoutPrint+0xa2>
     cca:	08 94       	sec
     ccc:	c1 08       	sbc	r12, r1
     cce:	d1 08       	sbc	r13, r1
		{
			return 0;
		}
		
		counter++;
		if (counter> 100)
     cd0:	c1 14       	cp	r12, r1
     cd2:	d1 04       	cpc	r13, r1
     cd4:	79 f4       	brne	.+30     	; 0xcf4 <WaitSendReadyWithoutPrint+0x8e>
		{
			debugprint("WaitSendReadyWithoutPrint counter err\r\n");
     cd6:	0f 92       	push	r0
     cd8:	0f 92       	push	r0
     cda:	83 e3       	ldi	r24, 0x33	; 51
     cdc:	92 e0       	ldi	r25, 0x02	; 2
     cde:	ed b7       	in	r30, 0x3d	; 61
     ce0:	fe b7       	in	r31, 0x3e	; 62
     ce2:	92 83       	std	Z+2, r25	; 0x02
     ce4:	81 83       	std	Z+1, r24	; 0x01
     ce6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debugprint>
			return -1;
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	8f ef       	ldi	r24, 0xFF	; 255
     cf0:	9f ef       	ldi	r25, 0xFF	; 255
     cf2:	0c c0       	rjmp	.+24     	; 0xd0c <WaitSendReadyWithoutPrint+0xa6>
     cf4:	8f ef       	ldi	r24, 0xFF	; 255
     cf6:	9f e8       	ldi	r25, 0x8F	; 143
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	f1 f7       	brne	.-4      	; 0xcf8 <WaitSendReadyWithoutPrint+0x92>
     cfc:	00 c0       	rjmp	.+0      	; 0xcfe <WaitSendReadyWithoutPrint+0x98>
     cfe:	00 00       	nop
     d00:	c5 cf       	rjmp	.-118    	; 0xc8c <WaitSendReadyWithoutPrint+0x26>
			{
				okFlag = 1;
			}
			else if (msgBuff[i] == MSG_ERROR)
			{
				return -1;
     d02:	8f ef       	ldi	r24, 0xFF	; 255
     d04:	9f ef       	ldi	r25, 0xFF	; 255
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <WaitSendReadyWithoutPrint+0xa6>
			}
		}
		if ( readyFlag && okFlag )
		{
			return 0;
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
			return -1;
		}
		
		_delay_ms(10);
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	df 90       	pop	r13
     d20:	cf 90       	pop	r12
     d22:	08 95       	ret

00000d24 <WaitSendOKWithoutPrint>:

int WaitSendOKWithoutPrint()
{
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <WaitSendOKWithoutPrint+0xa>
     d2e:	0f 92       	push	r0
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	05 e6       	ldi	r16, 0x65	; 101
     d36:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t msgBuff[4];
	uint8_t msgRxNum;
	int i;
	while(1)
	{
		msgRxNum = rxDataProcess(msgBuff,4);
     d38:	ce 01       	movw	r24, r28
     d3a:	01 96       	adiw	r24, 0x01	; 1
     d3c:	64 e0       	ldi	r22, 0x04	; 4
     d3e:	0e 94 9e 03 	call	0x73c	; 0x73c <rxDataProcess>
		for(i = 0 ; i< msgRxNum ; i++)
     d42:	88 23       	and	r24, r24
     d44:	b9 f0       	breq	.+46     	; 0xd74 <WaitSendOKWithoutPrint+0x50>
		{
			if (msgBuff[i] == MSG_SEND_OK)
     d46:	99 81       	ldd	r25, Y+1	; 0x01
     d48:	91 30       	cpi	r25, 0x01	; 1
     d4a:	69 f1       	breq	.+90     	; 0xda6 <WaitSendOKWithoutPrint+0x82>
			return 0;
			else if (msgBuff[i] == MSG_ERROR)
     d4c:	95 30       	cpi	r25, 0x05	; 5
     d4e:	71 f1       	breq	.+92     	; 0xdac <WaitSendOKWithoutPrint+0x88>
     d50:	fe 01       	movw	r30, r28
     d52:	32 96       	adiw	r30, 0x02	; 2
		
		_delay_ms(10);
	}
}

int WaitSendOKWithoutPrint()
     d54:	21 e0       	ldi	r18, 0x01	; 1
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	2c 0f       	add	r18, r28
     d5a:	3d 1f       	adc	r19, r29
     d5c:	28 0f       	add	r18, r24
     d5e:	31 1d       	adc	r19, r1
     d60:	c9 01       	movw	r24, r18
     d62:	05 c0       	rjmp	.+10     	; 0xd6e <WaitSendOKWithoutPrint+0x4a>
	while(1)
	{
		msgRxNum = rxDataProcess(msgBuff,4);
		for(i = 0 ; i< msgRxNum ; i++)
		{
			if (msgBuff[i] == MSG_SEND_OK)
     d64:	21 91       	ld	r18, Z+
     d66:	21 30       	cpi	r18, 0x01	; 1
     d68:	21 f1       	breq	.+72     	; 0xdb2 <WaitSendOKWithoutPrint+0x8e>
			return 0;
			else if (msgBuff[i] == MSG_ERROR)
     d6a:	25 30       	cpi	r18, 0x05	; 5
     d6c:	29 f1       	breq	.+74     	; 0xdb8 <WaitSendOKWithoutPrint+0x94>
	uint8_t msgRxNum;
	int i;
	while(1)
	{
		msgRxNum = rxDataProcess(msgBuff,4);
		for(i = 0 ; i< msgRxNum ; i++)
     d6e:	e8 17       	cp	r30, r24
     d70:	f9 07       	cpc	r31, r25
     d72:	c1 f7       	brne	.-16     	; 0xd64 <WaitSendOKWithoutPrint+0x40>
     d74:	01 50       	subi	r16, 0x01	; 1
     d76:	10 40       	sbci	r17, 0x00	; 0
			else if (msgBuff[i] == MSG_ERROR)
			return -1;
		}
		
		counter++;
		if (counter> 100)
     d78:	79 f4       	brne	.+30     	; 0xd98 <WaitSendOKWithoutPrint+0x74>
		{
			debugprint("WaitOKWithoutPrint counter err\r\n");
     d7a:	0f 92       	push	r0
     d7c:	0f 92       	push	r0
     d7e:	8b e5       	ldi	r24, 0x5B	; 91
     d80:	92 e0       	ldi	r25, 0x02	; 2
     d82:	ed b7       	in	r30, 0x3d	; 61
     d84:	fe b7       	in	r31, 0x3e	; 62
     d86:	92 83       	std	Z+2, r25	; 0x02
     d88:	81 83       	std	Z+1, r24	; 0x01
     d8a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debugprint>
			return -1;
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	9f ef       	ldi	r25, 0xFF	; 255
     d96:	12 c0       	rjmp	.+36     	; 0xdbc <WaitSendOKWithoutPrint+0x98>
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	9f e8       	ldi	r25, 0x8F	; 143
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <WaitSendOKWithoutPrint+0x78>
     da0:	00 c0       	rjmp	.+0      	; 0xda2 <WaitSendOKWithoutPrint+0x7e>
     da2:	00 00       	nop
     da4:	c9 cf       	rjmp	.-110    	; 0xd38 <WaitSendOKWithoutPrint+0x14>
	{
		msgRxNum = rxDataProcess(msgBuff,4);
		for(i = 0 ; i< msgRxNum ; i++)
		{
			if (msgBuff[i] == MSG_SEND_OK)
			return 0;
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	08 c0       	rjmp	.+16     	; 0xdbc <WaitSendOKWithoutPrint+0x98>
			else if (msgBuff[i] == MSG_ERROR)
			return -1;
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	9f ef       	ldi	r25, 0xFF	; 255
     db0:	05 c0       	rjmp	.+10     	; 0xdbc <WaitSendOKWithoutPrint+0x98>
	{
		msgRxNum = rxDataProcess(msgBuff,4);
		for(i = 0 ; i< msgRxNum ; i++)
		{
			if (msgBuff[i] == MSG_SEND_OK)
			return 0;
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <WaitSendOKWithoutPrint+0x98>
			else if (msgBuff[i] == MSG_ERROR)
			return -1;
     db8:	8f ef       	ldi	r24, 0xFF	; 255
     dba:	9f ef       	ldi	r25, 0xFF	; 255
			return -1;
		}
		_delay_ms(10);
		
	}
}
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	08 95       	ret

00000dce <WaitOk>:

int WaitOk() //"\r\nOK\r\n"
{
     dce:	cf 92       	push	r12
     dd0:	df 92       	push	r13
     dd2:	ef 92       	push	r14
     dd4:	ff 92       	push	r15
     dd6:	0f 93       	push	r16
     dd8:	1f 93       	push	r17
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
     de2:	c0 50       	subi	r28, 0x00	; 0
     de4:	d1 40       	sbci	r29, 0x01	; 1
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	de bf       	out	0x3e, r29	; 62
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	cd bf       	out	0x3d, r28	; 61
	uint8_t strTemp[256];
	int currentIndex = 0;
	uint8_t firstCarrageReturnDetect = 0;
     df0:	dd 24       	eor	r13, r13
}

int WaitOk() //"\r\nOK\r\n"
{
	uint8_t strTemp[256];
	int currentIndex = 0;
     df2:	40 e0       	ldi	r20, 0x00	; 0
     df4:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(10);
		
	}
}

int WaitOk() //"\r\nOK\r\n"
     df6:	be 01       	movw	r22, r28
     df8:	6f 5f       	subi	r22, 0xFF	; 255
     dfa:	7f 4f       	sbci	r23, 0xFF	; 255
     dfc:	ee 24       	eor	r14, r14
     dfe:	ff 24       	eor	r15, r15
	{
		if (g_wifiRxCurrentIndex)
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
			{
				strTemp[currentIndex++] = g_wifiRxData[i];
     e00:	0f e9       	ldi	r16, 0x9F	; 159
     e02:	16 e0       	ldi	r17, 0x06	; 6
				if (g_wifiRxData[i] == 0x0A)
				{
					if ( !firstCarrageReturnDetect )
					{
						firstCarrageReturnDetect = 1;
     e04:	cc 24       	eor	r12, r12
     e06:	c3 94       	inc	r12
	uint8_t firstCarrageReturnDetect = 0;
	int i;
	
	while(1)
	{
		if (g_wifiRxCurrentIndex)
     e08:	80 91 53 04 	lds	r24, 0x0453
     e0c:	88 23       	and	r24, r24
     e0e:	e1 f3       	breq	.-8      	; 0xe08 <WaitOk+0x3a>
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
     e10:	80 91 53 04 	lds	r24, 0x0453
     e14:	88 23       	and	r24, r24
     e16:	c1 f3       	breq	.-16     	; 0xe08 <WaitOk+0x3a>
		_delay_ms(10);
		
	}
}

int WaitOk() //"\r\nOK\r\n"
     e18:	db 01       	movw	r26, r22
     e1a:	a4 0f       	add	r26, r20
     e1c:	b5 1f       	adc	r27, r21
     e1e:	97 01       	movw	r18, r14
	{
		if (g_wifiRxCurrentIndex)
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
			{
				strTemp[currentIndex++] = g_wifiRxData[i];
     e20:	f8 01       	movw	r30, r16
     e22:	e2 0f       	add	r30, r18
     e24:	f3 1f       	adc	r31, r19
     e26:	80 81       	ld	r24, Z
     e28:	8d 93       	st	X+, r24
				if (g_wifiRxData[i] == 0x0A)
     e2a:	80 81       	ld	r24, Z
     e2c:	8a 30       	cpi	r24, 0x0A	; 10
     e2e:	39 f5       	brne	.+78     	; 0xe7e <WaitOk+0xb0>
				{
					if ( !firstCarrageReturnDetect )
     e30:	dd 20       	and	r13, r13
     e32:	21 f1       	breq	.+72     	; 0xe7c <WaitOk+0xae>
						firstCarrageReturnDetect = 1;
					}
					else
					{
						// check end  "OK\r\n"
						if (!strncmp(strTemp+2,"OK",2))
     e34:	ce 01       	movw	r24, r28
     e36:	03 96       	adiw	r24, 0x03	; 3
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	72 e0       	ldi	r23, 0x02	; 2
     e3c:	42 e0       	ldi	r20, 0x02	; 2
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	0e 94 89 12 	call	0x2512	; 0x2512 <strncmp>
     e44:	28 2f       	mov	r18, r24
     e46:	39 2f       	mov	r19, r25
     e48:	21 15       	cp	r18, r1
     e4a:	31 05       	cpc	r19, r1
     e4c:	29 f4       	brne	.+10     	; 0xe58 <WaitOk+0x8a>
						{
							g_wifiRxCurrentIndex = 0;
     e4e:	10 92 53 04 	sts	0x0453, r1
							return 0;
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	22 c0       	rjmp	.+68     	; 0xe9c <WaitOk+0xce>
						}
						else if (!strncmp(strTemp+2,"ERROR",5)  )
     e58:	ce 01       	movw	r24, r28
     e5a:	03 96       	adiw	r24, 0x03	; 3
     e5c:	61 e1       	ldi	r22, 0x11	; 17
     e5e:	72 e0       	ldi	r23, 0x02	; 2
     e60:	45 e0       	ldi	r20, 0x05	; 5
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	0e 94 89 12 	call	0x2512	; 0x2512 <strncmp>
     e68:	28 2f       	mov	r18, r24
     e6a:	39 2f       	mov	r19, r25
     e6c:	21 15       	cp	r18, r1
     e6e:	31 05       	cpc	r19, r1
     e70:	99 f4       	brne	.+38     	; 0xe98 <WaitOk+0xca>
						{
							g_wifiRxCurrentIndex = 0;
     e72:	10 92 53 04 	sts	0x0453, r1
							return -1;
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	9f ef       	ldi	r25, 0xFF	; 255
     e7a:	10 c0       	rjmp	.+32     	; 0xe9c <WaitOk+0xce>
				strTemp[currentIndex++] = g_wifiRxData[i];
				if (g_wifiRxData[i] == 0x0A)
				{
					if ( !firstCarrageReturnDetect )
					{
						firstCarrageReturnDetect = 1;
     e7c:	dc 2c       	mov	r13, r12
		_delay_ms(10);
		
	}
}

int WaitOk() //"\r\nOK\r\n"
     e7e:	ad 01       	movw	r20, r26
     e80:	46 1b       	sub	r20, r22
     e82:	57 0b       	sbc	r21, r23
	
	while(1)
	{
		if (g_wifiRxCurrentIndex)
		{
			for (i = 0; i < g_wifiRxCurrentIndex ; i++)
     e84:	2f 5f       	subi	r18, 0xFF	; 255
     e86:	3f 4f       	sbci	r19, 0xFF	; 255
     e88:	80 91 53 04 	lds	r24, 0x0453
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	28 17       	cp	r18, r24
     e90:	39 07       	cpc	r19, r25
     e92:	0c f0       	brlt	.+2      	; 0xe96 <WaitOk+0xc8>
     e94:	b9 cf       	rjmp	.-142    	; 0xe08 <WaitOk+0x3a>
     e96:	c4 cf       	rjmp	.-120    	; 0xe20 <WaitOk+0x52>
						else if (!strncmp(strTemp+2,"ERROR",5)  )
						{
							g_wifiRxCurrentIndex = 0;
							return -1;
						}
						return -1;
     e98:	8f ef       	ldi	r24, 0xFF	; 255
     e9a:	9f ef       	ldi	r25, 0xFF	; 255
				}
			}
		}
	}
	return -1;
}
     e9c:	c0 50       	subi	r28, 0x00	; 0
     e9e:	df 4f       	sbci	r29, 0xFF	; 255
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	df 90       	pop	r13
     eb8:	cf 90       	pop	r12
     eba:	08 95       	ret

00000ebc <wifiDisplayAPlist>:

int wifiDisplayAPlist()
{
	wifiprint("AT+CWLAP\r\n");
     ebc:	0f 92       	push	r0
     ebe:	0f 92       	push	r0
     ec0:	8c e7       	ldi	r24, 0x7C	; 124
     ec2:	92 e0       	ldi	r25, 0x02	; 2
     ec4:	ad b7       	in	r26, 0x3d	; 61
     ec6:	be b7       	in	r27, 0x3e	; 62
     ec8:	12 96       	adiw	r26, 0x02	; 2
     eca:	9c 93       	st	X, r25
     ecc:	8e 93       	st	-X, r24
     ece:	11 97       	sbiw	r26, 0x01	; 1
     ed0:	0e 94 2d 02 	call	0x45a	; 0x45a <wifiprint>
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	9f ef       	ldi	r25, 0xFF	; 255
     ed8:	a9 e5       	ldi	r26, 0x59	; 89
     eda:	81 50       	subi	r24, 0x01	; 1
     edc:	90 40       	sbci	r25, 0x00	; 0
     ede:	a0 40       	sbci	r26, 0x00	; 0
     ee0:	e1 f7       	brne	.-8      	; 0xeda <wifiDisplayAPlist+0x1e>
     ee2:	00 c0       	rjmp	.+0      	; 0xee4 <wifiDisplayAPlist+0x28>
     ee4:	00 00       	nop
	_delay_ms(2000);
	return WaitOKWithPrint();
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0e 94 2f 05 	call	0xa5e	; 0xa5e <WaitOKWithPrint>
}
     eee:	08 95       	ret

00000ef0 <wifiConnectAP>:

uint8_t wifiConnectAP(char* ssid, char* pwd)
{
	wifiprint("AT+CWJAP_DEF=\"%s\",\"%s\"\r\n",ssid,pwd);
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <wifiConnectAP+0x2>
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <wifiConnectAP+0x4>
     ef4:	ed b7       	in	r30, 0x3d	; 61
     ef6:	fe b7       	in	r31, 0x3e	; 62
     ef8:	31 96       	adiw	r30, 0x01	; 1
     efa:	27 e8       	ldi	r18, 0x87	; 135
     efc:	32 e0       	ldi	r19, 0x02	; 2
     efe:	ad b7       	in	r26, 0x3d	; 61
     f00:	be b7       	in	r27, 0x3e	; 62
     f02:	12 96       	adiw	r26, 0x02	; 2
     f04:	3c 93       	st	X, r19
     f06:	2e 93       	st	-X, r18
     f08:	11 97       	sbiw	r26, 0x01	; 1
     f0a:	93 83       	std	Z+3, r25	; 0x03
     f0c:	82 83       	std	Z+2, r24	; 0x02
     f0e:	75 83       	std	Z+5, r23	; 0x05
     f10:	64 83       	std	Z+4, r22	; 0x04
     f12:	0e 94 2d 02 	call	0x45a	; 0x45a <wifiprint>
	
	return WaitOKWithPrint();
     f16:	8d b7       	in	r24, 0x3d	; 61
     f18:	9e b7       	in	r25, 0x3e	; 62
     f1a:	06 96       	adiw	r24, 0x06	; 6
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	9e bf       	out	0x3e, r25	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	8d bf       	out	0x3d, r24	; 61
     f26:	0e 94 2f 05 	call	0xa5e	; 0xa5e <WaitOKWithPrint>
}
     f2a:	08 95       	ret

00000f2c <wifiModeSet>:


uint8_t wifiModeSet()
{
	wifiprint("AT+CWMODE=3\r\n");
     f2c:	0f 92       	push	r0
     f2e:	0f 92       	push	r0
     f30:	80 ea       	ldi	r24, 0xA0	; 160
     f32:	92 e0       	ldi	r25, 0x02	; 2
     f34:	ed b7       	in	r30, 0x3d	; 61
     f36:	fe b7       	in	r31, 0x3e	; 62
     f38:	92 83       	std	Z+2, r25	; 0x02
     f3a:	81 83       	std	Z+1, r24	; 0x01
     f3c:	0e 94 2d 02 	call	0x45a	; 0x45a <wifiprint>
	return WaitOKWithPrint();
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0e 94 2f 05 	call	0xa5e	; 0xa5e <WaitOKWithPrint>

}
     f48:	08 95       	ret

00000f4a <wifiDisplayLocalIP>:

uint8_t wifiDisplayLocalIP()
{
	wifiprint("AT+CIPSTA_CUR?\r\n");
     f4a:	0f 92       	push	r0
     f4c:	0f 92       	push	r0
     f4e:	8e ea       	ldi	r24, 0xAE	; 174
     f50:	92 e0       	ldi	r25, 0x02	; 2
     f52:	ed b7       	in	r30, 0x3d	; 61
     f54:	fe b7       	in	r31, 0x3e	; 62
     f56:	92 83       	std	Z+2, r25	; 0x02
     f58:	81 83       	std	Z+1, r24	; 0x01
     f5a:	0e 94 2d 02 	call	0x45a	; 0x45a <wifiprint>
	return WaitOKWithPrint();
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0e 94 2f 05 	call	0xa5e	; 0xa5e <WaitOKWithPrint>
}
     f66:	08 95       	ret

00000f68 <wifiEnableDHCP>:

uint8_t wifiEnableDHCP()
{
	wifiprint("AT+CWDHCP_CUR=1,1\r\n");
     f68:	0f 92       	push	r0
     f6a:	0f 92       	push	r0
     f6c:	8f eb       	ldi	r24, 0xBF	; 191
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	ed b7       	in	r30, 0x3d	; 61
     f72:	fe b7       	in	r31, 0x3e	; 62
     f74:	92 83       	std	Z+2, r25	; 0x02
     f76:	81 83       	std	Z+1, r24	; 0x01
     f78:	0e 94 2d 02 	call	0x45a	; 0x45a <wifiprint>
	return WaitOKWithPrint();
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0e 94 2f 05 	call	0xa5e	; 0xa5e <WaitOKWithPrint>

}
     f84:	08 95       	ret

00000f86 <wifiConnectTCPServer>:


uint8_t wifiConnectTCPServer(char* remoteIP,uint32_t remotePort)
{
	wifiprint("AT+CIPSTART=\"TCP\",\"%s\",%u\r\n",remoteIP, remotePort);
     f86:	2d b7       	in	r18, 0x3d	; 61
     f88:	3e b7       	in	r19, 0x3e	; 62
     f8a:	28 50       	subi	r18, 0x08	; 8
     f8c:	30 40       	sbci	r19, 0x00	; 0
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	3e bf       	out	0x3e, r19	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	2d bf       	out	0x3d, r18	; 61
     f98:	ed b7       	in	r30, 0x3d	; 61
     f9a:	fe b7       	in	r31, 0x3e	; 62
     f9c:	31 96       	adiw	r30, 0x01	; 1
     f9e:	23 ed       	ldi	r18, 0xD3	; 211
     fa0:	32 e0       	ldi	r19, 0x02	; 2
     fa2:	ad b7       	in	r26, 0x3d	; 61
     fa4:	be b7       	in	r27, 0x3e	; 62
     fa6:	12 96       	adiw	r26, 0x02	; 2
     fa8:	3c 93       	st	X, r19
     faa:	2e 93       	st	-X, r18
     fac:	11 97       	sbiw	r26, 0x01	; 1
     fae:	93 83       	std	Z+3, r25	; 0x03
     fb0:	82 83       	std	Z+2, r24	; 0x02
     fb2:	44 83       	std	Z+4, r20	; 0x04
     fb4:	55 83       	std	Z+5, r21	; 0x05
     fb6:	66 83       	std	Z+6, r22	; 0x06
     fb8:	77 83       	std	Z+7, r23	; 0x07
     fba:	0e 94 2d 02 	call	0x45a	; 0x45a <wifiprint>
	
	return WaitOKWithPrint();
     fbe:	2d b7       	in	r18, 0x3d	; 61
     fc0:	3e b7       	in	r19, 0x3e	; 62
     fc2:	28 5f       	subi	r18, 0xF8	; 248
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	3e bf       	out	0x3e, r19	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	2d bf       	out	0x3d, r18	; 61
     fd0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <WaitOKWithPrint>
}
     fd4:	08 95       	ret

00000fd6 <wifiSetEventCallback>:


uint8_t wifiSetEventCallback(void* func)
{
	callbackFnc = func;
     fd6:	90 93 a0 0a 	sts	0x0AA0, r25
     fda:	80 93 9f 0a 	sts	0x0A9F, r24
	return 0;
}
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	08 95       	ret

00000fe2 <wifiSendData>:

int wifiSendData(uint8_t* buff, int dataSize)
{
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	08 2f       	mov	r16, r24
     ff0:	19 2f       	mov	r17, r25
     ff2:	eb 01       	movw	r28, r22
	if (0 )
	{
		debugprint("wifiSendData err. rx processing ,g_wifiRxCurrentIndex:%d\r\n",g_wifiRxCurrentIndex);
		return -1;
	}
	wifiprint("AT+CIPSEND=%d\r\n",dataSize);
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <wifiSendData+0x14>
     ff6:	0f 92       	push	r0
     ff8:	8f ee       	ldi	r24, 0xEF	; 239
     ffa:	92 e0       	ldi	r25, 0x02	; 2
     ffc:	ad b7       	in	r26, 0x3d	; 61
     ffe:	be b7       	in	r27, 0x3e	; 62
    1000:	12 96       	adiw	r26, 0x02	; 2
    1002:	9c 93       	st	X, r25
    1004:	8e 93       	st	-X, r24
    1006:	11 97       	sbiw	r26, 0x01	; 1
    1008:	14 96       	adiw	r26, 0x04	; 4
    100a:	7c 93       	st	X, r23
    100c:	6e 93       	st	-X, r22
    100e:	13 97       	sbiw	r26, 0x03	; 3
    1010:	0e 94 2d 02 	call	0x45a	; 0x45a <wifiprint>
	if ( WaitSendReadyWithoutPrint() < 0 )
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0e 94 33 06 	call	0xc66	; 0xc66 <WaitSendReadyWithoutPrint>
    1020:	99 23       	and	r25, r25
    1022:	2c f0       	brlt	.+10     	; 0x102e <wifiSendData+0x4c>
		}
		#endif
		return -1;
	}
	
	for(int i = 0; i < dataSize ; i++ )
    1024:	1c 16       	cp	r1, r28
    1026:	1d 06       	cpc	r1, r29
    1028:	0c f4       	brge	.+2      	; 0x102c <wifiSendData+0x4a>
    102a:	4a c0       	rjmp	.+148    	; 0x10c0 <wifiSendData+0xde>
    102c:	57 c0       	rjmp	.+174    	; 0x10dc <wifiSendData+0xfa>
		return -1;
	}
	wifiprint("AT+CIPSEND=%d\r\n",dataSize);
	if ( WaitSendReadyWithoutPrint() < 0 )
	{
		debugprint("wifiSendData wait err -0");
    102e:	0f 92       	push	r0
    1030:	0f 92       	push	r0
    1032:	8f ef       	ldi	r24, 0xFF	; 255
    1034:	92 e0       	ldi	r25, 0x02	; 2
    1036:	ed b7       	in	r30, 0x3d	; 61
    1038:	fe b7       	in	r31, 0x3e	; 62
    103a:	92 83       	std	Z+2, r25	; 0x02
    103c:	81 83       	std	Z+1, r24	; 0x01
    103e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debugprint>
		#if 1 // test
		debugprint("&:");
    1042:	88 e1       	ldi	r24, 0x18	; 24
    1044:	93 e0       	ldi	r25, 0x03	; 3
    1046:	ad b7       	in	r26, 0x3d	; 61
    1048:	be b7       	in	r27, 0x3e	; 62
    104a:	12 96       	adiw	r26, 0x02	; 2
    104c:	9c 93       	st	X, r25
    104e:	8e 93       	st	-X, r24
    1050:	11 97       	sbiw	r26, 0x01	; 1
    1052:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debugprint>
		for(int i = 0; i <g_rxDataLen;i++)
    1056:	80 91 4e 04 	lds	r24, 0x044E
    105a:	90 91 4f 04 	lds	r25, 0x044F
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	18 16       	cp	r1, r24
    1064:	19 06       	cpc	r1, r25
    1066:	ec f5       	brge	.+122    	; 0x10e2 <wifiSendData+0x100>
    1068:	c0 e0       	ldi	r28, 0x00	; 0
    106a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			//putCh2(g_wifiRxData[i]);
			debugprint("[%02X]",g_rxDataBuff[i]);
    106c:	0f e9       	ldi	r16, 0x9F	; 159
    106e:	18 e0       	ldi	r17, 0x08	; 8
    1070:	0f 2e       	mov	r0, r31
    1072:	fb e1       	ldi	r31, 0x1B	; 27
    1074:	ef 2e       	mov	r14, r31
    1076:	f3 e0       	ldi	r31, 0x03	; 3
    1078:	ff 2e       	mov	r15, r31
    107a:	f0 2d       	mov	r31, r0
    107c:	f8 01       	movw	r30, r16
    107e:	ec 0f       	add	r30, r28
    1080:	fd 1f       	adc	r31, r29
    1082:	80 81       	ld	r24, Z
    1084:	00 d0       	rcall	.+0      	; 0x1086 <wifiSendData+0xa4>
    1086:	0f 92       	push	r0
    1088:	ed b7       	in	r30, 0x3d	; 61
    108a:	fe b7       	in	r31, 0x3e	; 62
    108c:	31 96       	adiw	r30, 0x01	; 1
    108e:	ad b7       	in	r26, 0x3d	; 61
    1090:	be b7       	in	r27, 0x3e	; 62
    1092:	12 96       	adiw	r26, 0x02	; 2
    1094:	fc 92       	st	X, r15
    1096:	ee 92       	st	-X, r14
    1098:	11 97       	sbiw	r26, 0x01	; 1
    109a:	82 83       	std	Z+2, r24	; 0x02
    109c:	13 82       	std	Z+3, r1	; 0x03
    109e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debugprint>
	if ( WaitSendReadyWithoutPrint() < 0 )
	{
		debugprint("wifiSendData wait err -0");
		#if 1 // test
		debugprint("&:");
		for(int i = 0; i <g_rxDataLen;i++)
    10a2:	21 96       	adiw	r28, 0x01	; 1
    10a4:	80 91 4e 04 	lds	r24, 0x044E
    10a8:	90 91 4f 04 	lds	r25, 0x044F
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	c8 17       	cp	r28, r24
    10b6:	d9 07       	cpc	r29, r25
    10b8:	0c f3       	brlt	.-62     	; 0x107c <wifiSendData+0x9a>
		{
			//putCh2(g_wifiRxData[i]);
			debugprint("[%02X]",g_rxDataBuff[i]);
		}
		#endif
		return -1;
    10ba:	8f ef       	ldi	r24, 0xFF	; 255
    10bc:	9f ef       	ldi	r25, 0xFF	; 255
    10be:	13 c0       	rjmp	.+38     	; 0x10e6 <wifiSendData+0x104>
	if ( WaitSendReadyWithoutPrint() < 0 )
	{
		debugprint("wifiSendData wait err -0");
		#if 1 // test
		debugprint("&:");
		for(int i = 0; i <g_rxDataLen;i++)
    10c0:	e0 2e       	mov	r14, r16
    10c2:	f1 2e       	mov	r15, r17
		}
		#endif
		return -1;
	}
	
	for(int i = 0; i < dataSize ; i++ )
    10c4:	00 e0       	ldi	r16, 0x00	; 0
    10c6:	10 e0       	ldi	r17, 0x00	; 0
	{
		
		putCh0(buff[i]);
    10c8:	f7 01       	movw	r30, r14
    10ca:	81 91       	ld	r24, Z+
    10cc:	7f 01       	movw	r14, r30
    10ce:	0e 94 a9 01 	call	0x352	; 0x352 <putCh0>
		}
		#endif
		return -1;
	}
	
	for(int i = 0; i < dataSize ; i++ )
    10d2:	0f 5f       	subi	r16, 0xFF	; 255
    10d4:	1f 4f       	sbci	r17, 0xFF	; 255
    10d6:	0c 17       	cp	r16, r28
    10d8:	1d 07       	cpc	r17, r29
    10da:	b1 f7       	brne	.-20     	; 0x10c8 <wifiSendData+0xe6>
	{
		
		putCh0(buff[i]);
	}
	
	return WaitSendOKWithoutPrint();
    10dc:	0e 94 92 06 	call	0xd24	; 0xd24 <WaitSendOKWithoutPrint>
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <wifiSendData+0x104>
		{
			//putCh2(g_wifiRxData[i]);
			debugprint("[%02X]",g_rxDataBuff[i]);
		}
		#endif
		return -1;
    10e2:	8f ef       	ldi	r24, 0xFF	; 255
    10e4:	9f ef       	ldi	r25, 0xFF	; 255
		putCh0(buff[i]);
	}
	
	return WaitSendOKWithoutPrint();
	
}
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	ff 90       	pop	r15
    10f0:	ef 90       	pop	r14
    10f2:	08 95       	ret

000010f4 <wificlearUartBuff>:

void wificlearUartBuff()
{
	g_wifiRxCurrentIndex = 0;
    10f4:	10 92 53 04 	sts	0x0453, r1
	g_rxDataLen = 0;
    10f8:	10 92 4f 04 	sts	0x044F, r1
    10fc:	10 92 4e 04 	sts	0x044E, r1
}
    1100:	08 95       	ret

00001102 <wifiAutoConnectDisable>:

void wifiAutoConnectDisable()
{
	wifiprint("AT+CWAUTOCONN=0\r\n");
    1102:	0f 92       	push	r0
    1104:	0f 92       	push	r0
    1106:	82 e2       	ldi	r24, 0x22	; 34
    1108:	93 e0       	ldi	r25, 0x03	; 3
    110a:	ad b7       	in	r26, 0x3d	; 61
    110c:	be b7       	in	r27, 0x3e	; 62
    110e:	12 96       	adiw	r26, 0x02	; 2
    1110:	9c 93       	st	X, r25
    1112:	8e 93       	st	-X, r24
    1114:	11 97       	sbiw	r26, 0x01	; 1
    1116:	0e 94 2d 02 	call	0x45a	; 0x45a <wifiprint>
    111a:	8f ef       	ldi	r24, 0xFF	; 255
    111c:	9f e3       	ldi	r25, 0x3F	; 63
    111e:	a2 e0       	ldi	r26, 0x02	; 2
    1120:	81 50       	subi	r24, 0x01	; 1
    1122:	90 40       	sbci	r25, 0x00	; 0
    1124:	a0 40       	sbci	r26, 0x00	; 0
    1126:	e1 f7       	brne	.-8      	; 0x1120 <wifiAutoConnectDisable+0x1e>
    1128:	00 c0       	rjmp	.+0      	; 0x112a <wifiAutoConnectDisable+0x28>
    112a:	00 00       	nop

	_delay_ms(50);
	WaitOk();
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0e 94 e7 06 	call	0xdce	; 0xdce <WaitOk>
}
    1134:	08 95       	ret

00001136 <wifiEchoDisable>:

void wifiEchoDisable()
{
	wifiprint("ATE0\r\n");
    1136:	0f 92       	push	r0
    1138:	0f 92       	push	r0
    113a:	84 e3       	ldi	r24, 0x34	; 52
    113c:	93 e0       	ldi	r25, 0x03	; 3
    113e:	ad b7       	in	r26, 0x3d	; 61
    1140:	be b7       	in	r27, 0x3e	; 62
    1142:	12 96       	adiw	r26, 0x02	; 2
    1144:	9c 93       	st	X, r25
    1146:	8e 93       	st	-X, r24
    1148:	11 97       	sbiw	r26, 0x01	; 1
    114a:	0e 94 2d 02 	call	0x45a	; 0x45a <wifiprint>
    114e:	8f ef       	ldi	r24, 0xFF	; 255
    1150:	9f e7       	ldi	r25, 0x7F	; 127
    1152:	a4 e0       	ldi	r26, 0x04	; 4
    1154:	81 50       	subi	r24, 0x01	; 1
    1156:	90 40       	sbci	r25, 0x00	; 0
    1158:	a0 40       	sbci	r26, 0x00	; 0
    115a:	e1 f7       	brne	.-8      	; 0x1154 <wifiEchoDisable+0x1e>
    115c:	00 c0       	rjmp	.+0      	; 0x115e <wifiEchoDisable+0x28>
    115e:	00 00       	nop
	_delay_ms(100);
	
	wificlearUartBuff();
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <wificlearUartBuff>
	
}
    1168:	08 95       	ret

0000116a <pinMode>:
//	G (PORTG), H (PORTH), J (PORTJ), K (PORTK), L (PORTL),
// pin  = 0~7
// mode = 0(Input), 1(OutPut)
void pinMode(uint8_t port,uint8_t pin,uint8_t mode)
{
	if(port == A) {
    116a:	88 23       	and	r24, r24
    116c:	e9 f4       	brne	.+58     	; 0x11a8 <pinMode+0x3e>
		if(mode) {
    116e:	44 23       	and	r20, r20
    1170:	69 f0       	breq	.+26     	; 0x118c <pinMode+0x22>
			sbit(DDRA,pin);	
    1172:	21 b1       	in	r18, 0x01	; 1
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	ac 01       	movw	r20, r24
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <pinMode+0x16>
    117c:	44 0f       	add	r20, r20
    117e:	55 1f       	adc	r21, r21
    1180:	6a 95       	dec	r22
    1182:	e2 f7       	brpl	.-8      	; 0x117c <pinMode+0x12>
    1184:	ba 01       	movw	r22, r20
    1186:	62 2b       	or	r22, r18
    1188:	61 b9       	out	0x01, r22	; 1
    118a:	08 95       	ret
		}
		else {
			cbit(DDRA,pin);
    118c:	21 b1       	in	r18, 0x01	; 1
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	ac 01       	movw	r20, r24
    1194:	02 c0       	rjmp	.+4      	; 0x119a <pinMode+0x30>
    1196:	44 0f       	add	r20, r20
    1198:	55 1f       	adc	r21, r21
    119a:	6a 95       	dec	r22
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <pinMode+0x2c>
    119e:	ba 01       	movw	r22, r20
    11a0:	60 95       	com	r22
    11a2:	62 23       	and	r22, r18
    11a4:	61 b9       	out	0x01, r22	; 1
    11a6:	08 95       	ret
		}	
	}
	else if(port == B) {
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	e9 f4       	brne	.+58     	; 0x11e6 <pinMode+0x7c>
		if(mode) {
    11ac:	44 23       	and	r20, r20
    11ae:	69 f0       	breq	.+26     	; 0x11ca <pinMode+0x60>
			sbit(DDRB,pin);	
    11b0:	24 b1       	in	r18, 0x04	; 4
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	ac 01       	movw	r20, r24
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <pinMode+0x54>
    11ba:	44 0f       	add	r20, r20
    11bc:	55 1f       	adc	r21, r21
    11be:	6a 95       	dec	r22
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <pinMode+0x50>
    11c2:	ba 01       	movw	r22, r20
    11c4:	62 2b       	or	r22, r18
    11c6:	64 b9       	out	0x04, r22	; 4
    11c8:	08 95       	ret
		}
		else {
			cbit(DDRB,pin);
    11ca:	24 b1       	in	r18, 0x04	; 4
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	ac 01       	movw	r20, r24
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <pinMode+0x6e>
    11d4:	44 0f       	add	r20, r20
    11d6:	55 1f       	adc	r21, r21
    11d8:	6a 95       	dec	r22
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <pinMode+0x6a>
    11dc:	ba 01       	movw	r22, r20
    11de:	60 95       	com	r22
    11e0:	62 23       	and	r22, r18
    11e2:	64 b9       	out	0x04, r22	; 4
    11e4:	08 95       	ret
		}	
	}
	else if(port == C) {
    11e6:	82 30       	cpi	r24, 0x02	; 2
    11e8:	e9 f4       	brne	.+58     	; 0x1224 <pinMode+0xba>
		if(mode) {
    11ea:	44 23       	and	r20, r20
    11ec:	69 f0       	breq	.+26     	; 0x1208 <pinMode+0x9e>
			sbit(DDRC,pin);	
    11ee:	27 b1       	in	r18, 0x07	; 7
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	ac 01       	movw	r20, r24
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <pinMode+0x92>
    11f8:	44 0f       	add	r20, r20
    11fa:	55 1f       	adc	r21, r21
    11fc:	6a 95       	dec	r22
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <pinMode+0x8e>
    1200:	ba 01       	movw	r22, r20
    1202:	62 2b       	or	r22, r18
    1204:	67 b9       	out	0x07, r22	; 7
    1206:	08 95       	ret
		}
		else {
			cbit(DDRC,pin);
    1208:	27 b1       	in	r18, 0x07	; 7
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	ac 01       	movw	r20, r24
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <pinMode+0xac>
    1212:	44 0f       	add	r20, r20
    1214:	55 1f       	adc	r21, r21
    1216:	6a 95       	dec	r22
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <pinMode+0xa8>
    121a:	ba 01       	movw	r22, r20
    121c:	60 95       	com	r22
    121e:	62 23       	and	r22, r18
    1220:	67 b9       	out	0x07, r22	; 7
    1222:	08 95       	ret
		}
	}	
	else if(port == D) {
    1224:	83 30       	cpi	r24, 0x03	; 3
    1226:	e9 f4       	brne	.+58     	; 0x1262 <pinMode+0xf8>
		if(mode) {
    1228:	44 23       	and	r20, r20
    122a:	69 f0       	breq	.+26     	; 0x1246 <pinMode+0xdc>
			sbit(DDRD,pin);	
    122c:	2a b1       	in	r18, 0x0a	; 10
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	ac 01       	movw	r20, r24
    1234:	02 c0       	rjmp	.+4      	; 0x123a <pinMode+0xd0>
    1236:	44 0f       	add	r20, r20
    1238:	55 1f       	adc	r21, r21
    123a:	6a 95       	dec	r22
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <pinMode+0xcc>
    123e:	ba 01       	movw	r22, r20
    1240:	62 2b       	or	r22, r18
    1242:	6a b9       	out	0x0a, r22	; 10
    1244:	08 95       	ret
		}
		else {
			cbit(DDRD,pin);
    1246:	2a b1       	in	r18, 0x0a	; 10
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	ac 01       	movw	r20, r24
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <pinMode+0xea>
    1250:	44 0f       	add	r20, r20
    1252:	55 1f       	adc	r21, r21
    1254:	6a 95       	dec	r22
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <pinMode+0xe6>
    1258:	ba 01       	movw	r22, r20
    125a:	60 95       	com	r22
    125c:	62 23       	and	r22, r18
    125e:	6a b9       	out	0x0a, r22	; 10
    1260:	08 95       	ret
		}
	}
	else if(port == E) {
    1262:	84 30       	cpi	r24, 0x04	; 4
    1264:	e9 f4       	brne	.+58     	; 0x12a0 <pinMode+0x136>
		if(mode) {
    1266:	44 23       	and	r20, r20
    1268:	69 f0       	breq	.+26     	; 0x1284 <pinMode+0x11a>
			sbit(DDRE,pin);	
    126a:	2d b1       	in	r18, 0x0d	; 13
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	ac 01       	movw	r20, r24
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <pinMode+0x10e>
    1274:	44 0f       	add	r20, r20
    1276:	55 1f       	adc	r21, r21
    1278:	6a 95       	dec	r22
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <pinMode+0x10a>
    127c:	ba 01       	movw	r22, r20
    127e:	62 2b       	or	r22, r18
    1280:	6d b9       	out	0x0d, r22	; 13
    1282:	08 95       	ret
		}
		else {
			cbit(DDRE,pin);
    1284:	2d b1       	in	r18, 0x0d	; 13
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	ac 01       	movw	r20, r24
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <pinMode+0x128>
    128e:	44 0f       	add	r20, r20
    1290:	55 1f       	adc	r21, r21
    1292:	6a 95       	dec	r22
    1294:	e2 f7       	brpl	.-8      	; 0x128e <pinMode+0x124>
    1296:	ba 01       	movw	r22, r20
    1298:	60 95       	com	r22
    129a:	62 23       	and	r22, r18
    129c:	6d b9       	out	0x0d, r22	; 13
    129e:	08 95       	ret
		}
	}
	else if(port == F) {
    12a0:	85 30       	cpi	r24, 0x05	; 5
    12a2:	e9 f4       	brne	.+58     	; 0x12de <pinMode+0x174>
		if(mode) {
    12a4:	44 23       	and	r20, r20
    12a6:	69 f0       	breq	.+26     	; 0x12c2 <pinMode+0x158>
			sbit(DDRF,pin);	
    12a8:	20 b3       	in	r18, 0x10	; 16
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	ac 01       	movw	r20, r24
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <pinMode+0x14c>
    12b2:	44 0f       	add	r20, r20
    12b4:	55 1f       	adc	r21, r21
    12b6:	6a 95       	dec	r22
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <pinMode+0x148>
    12ba:	ba 01       	movw	r22, r20
    12bc:	62 2b       	or	r22, r18
    12be:	60 bb       	out	0x10, r22	; 16
    12c0:	08 95       	ret
		}
		else {
			cbit(DDRF,pin);
    12c2:	20 b3       	in	r18, 0x10	; 16
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	ac 01       	movw	r20, r24
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <pinMode+0x166>
    12cc:	44 0f       	add	r20, r20
    12ce:	55 1f       	adc	r21, r21
    12d0:	6a 95       	dec	r22
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <pinMode+0x162>
    12d4:	ba 01       	movw	r22, r20
    12d6:	60 95       	com	r22
    12d8:	62 23       	and	r22, r18
    12da:	60 bb       	out	0x10, r22	; 16
    12dc:	08 95       	ret
		}
	}
	else if(port == G) {
    12de:	86 30       	cpi	r24, 0x06	; 6
    12e0:	e9 f4       	brne	.+58     	; 0x131c <pinMode+0x1b2>
		if(mode) {
    12e2:	44 23       	and	r20, r20
    12e4:	69 f0       	breq	.+26     	; 0x1300 <pinMode+0x196>
			sbit(DDRG,pin);	
    12e6:	23 b3       	in	r18, 0x13	; 19
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	ac 01       	movw	r20, r24
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <pinMode+0x18a>
    12f0:	44 0f       	add	r20, r20
    12f2:	55 1f       	adc	r21, r21
    12f4:	6a 95       	dec	r22
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <pinMode+0x186>
    12f8:	ba 01       	movw	r22, r20
    12fa:	62 2b       	or	r22, r18
    12fc:	63 bb       	out	0x13, r22	; 19
    12fe:	08 95       	ret
		}
		else {
			cbit(DDRG,pin);
    1300:	23 b3       	in	r18, 0x13	; 19
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	ac 01       	movw	r20, r24
    1308:	02 c0       	rjmp	.+4      	; 0x130e <pinMode+0x1a4>
    130a:	44 0f       	add	r20, r20
    130c:	55 1f       	adc	r21, r21
    130e:	6a 95       	dec	r22
    1310:	e2 f7       	brpl	.-8      	; 0x130a <pinMode+0x1a0>
    1312:	ba 01       	movw	r22, r20
    1314:	60 95       	com	r22
    1316:	62 23       	and	r22, r18
    1318:	63 bb       	out	0x13, r22	; 19
    131a:	08 95       	ret
		}
	}
	else if(port == H) {
    131c:	87 30       	cpi	r24, 0x07	; 7
    131e:	09 f5       	brne	.+66     	; 0x1362 <pinMode+0x1f8>
		if(mode) {
    1320:	44 23       	and	r20, r20
    1322:	79 f0       	breq	.+30     	; 0x1342 <pinMode+0x1d8>
			sbit(DDRH,pin);	
    1324:	e1 e0       	ldi	r30, 0x01	; 1
    1326:	f1 e0       	ldi	r31, 0x01	; 1
    1328:	20 81       	ld	r18, Z
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	ac 01       	movw	r20, r24
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <pinMode+0x1cc>
    1332:	44 0f       	add	r20, r20
    1334:	55 1f       	adc	r21, r21
    1336:	6a 95       	dec	r22
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <pinMode+0x1c8>
    133a:	ba 01       	movw	r22, r20
    133c:	62 2b       	or	r22, r18
    133e:	60 83       	st	Z, r22
    1340:	08 95       	ret
		}
		else {
			cbit(DDRH,pin);
    1342:	e1 e0       	ldi	r30, 0x01	; 1
    1344:	f1 e0       	ldi	r31, 0x01	; 1
    1346:	20 81       	ld	r18, Z
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	ac 01       	movw	r20, r24
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <pinMode+0x1ea>
    1350:	44 0f       	add	r20, r20
    1352:	55 1f       	adc	r21, r21
    1354:	6a 95       	dec	r22
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <pinMode+0x1e6>
    1358:	ba 01       	movw	r22, r20
    135a:	60 95       	com	r22
    135c:	62 23       	and	r22, r18
    135e:	60 83       	st	Z, r22
    1360:	08 95       	ret
		}
	}
	// PORTI is not present
	else if(port == J) {
    1362:	89 30       	cpi	r24, 0x09	; 9
    1364:	09 f5       	brne	.+66     	; 0x13a8 <pinMode+0x23e>
		if(mode) {
    1366:	44 23       	and	r20, r20
    1368:	79 f0       	breq	.+30     	; 0x1388 <pinMode+0x21e>
			sbit(DDRJ,pin);	
    136a:	e4 e0       	ldi	r30, 0x04	; 4
    136c:	f1 e0       	ldi	r31, 0x01	; 1
    136e:	20 81       	ld	r18, Z
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	ac 01       	movw	r20, r24
    1376:	02 c0       	rjmp	.+4      	; 0x137c <pinMode+0x212>
    1378:	44 0f       	add	r20, r20
    137a:	55 1f       	adc	r21, r21
    137c:	6a 95       	dec	r22
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <pinMode+0x20e>
    1380:	ba 01       	movw	r22, r20
    1382:	62 2b       	or	r22, r18
    1384:	60 83       	st	Z, r22
    1386:	08 95       	ret
		}
		else {
			cbit(DDRJ,pin);
    1388:	e4 e0       	ldi	r30, 0x04	; 4
    138a:	f1 e0       	ldi	r31, 0x01	; 1
    138c:	20 81       	ld	r18, Z
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	ac 01       	movw	r20, r24
    1394:	02 c0       	rjmp	.+4      	; 0x139a <pinMode+0x230>
    1396:	44 0f       	add	r20, r20
    1398:	55 1f       	adc	r21, r21
    139a:	6a 95       	dec	r22
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <pinMode+0x22c>
    139e:	ba 01       	movw	r22, r20
    13a0:	60 95       	com	r22
    13a2:	62 23       	and	r22, r18
    13a4:	60 83       	st	Z, r22
    13a6:	08 95       	ret
		}
	}
	else if(port == K) {
    13a8:	8a 30       	cpi	r24, 0x0A	; 10
    13aa:	09 f5       	brne	.+66     	; 0x13ee <pinMode+0x284>
		if(mode) {
    13ac:	44 23       	and	r20, r20
    13ae:	79 f0       	breq	.+30     	; 0x13ce <pinMode+0x264>
			sbit(DDRK,pin);
    13b0:	e7 e0       	ldi	r30, 0x07	; 7
    13b2:	f1 e0       	ldi	r31, 0x01	; 1
    13b4:	20 81       	ld	r18, Z
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	ac 01       	movw	r20, r24
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <pinMode+0x258>
    13be:	44 0f       	add	r20, r20
    13c0:	55 1f       	adc	r21, r21
    13c2:	6a 95       	dec	r22
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <pinMode+0x254>
    13c6:	ba 01       	movw	r22, r20
    13c8:	62 2b       	or	r22, r18
    13ca:	60 83       	st	Z, r22
    13cc:	08 95       	ret
		}
		else {
			cbit(DDRK,pin);
    13ce:	e7 e0       	ldi	r30, 0x07	; 7
    13d0:	f1 e0       	ldi	r31, 0x01	; 1
    13d2:	20 81       	ld	r18, Z
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	ac 01       	movw	r20, r24
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <pinMode+0x276>
    13dc:	44 0f       	add	r20, r20
    13de:	55 1f       	adc	r21, r21
    13e0:	6a 95       	dec	r22
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <pinMode+0x272>
    13e4:	ba 01       	movw	r22, r20
    13e6:	60 95       	com	r22
    13e8:	62 23       	and	r22, r18
    13ea:	60 83       	st	Z, r22
    13ec:	08 95       	ret
		}
	}
	else if(port == L) {
    13ee:	8b 30       	cpi	r24, 0x0B	; 11
    13f0:	01 f5       	brne	.+64     	; 0x1432 <pinMode+0x2c8>
		if(mode) {
    13f2:	44 23       	and	r20, r20
    13f4:	79 f0       	breq	.+30     	; 0x1414 <pinMode+0x2aa>
			sbit(DDRL,pin);
    13f6:	ea e0       	ldi	r30, 0x0A	; 10
    13f8:	f1 e0       	ldi	r31, 0x01	; 1
    13fa:	20 81       	ld	r18, Z
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	ac 01       	movw	r20, r24
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <pinMode+0x29e>
    1404:	44 0f       	add	r20, r20
    1406:	55 1f       	adc	r21, r21
    1408:	6a 95       	dec	r22
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <pinMode+0x29a>
    140c:	ba 01       	movw	r22, r20
    140e:	62 2b       	or	r22, r18
    1410:	60 83       	st	Z, r22
    1412:	08 95       	ret
		}
		else {
			cbit(DDRL,pin);
    1414:	ea e0       	ldi	r30, 0x0A	; 10
    1416:	f1 e0       	ldi	r31, 0x01	; 1
    1418:	20 81       	ld	r18, Z
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	ac 01       	movw	r20, r24
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <pinMode+0x2bc>
    1422:	44 0f       	add	r20, r20
    1424:	55 1f       	adc	r21, r21
    1426:	6a 95       	dec	r22
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <pinMode+0x2b8>
    142a:	ba 01       	movw	r22, r20
    142c:	60 95       	com	r22
    142e:	62 23       	and	r22, r18
    1430:	60 83       	st	Z, r22
    1432:	08 95       	ret

00001434 <digitalWrite>:
//	G (PORTG), H (PORTH), J (PORTJ), K (PORTK), L (PORTL),
// pin  = 0~7
// signal = 0(LOW), 1(HIGH)
void digitalWrite(uint8_t port, uint8_t pin, uint8_t signal)
{
	if(port == A) {
    1434:	88 23       	and	r24, r24
    1436:	e9 f4       	brne	.+58     	; 0x1472 <digitalWrite+0x3e>
		if(signal) {
    1438:	44 23       	and	r20, r20
    143a:	69 f0       	breq	.+26     	; 0x1456 <digitalWrite+0x22>
			sbit(PORTA,pin);
    143c:	22 b1       	in	r18, 0x02	; 2
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	ac 01       	movw	r20, r24
    1444:	02 c0       	rjmp	.+4      	; 0x144a <digitalWrite+0x16>
    1446:	44 0f       	add	r20, r20
    1448:	55 1f       	adc	r21, r21
    144a:	6a 95       	dec	r22
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <digitalWrite+0x12>
    144e:	ba 01       	movw	r22, r20
    1450:	62 2b       	or	r22, r18
    1452:	62 b9       	out	0x02, r22	; 2
    1454:	08 95       	ret
		}
		else {
			cbit(PORTA,pin);
    1456:	22 b1       	in	r18, 0x02	; 2
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	ac 01       	movw	r20, r24
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <digitalWrite+0x30>
    1460:	44 0f       	add	r20, r20
    1462:	55 1f       	adc	r21, r21
    1464:	6a 95       	dec	r22
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <digitalWrite+0x2c>
    1468:	ba 01       	movw	r22, r20
    146a:	60 95       	com	r22
    146c:	62 23       	and	r22, r18
    146e:	62 b9       	out	0x02, r22	; 2
    1470:	08 95       	ret
		}
	}
	else if(port == B) {
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	e9 f4       	brne	.+58     	; 0x14b0 <digitalWrite+0x7c>
		if(signal) {
    1476:	44 23       	and	r20, r20
    1478:	69 f0       	breq	.+26     	; 0x1494 <digitalWrite+0x60>
			sbit(PORTB,pin);
    147a:	25 b1       	in	r18, 0x05	; 5
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	ac 01       	movw	r20, r24
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <digitalWrite+0x54>
    1484:	44 0f       	add	r20, r20
    1486:	55 1f       	adc	r21, r21
    1488:	6a 95       	dec	r22
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <digitalWrite+0x50>
    148c:	ba 01       	movw	r22, r20
    148e:	62 2b       	or	r22, r18
    1490:	65 b9       	out	0x05, r22	; 5
    1492:	08 95       	ret
		}
		else {
			cbit(PORTB,pin);
    1494:	25 b1       	in	r18, 0x05	; 5
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	ac 01       	movw	r20, r24
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <digitalWrite+0x6e>
    149e:	44 0f       	add	r20, r20
    14a0:	55 1f       	adc	r21, r21
    14a2:	6a 95       	dec	r22
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <digitalWrite+0x6a>
    14a6:	ba 01       	movw	r22, r20
    14a8:	60 95       	com	r22
    14aa:	62 23       	and	r22, r18
    14ac:	65 b9       	out	0x05, r22	; 5
    14ae:	08 95       	ret
		}
	}
	else if(port == C) {
    14b0:	82 30       	cpi	r24, 0x02	; 2
    14b2:	e9 f4       	brne	.+58     	; 0x14ee <digitalWrite+0xba>
		if(signal) {
    14b4:	44 23       	and	r20, r20
    14b6:	69 f0       	breq	.+26     	; 0x14d2 <digitalWrite+0x9e>
			sbit(PORTC,pin);
    14b8:	28 b1       	in	r18, 0x08	; 8
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	ac 01       	movw	r20, r24
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <digitalWrite+0x92>
    14c2:	44 0f       	add	r20, r20
    14c4:	55 1f       	adc	r21, r21
    14c6:	6a 95       	dec	r22
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <digitalWrite+0x8e>
    14ca:	ba 01       	movw	r22, r20
    14cc:	62 2b       	or	r22, r18
    14ce:	68 b9       	out	0x08, r22	; 8
    14d0:	08 95       	ret
		}
		else {
			cbit(PORTC,pin);
    14d2:	28 b1       	in	r18, 0x08	; 8
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	ac 01       	movw	r20, r24
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <digitalWrite+0xac>
    14dc:	44 0f       	add	r20, r20
    14de:	55 1f       	adc	r21, r21
    14e0:	6a 95       	dec	r22
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <digitalWrite+0xa8>
    14e4:	ba 01       	movw	r22, r20
    14e6:	60 95       	com	r22
    14e8:	62 23       	and	r22, r18
    14ea:	68 b9       	out	0x08, r22	; 8
    14ec:	08 95       	ret
		}
	}
	else if(port == D) {
    14ee:	83 30       	cpi	r24, 0x03	; 3
    14f0:	e9 f4       	brne	.+58     	; 0x152c <digitalWrite+0xf8>
		if(signal) {
    14f2:	44 23       	and	r20, r20
    14f4:	69 f0       	breq	.+26     	; 0x1510 <digitalWrite+0xdc>
			sbit(PORTD,pin);
    14f6:	2b b1       	in	r18, 0x0b	; 11
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	ac 01       	movw	r20, r24
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <digitalWrite+0xd0>
    1500:	44 0f       	add	r20, r20
    1502:	55 1f       	adc	r21, r21
    1504:	6a 95       	dec	r22
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <digitalWrite+0xcc>
    1508:	ba 01       	movw	r22, r20
    150a:	62 2b       	or	r22, r18
    150c:	6b b9       	out	0x0b, r22	; 11
    150e:	08 95       	ret
		}
		else {
			cbit(PORTD,pin);
    1510:	2b b1       	in	r18, 0x0b	; 11
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	ac 01       	movw	r20, r24
    1518:	02 c0       	rjmp	.+4      	; 0x151e <digitalWrite+0xea>
    151a:	44 0f       	add	r20, r20
    151c:	55 1f       	adc	r21, r21
    151e:	6a 95       	dec	r22
    1520:	e2 f7       	brpl	.-8      	; 0x151a <digitalWrite+0xe6>
    1522:	ba 01       	movw	r22, r20
    1524:	60 95       	com	r22
    1526:	62 23       	and	r22, r18
    1528:	6b b9       	out	0x0b, r22	; 11
    152a:	08 95       	ret
		}
	}
	else if(port == E) {
    152c:	84 30       	cpi	r24, 0x04	; 4
    152e:	e9 f4       	brne	.+58     	; 0x156a <digitalWrite+0x136>
		if(signal) {
    1530:	44 23       	and	r20, r20
    1532:	69 f0       	breq	.+26     	; 0x154e <digitalWrite+0x11a>
			sbit(PORTE,pin);
    1534:	2e b1       	in	r18, 0x0e	; 14
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	ac 01       	movw	r20, r24
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <digitalWrite+0x10e>
    153e:	44 0f       	add	r20, r20
    1540:	55 1f       	adc	r21, r21
    1542:	6a 95       	dec	r22
    1544:	e2 f7       	brpl	.-8      	; 0x153e <digitalWrite+0x10a>
    1546:	ba 01       	movw	r22, r20
    1548:	62 2b       	or	r22, r18
    154a:	6e b9       	out	0x0e, r22	; 14
    154c:	08 95       	ret
		}
		else {
			cbit(PORTE,pin);
    154e:	2e b1       	in	r18, 0x0e	; 14
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	ac 01       	movw	r20, r24
    1556:	02 c0       	rjmp	.+4      	; 0x155c <digitalWrite+0x128>
    1558:	44 0f       	add	r20, r20
    155a:	55 1f       	adc	r21, r21
    155c:	6a 95       	dec	r22
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <digitalWrite+0x124>
    1560:	ba 01       	movw	r22, r20
    1562:	60 95       	com	r22
    1564:	62 23       	and	r22, r18
    1566:	6e b9       	out	0x0e, r22	; 14
    1568:	08 95       	ret
		}
	}
	else if(port == F) {
    156a:	85 30       	cpi	r24, 0x05	; 5
    156c:	e9 f4       	brne	.+58     	; 0x15a8 <digitalWrite+0x174>
		if(signal) {
    156e:	44 23       	and	r20, r20
    1570:	69 f0       	breq	.+26     	; 0x158c <digitalWrite+0x158>
			sbit(PORTF,pin);
    1572:	21 b3       	in	r18, 0x11	; 17
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	ac 01       	movw	r20, r24
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <digitalWrite+0x14c>
    157c:	44 0f       	add	r20, r20
    157e:	55 1f       	adc	r21, r21
    1580:	6a 95       	dec	r22
    1582:	e2 f7       	brpl	.-8      	; 0x157c <digitalWrite+0x148>
    1584:	ba 01       	movw	r22, r20
    1586:	62 2b       	or	r22, r18
    1588:	61 bb       	out	0x11, r22	; 17
    158a:	08 95       	ret
		}
		else {
			cbit(PORTF,pin);
    158c:	21 b3       	in	r18, 0x11	; 17
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	ac 01       	movw	r20, r24
    1594:	02 c0       	rjmp	.+4      	; 0x159a <digitalWrite+0x166>
    1596:	44 0f       	add	r20, r20
    1598:	55 1f       	adc	r21, r21
    159a:	6a 95       	dec	r22
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <digitalWrite+0x162>
    159e:	ba 01       	movw	r22, r20
    15a0:	60 95       	com	r22
    15a2:	62 23       	and	r22, r18
    15a4:	61 bb       	out	0x11, r22	; 17
    15a6:	08 95       	ret
		}
	}
	else if(port == G) {
    15a8:	86 30       	cpi	r24, 0x06	; 6
    15aa:	e9 f4       	brne	.+58     	; 0x15e6 <digitalWrite+0x1b2>
		if(signal) {
    15ac:	44 23       	and	r20, r20
    15ae:	69 f0       	breq	.+26     	; 0x15ca <digitalWrite+0x196>
			sbit(PORTG,pin);
    15b0:	24 b3       	in	r18, 0x14	; 20
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	ac 01       	movw	r20, r24
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <digitalWrite+0x18a>
    15ba:	44 0f       	add	r20, r20
    15bc:	55 1f       	adc	r21, r21
    15be:	6a 95       	dec	r22
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <digitalWrite+0x186>
    15c2:	ba 01       	movw	r22, r20
    15c4:	62 2b       	or	r22, r18
    15c6:	64 bb       	out	0x14, r22	; 20
    15c8:	08 95       	ret
		}
		else {
			cbit(PORTG,pin);
    15ca:	24 b3       	in	r18, 0x14	; 20
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	ac 01       	movw	r20, r24
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <digitalWrite+0x1a4>
    15d4:	44 0f       	add	r20, r20
    15d6:	55 1f       	adc	r21, r21
    15d8:	6a 95       	dec	r22
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <digitalWrite+0x1a0>
    15dc:	ba 01       	movw	r22, r20
    15de:	60 95       	com	r22
    15e0:	62 23       	and	r22, r18
    15e2:	64 bb       	out	0x14, r22	; 20
    15e4:	08 95       	ret
		}
	}
	else if(port == H) {
    15e6:	87 30       	cpi	r24, 0x07	; 7
    15e8:	09 f5       	brne	.+66     	; 0x162c <digitalWrite+0x1f8>
		if(signal) {
    15ea:	44 23       	and	r20, r20
    15ec:	79 f0       	breq	.+30     	; 0x160c <digitalWrite+0x1d8>
			sbit(PORTH,pin);
    15ee:	e2 e0       	ldi	r30, 0x02	; 2
    15f0:	f1 e0       	ldi	r31, 0x01	; 1
    15f2:	20 81       	ld	r18, Z
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	ac 01       	movw	r20, r24
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <digitalWrite+0x1cc>
    15fc:	44 0f       	add	r20, r20
    15fe:	55 1f       	adc	r21, r21
    1600:	6a 95       	dec	r22
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <digitalWrite+0x1c8>
    1604:	ba 01       	movw	r22, r20
    1606:	62 2b       	or	r22, r18
    1608:	60 83       	st	Z, r22
    160a:	08 95       	ret
		}
		else {
			cbit(PORTH,pin);
    160c:	e2 e0       	ldi	r30, 0x02	; 2
    160e:	f1 e0       	ldi	r31, 0x01	; 1
    1610:	20 81       	ld	r18, Z
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	ac 01       	movw	r20, r24
    1618:	02 c0       	rjmp	.+4      	; 0x161e <digitalWrite+0x1ea>
    161a:	44 0f       	add	r20, r20
    161c:	55 1f       	adc	r21, r21
    161e:	6a 95       	dec	r22
    1620:	e2 f7       	brpl	.-8      	; 0x161a <digitalWrite+0x1e6>
    1622:	ba 01       	movw	r22, r20
    1624:	60 95       	com	r22
    1626:	62 23       	and	r22, r18
    1628:	60 83       	st	Z, r22
    162a:	08 95       	ret
		}
	}
	// PORTI is not present
	else if(port == J) {
    162c:	89 30       	cpi	r24, 0x09	; 9
    162e:	09 f5       	brne	.+66     	; 0x1672 <digitalWrite+0x23e>
		if(signal) {
    1630:	44 23       	and	r20, r20
    1632:	79 f0       	breq	.+30     	; 0x1652 <digitalWrite+0x21e>
			sbit(PORTJ,pin);
    1634:	e5 e0       	ldi	r30, 0x05	; 5
    1636:	f1 e0       	ldi	r31, 0x01	; 1
    1638:	20 81       	ld	r18, Z
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	ac 01       	movw	r20, r24
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <digitalWrite+0x212>
    1642:	44 0f       	add	r20, r20
    1644:	55 1f       	adc	r21, r21
    1646:	6a 95       	dec	r22
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <digitalWrite+0x20e>
    164a:	ba 01       	movw	r22, r20
    164c:	62 2b       	or	r22, r18
    164e:	60 83       	st	Z, r22
    1650:	08 95       	ret
		}
		else {
			cbit(PORTJ,pin);
    1652:	e5 e0       	ldi	r30, 0x05	; 5
    1654:	f1 e0       	ldi	r31, 0x01	; 1
    1656:	20 81       	ld	r18, Z
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	ac 01       	movw	r20, r24
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <digitalWrite+0x230>
    1660:	44 0f       	add	r20, r20
    1662:	55 1f       	adc	r21, r21
    1664:	6a 95       	dec	r22
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <digitalWrite+0x22c>
    1668:	ba 01       	movw	r22, r20
    166a:	60 95       	com	r22
    166c:	62 23       	and	r22, r18
    166e:	60 83       	st	Z, r22
    1670:	08 95       	ret
		}
	}
	else if(port == K) {
    1672:	8a 30       	cpi	r24, 0x0A	; 10
    1674:	09 f5       	brne	.+66     	; 0x16b8 <digitalWrite+0x284>
		if(signal) {
    1676:	44 23       	and	r20, r20
    1678:	79 f0       	breq	.+30     	; 0x1698 <digitalWrite+0x264>
			sbit(PORTK,pin);
    167a:	e8 e0       	ldi	r30, 0x08	; 8
    167c:	f1 e0       	ldi	r31, 0x01	; 1
    167e:	20 81       	ld	r18, Z
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	ac 01       	movw	r20, r24
    1686:	02 c0       	rjmp	.+4      	; 0x168c <digitalWrite+0x258>
    1688:	44 0f       	add	r20, r20
    168a:	55 1f       	adc	r21, r21
    168c:	6a 95       	dec	r22
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <digitalWrite+0x254>
    1690:	ba 01       	movw	r22, r20
    1692:	62 2b       	or	r22, r18
    1694:	60 83       	st	Z, r22
    1696:	08 95       	ret
		}
		else {
			cbit(PORTK,pin);
    1698:	e8 e0       	ldi	r30, 0x08	; 8
    169a:	f1 e0       	ldi	r31, 0x01	; 1
    169c:	20 81       	ld	r18, Z
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	ac 01       	movw	r20, r24
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <digitalWrite+0x276>
    16a6:	44 0f       	add	r20, r20
    16a8:	55 1f       	adc	r21, r21
    16aa:	6a 95       	dec	r22
    16ac:	e2 f7       	brpl	.-8      	; 0x16a6 <digitalWrite+0x272>
    16ae:	ba 01       	movw	r22, r20
    16b0:	60 95       	com	r22
    16b2:	62 23       	and	r22, r18
    16b4:	60 83       	st	Z, r22
    16b6:	08 95       	ret
		}
	}
	else if(port == L) {
    16b8:	8b 30       	cpi	r24, 0x0B	; 11
    16ba:	01 f5       	brne	.+64     	; 0x16fc <digitalWrite+0x2c8>
		if(signal) {
    16bc:	44 23       	and	r20, r20
    16be:	79 f0       	breq	.+30     	; 0x16de <digitalWrite+0x2aa>
			sbit(PORTL,pin);
    16c0:	eb e0       	ldi	r30, 0x0B	; 11
    16c2:	f1 e0       	ldi	r31, 0x01	; 1
    16c4:	20 81       	ld	r18, Z
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	ac 01       	movw	r20, r24
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <digitalWrite+0x29e>
    16ce:	44 0f       	add	r20, r20
    16d0:	55 1f       	adc	r21, r21
    16d2:	6a 95       	dec	r22
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <digitalWrite+0x29a>
    16d6:	ba 01       	movw	r22, r20
    16d8:	62 2b       	or	r22, r18
    16da:	60 83       	st	Z, r22
    16dc:	08 95       	ret
		}
		else {
			cbit(PORTL,pin);
    16de:	eb e0       	ldi	r30, 0x0B	; 11
    16e0:	f1 e0       	ldi	r31, 0x01	; 1
    16e2:	20 81       	ld	r18, Z
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	ac 01       	movw	r20, r24
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <digitalWrite+0x2bc>
    16ec:	44 0f       	add	r20, r20
    16ee:	55 1f       	adc	r21, r21
    16f0:	6a 95       	dec	r22
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <digitalWrite+0x2b8>
    16f4:	ba 01       	movw	r22, r20
    16f6:	60 95       	com	r22
    16f8:	62 23       	and	r22, r18
    16fa:	60 83       	st	Z, r22
    16fc:	08 95       	ret

000016fe <digitalRead>:
//	G (PORTG), H (PORTH), J (PORTJ), K (PORTK), L (PORTL),
// pin  = 0~7
int digitalRead(uint8_t port, uint8_t pin)
{
	unsigned char ucReadValue;
	if(port == A)
    16fe:	88 23       	and	r24, r24
    1700:	59 f4       	brne	.+22     	; 0x1718 <digitalRead+0x1a>
	{
		ucReadValue = (PINA>>pin)&0x01;
    1702:	20 b1       	in	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	c9 01       	movw	r24, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <digitalRead+0x10>
    170a:	95 95       	asr	r25
    170c:	87 95       	ror	r24
    170e:	6a 95       	dec	r22
    1710:	e2 f7       	brpl	.-8      	; 0x170a <digitalRead+0xc>
    1712:	98 2f       	mov	r25, r24
    1714:	91 70       	andi	r25, 0x01	; 1
    1716:	7b c0       	rjmp	.+246    	; 0x180e <digitalRead+0x110>
	}
	else if(port == B)
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	59 f4       	brne	.+22     	; 0x1732 <digitalRead+0x34>
	{
		ucReadValue = (PINB>>pin)&0x01;
    171c:	23 b1       	in	r18, 0x03	; 3
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	c9 01       	movw	r24, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <digitalRead+0x2a>
    1724:	95 95       	asr	r25
    1726:	87 95       	ror	r24
    1728:	6a 95       	dec	r22
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <digitalRead+0x26>
    172c:	98 2f       	mov	r25, r24
    172e:	91 70       	andi	r25, 0x01	; 1
    1730:	6e c0       	rjmp	.+220    	; 0x180e <digitalRead+0x110>
	}
	else if(port == C)
    1732:	82 30       	cpi	r24, 0x02	; 2
    1734:	59 f4       	brne	.+22     	; 0x174c <digitalRead+0x4e>
	{
		ucReadValue = (PINC>>pin)&0x01;
    1736:	26 b1       	in	r18, 0x06	; 6
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	c9 01       	movw	r24, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <digitalRead+0x44>
    173e:	95 95       	asr	r25
    1740:	87 95       	ror	r24
    1742:	6a 95       	dec	r22
    1744:	e2 f7       	brpl	.-8      	; 0x173e <digitalRead+0x40>
    1746:	98 2f       	mov	r25, r24
    1748:	91 70       	andi	r25, 0x01	; 1
    174a:	61 c0       	rjmp	.+194    	; 0x180e <digitalRead+0x110>
	}
	else if(port == D)
    174c:	83 30       	cpi	r24, 0x03	; 3
    174e:	39 f4       	brne	.+14     	; 0x175e <digitalRead+0x60>
	{
		ucReadValue = (PIND>pin)&0x01;
    1750:	89 b1       	in	r24, 0x09	; 9
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	68 17       	cp	r22, r24
    1756:	08 f4       	brcc	.+2      	; 0x175a <digitalRead+0x5c>
    1758:	5a c0       	rjmp	.+180    	; 0x180e <digitalRead+0x110>
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	58 c0       	rjmp	.+176    	; 0x180e <digitalRead+0x110>
	}
	else if(port == E)
    175e:	84 30       	cpi	r24, 0x04	; 4
    1760:	59 f4       	brne	.+22     	; 0x1778 <digitalRead+0x7a>
	{
		ucReadValue = (PINE>>pin)&0x01;
    1762:	2c b1       	in	r18, 0x0c	; 12
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	c9 01       	movw	r24, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <digitalRead+0x70>
    176a:	95 95       	asr	r25
    176c:	87 95       	ror	r24
    176e:	6a 95       	dec	r22
    1770:	e2 f7       	brpl	.-8      	; 0x176a <digitalRead+0x6c>
    1772:	98 2f       	mov	r25, r24
    1774:	91 70       	andi	r25, 0x01	; 1
    1776:	4b c0       	rjmp	.+150    	; 0x180e <digitalRead+0x110>
	}
	else if(port == F)
    1778:	85 30       	cpi	r24, 0x05	; 5
    177a:	51 f4       	brne	.+20     	; 0x1790 <digitalRead+0x92>
	{
		ucReadValue = (PINF>>pin)&0x01;
    177c:	8f b1       	in	r24, 0x0f	; 15
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <digitalRead+0x88>
    1782:	95 95       	asr	r25
    1784:	87 95       	ror	r24
    1786:	6a 95       	dec	r22
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <digitalRead+0x84>
    178a:	98 2f       	mov	r25, r24
    178c:	91 70       	andi	r25, 0x01	; 1
    178e:	3f c0       	rjmp	.+126    	; 0x180e <digitalRead+0x110>
	}
	else if(port == G)
    1790:	86 30       	cpi	r24, 0x06	; 6
    1792:	51 f4       	brne	.+20     	; 0x17a8 <digitalRead+0xaa>
	{
		ucReadValue = (PING>>pin)&0x01;
    1794:	82 b3       	in	r24, 0x12	; 18
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 c0       	rjmp	.+4      	; 0x179e <digitalRead+0xa0>
    179a:	95 95       	asr	r25
    179c:	87 95       	ror	r24
    179e:	6a 95       	dec	r22
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <digitalRead+0x9c>
    17a2:	98 2f       	mov	r25, r24
    17a4:	91 70       	andi	r25, 0x01	; 1
    17a6:	33 c0       	rjmp	.+102    	; 0x180e <digitalRead+0x110>
	}
	else if(port == H)
    17a8:	87 30       	cpi	r24, 0x07	; 7
    17aa:	59 f4       	brne	.+22     	; 0x17c2 <digitalRead+0xc4>
	{
		ucReadValue = (PINH>>pin)&0x01;
    17ac:	80 91 00 01 	lds	r24, 0x0100
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <digitalRead+0xba>
    17b4:	95 95       	asr	r25
    17b6:	87 95       	ror	r24
    17b8:	6a 95       	dec	r22
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <digitalRead+0xb6>
    17bc:	98 2f       	mov	r25, r24
    17be:	91 70       	andi	r25, 0x01	; 1
    17c0:	26 c0       	rjmp	.+76     	; 0x180e <digitalRead+0x110>
	}
	// PORTI is not present
	else if(port == J)
    17c2:	89 30       	cpi	r24, 0x09	; 9
    17c4:	59 f4       	brne	.+22     	; 0x17dc <digitalRead+0xde>
	{
		ucReadValue = (PINJ>>pin)&0x01;
    17c6:	80 91 03 01 	lds	r24, 0x0103
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <digitalRead+0xd4>
    17ce:	95 95       	asr	r25
    17d0:	87 95       	ror	r24
    17d2:	6a 95       	dec	r22
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <digitalRead+0xd0>
    17d6:	98 2f       	mov	r25, r24
    17d8:	91 70       	andi	r25, 0x01	; 1
    17da:	19 c0       	rjmp	.+50     	; 0x180e <digitalRead+0x110>
	}
	else if(port == K)
    17dc:	8a 30       	cpi	r24, 0x0A	; 10
    17de:	59 f4       	brne	.+22     	; 0x17f6 <digitalRead+0xf8>
	{
		ucReadValue = (PINK>>pin)&0x01;
    17e0:	80 91 06 01 	lds	r24, 0x0106
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <digitalRead+0xee>
    17e8:	95 95       	asr	r25
    17ea:	87 95       	ror	r24
    17ec:	6a 95       	dec	r22
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <digitalRead+0xea>
    17f0:	98 2f       	mov	r25, r24
    17f2:	91 70       	andi	r25, 0x01	; 1
    17f4:	0c c0       	rjmp	.+24     	; 0x180e <digitalRead+0x110>
	}
	else if(port == L)
    17f6:	8b 30       	cpi	r24, 0x0B	; 11
    17f8:	51 f4       	brne	.+20     	; 0x180e <digitalRead+0x110>
	{
		ucReadValue = (PINL>>pin)&0x01;
    17fa:	80 91 09 01 	lds	r24, 0x0109
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <digitalRead+0x108>
    1802:	95 95       	asr	r25
    1804:	87 95       	ror	r24
    1806:	6a 95       	dec	r22
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <digitalRead+0x104>
    180a:	98 2f       	mov	r25, r24
    180c:	91 70       	andi	r25, 0x01	; 1
	}
	
	return ucReadValue;
}
    180e:	89 2f       	mov	r24, r25
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	08 95       	ret

00001814 <I2C_data_input>:


static void I2C_data_output (void)
{	pinMode(TEMP_PORT, DATA, OUTPUT);}
static void I2C_data_input()
{	pinMode(TEMP_PORT, DATA, INPUT);}
    1814:	85 e0       	ldi	r24, 0x05	; 5
    1816:	65 e0       	ldi	r22, 0x05	; 5
    1818:	40 e0       	ldi	r20, 0x00	; 0
    181a:	0e 94 b5 08 	call	0x116a	; 0x116a <pinMode>
    181e:	08 95       	ret

00001820 <I2C_data_output>:
unsigned short error, checksum;
unsigned char sensing_type;


static void I2C_data_output (void)
{	pinMode(TEMP_PORT, DATA, OUTPUT);}
    1820:	85 e0       	ldi	r24, 0x05	; 5
    1822:	65 e0       	ldi	r22, 0x05	; 5
    1824:	41 e0       	ldi	r20, 0x01	; 1
    1826:	0e 94 b5 08 	call	0x116a	; 0x116a <pinMode>
    182a:	08 95       	ret

0000182c <READ_DATA>:
static void SET_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, HIGH);}
static void CLR_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, LOW);}
static int READ_DATA (void)
{	return digitalRead(TEMP_PORT, DATA);}
    182c:	85 e0       	ldi	r24, 0x05	; 5
    182e:	65 e0       	ldi	r22, 0x05	; 5
    1830:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <digitalRead>
    1834:	08 95       	ret

00001836 <CLR_DATA>:
static void I2C_sck_input (void)
{	pinMode(TEMP_PORT, SCK, INPUT);}
static void SET_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, HIGH);}
static void CLR_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, LOW);}
    1836:	85 e0       	ldi	r24, 0x05	; 5
    1838:	65 e0       	ldi	r22, 0x05	; 5
    183a:	40 e0       	ldi	r20, 0x00	; 0
    183c:	0e 94 1a 0a 	call	0x1434	; 0x1434 <digitalWrite>
    1840:	08 95       	ret

00001842 <SET_SCK>:
static int READ_DATA (void)
{	return digitalRead(TEMP_PORT, DATA);}
static void SET_SCK()
{	digitalWrite(TEMP_PORT, SCK, HIGH);}
    1842:	85 e0       	ldi	r24, 0x05	; 5
    1844:	62 e0       	ldi	r22, 0x02	; 2
    1846:	41 e0       	ldi	r20, 0x01	; 1
    1848:	0e 94 1a 0a 	call	0x1434	; 0x1434 <digitalWrite>
    184c:	08 95       	ret

0000184e <CLR_SCK>:
static void CLR_SCK()
{	digitalWrite(TEMP_PORT, SCK, LOW);}
    184e:	85 e0       	ldi	r24, 0x05	; 5
    1850:	62 e0       	ldi	r22, 0x02	; 2
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	0e 94 1a 0a 	call	0x1434	; 0x1434 <digitalWrite>
    1858:	08 95       	ret

0000185a <SET_DATA>:
static void I2C_sck_output (void)
{	pinMode(TEMP_PORT, SCK, OUTPUT);}
static void I2C_sck_input (void)
{	pinMode(TEMP_PORT, SCK, INPUT);}
static void SET_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, HIGH);}
    185a:	85 e0       	ldi	r24, 0x05	; 5
    185c:	65 e0       	ldi	r22, 0x05	; 5
    185e:	41 e0       	ldi	r20, 0x01	; 1
    1860:	0e 94 1a 0a 	call	0x1434	; 0x1434 <digitalWrite>
    1864:	08 95       	ret

00001866 <Transmission_start>:
  	Transmission_start();	// transmission start
}

void Transmission_start (void)
{  
	SET_DATA();                   //Initial state
    1866:	0e 94 2d 0c 	call	0x185a	; 0x185a <SET_DATA>
	CLR_SCK();                    //Initial state
    186a:	0e 94 27 0c 	call	0x184e	; 0x184e <CLR_SCK>
	asm("nop");asm("nop");
    186e:	00 00       	nop
    1870:	00 00       	nop

	SET_SCK();
    1872:	0e 94 21 0c 	call	0x1842	; 0x1842 <SET_SCK>
	asm("nop");asm("nop");
    1876:	00 00       	nop
    1878:	00 00       	nop

	CLR_DATA();
    187a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <CLR_DATA>
	asm("nop");asm("nop");
    187e:	00 00       	nop
    1880:	00 00       	nop

	CLR_SCK();  
    1882:	0e 94 27 0c 	call	0x184e	; 0x184e <CLR_SCK>
	asm("nop");asm("nop");
    1886:	00 00       	nop
    1888:	00 00       	nop

	SET_SCK();
    188a:	0e 94 21 0c 	call	0x1842	; 0x1842 <SET_SCK>
	asm("nop");asm("nop");
    188e:	00 00       	nop
    1890:	00 00       	nop

	SET_DATA();		   
    1892:	0e 94 2d 0c 	call	0x185a	; 0x185a <SET_DATA>
	asm("nop");asm("nop");
    1896:	00 00       	nop
    1898:	00 00       	nop

	CLR_SCK();
    189a:	0e 94 27 0c 	call	0x184e	; 0x184e <CLR_SCK>
}
    189e:	08 95       	ret

000018a0 <Connection_reset>:
	I2C_sck_output ();		// DDRF |= 0x01;
	Connection_reset ();
}

void Connection_reset (void)
{
    18a0:	cf 93       	push	r28
	unsigned char i; 
  	SET_DATA();				// Initial state
    18a2:	0e 94 2d 0c 	call	0x185a	; 0x185a <SET_DATA>
	CLR_SCK();				// Initial state
    18a6:	0e 94 27 0c 	call	0x184e	; 0x184e <CLR_SCK>
    18aa:	c9 e0       	ldi	r28, 0x09	; 9
  	for (i=0; i<9; i++)		// 9 SCK cycles
  	{
  		SET_SCK();
    18ac:	0e 94 21 0c 	call	0x1842	; 0x1842 <SET_SCK>
    	CLR_SCK();
    18b0:	0e 94 27 0c 	call	0x184e	; 0x184e <CLR_SCK>
    18b4:	c1 50       	subi	r28, 0x01	; 1
void Connection_reset (void)
{
	unsigned char i; 
  	SET_DATA();				// Initial state
	CLR_SCK();				// Initial state
  	for (i=0; i<9; i++)		// 9 SCK cycles
    18b6:	d1 f7       	brne	.-12     	; 0x18ac <Connection_reset+0xc>
  	{
  		SET_SCK();
    	CLR_SCK();
  	}
  	Transmission_start();	// transmission start
    18b8:	0e 94 33 0c 	call	0x1866	; 0x1866 <Transmission_start>
}
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <SHT11_Init>:
{	return digitalRead(TEMP_PORT, SCK);}


void SHT11_Init (void)
{
	I2C_data_output ();		// DDRF |= 0x02;
    18c0:	0e 94 10 0c 	call	0x1820	; 0x1820 <I2C_data_output>
static void I2C_data_output (void)
{	pinMode(TEMP_PORT, DATA, OUTPUT);}
static void I2C_data_input()
{	pinMode(TEMP_PORT, DATA, INPUT);}
static void I2C_sck_output (void)
{	pinMode(TEMP_PORT, SCK, OUTPUT);}
    18c4:	85 e0       	ldi	r24, 0x05	; 5
    18c6:	62 e0       	ldi	r22, 0x02	; 2
    18c8:	41 e0       	ldi	r20, 0x01	; 1
    18ca:	0e 94 b5 08 	call	0x116a	; 0x116a <pinMode>

void SHT11_Init (void)
{
	I2C_data_output ();		// DDRF |= 0x02;
	I2C_sck_output ();		// DDRF |= 0x01;
	Connection_reset ();
    18ce:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Connection_reset>
}
    18d2:	08 95       	ret

000018d4 <Write_byte>:

	return error;
}

unsigned char Write_byte (unsigned char value)
{ 
    18d4:	0f 93       	push	r16
    18d6:	1f 93       	push	r17
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	08 2f       	mov	r16, r24
	unsigned char i, error	=	0;
	I2C_data_output ();
    18de:	0e 94 10 0c 	call	0x1820	; 0x1820 <I2C_data_output>
    18e2:	c8 e0       	ldi	r28, 0x08	; 8
    18e4:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0x80; i>0; i/=2)
    18e6:	10 e8       	ldi	r17, 0x80	; 128
	{
		if (i & value)	SET_DATA ();
    18e8:	81 2f       	mov	r24, r17
    18ea:	80 23       	and	r24, r16
    18ec:	19 f0       	breq	.+6      	; 0x18f4 <Write_byte+0x20>
    18ee:	0e 94 2d 0c 	call	0x185a	; 0x185a <SET_DATA>
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <Write_byte+0x24>
		else		CLR_DATA ();
    18f4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <CLR_DATA>

		SET_SCK ();
    18f8:	0e 94 21 0c 	call	0x1842	; 0x1842 <SET_SCK>
		asm("nop");asm("nop");
    18fc:	00 00       	nop
    18fe:	00 00       	nop
		CLR_SCK ();
    1900:	0e 94 27 0c 	call	0x184e	; 0x184e <CLR_SCK>

unsigned char Write_byte (unsigned char value)
{ 
	unsigned char i, error	=	0;
	I2C_data_output ();
	for (i=0x80; i>0; i/=2)
    1904:	16 95       	lsr	r17
    1906:	21 97       	sbiw	r28, 0x01	; 1
    1908:	79 f7       	brne	.-34     	; 0x18e8 <Write_byte+0x14>

		SET_SCK ();
		asm("nop");asm("nop");
		CLR_SCK ();
	}
	SET_DATA ();
    190a:	0e 94 2d 0c 	call	0x185a	; 0x185a <SET_DATA>
	I2C_data_input ();
    190e:	0e 94 0a 0c 	call	0x1814	; 0x1814 <I2C_data_input>
	asm("nop");asm("nop");
    1912:	00 00       	nop
    1914:	00 00       	nop
	SET_SCK (); 
    1916:	0e 94 21 0c 	call	0x1842	; 0x1842 <SET_SCK>
	error	=	READ_DATA ();
    191a:	0e 94 16 0c 	call	0x182c	; 0x182c <READ_DATA>
    191e:	c8 2f       	mov	r28, r24

	CLR_SCK ();
    1920:	0e 94 27 0c 	call	0x184e	; 0x184e <CLR_SCK>
	I2C_data_output ();
    1924:	0e 94 10 0c 	call	0x1820	; 0x1820 <I2C_data_output>

	return error;
}
    1928:	8c 2f       	mov	r24, r28
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	1f 91       	pop	r17
    1930:	0f 91       	pop	r16
    1932:	08 95       	ret

00001934 <Read_byte>:

unsigned char Read_byte(unsigned char ack)
{ 
    1934:	ff 92       	push	r15
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	f8 2e       	mov	r15, r24
	unsigned char i, val	=	0;
	I2C_data_input ();
    1940:	0e 94 0a 0c 	call	0x1814	; 0x1814 <I2C_data_input>
	SET_DATA();
    1944:	0e 94 2d 0c 	call	0x185a	; 0x185a <SET_DATA>
	asm("nop");asm("nop");
    1948:	00 00       	nop
    194a:	00 00       	nop
    194c:	c8 e0       	ldi	r28, 0x08	; 8
    194e:	d0 e0       	ldi	r29, 0x00	; 0
	return error;
}

unsigned char Read_byte(unsigned char ack)
{ 
	unsigned char i, val	=	0;
    1950:	00 e0       	ldi	r16, 0x00	; 0
	I2C_data_input ();
	SET_DATA();
	asm("nop");asm("nop");

	for (i=0x80; i>0; i/=2)
    1952:	10 e8       	ldi	r17, 0x80	; 128
	{
		SET_SCK();
    1954:	0e 94 21 0c 	call	0x1842	; 0x1842 <SET_SCK>
		asm("nop");asm("nop");
    1958:	00 00       	nop
    195a:	00 00       	nop
		if (READ_DATA())
    195c:	0e 94 16 0c 	call	0x182c	; 0x182c <READ_DATA>
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	09 f0       	breq	.+2      	; 0x1966 <Read_byte+0x32>
			val = (val | i); 
    1964:	01 2b       	or	r16, r17
		CLR_SCK();
    1966:	0e 94 27 0c 	call	0x184e	; 0x184e <CLR_SCK>
		asm("nop");asm("nop");
    196a:	00 00       	nop
    196c:	00 00       	nop
	unsigned char i, val	=	0;
	I2C_data_input ();
	SET_DATA();
	asm("nop");asm("nop");

	for (i=0x80; i>0; i/=2)
    196e:	16 95       	lsr	r17
    1970:	21 97       	sbiw	r28, 0x01	; 1
    1972:	81 f7       	brne	.-32     	; 0x1954 <Read_byte+0x20>
		if (READ_DATA())
			val = (val | i); 
		CLR_SCK();
		asm("nop");asm("nop");
	}
	I2C_data_output();
    1974:	0e 94 10 0c 	call	0x1820	; 0x1820 <I2C_data_output>

	if (ack)	CLR_DATA();
    1978:	ff 20       	and	r15, r15
    197a:	19 f0       	breq	.+6      	; 0x1982 <Read_byte+0x4e>
    197c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <CLR_DATA>
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <Read_byte+0x52>
	else		SET_DATA();
    1982:	0e 94 2d 0c 	call	0x185a	; 0x185a <SET_DATA>

	SET_SCK();
    1986:	0e 94 21 0c 	call	0x1842	; 0x1842 <SET_SCK>
	asm("nop");asm("nop"); 
    198a:	00 00       	nop
    198c:	00 00       	nop
	CLR_SCK();
    198e:	0e 94 27 0c 	call	0x184e	; 0x184e <CLR_SCK>
	asm("nop");asm("nop"); 
    1992:	00 00       	nop
    1994:	00 00       	nop
	SET_DATA();
    1996:	0e 94 2d 0c 	call	0x185a	; 0x185a <SET_DATA>

	return val;
}
    199a:	80 2f       	mov	r24, r16
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	1f 91       	pop	r17
    19a2:	0f 91       	pop	r16
    19a4:	ff 90       	pop	r15
    19a6:	08 95       	ret

000019a8 <Measure>:
	else 							return	0;
}

unsigned char Measure (unsigned short *p_value, unsigned short *p_checksum,
			unsigned char mode)
{ 
    19a8:	ef 92       	push	r14
    19aa:	ff 92       	push	r15
    19ac:	0f 93       	push	r16
    19ae:	1f 93       	push	r17
    19b0:	cf 93       	push	r28
    19b2:	7c 01       	movw	r14, r24
    19b4:	8b 01       	movw	r16, r22
    19b6:	c4 2f       	mov	r28, r20
	unsigned short error	=	0;
	unsigned short SHT11_msb, SHT11_lsb;

	Transmission_start ();		//transmission start
    19b8:	0e 94 33 0c 	call	0x1866	; 0x1866 <Transmission_start>
	switch (mode)				//send command to sensor
    19bc:	cc 23       	and	r28, r28
    19be:	19 f0       	breq	.+6      	; 0x19c6 <Measure+0x1e>
    19c0:	c1 30       	cpi	r28, 0x01	; 1
    19c2:	59 f4       	brne	.+22     	; 0x19da <Measure+0x32>
    19c4:	05 c0       	rjmp	.+10     	; 0x19d0 <Measure+0x28>
	{
		case TEMP :
			error	+=	Write_byte (MEASURE_TEMP);
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <Write_byte>
    19cc:	90 e0       	ldi	r25, 0x00	; 0
			break;
    19ce:	07 c0       	rjmp	.+14     	; 0x19de <Measure+0x36>
		case HUMI :
			error	+=	Write_byte (MEASURE_HUMI);
    19d0:	85 e0       	ldi	r24, 0x05	; 5
    19d2:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <Write_byte>
    19d6:	90 e0       	ldi	r25, 0x00	; 0
			break;
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <Measure+0x36>
}

unsigned char Measure (unsigned short *p_value, unsigned short *p_checksum,
			unsigned char mode)
{ 
	unsigned short error	=	0;
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	90 e0       	ldi	r25, 0x00	; 0
			error	+=	Write_byte (MEASURE_HUMI);
			break;
		default :
			break;	 
	}
	if (error != 0)
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	e9 f4       	brne	.+58     	; 0x1a1c <Measure+0x74>
		return	error;

	I2C_data_input ();
    19e2:	0e 94 0a 0c 	call	0x1814	; 0x1814 <I2C_data_input>

	while (READ_DATA());
    19e6:	0e 94 16 0c 	call	0x182c	; 0x182c <READ_DATA>
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	e1 f7       	brne	.-8      	; 0x19e6 <Measure+0x3e>

	I2C_data_input();
    19ee:	0e 94 0a 0c 	call	0x1814	; 0x1814 <I2C_data_input>

	SHT11_msb	=	Read_byte (ACK);		// read the first byte (MSB)
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <Read_byte>
    19f8:	c8 2f       	mov	r28, r24
	SHT11_lsb	=	Read_byte (ACK);		// read the second byte (LSB)
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	0e 94 9a 0c 	call	0x1934	; 0x1934 <Read_byte>
	*p_value	=	(SHT11_msb * 256) + SHT11_lsb;
    1a00:	3c 2f       	mov	r19, r28
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	28 0f       	add	r18, r24
    1a06:	31 1d       	adc	r19, r1
    1a08:	f7 01       	movw	r30, r14
    1a0a:	31 83       	std	Z+1, r19	; 0x01
    1a0c:	20 83       	st	Z, r18
	*p_checksum	=	Read_byte (NOACK);	// read checksum
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	0e 94 9a 0c 	call	0x1934	; 0x1934 <Read_byte>
    1a14:	f8 01       	movw	r30, r16
    1a16:	80 83       	st	Z, r24
    1a18:	11 82       	std	Z+1, r1	; 0x01

	return error;
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
}
    1a1c:	cf 91       	pop	r28
    1a1e:	1f 91       	pop	r17
    1a20:	0f 91       	pop	r16
    1a22:	ff 90       	pop	r15
    1a24:	ef 90       	pop	r14
    1a26:	08 95       	ret

00001a28 <calc_SHT11>:

	return val;
}

void calc_SHT11 (unsigned short humidity, unsigned short temperature)
{ 
    1a28:	2f 92       	push	r2
    1a2a:	3f 92       	push	r3
    1a2c:	4f 92       	push	r4
    1a2e:	5f 92       	push	r5
    1a30:	6f 92       	push	r6
    1a32:	7f 92       	push	r7
    1a34:	8f 92       	push	r8
    1a36:	9f 92       	push	r9
    1a38:	af 92       	push	r10
    1a3a:	bf 92       	push	r11
    1a3c:	cf 92       	push	r12
    1a3e:	df 92       	push	r13
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	0f 92       	push	r0
    1a4e:	0f 92       	push	r0
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	8b 01       	movw	r16, r22
	const float T2	=	0.00008; 		// for 12 Bit
 
	float rh_lin;		// Relative Humidity
	float rh_true; 		// Humidity Sensor RH/Temperature compensation
	float t_C; 			// Temperature
	float rh	=	(float)humidity;
    1a56:	bc 01       	movw	r22, r24
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0e 94 35 11 	call	0x226a	; 0x226a <__floatunsisf>
    1a60:	c6 2e       	mov	r12, r22
    1a62:	d7 2e       	mov	r13, r23
    1a64:	f8 2e       	mov	r15, r24
    1a66:	e9 2e       	mov	r14, r25
	float t		=	(float)temperature;
    1a68:	b8 01       	movw	r22, r16
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	0e 94 35 11 	call	0x226a	; 0x226a <__floatunsisf>
    
	t_C			=	((t * 0.01) - 40) - 5;
    1a72:	2a e0       	ldi	r18, 0x0A	; 10
    1a74:	37 ed       	ldi	r19, 0xD7	; 215
    1a76:	43 e2       	ldi	r20, 0x23	; 35
    1a78:	5c e3       	ldi	r21, 0x3C	; 60
    1a7a:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <__mulsf3>
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e2       	ldi	r20, 0x20	; 32
    1a84:	52 e4       	ldi	r21, 0x42	; 66
    1a86:	0e 94 a0 10 	call	0x2140	; 0x2140 <__subsf3>
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 ea       	ldi	r20, 0xA0	; 160
    1a90:	50 e4       	ldi	r21, 0x40	; 64
    1a92:	0e 94 a0 10 	call	0x2140	; 0x2140 <__subsf3>
    1a96:	36 2e       	mov	r3, r22
    1a98:	27 2e       	mov	r2, r23
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	9a 83       	std	Y+2, r25	; 0x02
	rh_lin		=	(C3 * rh * rh) + (C2 * rh) + C1;
	rh_true 	=	(t_C - 25) * (T1 + (T2 * rh)) + rh_lin;
    1a9e:	38 2f       	mov	r19, r24
    1aa0:	29 2f       	mov	r18, r25
    1aa2:	86 2f       	mov	r24, r22
    1aa4:	92 2d       	mov	r25, r2
    1aa6:	a3 2f       	mov	r26, r19
    1aa8:	b2 2f       	mov	r27, r18
    1aaa:	bc 01       	movw	r22, r24
    1aac:	cd 01       	movw	r24, r26
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	48 ec       	ldi	r20, 0xC8	; 200
    1ab4:	51 e4       	ldi	r21, 0x41	; 65
    1ab6:	0e 94 a0 10 	call	0x2140	; 0x2140 <__subsf3>
    1aba:	4b 01       	movw	r8, r22
    1abc:	5c 01       	movw	r10, r24
    1abe:	8c 2d       	mov	r24, r12
    1ac0:	9d 2d       	mov	r25, r13
    1ac2:	af 2d       	mov	r26, r15
    1ac4:	be 2d       	mov	r27, r14
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	2c ea       	ldi	r18, 0xAC	; 172
    1acc:	35 ec       	ldi	r19, 0xC5	; 197
    1ace:	47 ea       	ldi	r20, 0xA7	; 167
    1ad0:	58 e3       	ldi	r21, 0x38	; 56
    1ad2:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <__mulsf3>
    1ad6:	2a e0       	ldi	r18, 0x0A	; 10
    1ad8:	37 ed       	ldi	r19, 0xD7	; 215
    1ada:	43 e2       	ldi	r20, 0x23	; 35
    1adc:	5c e3       	ldi	r21, 0x3C	; 60
    1ade:	0e 94 a1 10 	call	0x2142	; 0x2142 <__addsf3>
    1ae2:	9b 01       	movw	r18, r22
    1ae4:	ac 01       	movw	r20, r24
    1ae6:	c5 01       	movw	r24, r10
    1ae8:	b4 01       	movw	r22, r8
    1aea:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <__mulsf3>
    1aee:	2b 01       	movw	r4, r22
    1af0:	3c 01       	movw	r6, r24
	float t_C; 			// Temperature
	float rh	=	(float)humidity;
	float t		=	(float)temperature;
    
	t_C			=	((t * 0.01) - 40) - 5;
	rh_lin		=	(C3 * rh * rh) + (C2 * rh) + C1;
    1af2:	8c 2d       	mov	r24, r12
    1af4:	9d 2d       	mov	r25, r13
    1af6:	af 2d       	mov	r26, r15
    1af8:	be 2d       	mov	r27, r14
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	22 ea       	ldi	r18, 0xA2	; 162
    1b00:	37 ee       	ldi	r19, 0xE7	; 231
    1b02:	4b e3       	ldi	r20, 0x3B	; 59
    1b04:	56 eb       	ldi	r21, 0xB6	; 182
    1b06:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <__mulsf3>
    1b0a:	0c 2d       	mov	r16, r12
    1b0c:	1d 2d       	mov	r17, r13
    1b0e:	2f 2d       	mov	r18, r15
    1b10:	3e 2d       	mov	r19, r14
    1b12:	a9 01       	movw	r20, r18
    1b14:	98 01       	movw	r18, r16
    1b16:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <__mulsf3>
    1b1a:	4b 01       	movw	r8, r22
    1b1c:	5c 01       	movw	r10, r24
    1b1e:	80 2f       	mov	r24, r16
    1b20:	91 2f       	mov	r25, r17
    1b22:	af 2d       	mov	r26, r15
    1b24:	be 2d       	mov	r27, r14
    1b26:	bc 01       	movw	r22, r24
    1b28:	cd 01       	movw	r24, r26
    1b2a:	24 e5       	ldi	r18, 0x54	; 84
    1b2c:	33 ee       	ldi	r19, 0xE3	; 227
    1b2e:	45 e2       	ldi	r20, 0x25	; 37
    1b30:	5d e3       	ldi	r21, 0x3D	; 61
    1b32:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <__mulsf3>
    1b36:	9b 01       	movw	r18, r22
    1b38:	ac 01       	movw	r20, r24
    1b3a:	c5 01       	movw	r24, r10
    1b3c:	b4 01       	movw	r22, r8
    1b3e:	0e 94 a1 10 	call	0x2142	; 0x2142 <__addsf3>
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e8       	ldi	r20, 0x80	; 128
    1b48:	50 e4       	ldi	r21, 0x40	; 64
    1b4a:	0e 94 a0 10 	call	0x2140	; 0x2140 <__subsf3>
    1b4e:	9b 01       	movw	r18, r22
    1b50:	ac 01       	movw	r20, r24
	rh_true 	=	(t_C - 25) * (T1 + (T2 * rh)) + rh_lin;
    1b52:	c3 01       	movw	r24, r6
    1b54:	b2 01       	movw	r22, r4
    1b56:	0e 94 a1 10 	call	0x2142	; 0x2142 <__addsf3>
    1b5a:	f6 2e       	mov	r15, r22
    1b5c:	07 2f       	mov	r16, r23
    1b5e:	48 2e       	mov	r4, r24
    1b60:	89 2e       	mov	r8, r25
    1b62:	e6 2e       	mov	r14, r22
    1b64:	17 2f       	mov	r17, r23
    1b66:	d8 2e       	mov	r13, r24
    1b68:	c9 2e       	mov	r12, r25

	if (rh_true > 100)	rh_true = 100;
    1b6a:	86 2f       	mov	r24, r22
    1b6c:	90 2f       	mov	r25, r16
    1b6e:	a4 2d       	mov	r26, r4
    1b70:	b8 2d       	mov	r27, r8
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	48 ec       	ldi	r20, 0xC8	; 200
    1b7c:	52 e4       	ldi	r21, 0x42	; 66
    1b7e:	0e 94 e7 11 	call	0x23ce	; 0x23ce <__gesf2>
    1b82:	18 16       	cp	r1, r24
    1b84:	7c f0       	brlt	.+30     	; 0x1ba4 <calc_SHT11+0x17c>
	if (rh_true < 0.1)	rh_true = 0.1;
    1b86:	8f 2d       	mov	r24, r15
    1b88:	90 2f       	mov	r25, r16
    1b8a:	a4 2d       	mov	r26, r4
    1b8c:	b8 2d       	mov	r27, r8
    1b8e:	bc 01       	movw	r22, r24
    1b90:	cd 01       	movw	r24, r26
    1b92:	2d ec       	ldi	r18, 0xCD	; 205
    1b94:	3c ec       	ldi	r19, 0xCC	; 204
    1b96:	4c ec       	ldi	r20, 0xCC	; 204
    1b98:	5d e3       	ldi	r21, 0x3D	; 61
    1b9a:	0e 94 05 11 	call	0x220a	; 0x220a <__cmpsf2>
    1b9e:	88 23       	and	r24, r24
    1ba0:	64 f0       	brlt	.+24     	; 0x1bba <calc_SHT11+0x192>
    1ba2:	18 c0       	rjmp	.+48     	; 0x1bd4 <calc_SHT11+0x1ac>
    
	t_C			=	((t * 0.01) - 40) - 5;
	rh_lin		=	(C3 * rh * rh) + (C2 * rh) + C1;
	rh_true 	=	(t_C - 25) * (T1 + (T2 * rh)) + rh_lin;

	if (rh_true > 100)	rh_true = 100;
    1ba4:	ee 24       	eor	r14, r14
    1ba6:	10 e0       	ldi	r17, 0x00	; 0
    1ba8:	0f 2e       	mov	r0, r31
    1baa:	f8 ec       	ldi	r31, 0xC8	; 200
    1bac:	df 2e       	mov	r13, r31
    1bae:	f0 2d       	mov	r31, r0
    1bb0:	0f 2e       	mov	r0, r31
    1bb2:	f2 e4       	ldi	r31, 0x42	; 66
    1bb4:	cf 2e       	mov	r12, r31
    1bb6:	f0 2d       	mov	r31, r0
    1bb8:	0d c0       	rjmp	.+26     	; 0x1bd4 <calc_SHT11+0x1ac>
	if (rh_true < 0.1)	rh_true = 0.1;
    1bba:	0f 2e       	mov	r0, r31
    1bbc:	fd ec       	ldi	r31, 0xCD	; 205
    1bbe:	ef 2e       	mov	r14, r31
    1bc0:	f0 2d       	mov	r31, r0
    1bc2:	1c ec       	ldi	r17, 0xCC	; 204
    1bc4:	0f 2e       	mov	r0, r31
    1bc6:	fc ec       	ldi	r31, 0xCC	; 204
    1bc8:	df 2e       	mov	r13, r31
    1bca:	f0 2d       	mov	r31, r0
    1bcc:	0f 2e       	mov	r0, r31
    1bce:	fd e3       	ldi	r31, 0x3D	; 61
    1bd0:	cf 2e       	mov	r12, r31
    1bd2:	f0 2d       	mov	r31, r0

	val_temp	=	(unsigned short)(t_C*10);
    1bd4:	39 81       	ldd	r19, Y+1	; 0x01
    1bd6:	2a 81       	ldd	r18, Y+2	; 0x02
    1bd8:	83 2d       	mov	r24, r3
    1bda:	92 2d       	mov	r25, r2
    1bdc:	a3 2f       	mov	r26, r19
    1bde:	b2 2f       	mov	r27, r18
    1be0:	bc 01       	movw	r22, r24
    1be2:	cd 01       	movw	r24, r26
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e2       	ldi	r20, 0x20	; 32
    1bea:	51 e4       	ldi	r21, 0x41	; 65
    1bec:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <__mulsf3>
    1bf0:	0e 94 09 11 	call	0x2212	; 0x2212 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	90 93 a4 0a 	sts	0x0AA4, r25
    1bfc:	80 93 a3 0a 	sts	0x0AA3, r24
	val_humi	=	(unsigned short)(rh_true*10);
    1c00:	8e 2d       	mov	r24, r14
    1c02:	91 2f       	mov	r25, r17
    1c04:	ad 2d       	mov	r26, r13
    1c06:	bc 2d       	mov	r27, r12
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e2       	ldi	r20, 0x20	; 32
    1c12:	51 e4       	ldi	r21, 0x41	; 65
    1c14:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <__mulsf3>
    1c18:	0e 94 09 11 	call	0x2212	; 0x2212 <__fixunssfsi>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	90 93 a6 0a 	sts	0x0AA6, r25
    1c24:	80 93 a5 0a 	sts	0x0AA5, r24
}
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	ff 90       	pop	r15
    1c36:	ef 90       	pop	r14
    1c38:	df 90       	pop	r13
    1c3a:	cf 90       	pop	r12
    1c3c:	bf 90       	pop	r11
    1c3e:	af 90       	pop	r10
    1c40:	9f 90       	pop	r9
    1c42:	8f 90       	pop	r8
    1c44:	7f 90       	pop	r7
    1c46:	6f 90       	pop	r6
    1c48:	5f 90       	pop	r5
    1c4a:	4f 90       	pop	r4
    1c4c:	3f 90       	pop	r3
    1c4e:	2f 90       	pop	r2
    1c50:	08 95       	ret

00001c52 <get_SHT11_data>:

	CLR_SCK();
}

unsigned short get_SHT11_data (unsigned char type)
{
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
	sensing_type	=	type;
    1c56:	80 93 ab 0a 	sts	0x0AAB, r24

	error	=	0;
    1c5a:	10 92 aa 0a 	sts	0x0AAA, r1
    1c5e:	10 92 a9 0a 	sts	0x0AA9, r1
	// measure humidity
	error	+=	Measure (&SHT11_humi, &checksum, HUMI);
    1c62:	cc ea       	ldi	r28, 0xAC	; 172
    1c64:	da e0       	ldi	r29, 0x0A	; 10
    1c66:	81 ea       	ldi	r24, 0xA1	; 161
    1c68:	9a e0       	ldi	r25, 0x0A	; 10
    1c6a:	be 01       	movw	r22, r28
    1c6c:	41 e0       	ldi	r20, 0x01	; 1
    1c6e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Measure>
    1c72:	20 91 a9 0a 	lds	r18, 0x0AA9
    1c76:	30 91 aa 0a 	lds	r19, 0x0AAA
    1c7a:	28 0f       	add	r18, r24
    1c7c:	31 1d       	adc	r19, r1
    1c7e:	30 93 aa 0a 	sts	0x0AAA, r19
    1c82:	20 93 a9 0a 	sts	0x0AA9, r18
	// measure temperature
	error	+=	Measure (&SHT11_temp, &checksum, TEMP);
    1c86:	87 ea       	ldi	r24, 0xA7	; 167
    1c88:	9a e0       	ldi	r25, 0x0A	; 10
    1c8a:	be 01       	movw	r22, r28
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Measure>
    1c92:	20 91 a9 0a 	lds	r18, 0x0AA9
    1c96:	30 91 aa 0a 	lds	r19, 0x0AAA
    1c9a:	28 0f       	add	r18, r24
    1c9c:	31 1d       	adc	r19, r1
    1c9e:	30 93 aa 0a 	sts	0x0AAA, r19
    1ca2:	20 93 a9 0a 	sts	0x0AA9, r18

	if (error != 0)		// [Error] connection reset
    1ca6:	21 15       	cp	r18, r1
    1ca8:	31 05       	cpc	r19, r1
    1caa:	19 f0       	breq	.+6      	; 0x1cb2 <get_SHT11_data+0x60>
		Connection_reset ();
    1cac:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <Connection_reset>
    1cb0:	0a c0       	rjmp	.+20     	; 0x1cc6 <get_SHT11_data+0x74>
	else				// Calculate humidity, temperature
		calc_SHT11 (SHT11_humi, SHT11_temp);
    1cb2:	60 91 a7 0a 	lds	r22, 0x0AA7
    1cb6:	70 91 a8 0a 	lds	r23, 0x0AA8
    1cba:	80 91 a1 0a 	lds	r24, 0x0AA1
    1cbe:	90 91 a2 0a 	lds	r25, 0x0AA2
    1cc2:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <calc_SHT11>

	if (sensing_type == HUMI)		return	val_humi;
    1cc6:	80 91 ab 0a 	lds	r24, 0x0AAB
    1cca:	81 30       	cpi	r24, 0x01	; 1
    1ccc:	29 f4       	brne	.+10     	; 0x1cd8 <get_SHT11_data+0x86>
    1cce:	80 91 a5 0a 	lds	r24, 0x0AA5
    1cd2:	90 91 a6 0a 	lds	r25, 0x0AA6
    1cd6:	09 c0       	rjmp	.+18     	; 0x1cea <get_SHT11_data+0x98>
	else if (sensing_type == TEMP)	return	val_temp;
    1cd8:	88 23       	and	r24, r24
    1cda:	29 f4       	brne	.+10     	; 0x1ce6 <get_SHT11_data+0x94>
    1cdc:	80 91 a3 0a 	lds	r24, 0x0AA3
    1ce0:	90 91 a4 0a 	lds	r25, 0x0AA4
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <get_SHT11_data+0x98>
	else 							return	0;
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
}
    1cea:	df 91       	pop	r29
    1cec:	cf 91       	pop	r28
    1cee:	08 95       	ret

00001cf0 <printValue>:
}
unsigned char printValue (unsigned char sense, unsigned short senseVal)  //humi temp µ•¿Ã≈Õ ∞°∞¯ «‘ºˆ
{
	unsigned char tens;
	tens		=	senseVal / 10;			// Ω ¿« ¿⁄∏Æ ¿œ¿« ¿⁄∏Æ
	if (sense == TEMP)
    1cf0:	88 23       	and	r24, r24
    1cf2:	19 f0       	breq	.+6      	; 0x1cfa <printValue+0xa>
	{
		return tens;
	}
	else if (sense == HUMI)
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <printValue+0xa>
    1cf8:	08 95       	ret
	val_humi	=	(unsigned short)(rh_true*10);
}
unsigned char printValue (unsigned char sense, unsigned short senseVal)  //humi temp µ•¿Ã≈Õ ∞°∞¯ «‘ºˆ
{
	unsigned char tens;
	tens		=	senseVal / 10;			// Ω ¿« ¿⁄∏Æ ¿œ¿« ¿⁄∏Æ
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	6a e0       	ldi	r22, 0x0A	; 10
    1cfe:	70 e0       	ldi	r23, 0x00	; 0
    1d00:	0e 94 4e 12 	call	0x249c	; 0x249c <__udivmodhi4>
	}
	else if (sense == HUMI)
	{
		return tens;
	}
    1d04:	86 2f       	mov	r24, r22
    1d06:	08 95       	ret

00001d08 <Motor_Action>:



void Motor_Action (int motion, int direction)
{
	if (motion == ON)			// turn on
    1d08:	81 30       	cpi	r24, 0x01	; 1
    1d0a:	91 05       	cpc	r25, r1
    1d0c:	e1 f4       	brne	.+56     	; 0x1d46 <Motor_Action+0x3e>
	{
		if (direction == CLOCKWISE)
    1d0e:	61 30       	cpi	r22, 0x01	; 1
    1d10:	71 05       	cpc	r23, r1
    1d12:	59 f4       	brne	.+22     	; 0x1d2a <Motor_Action+0x22>
		{
			digitalWrite(MOTOR_PORT, MT_P, HIGH);
    1d14:	85 e0       	ldi	r24, 0x05	; 5
    1d16:	66 e0       	ldi	r22, 0x06	; 6
    1d18:	41 e0       	ldi	r20, 0x01	; 1
    1d1a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <digitalWrite>
			digitalWrite(MOTOR_PORT, MT_N, LOW);
    1d1e:	85 e0       	ldi	r24, 0x05	; 5
    1d20:	63 e0       	ldi	r22, 0x03	; 3
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	0e 94 1a 0a 	call	0x1434	; 0x1434 <digitalWrite>
    1d28:	08 95       	ret
		}
		else if (direction == COUNTERCLOCKWISE)
    1d2a:	61 15       	cp	r22, r1
    1d2c:	71 05       	cpc	r23, r1
    1d2e:	b9 f4       	brne	.+46     	; 0x1d5e <Motor_Action+0x56>
		{
			digitalWrite(MOTOR_PORT, MT_P, LOW);
    1d30:	85 e0       	ldi	r24, 0x05	; 5
    1d32:	66 e0       	ldi	r22, 0x06	; 6
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	0e 94 1a 0a 	call	0x1434	; 0x1434 <digitalWrite>
			digitalWrite(MOTOR_PORT, MT_N, HIGH);
    1d3a:	85 e0       	ldi	r24, 0x05	; 5
    1d3c:	63 e0       	ldi	r22, 0x03	; 3
    1d3e:	41 e0       	ldi	r20, 0x01	; 1
    1d40:	0e 94 1a 0a 	call	0x1434	; 0x1434 <digitalWrite>
    1d44:	08 95       	ret
		}
	}
	else if(motion == OFF) 		// turn off
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	51 f4       	brne	.+20     	; 0x1d5e <Motor_Action+0x56>
	{
		digitalWrite(MOTOR_PORT, MT_P, LOW);
    1d4a:	85 e0       	ldi	r24, 0x05	; 5
    1d4c:	66 e0       	ldi	r22, 0x06	; 6
    1d4e:	40 e0       	ldi	r20, 0x00	; 0
    1d50:	0e 94 1a 0a 	call	0x1434	; 0x1434 <digitalWrite>
		digitalWrite(MOTOR_PORT, MT_N, LOW);
    1d54:	85 e0       	ldi	r24, 0x05	; 5
    1d56:	63 e0       	ldi	r22, 0x03	; 3
    1d58:	40 e0       	ldi	r20, 0x00	; 0
    1d5a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <digitalWrite>
    1d5e:	08 95       	ret

00001d60 <TIMER_100mSInit>:
  
void TIMER_100mSInit (void)
{
	// Timer/Count0 ÏÇ¨Ïö©
	// ÎèôÏûëÎ™®ÎìúÏôÄ ÌÅ¥Îü≠ÏÜåÏä§ Î∞è ÌîÑÎ¶¨Ïä§ÏºÄÏùºÎü¨ Í≤∞Ï†ï
	TCCR0B	=	0x05;  //  fclk_io / 1024   
    1d60:	85 e0       	ldi	r24, 0x05	; 5
    1d62:	85 bd       	out	0x25, r24	; 37
	// 0.01sÏóê Ïò§Î≤ÑÌîåÎ°úÏö∞ Î∞úÏÉù, 1/(14745600Hz/1024)‚Öπ144 = 0.01s
	// Ïò§Î≤ÑÌîåÎ°úÏö∞ÍπåÏßÄ Ïπ¥Ïö¥Ìä∏Î•º 144Î°ú ÏÑ§Ï†ï
	TCNT0	=	0xff - 45;
    1d64:	82 ed       	ldi	r24, 0xD2	; 210
    1d66:	86 bd       	out	0x26, r24	; 38
	TIMSK0	|=	1 << TOIE0;	// Overflow Interupt Enable
    1d68:	ee e6       	ldi	r30, 0x6E	; 110
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	81 60       	ori	r24, 0x01	; 1
    1d70:	80 83       	st	Z, r24
	TIFR0	|=	1 << TOV0;	// set Overflow Interupt Flag
    1d72:	a8 9a       	sbi	0x15, 0	; 21
}
    1d74:	08 95       	ret

00001d76 <setElapsedTime100mSUnit>:


void setElapsedTime100mSUnit(uint32_t Counter)
{
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
	setTimerCheckCounter = Counter;
    1d7a:	80 93 55 04 	sts	0x0455, r24
    1d7e:	90 93 56 04 	sts	0x0456, r25
    1d82:	a0 93 57 04 	sts	0x0457, r26
    1d86:	b0 93 58 04 	sts	0x0458, r27
	timerCouter = 0;
    1d8a:	10 92 59 04 	sts	0x0459, r1
    1d8e:	10 92 5a 04 	sts	0x045A, r1
    1d92:	10 92 5b 04 	sts	0x045B, r1
    1d96:	10 92 5c 04 	sts	0x045C, r1
}
    1d9a:	08 95       	ret

00001d9c <isElapsed>:

uint8_t isElapsed()
{
	if (flagOverflowSetTimer )
    1d9c:	80 91 54 04 	lds	r24, 0x0454
    1da0:	88 23       	and	r24, r24
    1da2:	21 f0       	breq	.+8      	; 0x1dac <isElapsed+0x10>
	{
		flagOverflowSetTimer = 0;
    1da4:	10 92 54 04 	sts	0x0454, r1
		return 1;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	08 95       	ret
	}
	
	return 0;
    1dac:	80 e0       	ldi	r24, 0x00	; 0
}
    1dae:	08 95       	ret

00001db0 <eventCallback>:
volatile unsigned short humi;
extern int n_flag_getADC;//--------------^ºˆ¡§∫Œ∫–

static void eventCallback(int eventType,uint8_t* rxBuff, int rxSize)
{
	if (eventType == EVENT_RX_DATA) 
    1db0:	81 30       	cpi	r24, 0x01	; 1
    1db2:	91 05       	cpc	r25, r1
    1db4:	81 f4       	brne	.+32     	; 0x1dd6 <eventCallback+0x26>
	{
		debugprint("\r\nRX:%s\r\n", rxBuff);
    1db6:	00 d0       	rcall	.+0      	; 0x1db8 <eventCallback+0x8>
    1db8:	0f 92       	push	r0
    1dba:	8b e3       	ldi	r24, 0x3B	; 59
    1dbc:	93 e0       	ldi	r25, 0x03	; 3
    1dbe:	ed b7       	in	r30, 0x3d	; 61
    1dc0:	fe b7       	in	r31, 0x3e	; 62
    1dc2:	92 83       	std	Z+2, r25	; 0x02
    1dc4:	81 83       	std	Z+1, r24	; 0x01
    1dc6:	74 83       	std	Z+4, r23	; 0x04
    1dc8:	63 83       	std	Z+3, r22	; 0x03
    1dca:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debugprint>
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	08 95       	ret

00001dd8 <main>:
	}
}


int main(void)
{
    1dd8:	cf 93       	push	r28
    1dda:	df 93       	push	r29
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	c0 50       	subi	r28, 0x00	; 0
    1de2:	d1 40       	sbci	r29, 0x01	; 1
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	f8 94       	cli
    1de8:	de bf       	out	0x3e, r29	; 62
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	cd bf       	out	0x3d, r28	; 61
	uint8_t strTemp[256];
	unsigned char tempc, humic;   //∫Ø»Øµ» ø¬µµ Ω¿µµ ¿˙¿Â «œ¥¬ ∫Øºˆ
	
	debugInit();
    1dee:	0e 94 4d 01 	call	0x29a	; 0x29a <debugInit>
	wifiInit();
    1df2:	0e 94 06 02 	call	0x40c	; 0x40c <wifiInit>
	
	sei();
    1df6:	78 94       	sei
		
	debugprint("wifi test start\r\n");
    1df8:	0f 92       	push	r0
    1dfa:	0f 92       	push	r0
    1dfc:	85 e4       	ldi	r24, 0x45	; 69
    1dfe:	93 e0       	ldi	r25, 0x03	; 3
    1e00:	ad b7       	in	r26, 0x3d	; 61
    1e02:	be b7       	in	r27, 0x3e	; 62
    1e04:	12 96       	adiw	r26, 0x02	; 2
    1e06:	9c 93       	st	X, r25
    1e08:	8e 93       	st	-X, r24
    1e0a:	11 97       	sbiw	r26, 0x01	; 1
    1e0c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debugprint>
    1e10:	8f ef       	ldi	r24, 0xFF	; 255
    1e12:	9f ef       	ldi	r25, 0xFF	; 255
    1e14:	ac e2       	ldi	r26, 0x2C	; 44
    1e16:	81 50       	subi	r24, 0x01	; 1
    1e18:	90 40       	sbci	r25, 0x00	; 0
    1e1a:	a0 40       	sbci	r26, 0x00	; 0
    1e1c:	e1 f7       	brne	.-8      	; 0x1e16 <main+0x3e>
    1e1e:	00 c0       	rjmp	.+0      	; 0x1e20 <main+0x48>
    1e20:	00 00       	nop
	_delay_ms(1000);
	
	wificlearUartBuff();
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <wificlearUartBuff>
	
	// UART echo disable 
	wifiEchoDisable();
    1e2a:	0e 94 9b 08 	call	0x1136	; 0x1136 <wifiEchoDisable>
	wificlearUartBuff();
    1e2e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <wificlearUartBuff>
	
	// register callback function 
	wifiSetEventCallback(eventCallback);
    1e32:	88 ed       	ldi	r24, 0xD8	; 216
    1e34:	9e e0       	ldi	r25, 0x0E	; 14
    1e36:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <wifiSetEventCallback>
	
	// Auto connection disable
	wifiAutoConnectDisable();
    1e3a:	0e 94 81 08 	call	0x1102	; 0x1102 <wifiAutoConnectDisable>
	wificlearUartBuff();
    1e3e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <wificlearUartBuff>
	
	wifiModeSet();
    1e42:	0e 94 96 07 	call	0xf2c	; 0xf2c <wifiModeSet>
	
	wifiEnableDHCP();
    1e46:	0e 94 b4 07 	call	0xf68	; 0xf68 <wifiEnableDHCP>
	
	debugprint("\r\nAP list display:\r\n");
    1e4a:	0f 92       	push	r0
    1e4c:	0f 92       	push	r0
    1e4e:	87 e5       	ldi	r24, 0x57	; 87
    1e50:	93 e0       	ldi	r25, 0x03	; 3
    1e52:	ad b7       	in	r26, 0x3d	; 61
    1e54:	be b7       	in	r27, 0x3e	; 62
    1e56:	12 96       	adiw	r26, 0x02	; 2
    1e58:	9c 93       	st	X, r25
    1e5a:	8e 93       	st	-X, r24
    1e5c:	11 97       	sbiw	r26, 0x01	; 1
    1e5e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debugprint>
	wifiDisplayAPlist();
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	0e 94 5e 07 	call	0xebc	; 0xebc <wifiDisplayAPlist>
	
	// connect  AP 
	debugprint("\r\n");
    1e6a:	0f 92       	push	r0
    1e6c:	0f 92       	push	r0
    1e6e:	8c e6       	ldi	r24, 0x6C	; 108
    1e70:	93 e0       	ldi	r25, 0x03	; 3
    1e72:	ed b7       	in	r30, 0x3d	; 61
    1e74:	fe b7       	in	r31, 0x3e	; 62
    1e76:	92 83       	std	Z+2, r25	; 0x02
    1e78:	81 83       	std	Z+1, r24	; 0x01
    1e7a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debugprint>
	if ( !wifiConnectAP("CSNET-301", "gwnucomse"))
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	8f e6       	ldi	r24, 0x6F	; 111
    1e84:	93 e0       	ldi	r25, 0x03	; 3
    1e86:	69 e7       	ldi	r22, 0x79	; 121
    1e88:	73 e0       	ldi	r23, 0x03	; 3
    1e8a:	0e 94 78 07 	call	0xef0	; 0xef0 <wifiConnectAP>
    1e8e:	88 23       	and	r24, r24
    1e90:	79 f4       	brne	.+30     	; 0x1eb0 <main+0xd8>
	{
		debugprint("AP connected.\r\n");
    1e92:	0f 92       	push	r0
    1e94:	0f 92       	push	r0
    1e96:	83 e8       	ldi	r24, 0x83	; 131
    1e98:	93 e0       	ldi	r25, 0x03	; 3
    1e9a:	ad b7       	in	r26, 0x3d	; 61
    1e9c:	be b7       	in	r27, 0x3e	; 62
    1e9e:	12 96       	adiw	r26, 0x02	; 2
    1ea0:	9c 93       	st	X, r25
    1ea2:	8e 93       	st	-X, r24
    1ea4:	11 97       	sbiw	r26, 0x01	; 1
    1ea6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debugprint>
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0c c0       	rjmp	.+24     	; 0x1ec8 <main+0xf0>
	}
	else
	{
		debugprint("AP connection fail.\r\n");
    1eb0:	0f 92       	push	r0
    1eb2:	0f 92       	push	r0
    1eb4:	83 e9       	ldi	r24, 0x93	; 147
    1eb6:	93 e0       	ldi	r25, 0x03	; 3
    1eb8:	ed b7       	in	r30, 0x3d	; 61
    1eba:	fe b7       	in	r31, 0x3e	; 62
    1ebc:	92 83       	std	Z+2, r25	; 0x02
    1ebe:	81 83       	std	Z+1, r24	; 0x01
    1ec0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debugprint>
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
	}
	// display  local allocated IP 
	debugprint("\r\n Allocated local IP:\r\n");
    1ec8:	0f 92       	push	r0
    1eca:	0f 92       	push	r0
    1ecc:	89 ea       	ldi	r24, 0xA9	; 169
    1ece:	93 e0       	ldi	r25, 0x03	; 3
    1ed0:	ad b7       	in	r26, 0x3d	; 61
    1ed2:	be b7       	in	r27, 0x3e	; 62
    1ed4:	12 96       	adiw	r26, 0x02	; 2
    1ed6:	9c 93       	st	X, r25
    1ed8:	8e 93       	st	-X, r24
    1eda:	11 97       	sbiw	r26, 0x01	; 1
    1edc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debugprint>
	wifiDisplayLocalIP();
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <wifiDisplayLocalIP>
	debugprint("\r\n");
    1ee8:	0f 92       	push	r0
    1eea:	0f 92       	push	r0
    1eec:	8c e6       	ldi	r24, 0x6C	; 108
    1eee:	93 e0       	ldi	r25, 0x03	; 3
    1ef0:	ed b7       	in	r30, 0x3d	; 61
    1ef2:	fe b7       	in	r31, 0x3e	; 62
    1ef4:	92 83       	std	Z+2, r25	; 0x02
    1ef6:	81 83       	std	Z+1, r24	; 0x01
    1ef8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debugprint>

	// TCP remote server connection
	if( !wifiConnectTCPServer(SERVER_IP_STR,SERVER_PORT))
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	82 ec       	ldi	r24, 0xC2	; 194
    1f02:	93 e0       	ldi	r25, 0x03	; 3
    1f04:	41 e5       	ldi	r20, 0x51	; 81
    1f06:	53 ec       	ldi	r21, 0xC3	; 195
    1f08:	60 e0       	ldi	r22, 0x00	; 0
    1f0a:	70 e0       	ldi	r23, 0x00	; 0
    1f0c:	0e 94 c3 07 	call	0xf86	; 0xf86 <wifiConnectTCPServer>
    1f10:	88 23       	and	r24, r24
    1f12:	79 f4       	brne	.+30     	; 0x1f32 <main+0x15a>
	{
		debugprint("Connected Server.\r\n");
    1f14:	0f 92       	push	r0
    1f16:	0f 92       	push	r0
    1f18:	8f ec       	ldi	r24, 0xCF	; 207
    1f1a:	93 e0       	ldi	r25, 0x03	; 3
    1f1c:	ad b7       	in	r26, 0x3d	; 61
    1f1e:	be b7       	in	r27, 0x3e	; 62
    1f20:	12 96       	adiw	r26, 0x02	; 2
    1f22:	9c 93       	st	X, r25
    1f24:	8e 93       	st	-X, r24
    1f26:	11 97       	sbiw	r26, 0x01	; 1
    1f28:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debugprint>
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0c c0       	rjmp	.+24     	; 0x1f4a <main+0x172>
	}
	else
	{
		debugprint("Server connection fail.\r\n");
    1f32:	0f 92       	push	r0
    1f34:	0f 92       	push	r0
    1f36:	83 ee       	ldi	r24, 0xE3	; 227
    1f38:	93 e0       	ldi	r25, 0x03	; 3
    1f3a:	ed b7       	in	r30, 0x3d	; 61
    1f3c:	fe b7       	in	r31, 0x3e	; 62
    1f3e:	92 83       	std	Z+2, r25	; 0x02
    1f40:	81 83       	std	Z+1, r24	; 0x01
    1f42:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debugprint>
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
	}				
	debugprint("\r\n");
    1f4a:	0f 92       	push	r0
    1f4c:	0f 92       	push	r0
    1f4e:	8c e6       	ldi	r24, 0x6C	; 108
    1f50:	93 e0       	ldi	r25, 0x03	; 3
    1f52:	ad b7       	in	r26, 0x3d	; 61
    1f54:	be b7       	in	r27, 0x3e	; 62
    1f56:	12 96       	adiw	r26, 0x02	; 2
    1f58:	9c 93       	st	X, r25
    1f5a:	8e 93       	st	-X, r24
    1f5c:	11 97       	sbiw	r26, 0x01	; 1
    1f5e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debugprint>
	
	// Send Test message 
	strcpy(strTemp,"test msessage: hello\r\n");
    1f62:	de 01       	movw	r26, r28
    1f64:	11 96       	adiw	r26, 0x01	; 1
    1f66:	ed ef       	ldi	r30, 0xFD	; 253
    1f68:	f3 e0       	ldi	r31, 0x03	; 3
    1f6a:	87 e1       	ldi	r24, 0x17	; 23
    1f6c:	01 90       	ld	r0, Z+
    1f6e:	0d 92       	st	X+, r0
    1f70:	81 50       	subi	r24, 0x01	; 1
    1f72:	e1 f7       	brne	.-8      	; 0x1f6c <main+0x194>
//	wifiSendData(strTemp, sizeof("test msessage: hello\r\n"));
	
	 //ø©±‚º≠∫Œ≈Õ Ω«¡¶ µ•¿Ã≈Õ∞° ∞°∞¯µ»¥Ÿ. 
	TIMER_100mSInit ();
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <TIMER_100mSInit>
	setElapsedTime100mSUnit(100);
    1f7c:	64 e6       	ldi	r22, 0x64	; 100
    1f7e:	70 e0       	ldi	r23, 0x00	; 0
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <setElapsedTime100mSUnit>

	debugprint("start Loop\r\n");	
    1f88:	0f 92       	push	r0
    1f8a:	0f 92       	push	r0
    1f8c:	84 e1       	ldi	r24, 0x14	; 20
    1f8e:	94 e0       	ldi	r25, 0x04	; 4
    1f90:	ed b7       	in	r30, 0x3d	; 61
    1f92:	fe b7       	in	r31, 0x3e	; 62
    1f94:	92 83       	std	Z+2, r25	; 0x02
    1f96:	81 83       	std	Z+1, r24	; 0x01
    1f98:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debugprint>
	
	int counter = 0;
/*----------------led∫Œ∫–¡¶∞≈*/
	debugInit();
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	0e 94 4d 01 	call	0x29a	; 0x29a <debugInit>

	AdcInit(0);			// PORTF = ADC0   ≈‰æÁºˆ∫–
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	0e 94 96 00 	call	0x12c	; 0x12c <AdcInit>
	TIMER_Init();
    1faa:	0e 94 10 01 	call	0x220	; 0x220 <TIMER_Init>
		
	sei();//-------------------------------------------^ºˆ¡§∫Œ∫–
    1fae:	78 94       	sei
	
	SHT11_Init();  //humi temp º≥¡§
    1fb0:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <SHT11_Init>
        
		wifiMain();
		
		if ( isElapsed())
		{
			sprintf(strTemp,"soil : %d temp : %d humi : %d \n", soil_gun_AdcValue, tempc, humic);		//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫– 
    1fb4:	7e 01       	movw	r14, r28
    1fb6:	08 94       	sec
    1fb8:	e1 1c       	adc	r14, r1
    1fba:	f1 1c       	adc	r15, r1
    1fbc:	0f 2e       	mov	r0, r31
    1fbe:	f1 e2       	ldi	r31, 0x21	; 33
    1fc0:	cf 2e       	mov	r12, r31
    1fc2:	f4 e0       	ldi	r31, 0x04	; 4
    1fc4:	df 2e       	mov	r13, r31
    1fc6:	f0 2d       	mov	r31, r0
			//sprintf(strTemp,"CDS : %d temp : %d humi : %d soil : %d \n", cds_gun_AdcValue, tempc, humic, soil_gun_AdcValue);		//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫– 
			wifiSendData(strTemp, strlen(strTemp));			//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
			debugprint("TX:%s\r\n",strTemp);				//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
    1fc8:	0f 2e       	mov	r0, r31
    1fca:	f1 e4       	ldi	r31, 0x41	; 65
    1fcc:	af 2e       	mov	r10, r31
    1fce:	f4 e0       	ldi	r31, 0x04	; 4
    1fd0:	bf 2e       	mov	r11, r31
    1fd2:	f0 2d       	mov	r31, r0
	SHT11_Init();  //humi temp º≥¡§
	
    while(1)
    {//TODO:: Please write your application code 
		
		temp = get_SHT11_data (TEMP);	
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <get_SHT11_data>
    1fda:	90 93 b1 0a 	sts	0x0AB1, r25
    1fde:	80 93 b0 0a 	sts	0x0AB0, r24
		
		humi = get_SHT11_data (HUMI); 	
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <get_SHT11_data>
    1fe8:	90 93 af 0a 	sts	0x0AAF, r25
    1fec:	80 93 ae 0a 	sts	0x0AAE, r24
		
		tempc = printValue (TEMP, temp);
    1ff0:	60 91 b0 0a 	lds	r22, 0x0AB0
    1ff4:	70 91 b1 0a 	lds	r23, 0x0AB1
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <printValue>
    1ffe:	08 2f       	mov	r16, r24
		humic = printValue (HUMI, humi);
    2000:	60 91 ae 0a 	lds	r22, 0x0AAE
    2004:	70 91 af 0a 	lds	r23, 0x0AAF
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <printValue>
    200e:	18 2f       	mov	r17, r24
		
	/*--------led∫Œ∫– ¡¶∞≈*/
		if(n_flag_getADC == 1)			//---------------------------------v¡∂µµ ºæº≠, ledµø¿€ºˆ¡§∫Œ∫–
    2010:	80 91 4a 04 	lds	r24, 0x044A
    2014:	90 91 4b 04 	lds	r25, 0x044B
    2018:	81 30       	cpi	r24, 0x01	; 1
    201a:	91 05       	cpc	r25, r1
    201c:	51 f4       	brne	.+20     	; 0x2032 <main+0x25a>
		{
			n_flag_getADC = 0;
    201e:	10 92 4b 04 	sts	0x044B, r1
    2022:	10 92 4a 04 	sts	0x044A, r1
			
			soil_gun_AdcValue	=	AdcRead();
    2026:	0e 94 a1 00 	call	0x142	; 0x142 <AdcRead>
    202a:	90 93 5e 04 	sts	0x045E, r25
    202e:	80 93 5d 04 	sts	0x045D, r24
		
		
		
		
		
		if(soil_gun_AdcValue<=30) {//----------------------------soil value
    2032:	80 91 5d 04 	lds	r24, 0x045D
    2036:	90 91 5e 04 	lds	r25, 0x045E
    203a:	8f 31       	cpi	r24, 0x1F	; 31
    203c:	91 05       	cpc	r25, r1
    203e:	a8 f5       	brcc	.+106    	; 0x20aa <main+0x2d2>
			Motor_Action(ON, COUNTERCLOCKWISE);
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	60 e0       	ldi	r22, 0x00	; 0
    2046:	70 e0       	ldi	r23, 0x00	; 0
    2048:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <Motor_Action>
    204c:	8f ef       	ldi	r24, 0xFF	; 255
    204e:	9f ef       	ldi	r25, 0xFF	; 255
    2050:	ac e2       	ldi	r26, 0x2C	; 44
    2052:	81 50       	subi	r24, 0x01	; 1
    2054:	90 40       	sbci	r25, 0x00	; 0
    2056:	a0 40       	sbci	r26, 0x00	; 0
    2058:	e1 f7       	brne	.-8      	; 0x2052 <main+0x27a>
    205a:	00 c0       	rjmp	.+0      	; 0x205c <main+0x284>
    205c:	00 00       	nop
			_delay_ms(1000);

			Motor_Action(OFF, COUNTERCLOCKWISE);
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	60 e0       	ldi	r22, 0x00	; 0
    2064:	70 e0       	ldi	r23, 0x00	; 0
    2066:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <Motor_Action>
    206a:	8f ef       	ldi	r24, 0xFF	; 255
    206c:	9f e7       	ldi	r25, 0x7F	; 127
    206e:	a2 e3       	ldi	r26, 0x32	; 50
    2070:	b2 e0       	ldi	r27, 0x02	; 2
    2072:	81 50       	subi	r24, 0x01	; 1
    2074:	90 40       	sbci	r25, 0x00	; 0
    2076:	a0 40       	sbci	r26, 0x00	; 0
    2078:	b0 40       	sbci	r27, 0x00	; 0
    207a:	d9 f7       	brne	.-10     	; 0x2072 <main+0x29a>
    207c:	00 c0       	rjmp	.+0      	; 0x207e <main+0x2a6>
    207e:	00 00       	nop
			_delay_ms(15000);
			
			
			Motor_Action(ON, CLOCKWISE);
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	61 e0       	ldi	r22, 0x01	; 1
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <Motor_Action>
    208c:	8f ef       	ldi	r24, 0xFF	; 255
    208e:	9f ef       	ldi	r25, 0xFF	; 255
    2090:	ac e2       	ldi	r26, 0x2C	; 44
    2092:	81 50       	subi	r24, 0x01	; 1
    2094:	90 40       	sbci	r25, 0x00	; 0
    2096:	a0 40       	sbci	r26, 0x00	; 0
    2098:	e1 f7       	brne	.-8      	; 0x2092 <main+0x2ba>
    209a:	00 c0       	rjmp	.+0      	; 0x209c <main+0x2c4>
    209c:	00 00       	nop
			_delay_ms(1000);
				
			Motor_Action(OFF, CLOCKWISE);
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	61 e0       	ldi	r22, 0x01	; 1
    20a4:	70 e0       	ldi	r23, 0x00	; 0
    20a6:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <Motor_Action>
		//	_delay_ms(10000);
		}
		
		
        
		wifiMain();
    20aa:	0e 94 e7 04 	call	0x9ce	; 0x9ce <wifiMain>
		
		if ( isElapsed())
    20ae:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <isElapsed>
    20b2:	88 23       	and	r24, r24
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <main+0x2e0>
    20b6:	8e cf       	rjmp	.-228    	; 0x1fd4 <main+0x1fc>
		{
			sprintf(strTemp,"soil : %d temp : %d humi : %d \n", soil_gun_AdcValue, tempc, humic);		//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫– 
    20b8:	ad b7       	in	r26, 0x3d	; 61
    20ba:	be b7       	in	r27, 0x3e	; 62
    20bc:	1a 97       	sbiw	r26, 0x0a	; 10
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	be bf       	out	0x3e, r27	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	ad bf       	out	0x3d, r26	; 61
    20c8:	ed b7       	in	r30, 0x3d	; 61
    20ca:	fe b7       	in	r31, 0x3e	; 62
    20cc:	31 96       	adiw	r30, 0x01	; 1
    20ce:	12 96       	adiw	r26, 0x02	; 2
    20d0:	fc 92       	st	X, r15
    20d2:	ee 92       	st	-X, r14
    20d4:	11 97       	sbiw	r26, 0x01	; 1
    20d6:	d3 82       	std	Z+3, r13	; 0x03
    20d8:	c2 82       	std	Z+2, r12	; 0x02
    20da:	80 91 5d 04 	lds	r24, 0x045D
    20de:	90 91 5e 04 	lds	r25, 0x045E
    20e2:	95 83       	std	Z+5, r25	; 0x05
    20e4:	84 83       	std	Z+4, r24	; 0x04
    20e6:	06 83       	std	Z+6, r16	; 0x06
    20e8:	17 82       	std	Z+7, r1	; 0x07
    20ea:	10 87       	std	Z+8, r17	; 0x08
    20ec:	11 86       	std	Z+9, r1	; 0x09
    20ee:	0e 94 9f 12 	call	0x253e	; 0x253e <sprintf>
			//sprintf(strTemp,"CDS : %d temp : %d humi : %d soil : %d \n", cds_gun_AdcValue, tempc, humic, soil_gun_AdcValue);		//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫– 
			wifiSendData(strTemp, strlen(strTemp));			//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
    20f2:	f7 01       	movw	r30, r14
    20f4:	01 90       	ld	r0, Z+
    20f6:	00 20       	and	r0, r0
    20f8:	e9 f7       	brne	.-6      	; 0x20f4 <main+0x31c>
    20fa:	bf 01       	movw	r22, r30
    20fc:	61 50       	subi	r22, 0x01	; 1
    20fe:	70 40       	sbci	r23, 0x00	; 0
    2100:	6e 19       	sub	r22, r14
    2102:	7f 09       	sbc	r23, r15
    2104:	8d b7       	in	r24, 0x3d	; 61
    2106:	9e b7       	in	r25, 0x3e	; 62
    2108:	0a 96       	adiw	r24, 0x0a	; 10
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	9e bf       	out	0x3e, r25	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	8d bf       	out	0x3d, r24	; 61
    2114:	c7 01       	movw	r24, r14
    2116:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <wifiSendData>
			debugprint("TX:%s\r\n",strTemp);				//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
    211a:	00 d0       	rcall	.+0      	; 0x211c <main+0x344>
    211c:	0f 92       	push	r0
    211e:	ad b7       	in	r26, 0x3d	; 61
    2120:	be b7       	in	r27, 0x3e	; 62
    2122:	12 96       	adiw	r26, 0x02	; 2
    2124:	bc 92       	st	X, r11
    2126:	ae 92       	st	-X, r10
    2128:	11 97       	sbiw	r26, 0x01	; 1
    212a:	14 96       	adiw	r26, 0x04	; 4
    212c:	fc 92       	st	X, r15
    212e:	ee 92       	st	-X, r14
    2130:	13 97       	sbiw	r26, 0x03	; 3
    2132:	0e 94 64 01 	call	0x2c8	; 0x2c8 <debugprint>
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	4a cf       	rjmp	.-364    	; 0x1fd4 <main+0x1fc>

00002140 <__subsf3>:
    2140:	50 58       	subi	r21, 0x80	; 128

00002142 <__addsf3>:
    2142:	bb 27       	eor	r27, r27
    2144:	aa 27       	eor	r26, r26
    2146:	0e d0       	rcall	.+28     	; 0x2164 <__addsf3x>
    2148:	08 c1       	rjmp	.+528    	; 0x235a <__fp_round>
    214a:	f9 d0       	rcall	.+498    	; 0x233e <__fp_pscA>
    214c:	30 f0       	brcs	.+12     	; 0x215a <__addsf3+0x18>
    214e:	fe d0       	rcall	.+508    	; 0x234c <__fp_pscB>
    2150:	20 f0       	brcs	.+8      	; 0x215a <__addsf3+0x18>
    2152:	31 f4       	brne	.+12     	; 0x2160 <__addsf3+0x1e>
    2154:	9f 3f       	cpi	r25, 0xFF	; 255
    2156:	11 f4       	brne	.+4      	; 0x215c <__addsf3+0x1a>
    2158:	1e f4       	brtc	.+6      	; 0x2160 <__addsf3+0x1e>
    215a:	ee c0       	rjmp	.+476    	; 0x2338 <__fp_nan>
    215c:	0e f4       	brtc	.+2      	; 0x2160 <__addsf3+0x1e>
    215e:	e0 95       	com	r30
    2160:	e7 fb       	bst	r30, 7
    2162:	e4 c0       	rjmp	.+456    	; 0x232c <__fp_inf>

00002164 <__addsf3x>:
    2164:	e9 2f       	mov	r30, r25
    2166:	0a d1       	rcall	.+532    	; 0x237c <__fp_split3>
    2168:	80 f3       	brcs	.-32     	; 0x214a <__addsf3+0x8>
    216a:	ba 17       	cp	r27, r26
    216c:	62 07       	cpc	r22, r18
    216e:	73 07       	cpc	r23, r19
    2170:	84 07       	cpc	r24, r20
    2172:	95 07       	cpc	r25, r21
    2174:	18 f0       	brcs	.+6      	; 0x217c <__addsf3x+0x18>
    2176:	71 f4       	brne	.+28     	; 0x2194 <__addsf3x+0x30>
    2178:	9e f5       	brtc	.+102    	; 0x21e0 <__addsf3x+0x7c>
    217a:	22 c1       	rjmp	.+580    	; 0x23c0 <__fp_zero>
    217c:	0e f4       	brtc	.+2      	; 0x2180 <__addsf3x+0x1c>
    217e:	e0 95       	com	r30
    2180:	0b 2e       	mov	r0, r27
    2182:	ba 2f       	mov	r27, r26
    2184:	a0 2d       	mov	r26, r0
    2186:	0b 01       	movw	r0, r22
    2188:	b9 01       	movw	r22, r18
    218a:	90 01       	movw	r18, r0
    218c:	0c 01       	movw	r0, r24
    218e:	ca 01       	movw	r24, r20
    2190:	a0 01       	movw	r20, r0
    2192:	11 24       	eor	r1, r1
    2194:	ff 27       	eor	r31, r31
    2196:	59 1b       	sub	r21, r25
    2198:	99 f0       	breq	.+38     	; 0x21c0 <__addsf3x+0x5c>
    219a:	59 3f       	cpi	r21, 0xF9	; 249
    219c:	50 f4       	brcc	.+20     	; 0x21b2 <__addsf3x+0x4e>
    219e:	50 3e       	cpi	r21, 0xE0	; 224
    21a0:	68 f1       	brcs	.+90     	; 0x21fc <__addsf3x+0x98>
    21a2:	1a 16       	cp	r1, r26
    21a4:	f0 40       	sbci	r31, 0x00	; 0
    21a6:	a2 2f       	mov	r26, r18
    21a8:	23 2f       	mov	r18, r19
    21aa:	34 2f       	mov	r19, r20
    21ac:	44 27       	eor	r20, r20
    21ae:	58 5f       	subi	r21, 0xF8	; 248
    21b0:	f3 cf       	rjmp	.-26     	; 0x2198 <__addsf3x+0x34>
    21b2:	46 95       	lsr	r20
    21b4:	37 95       	ror	r19
    21b6:	27 95       	ror	r18
    21b8:	a7 95       	ror	r26
    21ba:	f0 40       	sbci	r31, 0x00	; 0
    21bc:	53 95       	inc	r21
    21be:	c9 f7       	brne	.-14     	; 0x21b2 <__addsf3x+0x4e>
    21c0:	7e f4       	brtc	.+30     	; 0x21e0 <__addsf3x+0x7c>
    21c2:	1f 16       	cp	r1, r31
    21c4:	ba 0b       	sbc	r27, r26
    21c6:	62 0b       	sbc	r22, r18
    21c8:	73 0b       	sbc	r23, r19
    21ca:	84 0b       	sbc	r24, r20
    21cc:	ba f0       	brmi	.+46     	; 0x21fc <__addsf3x+0x98>
    21ce:	91 50       	subi	r25, 0x01	; 1
    21d0:	a1 f0       	breq	.+40     	; 0x21fa <__addsf3x+0x96>
    21d2:	ff 0f       	add	r31, r31
    21d4:	bb 1f       	adc	r27, r27
    21d6:	66 1f       	adc	r22, r22
    21d8:	77 1f       	adc	r23, r23
    21da:	88 1f       	adc	r24, r24
    21dc:	c2 f7       	brpl	.-16     	; 0x21ce <__addsf3x+0x6a>
    21de:	0e c0       	rjmp	.+28     	; 0x21fc <__addsf3x+0x98>
    21e0:	ba 0f       	add	r27, r26
    21e2:	62 1f       	adc	r22, r18
    21e4:	73 1f       	adc	r23, r19
    21e6:	84 1f       	adc	r24, r20
    21e8:	48 f4       	brcc	.+18     	; 0x21fc <__addsf3x+0x98>
    21ea:	87 95       	ror	r24
    21ec:	77 95       	ror	r23
    21ee:	67 95       	ror	r22
    21f0:	b7 95       	ror	r27
    21f2:	f7 95       	ror	r31
    21f4:	9e 3f       	cpi	r25, 0xFE	; 254
    21f6:	08 f0       	brcs	.+2      	; 0x21fa <__addsf3x+0x96>
    21f8:	b3 cf       	rjmp	.-154    	; 0x2160 <__addsf3+0x1e>
    21fa:	93 95       	inc	r25
    21fc:	88 0f       	add	r24, r24
    21fe:	08 f0       	brcs	.+2      	; 0x2202 <__stack+0x3>
    2200:	99 27       	eor	r25, r25
    2202:	ee 0f       	add	r30, r30
    2204:	97 95       	ror	r25
    2206:	87 95       	ror	r24
    2208:	08 95       	ret

0000220a <__cmpsf2>:
    220a:	6c d0       	rcall	.+216    	; 0x22e4 <__fp_cmp>
    220c:	08 f4       	brcc	.+2      	; 0x2210 <__cmpsf2+0x6>
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	08 95       	ret

00002212 <__fixunssfsi>:
    2212:	bc d0       	rcall	.+376    	; 0x238c <__fp_splitA>
    2214:	88 f0       	brcs	.+34     	; 0x2238 <__fixunssfsi+0x26>
    2216:	9f 57       	subi	r25, 0x7F	; 127
    2218:	90 f0       	brcs	.+36     	; 0x223e <__fixunssfsi+0x2c>
    221a:	b9 2f       	mov	r27, r25
    221c:	99 27       	eor	r25, r25
    221e:	b7 51       	subi	r27, 0x17	; 23
    2220:	a0 f0       	brcs	.+40     	; 0x224a <__fixunssfsi+0x38>
    2222:	d1 f0       	breq	.+52     	; 0x2258 <__fixunssfsi+0x46>
    2224:	66 0f       	add	r22, r22
    2226:	77 1f       	adc	r23, r23
    2228:	88 1f       	adc	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	1a f0       	brmi	.+6      	; 0x2234 <__fixunssfsi+0x22>
    222e:	ba 95       	dec	r27
    2230:	c9 f7       	brne	.-14     	; 0x2224 <__fixunssfsi+0x12>
    2232:	12 c0       	rjmp	.+36     	; 0x2258 <__fixunssfsi+0x46>
    2234:	b1 30       	cpi	r27, 0x01	; 1
    2236:	81 f0       	breq	.+32     	; 0x2258 <__fixunssfsi+0x46>
    2238:	c3 d0       	rcall	.+390    	; 0x23c0 <__fp_zero>
    223a:	b1 e0       	ldi	r27, 0x01	; 1
    223c:	08 95       	ret
    223e:	c0 c0       	rjmp	.+384    	; 0x23c0 <__fp_zero>
    2240:	67 2f       	mov	r22, r23
    2242:	78 2f       	mov	r23, r24
    2244:	88 27       	eor	r24, r24
    2246:	b8 5f       	subi	r27, 0xF8	; 248
    2248:	39 f0       	breq	.+14     	; 0x2258 <__fixunssfsi+0x46>
    224a:	b9 3f       	cpi	r27, 0xF9	; 249
    224c:	cc f3       	brlt	.-14     	; 0x2240 <__fixunssfsi+0x2e>
    224e:	86 95       	lsr	r24
    2250:	77 95       	ror	r23
    2252:	67 95       	ror	r22
    2254:	b3 95       	inc	r27
    2256:	d9 f7       	brne	.-10     	; 0x224e <__fixunssfsi+0x3c>
    2258:	3e f4       	brtc	.+14     	; 0x2268 <__fixunssfsi+0x56>
    225a:	90 95       	com	r25
    225c:	80 95       	com	r24
    225e:	70 95       	com	r23
    2260:	61 95       	neg	r22
    2262:	7f 4f       	sbci	r23, 0xFF	; 255
    2264:	8f 4f       	sbci	r24, 0xFF	; 255
    2266:	9f 4f       	sbci	r25, 0xFF	; 255
    2268:	08 95       	ret

0000226a <__floatunsisf>:
    226a:	e8 94       	clt
    226c:	09 c0       	rjmp	.+18     	; 0x2280 <__floatsisf+0x12>

0000226e <__floatsisf>:
    226e:	97 fb       	bst	r25, 7
    2270:	3e f4       	brtc	.+14     	; 0x2280 <__floatsisf+0x12>
    2272:	90 95       	com	r25
    2274:	80 95       	com	r24
    2276:	70 95       	com	r23
    2278:	61 95       	neg	r22
    227a:	7f 4f       	sbci	r23, 0xFF	; 255
    227c:	8f 4f       	sbci	r24, 0xFF	; 255
    227e:	9f 4f       	sbci	r25, 0xFF	; 255
    2280:	99 23       	and	r25, r25
    2282:	a9 f0       	breq	.+42     	; 0x22ae <__floatsisf+0x40>
    2284:	f9 2f       	mov	r31, r25
    2286:	96 e9       	ldi	r25, 0x96	; 150
    2288:	bb 27       	eor	r27, r27
    228a:	93 95       	inc	r25
    228c:	f6 95       	lsr	r31
    228e:	87 95       	ror	r24
    2290:	77 95       	ror	r23
    2292:	67 95       	ror	r22
    2294:	b7 95       	ror	r27
    2296:	f1 11       	cpse	r31, r1
    2298:	f8 cf       	rjmp	.-16     	; 0x228a <__floatsisf+0x1c>
    229a:	fa f4       	brpl	.+62     	; 0x22da <__floatsisf+0x6c>
    229c:	bb 0f       	add	r27, r27
    229e:	11 f4       	brne	.+4      	; 0x22a4 <__floatsisf+0x36>
    22a0:	60 ff       	sbrs	r22, 0
    22a2:	1b c0       	rjmp	.+54     	; 0x22da <__floatsisf+0x6c>
    22a4:	6f 5f       	subi	r22, 0xFF	; 255
    22a6:	7f 4f       	sbci	r23, 0xFF	; 255
    22a8:	8f 4f       	sbci	r24, 0xFF	; 255
    22aa:	9f 4f       	sbci	r25, 0xFF	; 255
    22ac:	16 c0       	rjmp	.+44     	; 0x22da <__floatsisf+0x6c>
    22ae:	88 23       	and	r24, r24
    22b0:	11 f0       	breq	.+4      	; 0x22b6 <__floatsisf+0x48>
    22b2:	96 e9       	ldi	r25, 0x96	; 150
    22b4:	11 c0       	rjmp	.+34     	; 0x22d8 <__floatsisf+0x6a>
    22b6:	77 23       	and	r23, r23
    22b8:	21 f0       	breq	.+8      	; 0x22c2 <__floatsisf+0x54>
    22ba:	9e e8       	ldi	r25, 0x8E	; 142
    22bc:	87 2f       	mov	r24, r23
    22be:	76 2f       	mov	r23, r22
    22c0:	05 c0       	rjmp	.+10     	; 0x22cc <__floatsisf+0x5e>
    22c2:	66 23       	and	r22, r22
    22c4:	71 f0       	breq	.+28     	; 0x22e2 <__floatsisf+0x74>
    22c6:	96 e8       	ldi	r25, 0x86	; 134
    22c8:	86 2f       	mov	r24, r22
    22ca:	70 e0       	ldi	r23, 0x00	; 0
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	2a f0       	brmi	.+10     	; 0x22da <__floatsisf+0x6c>
    22d0:	9a 95       	dec	r25
    22d2:	66 0f       	add	r22, r22
    22d4:	77 1f       	adc	r23, r23
    22d6:	88 1f       	adc	r24, r24
    22d8:	da f7       	brpl	.-10     	; 0x22d0 <__floatsisf+0x62>
    22da:	88 0f       	add	r24, r24
    22dc:	96 95       	lsr	r25
    22de:	87 95       	ror	r24
    22e0:	97 f9       	bld	r25, 7
    22e2:	08 95       	ret

000022e4 <__fp_cmp>:
    22e4:	99 0f       	add	r25, r25
    22e6:	00 08       	sbc	r0, r0
    22e8:	55 0f       	add	r21, r21
    22ea:	aa 0b       	sbc	r26, r26
    22ec:	e0 e8       	ldi	r30, 0x80	; 128
    22ee:	fe ef       	ldi	r31, 0xFE	; 254
    22f0:	16 16       	cp	r1, r22
    22f2:	17 06       	cpc	r1, r23
    22f4:	e8 07       	cpc	r30, r24
    22f6:	f9 07       	cpc	r31, r25
    22f8:	c0 f0       	brcs	.+48     	; 0x232a <__fp_cmp+0x46>
    22fa:	12 16       	cp	r1, r18
    22fc:	13 06       	cpc	r1, r19
    22fe:	e4 07       	cpc	r30, r20
    2300:	f5 07       	cpc	r31, r21
    2302:	98 f0       	brcs	.+38     	; 0x232a <__fp_cmp+0x46>
    2304:	62 1b       	sub	r22, r18
    2306:	73 0b       	sbc	r23, r19
    2308:	84 0b       	sbc	r24, r20
    230a:	95 0b       	sbc	r25, r21
    230c:	39 f4       	brne	.+14     	; 0x231c <__fp_cmp+0x38>
    230e:	0a 26       	eor	r0, r26
    2310:	61 f0       	breq	.+24     	; 0x232a <__fp_cmp+0x46>
    2312:	23 2b       	or	r18, r19
    2314:	24 2b       	or	r18, r20
    2316:	25 2b       	or	r18, r21
    2318:	21 f4       	brne	.+8      	; 0x2322 <__fp_cmp+0x3e>
    231a:	08 95       	ret
    231c:	0a 26       	eor	r0, r26
    231e:	09 f4       	brne	.+2      	; 0x2322 <__fp_cmp+0x3e>
    2320:	a1 40       	sbci	r26, 0x01	; 1
    2322:	a6 95       	lsr	r26
    2324:	8f ef       	ldi	r24, 0xFF	; 255
    2326:	81 1d       	adc	r24, r1
    2328:	81 1d       	adc	r24, r1
    232a:	08 95       	ret

0000232c <__fp_inf>:
    232c:	97 f9       	bld	r25, 7
    232e:	9f 67       	ori	r25, 0x7F	; 127
    2330:	80 e8       	ldi	r24, 0x80	; 128
    2332:	70 e0       	ldi	r23, 0x00	; 0
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	08 95       	ret

00002338 <__fp_nan>:
    2338:	9f ef       	ldi	r25, 0xFF	; 255
    233a:	80 ec       	ldi	r24, 0xC0	; 192
    233c:	08 95       	ret

0000233e <__fp_pscA>:
    233e:	00 24       	eor	r0, r0
    2340:	0a 94       	dec	r0
    2342:	16 16       	cp	r1, r22
    2344:	17 06       	cpc	r1, r23
    2346:	18 06       	cpc	r1, r24
    2348:	09 06       	cpc	r0, r25
    234a:	08 95       	ret

0000234c <__fp_pscB>:
    234c:	00 24       	eor	r0, r0
    234e:	0a 94       	dec	r0
    2350:	12 16       	cp	r1, r18
    2352:	13 06       	cpc	r1, r19
    2354:	14 06       	cpc	r1, r20
    2356:	05 06       	cpc	r0, r21
    2358:	08 95       	ret

0000235a <__fp_round>:
    235a:	09 2e       	mov	r0, r25
    235c:	03 94       	inc	r0
    235e:	00 0c       	add	r0, r0
    2360:	11 f4       	brne	.+4      	; 0x2366 <__fp_round+0xc>
    2362:	88 23       	and	r24, r24
    2364:	52 f0       	brmi	.+20     	; 0x237a <__fp_round+0x20>
    2366:	bb 0f       	add	r27, r27
    2368:	40 f4       	brcc	.+16     	; 0x237a <__fp_round+0x20>
    236a:	bf 2b       	or	r27, r31
    236c:	11 f4       	brne	.+4      	; 0x2372 <__fp_round+0x18>
    236e:	60 ff       	sbrs	r22, 0
    2370:	04 c0       	rjmp	.+8      	; 0x237a <__fp_round+0x20>
    2372:	6f 5f       	subi	r22, 0xFF	; 255
    2374:	7f 4f       	sbci	r23, 0xFF	; 255
    2376:	8f 4f       	sbci	r24, 0xFF	; 255
    2378:	9f 4f       	sbci	r25, 0xFF	; 255
    237a:	08 95       	ret

0000237c <__fp_split3>:
    237c:	57 fd       	sbrc	r21, 7
    237e:	90 58       	subi	r25, 0x80	; 128
    2380:	44 0f       	add	r20, r20
    2382:	55 1f       	adc	r21, r21
    2384:	59 f0       	breq	.+22     	; 0x239c <__fp_splitA+0x10>
    2386:	5f 3f       	cpi	r21, 0xFF	; 255
    2388:	71 f0       	breq	.+28     	; 0x23a6 <__fp_splitA+0x1a>
    238a:	47 95       	ror	r20

0000238c <__fp_splitA>:
    238c:	88 0f       	add	r24, r24
    238e:	97 fb       	bst	r25, 7
    2390:	99 1f       	adc	r25, r25
    2392:	61 f0       	breq	.+24     	; 0x23ac <__fp_splitA+0x20>
    2394:	9f 3f       	cpi	r25, 0xFF	; 255
    2396:	79 f0       	breq	.+30     	; 0x23b6 <__fp_splitA+0x2a>
    2398:	87 95       	ror	r24
    239a:	08 95       	ret
    239c:	12 16       	cp	r1, r18
    239e:	13 06       	cpc	r1, r19
    23a0:	14 06       	cpc	r1, r20
    23a2:	55 1f       	adc	r21, r21
    23a4:	f2 cf       	rjmp	.-28     	; 0x238a <__fp_split3+0xe>
    23a6:	46 95       	lsr	r20
    23a8:	f1 df       	rcall	.-30     	; 0x238c <__fp_splitA>
    23aa:	08 c0       	rjmp	.+16     	; 0x23bc <__fp_splitA+0x30>
    23ac:	16 16       	cp	r1, r22
    23ae:	17 06       	cpc	r1, r23
    23b0:	18 06       	cpc	r1, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	f1 cf       	rjmp	.-30     	; 0x2398 <__fp_splitA+0xc>
    23b6:	86 95       	lsr	r24
    23b8:	71 05       	cpc	r23, r1
    23ba:	61 05       	cpc	r22, r1
    23bc:	08 94       	sec
    23be:	08 95       	ret

000023c0 <__fp_zero>:
    23c0:	e8 94       	clt

000023c2 <__fp_szero>:
    23c2:	bb 27       	eor	r27, r27
    23c4:	66 27       	eor	r22, r22
    23c6:	77 27       	eor	r23, r23
    23c8:	cb 01       	movw	r24, r22
    23ca:	97 f9       	bld	r25, 7
    23cc:	08 95       	ret

000023ce <__gesf2>:
    23ce:	8a df       	rcall	.-236    	; 0x22e4 <__fp_cmp>
    23d0:	08 f4       	brcc	.+2      	; 0x23d4 <__gesf2+0x6>
    23d2:	8f ef       	ldi	r24, 0xFF	; 255
    23d4:	08 95       	ret

000023d6 <__mulsf3>:
    23d6:	0b d0       	rcall	.+22     	; 0x23ee <__mulsf3x>
    23d8:	c0 cf       	rjmp	.-128    	; 0x235a <__fp_round>
    23da:	b1 df       	rcall	.-158    	; 0x233e <__fp_pscA>
    23dc:	28 f0       	brcs	.+10     	; 0x23e8 <__mulsf3+0x12>
    23de:	b6 df       	rcall	.-148    	; 0x234c <__fp_pscB>
    23e0:	18 f0       	brcs	.+6      	; 0x23e8 <__mulsf3+0x12>
    23e2:	95 23       	and	r25, r21
    23e4:	09 f0       	breq	.+2      	; 0x23e8 <__mulsf3+0x12>
    23e6:	a2 cf       	rjmp	.-188    	; 0x232c <__fp_inf>
    23e8:	a7 cf       	rjmp	.-178    	; 0x2338 <__fp_nan>
    23ea:	11 24       	eor	r1, r1
    23ec:	ea cf       	rjmp	.-44     	; 0x23c2 <__fp_szero>

000023ee <__mulsf3x>:
    23ee:	c6 df       	rcall	.-116    	; 0x237c <__fp_split3>
    23f0:	a0 f3       	brcs	.-24     	; 0x23da <__mulsf3+0x4>

000023f2 <__mulsf3_pse>:
    23f2:	95 9f       	mul	r25, r21
    23f4:	d1 f3       	breq	.-12     	; 0x23ea <__mulsf3+0x14>
    23f6:	95 0f       	add	r25, r21
    23f8:	50 e0       	ldi	r21, 0x00	; 0
    23fa:	55 1f       	adc	r21, r21
    23fc:	62 9f       	mul	r22, r18
    23fe:	f0 01       	movw	r30, r0
    2400:	72 9f       	mul	r23, r18
    2402:	bb 27       	eor	r27, r27
    2404:	f0 0d       	add	r31, r0
    2406:	b1 1d       	adc	r27, r1
    2408:	63 9f       	mul	r22, r19
    240a:	aa 27       	eor	r26, r26
    240c:	f0 0d       	add	r31, r0
    240e:	b1 1d       	adc	r27, r1
    2410:	aa 1f       	adc	r26, r26
    2412:	64 9f       	mul	r22, r20
    2414:	66 27       	eor	r22, r22
    2416:	b0 0d       	add	r27, r0
    2418:	a1 1d       	adc	r26, r1
    241a:	66 1f       	adc	r22, r22
    241c:	82 9f       	mul	r24, r18
    241e:	22 27       	eor	r18, r18
    2420:	b0 0d       	add	r27, r0
    2422:	a1 1d       	adc	r26, r1
    2424:	62 1f       	adc	r22, r18
    2426:	73 9f       	mul	r23, r19
    2428:	b0 0d       	add	r27, r0
    242a:	a1 1d       	adc	r26, r1
    242c:	62 1f       	adc	r22, r18
    242e:	83 9f       	mul	r24, r19
    2430:	a0 0d       	add	r26, r0
    2432:	61 1d       	adc	r22, r1
    2434:	22 1f       	adc	r18, r18
    2436:	74 9f       	mul	r23, r20
    2438:	33 27       	eor	r19, r19
    243a:	a0 0d       	add	r26, r0
    243c:	61 1d       	adc	r22, r1
    243e:	23 1f       	adc	r18, r19
    2440:	84 9f       	mul	r24, r20
    2442:	60 0d       	add	r22, r0
    2444:	21 1d       	adc	r18, r1
    2446:	82 2f       	mov	r24, r18
    2448:	76 2f       	mov	r23, r22
    244a:	6a 2f       	mov	r22, r26
    244c:	11 24       	eor	r1, r1
    244e:	9f 57       	subi	r25, 0x7F	; 127
    2450:	50 40       	sbci	r21, 0x00	; 0
    2452:	8a f0       	brmi	.+34     	; 0x2476 <__mulsf3_pse+0x84>
    2454:	e1 f0       	breq	.+56     	; 0x248e <__mulsf3_pse+0x9c>
    2456:	88 23       	and	r24, r24
    2458:	4a f0       	brmi	.+18     	; 0x246c <__mulsf3_pse+0x7a>
    245a:	ee 0f       	add	r30, r30
    245c:	ff 1f       	adc	r31, r31
    245e:	bb 1f       	adc	r27, r27
    2460:	66 1f       	adc	r22, r22
    2462:	77 1f       	adc	r23, r23
    2464:	88 1f       	adc	r24, r24
    2466:	91 50       	subi	r25, 0x01	; 1
    2468:	50 40       	sbci	r21, 0x00	; 0
    246a:	a9 f7       	brne	.-22     	; 0x2456 <__mulsf3_pse+0x64>
    246c:	9e 3f       	cpi	r25, 0xFE	; 254
    246e:	51 05       	cpc	r21, r1
    2470:	70 f0       	brcs	.+28     	; 0x248e <__mulsf3_pse+0x9c>
    2472:	5c cf       	rjmp	.-328    	; 0x232c <__fp_inf>
    2474:	a6 cf       	rjmp	.-180    	; 0x23c2 <__fp_szero>
    2476:	5f 3f       	cpi	r21, 0xFF	; 255
    2478:	ec f3       	brlt	.-6      	; 0x2474 <__mulsf3_pse+0x82>
    247a:	98 3e       	cpi	r25, 0xE8	; 232
    247c:	dc f3       	brlt	.-10     	; 0x2474 <__mulsf3_pse+0x82>
    247e:	86 95       	lsr	r24
    2480:	77 95       	ror	r23
    2482:	67 95       	ror	r22
    2484:	b7 95       	ror	r27
    2486:	f7 95       	ror	r31
    2488:	e7 95       	ror	r30
    248a:	9f 5f       	subi	r25, 0xFF	; 255
    248c:	c1 f7       	brne	.-16     	; 0x247e <__mulsf3_pse+0x8c>
    248e:	fe 2b       	or	r31, r30
    2490:	88 0f       	add	r24, r24
    2492:	91 1d       	adc	r25, r1
    2494:	96 95       	lsr	r25
    2496:	87 95       	ror	r24
    2498:	97 f9       	bld	r25, 7
    249a:	08 95       	ret

0000249c <__udivmodhi4>:
    249c:	aa 1b       	sub	r26, r26
    249e:	bb 1b       	sub	r27, r27
    24a0:	51 e1       	ldi	r21, 0x11	; 17
    24a2:	07 c0       	rjmp	.+14     	; 0x24b2 <__udivmodhi4_ep>

000024a4 <__udivmodhi4_loop>:
    24a4:	aa 1f       	adc	r26, r26
    24a6:	bb 1f       	adc	r27, r27
    24a8:	a6 17       	cp	r26, r22
    24aa:	b7 07       	cpc	r27, r23
    24ac:	10 f0       	brcs	.+4      	; 0x24b2 <__udivmodhi4_ep>
    24ae:	a6 1b       	sub	r26, r22
    24b0:	b7 0b       	sbc	r27, r23

000024b2 <__udivmodhi4_ep>:
    24b2:	88 1f       	adc	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	5a 95       	dec	r21
    24b8:	a9 f7       	brne	.-22     	; 0x24a4 <__udivmodhi4_loop>
    24ba:	80 95       	com	r24
    24bc:	90 95       	com	r25
    24be:	bc 01       	movw	r22, r24
    24c0:	cd 01       	movw	r24, r26
    24c2:	08 95       	ret

000024c4 <atoi>:
    24c4:	fc 01       	movw	r30, r24
    24c6:	88 27       	eor	r24, r24
    24c8:	99 27       	eor	r25, r25
    24ca:	e8 94       	clt
    24cc:	21 91       	ld	r18, Z+
    24ce:	20 32       	cpi	r18, 0x20	; 32
    24d0:	e9 f3       	breq	.-6      	; 0x24cc <atoi+0x8>
    24d2:	29 30       	cpi	r18, 0x09	; 9
    24d4:	10 f0       	brcs	.+4      	; 0x24da <atoi+0x16>
    24d6:	2e 30       	cpi	r18, 0x0E	; 14
    24d8:	c8 f3       	brcs	.-14     	; 0x24cc <atoi+0x8>
    24da:	2b 32       	cpi	r18, 0x2B	; 43
    24dc:	41 f0       	breq	.+16     	; 0x24ee <atoi+0x2a>
    24de:	2d 32       	cpi	r18, 0x2D	; 45
    24e0:	39 f4       	brne	.+14     	; 0x24f0 <atoi+0x2c>
    24e2:	68 94       	set
    24e4:	04 c0       	rjmp	.+8      	; 0x24ee <atoi+0x2a>
    24e6:	0e 94 97 12 	call	0x252e	; 0x252e <__mulhi_const_10>
    24ea:	82 0f       	add	r24, r18
    24ec:	91 1d       	adc	r25, r1
    24ee:	21 91       	ld	r18, Z+
    24f0:	20 53       	subi	r18, 0x30	; 48
    24f2:	2a 30       	cpi	r18, 0x0A	; 10
    24f4:	c0 f3       	brcs	.-16     	; 0x24e6 <atoi+0x22>
    24f6:	1e f4       	brtc	.+6      	; 0x24fe <atoi+0x3a>
    24f8:	90 95       	com	r25
    24fa:	81 95       	neg	r24
    24fc:	9f 4f       	sbci	r25, 0xFF	; 255
    24fe:	08 95       	ret

00002500 <memcpy>:
    2500:	fb 01       	movw	r30, r22
    2502:	dc 01       	movw	r26, r24
    2504:	02 c0       	rjmp	.+4      	; 0x250a <memcpy+0xa>
    2506:	01 90       	ld	r0, Z+
    2508:	0d 92       	st	X+, r0
    250a:	41 50       	subi	r20, 0x01	; 1
    250c:	50 40       	sbci	r21, 0x00	; 0
    250e:	d8 f7       	brcc	.-10     	; 0x2506 <memcpy+0x6>
    2510:	08 95       	ret

00002512 <strncmp>:
    2512:	fb 01       	movw	r30, r22
    2514:	dc 01       	movw	r26, r24
    2516:	41 50       	subi	r20, 0x01	; 1
    2518:	50 40       	sbci	r21, 0x00	; 0
    251a:	30 f0       	brcs	.+12     	; 0x2528 <strncmp+0x16>
    251c:	8d 91       	ld	r24, X+
    251e:	01 90       	ld	r0, Z+
    2520:	80 19       	sub	r24, r0
    2522:	19 f4       	brne	.+6      	; 0x252a <strncmp+0x18>
    2524:	00 20       	and	r0, r0
    2526:	b9 f7       	brne	.-18     	; 0x2516 <strncmp+0x4>
    2528:	88 1b       	sub	r24, r24
    252a:	99 0b       	sbc	r25, r25
    252c:	08 95       	ret

0000252e <__mulhi_const_10>:
    252e:	7a e0       	ldi	r23, 0x0A	; 10
    2530:	97 9f       	mul	r25, r23
    2532:	90 2d       	mov	r25, r0
    2534:	87 9f       	mul	r24, r23
    2536:	80 2d       	mov	r24, r0
    2538:	91 0d       	add	r25, r1
    253a:	11 24       	eor	r1, r1
    253c:	08 95       	ret

0000253e <sprintf>:
    253e:	0f 93       	push	r16
    2540:	1f 93       	push	r17
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	2e 97       	sbiw	r28, 0x0e	; 14
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	0e 89       	ldd	r16, Y+22	; 0x16
    2558:	1f 89       	ldd	r17, Y+23	; 0x17
    255a:	86 e0       	ldi	r24, 0x06	; 6
    255c:	8c 83       	std	Y+4, r24	; 0x04
    255e:	1a 83       	std	Y+2, r17	; 0x02
    2560:	09 83       	std	Y+1, r16	; 0x01
    2562:	8f ef       	ldi	r24, 0xFF	; 255
    2564:	9f e7       	ldi	r25, 0x7F	; 127
    2566:	9e 83       	std	Y+6, r25	; 0x06
    2568:	8d 83       	std	Y+5, r24	; 0x05
    256a:	ae 01       	movw	r20, r28
    256c:	46 5e       	subi	r20, 0xE6	; 230
    256e:	5f 4f       	sbci	r21, 0xFF	; 255
    2570:	ce 01       	movw	r24, r28
    2572:	01 96       	adiw	r24, 0x01	; 1
    2574:	68 8d       	ldd	r22, Y+24	; 0x18
    2576:	79 8d       	ldd	r23, Y+25	; 0x19
    2578:	0e 94 f7 12 	call	0x25ee	; 0x25ee <vfprintf>
    257c:	ef 81       	ldd	r30, Y+7	; 0x07
    257e:	f8 85       	ldd	r31, Y+8	; 0x08
    2580:	e0 0f       	add	r30, r16
    2582:	f1 1f       	adc	r31, r17
    2584:	10 82       	st	Z, r1
    2586:	2e 96       	adiw	r28, 0x0e	; 14
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	f8 94       	cli
    258c:	de bf       	out	0x3e, r29	; 62
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	cd bf       	out	0x3d, r28	; 61
    2592:	df 91       	pop	r29
    2594:	cf 91       	pop	r28
    2596:	1f 91       	pop	r17
    2598:	0f 91       	pop	r16
    259a:	08 95       	ret

0000259c <vsprintf>:
    259c:	0f 93       	push	r16
    259e:	1f 93       	push	r17
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	2e 97       	sbiw	r28, 0x0e	; 14
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	de bf       	out	0x3e, r29	; 62
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	cd bf       	out	0x3d, r28	; 61
    25b4:	8c 01       	movw	r16, r24
    25b6:	86 e0       	ldi	r24, 0x06	; 6
    25b8:	8c 83       	std	Y+4, r24	; 0x04
    25ba:	1a 83       	std	Y+2, r17	; 0x02
    25bc:	09 83       	std	Y+1, r16	; 0x01
    25be:	8f ef       	ldi	r24, 0xFF	; 255
    25c0:	9f e7       	ldi	r25, 0x7F	; 127
    25c2:	9e 83       	std	Y+6, r25	; 0x06
    25c4:	8d 83       	std	Y+5, r24	; 0x05
    25c6:	ce 01       	movw	r24, r28
    25c8:	01 96       	adiw	r24, 0x01	; 1
    25ca:	0e 94 f7 12 	call	0x25ee	; 0x25ee <vfprintf>
    25ce:	ef 81       	ldd	r30, Y+7	; 0x07
    25d0:	f8 85       	ldd	r31, Y+8	; 0x08
    25d2:	e0 0f       	add	r30, r16
    25d4:	f1 1f       	adc	r31, r17
    25d6:	10 82       	st	Z, r1
    25d8:	2e 96       	adiw	r28, 0x0e	; 14
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	f8 94       	cli
    25de:	de bf       	out	0x3e, r29	; 62
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	cd bf       	out	0x3d, r28	; 61
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	1f 91       	pop	r17
    25ea:	0f 91       	pop	r16
    25ec:	08 95       	ret

000025ee <vfprintf>:
    25ee:	2f 92       	push	r2
    25f0:	3f 92       	push	r3
    25f2:	4f 92       	push	r4
    25f4:	5f 92       	push	r5
    25f6:	6f 92       	push	r6
    25f8:	7f 92       	push	r7
    25fa:	8f 92       	push	r8
    25fc:	9f 92       	push	r9
    25fe:	af 92       	push	r10
    2600:	bf 92       	push	r11
    2602:	cf 92       	push	r12
    2604:	df 92       	push	r13
    2606:	ef 92       	push	r14
    2608:	ff 92       	push	r15
    260a:	0f 93       	push	r16
    260c:	1f 93       	push	r17
    260e:	cf 93       	push	r28
    2610:	df 93       	push	r29
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
    2616:	2d 97       	sbiw	r28, 0x0d	; 13
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	f8 94       	cli
    261c:	de bf       	out	0x3e, r29	; 62
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	cd bf       	out	0x3d, r28	; 61
    2622:	3c 01       	movw	r6, r24
    2624:	7d 87       	std	Y+13, r23	; 0x0d
    2626:	6c 87       	std	Y+12, r22	; 0x0c
    2628:	5a 01       	movw	r10, r20
    262a:	fc 01       	movw	r30, r24
    262c:	17 82       	std	Z+7, r1	; 0x07
    262e:	16 82       	std	Z+6, r1	; 0x06
    2630:	83 81       	ldd	r24, Z+3	; 0x03
    2632:	81 ff       	sbrs	r24, 1
    2634:	c8 c1       	rjmp	.+912    	; 0x29c6 <vfprintf+0x3d8>
    2636:	2e 01       	movw	r4, r28
    2638:	08 94       	sec
    263a:	41 1c       	adc	r4, r1
    263c:	51 1c       	adc	r5, r1
    263e:	f3 01       	movw	r30, r6
    2640:	93 81       	ldd	r25, Z+3	; 0x03
    2642:	ec 85       	ldd	r30, Y+12	; 0x0c
    2644:	fd 85       	ldd	r31, Y+13	; 0x0d
    2646:	93 fd       	sbrc	r25, 3
    2648:	85 91       	lpm	r24, Z+
    264a:	93 ff       	sbrs	r25, 3
    264c:	81 91       	ld	r24, Z+
    264e:	fd 87       	std	Y+13, r31	; 0x0d
    2650:	ec 87       	std	Y+12, r30	; 0x0c
    2652:	88 23       	and	r24, r24
    2654:	09 f4       	brne	.+2      	; 0x2658 <vfprintf+0x6a>
    2656:	b3 c1       	rjmp	.+870    	; 0x29be <vfprintf+0x3d0>
    2658:	85 32       	cpi	r24, 0x25	; 37
    265a:	41 f4       	brne	.+16     	; 0x266c <vfprintf+0x7e>
    265c:	93 fd       	sbrc	r25, 3
    265e:	85 91       	lpm	r24, Z+
    2660:	93 ff       	sbrs	r25, 3
    2662:	81 91       	ld	r24, Z+
    2664:	fd 87       	std	Y+13, r31	; 0x0d
    2666:	ec 87       	std	Y+12, r30	; 0x0c
    2668:	85 32       	cpi	r24, 0x25	; 37
    266a:	29 f4       	brne	.+10     	; 0x2676 <vfprintf+0x88>
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	b3 01       	movw	r22, r6
    2670:	0e 94 14 15 	call	0x2a28	; 0x2a28 <fputc>
    2674:	e4 cf       	rjmp	.-56     	; 0x263e <vfprintf+0x50>
    2676:	ff 24       	eor	r15, r15
    2678:	ee 24       	eor	r14, r14
    267a:	10 e0       	ldi	r17, 0x00	; 0
    267c:	10 32       	cpi	r17, 0x20	; 32
    267e:	b0 f4       	brcc	.+44     	; 0x26ac <vfprintf+0xbe>
    2680:	8b 32       	cpi	r24, 0x2B	; 43
    2682:	69 f0       	breq	.+26     	; 0x269e <vfprintf+0xb0>
    2684:	8c 32       	cpi	r24, 0x2C	; 44
    2686:	28 f4       	brcc	.+10     	; 0x2692 <vfprintf+0xa4>
    2688:	80 32       	cpi	r24, 0x20	; 32
    268a:	51 f0       	breq	.+20     	; 0x26a0 <vfprintf+0xb2>
    268c:	83 32       	cpi	r24, 0x23	; 35
    268e:	71 f4       	brne	.+28     	; 0x26ac <vfprintf+0xbe>
    2690:	0b c0       	rjmp	.+22     	; 0x26a8 <vfprintf+0xba>
    2692:	8d 32       	cpi	r24, 0x2D	; 45
    2694:	39 f0       	breq	.+14     	; 0x26a4 <vfprintf+0xb6>
    2696:	80 33       	cpi	r24, 0x30	; 48
    2698:	49 f4       	brne	.+18     	; 0x26ac <vfprintf+0xbe>
    269a:	11 60       	ori	r17, 0x01	; 1
    269c:	2c c0       	rjmp	.+88     	; 0x26f6 <vfprintf+0x108>
    269e:	12 60       	ori	r17, 0x02	; 2
    26a0:	14 60       	ori	r17, 0x04	; 4
    26a2:	29 c0       	rjmp	.+82     	; 0x26f6 <vfprintf+0x108>
    26a4:	18 60       	ori	r17, 0x08	; 8
    26a6:	27 c0       	rjmp	.+78     	; 0x26f6 <vfprintf+0x108>
    26a8:	10 61       	ori	r17, 0x10	; 16
    26aa:	25 c0       	rjmp	.+74     	; 0x26f6 <vfprintf+0x108>
    26ac:	17 fd       	sbrc	r17, 7
    26ae:	2e c0       	rjmp	.+92     	; 0x270c <vfprintf+0x11e>
    26b0:	28 2f       	mov	r18, r24
    26b2:	20 53       	subi	r18, 0x30	; 48
    26b4:	2a 30       	cpi	r18, 0x0A	; 10
    26b6:	98 f4       	brcc	.+38     	; 0x26de <vfprintf+0xf0>
    26b8:	16 ff       	sbrs	r17, 6
    26ba:	08 c0       	rjmp	.+16     	; 0x26cc <vfprintf+0xde>
    26bc:	8f 2d       	mov	r24, r15
    26be:	88 0f       	add	r24, r24
    26c0:	f8 2e       	mov	r15, r24
    26c2:	ff 0c       	add	r15, r15
    26c4:	ff 0c       	add	r15, r15
    26c6:	f8 0e       	add	r15, r24
    26c8:	f2 0e       	add	r15, r18
    26ca:	15 c0       	rjmp	.+42     	; 0x26f6 <vfprintf+0x108>
    26cc:	8e 2d       	mov	r24, r14
    26ce:	88 0f       	add	r24, r24
    26d0:	e8 2e       	mov	r14, r24
    26d2:	ee 0c       	add	r14, r14
    26d4:	ee 0c       	add	r14, r14
    26d6:	e8 0e       	add	r14, r24
    26d8:	e2 0e       	add	r14, r18
    26da:	10 62       	ori	r17, 0x20	; 32
    26dc:	0c c0       	rjmp	.+24     	; 0x26f6 <vfprintf+0x108>
    26de:	8e 32       	cpi	r24, 0x2E	; 46
    26e0:	21 f4       	brne	.+8      	; 0x26ea <vfprintf+0xfc>
    26e2:	16 fd       	sbrc	r17, 6
    26e4:	6c c1       	rjmp	.+728    	; 0x29be <vfprintf+0x3d0>
    26e6:	10 64       	ori	r17, 0x40	; 64
    26e8:	06 c0       	rjmp	.+12     	; 0x26f6 <vfprintf+0x108>
    26ea:	8c 36       	cpi	r24, 0x6C	; 108
    26ec:	11 f4       	brne	.+4      	; 0x26f2 <vfprintf+0x104>
    26ee:	10 68       	ori	r17, 0x80	; 128
    26f0:	02 c0       	rjmp	.+4      	; 0x26f6 <vfprintf+0x108>
    26f2:	88 36       	cpi	r24, 0x68	; 104
    26f4:	59 f4       	brne	.+22     	; 0x270c <vfprintf+0x11e>
    26f6:	ec 85       	ldd	r30, Y+12	; 0x0c
    26f8:	fd 85       	ldd	r31, Y+13	; 0x0d
    26fa:	93 fd       	sbrc	r25, 3
    26fc:	85 91       	lpm	r24, Z+
    26fe:	93 ff       	sbrs	r25, 3
    2700:	81 91       	ld	r24, Z+
    2702:	fd 87       	std	Y+13, r31	; 0x0d
    2704:	ec 87       	std	Y+12, r30	; 0x0c
    2706:	88 23       	and	r24, r24
    2708:	09 f0       	breq	.+2      	; 0x270c <vfprintf+0x11e>
    270a:	b8 cf       	rjmp	.-144    	; 0x267c <vfprintf+0x8e>
    270c:	98 2f       	mov	r25, r24
    270e:	95 54       	subi	r25, 0x45	; 69
    2710:	93 30       	cpi	r25, 0x03	; 3
    2712:	18 f0       	brcs	.+6      	; 0x271a <vfprintf+0x12c>
    2714:	90 52       	subi	r25, 0x20	; 32
    2716:	93 30       	cpi	r25, 0x03	; 3
    2718:	38 f4       	brcc	.+14     	; 0x2728 <vfprintf+0x13a>
    271a:	24 e0       	ldi	r18, 0x04	; 4
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	a2 0e       	add	r10, r18
    2720:	b3 1e       	adc	r11, r19
    2722:	3f e3       	ldi	r19, 0x3F	; 63
    2724:	39 83       	std	Y+1, r19	; 0x01
    2726:	0f c0       	rjmp	.+30     	; 0x2746 <vfprintf+0x158>
    2728:	83 36       	cpi	r24, 0x63	; 99
    272a:	31 f0       	breq	.+12     	; 0x2738 <vfprintf+0x14a>
    272c:	83 37       	cpi	r24, 0x73	; 115
    272e:	81 f0       	breq	.+32     	; 0x2750 <vfprintf+0x162>
    2730:	83 35       	cpi	r24, 0x53	; 83
    2732:	09 f0       	breq	.+2      	; 0x2736 <vfprintf+0x148>
    2734:	5a c0       	rjmp	.+180    	; 0x27ea <vfprintf+0x1fc>
    2736:	22 c0       	rjmp	.+68     	; 0x277c <vfprintf+0x18e>
    2738:	f5 01       	movw	r30, r10
    273a:	80 81       	ld	r24, Z
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	22 e0       	ldi	r18, 0x02	; 2
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	a2 0e       	add	r10, r18
    2744:	b3 1e       	adc	r11, r19
    2746:	21 e0       	ldi	r18, 0x01	; 1
    2748:	c2 2e       	mov	r12, r18
    274a:	d1 2c       	mov	r13, r1
    274c:	42 01       	movw	r8, r4
    274e:	14 c0       	rjmp	.+40     	; 0x2778 <vfprintf+0x18a>
    2750:	92 e0       	ldi	r25, 0x02	; 2
    2752:	29 2e       	mov	r2, r25
    2754:	31 2c       	mov	r3, r1
    2756:	2a 0c       	add	r2, r10
    2758:	3b 1c       	adc	r3, r11
    275a:	f5 01       	movw	r30, r10
    275c:	80 80       	ld	r8, Z
    275e:	91 80       	ldd	r9, Z+1	; 0x01
    2760:	16 ff       	sbrs	r17, 6
    2762:	03 c0       	rjmp	.+6      	; 0x276a <vfprintf+0x17c>
    2764:	6f 2d       	mov	r22, r15
    2766:	70 e0       	ldi	r23, 0x00	; 0
    2768:	02 c0       	rjmp	.+4      	; 0x276e <vfprintf+0x180>
    276a:	6f ef       	ldi	r22, 0xFF	; 255
    276c:	7f ef       	ldi	r23, 0xFF	; 255
    276e:	c4 01       	movw	r24, r8
    2770:	0e 94 09 15 	call	0x2a12	; 0x2a12 <strnlen>
    2774:	6c 01       	movw	r12, r24
    2776:	51 01       	movw	r10, r2
    2778:	1f 77       	andi	r17, 0x7F	; 127
    277a:	15 c0       	rjmp	.+42     	; 0x27a6 <vfprintf+0x1b8>
    277c:	82 e0       	ldi	r24, 0x02	; 2
    277e:	28 2e       	mov	r2, r24
    2780:	31 2c       	mov	r3, r1
    2782:	2a 0c       	add	r2, r10
    2784:	3b 1c       	adc	r3, r11
    2786:	f5 01       	movw	r30, r10
    2788:	80 80       	ld	r8, Z
    278a:	91 80       	ldd	r9, Z+1	; 0x01
    278c:	16 ff       	sbrs	r17, 6
    278e:	03 c0       	rjmp	.+6      	; 0x2796 <vfprintf+0x1a8>
    2790:	6f 2d       	mov	r22, r15
    2792:	70 e0       	ldi	r23, 0x00	; 0
    2794:	02 c0       	rjmp	.+4      	; 0x279a <vfprintf+0x1ac>
    2796:	6f ef       	ldi	r22, 0xFF	; 255
    2798:	7f ef       	ldi	r23, 0xFF	; 255
    279a:	c4 01       	movw	r24, r8
    279c:	0e 94 fe 14 	call	0x29fc	; 0x29fc <strnlen_P>
    27a0:	6c 01       	movw	r12, r24
    27a2:	10 68       	ori	r17, 0x80	; 128
    27a4:	51 01       	movw	r10, r2
    27a6:	13 fd       	sbrc	r17, 3
    27a8:	1c c0       	rjmp	.+56     	; 0x27e2 <vfprintf+0x1f4>
    27aa:	06 c0       	rjmp	.+12     	; 0x27b8 <vfprintf+0x1ca>
    27ac:	80 e2       	ldi	r24, 0x20	; 32
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	b3 01       	movw	r22, r6
    27b2:	0e 94 14 15 	call	0x2a28	; 0x2a28 <fputc>
    27b6:	ea 94       	dec	r14
    27b8:	8e 2d       	mov	r24, r14
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	c8 16       	cp	r12, r24
    27be:	d9 06       	cpc	r13, r25
    27c0:	a8 f3       	brcs	.-22     	; 0x27ac <vfprintf+0x1be>
    27c2:	0f c0       	rjmp	.+30     	; 0x27e2 <vfprintf+0x1f4>
    27c4:	f4 01       	movw	r30, r8
    27c6:	17 fd       	sbrc	r17, 7
    27c8:	85 91       	lpm	r24, Z+
    27ca:	17 ff       	sbrs	r17, 7
    27cc:	81 91       	ld	r24, Z+
    27ce:	4f 01       	movw	r8, r30
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	b3 01       	movw	r22, r6
    27d4:	0e 94 14 15 	call	0x2a28	; 0x2a28 <fputc>
    27d8:	e1 10       	cpse	r14, r1
    27da:	ea 94       	dec	r14
    27dc:	08 94       	sec
    27de:	c1 08       	sbc	r12, r1
    27e0:	d1 08       	sbc	r13, r1
    27e2:	c1 14       	cp	r12, r1
    27e4:	d1 04       	cpc	r13, r1
    27e6:	71 f7       	brne	.-36     	; 0x27c4 <vfprintf+0x1d6>
    27e8:	e7 c0       	rjmp	.+462    	; 0x29b8 <vfprintf+0x3ca>
    27ea:	84 36       	cpi	r24, 0x64	; 100
    27ec:	11 f0       	breq	.+4      	; 0x27f2 <vfprintf+0x204>
    27ee:	89 36       	cpi	r24, 0x69	; 105
    27f0:	51 f5       	brne	.+84     	; 0x2846 <vfprintf+0x258>
    27f2:	f5 01       	movw	r30, r10
    27f4:	17 ff       	sbrs	r17, 7
    27f6:	07 c0       	rjmp	.+14     	; 0x2806 <vfprintf+0x218>
    27f8:	80 81       	ld	r24, Z
    27fa:	91 81       	ldd	r25, Z+1	; 0x01
    27fc:	a2 81       	ldd	r26, Z+2	; 0x02
    27fe:	b3 81       	ldd	r27, Z+3	; 0x03
    2800:	24 e0       	ldi	r18, 0x04	; 4
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	08 c0       	rjmp	.+16     	; 0x2816 <vfprintf+0x228>
    2806:	80 81       	ld	r24, Z
    2808:	91 81       	ldd	r25, Z+1	; 0x01
    280a:	aa 27       	eor	r26, r26
    280c:	97 fd       	sbrc	r25, 7
    280e:	a0 95       	com	r26
    2810:	ba 2f       	mov	r27, r26
    2812:	22 e0       	ldi	r18, 0x02	; 2
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	a2 0e       	add	r10, r18
    2818:	b3 1e       	adc	r11, r19
    281a:	01 2f       	mov	r16, r17
    281c:	0f 76       	andi	r16, 0x6F	; 111
    281e:	b7 ff       	sbrs	r27, 7
    2820:	08 c0       	rjmp	.+16     	; 0x2832 <vfprintf+0x244>
    2822:	b0 95       	com	r27
    2824:	a0 95       	com	r26
    2826:	90 95       	com	r25
    2828:	81 95       	neg	r24
    282a:	9f 4f       	sbci	r25, 0xFF	; 255
    282c:	af 4f       	sbci	r26, 0xFF	; 255
    282e:	bf 4f       	sbci	r27, 0xFF	; 255
    2830:	00 68       	ori	r16, 0x80	; 128
    2832:	bc 01       	movw	r22, r24
    2834:	cd 01       	movw	r24, r26
    2836:	a2 01       	movw	r20, r4
    2838:	2a e0       	ldi	r18, 0x0A	; 10
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__ultoa_invert>
    2840:	d8 2e       	mov	r13, r24
    2842:	d4 18       	sub	r13, r4
    2844:	3f c0       	rjmp	.+126    	; 0x28c4 <vfprintf+0x2d6>
    2846:	85 37       	cpi	r24, 0x75	; 117
    2848:	21 f4       	brne	.+8      	; 0x2852 <vfprintf+0x264>
    284a:	1f 7e       	andi	r17, 0xEF	; 239
    284c:	2a e0       	ldi	r18, 0x0A	; 10
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	20 c0       	rjmp	.+64     	; 0x2892 <vfprintf+0x2a4>
    2852:	19 7f       	andi	r17, 0xF9	; 249
    2854:	8f 36       	cpi	r24, 0x6F	; 111
    2856:	a9 f0       	breq	.+42     	; 0x2882 <vfprintf+0x294>
    2858:	80 37       	cpi	r24, 0x70	; 112
    285a:	20 f4       	brcc	.+8      	; 0x2864 <vfprintf+0x276>
    285c:	88 35       	cpi	r24, 0x58	; 88
    285e:	09 f0       	breq	.+2      	; 0x2862 <vfprintf+0x274>
    2860:	ae c0       	rjmp	.+348    	; 0x29be <vfprintf+0x3d0>
    2862:	0b c0       	rjmp	.+22     	; 0x287a <vfprintf+0x28c>
    2864:	80 37       	cpi	r24, 0x70	; 112
    2866:	21 f0       	breq	.+8      	; 0x2870 <vfprintf+0x282>
    2868:	88 37       	cpi	r24, 0x78	; 120
    286a:	09 f0       	breq	.+2      	; 0x286e <vfprintf+0x280>
    286c:	a8 c0       	rjmp	.+336    	; 0x29be <vfprintf+0x3d0>
    286e:	01 c0       	rjmp	.+2      	; 0x2872 <vfprintf+0x284>
    2870:	10 61       	ori	r17, 0x10	; 16
    2872:	14 ff       	sbrs	r17, 4
    2874:	09 c0       	rjmp	.+18     	; 0x2888 <vfprintf+0x29a>
    2876:	14 60       	ori	r17, 0x04	; 4
    2878:	07 c0       	rjmp	.+14     	; 0x2888 <vfprintf+0x29a>
    287a:	14 ff       	sbrs	r17, 4
    287c:	08 c0       	rjmp	.+16     	; 0x288e <vfprintf+0x2a0>
    287e:	16 60       	ori	r17, 0x06	; 6
    2880:	06 c0       	rjmp	.+12     	; 0x288e <vfprintf+0x2a0>
    2882:	28 e0       	ldi	r18, 0x08	; 8
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	05 c0       	rjmp	.+10     	; 0x2892 <vfprintf+0x2a4>
    2888:	20 e1       	ldi	r18, 0x10	; 16
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <vfprintf+0x2a4>
    288e:	20 e1       	ldi	r18, 0x10	; 16
    2890:	32 e0       	ldi	r19, 0x02	; 2
    2892:	f5 01       	movw	r30, r10
    2894:	17 ff       	sbrs	r17, 7
    2896:	07 c0       	rjmp	.+14     	; 0x28a6 <vfprintf+0x2b8>
    2898:	60 81       	ld	r22, Z
    289a:	71 81       	ldd	r23, Z+1	; 0x01
    289c:	82 81       	ldd	r24, Z+2	; 0x02
    289e:	93 81       	ldd	r25, Z+3	; 0x03
    28a0:	44 e0       	ldi	r20, 0x04	; 4
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	06 c0       	rjmp	.+12     	; 0x28b2 <vfprintf+0x2c4>
    28a6:	60 81       	ld	r22, Z
    28a8:	71 81       	ldd	r23, Z+1	; 0x01
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	42 e0       	ldi	r20, 0x02	; 2
    28b0:	50 e0       	ldi	r21, 0x00	; 0
    28b2:	a4 0e       	add	r10, r20
    28b4:	b5 1e       	adc	r11, r21
    28b6:	a2 01       	movw	r20, r4
    28b8:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__ultoa_invert>
    28bc:	d8 2e       	mov	r13, r24
    28be:	d4 18       	sub	r13, r4
    28c0:	01 2f       	mov	r16, r17
    28c2:	0f 77       	andi	r16, 0x7F	; 127
    28c4:	06 ff       	sbrs	r16, 6
    28c6:	09 c0       	rjmp	.+18     	; 0x28da <vfprintf+0x2ec>
    28c8:	0e 7f       	andi	r16, 0xFE	; 254
    28ca:	df 14       	cp	r13, r15
    28cc:	30 f4       	brcc	.+12     	; 0x28da <vfprintf+0x2ec>
    28ce:	04 ff       	sbrs	r16, 4
    28d0:	06 c0       	rjmp	.+12     	; 0x28de <vfprintf+0x2f0>
    28d2:	02 fd       	sbrc	r16, 2
    28d4:	04 c0       	rjmp	.+8      	; 0x28de <vfprintf+0x2f0>
    28d6:	0f 7e       	andi	r16, 0xEF	; 239
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <vfprintf+0x2f0>
    28da:	1d 2d       	mov	r17, r13
    28dc:	01 c0       	rjmp	.+2      	; 0x28e0 <vfprintf+0x2f2>
    28de:	1f 2d       	mov	r17, r15
    28e0:	80 2f       	mov	r24, r16
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	04 ff       	sbrs	r16, 4
    28e6:	0c c0       	rjmp	.+24     	; 0x2900 <vfprintf+0x312>
    28e8:	fe 01       	movw	r30, r28
    28ea:	ed 0d       	add	r30, r13
    28ec:	f1 1d       	adc	r31, r1
    28ee:	20 81       	ld	r18, Z
    28f0:	20 33       	cpi	r18, 0x30	; 48
    28f2:	11 f4       	brne	.+4      	; 0x28f8 <vfprintf+0x30a>
    28f4:	09 7e       	andi	r16, 0xE9	; 233
    28f6:	09 c0       	rjmp	.+18     	; 0x290a <vfprintf+0x31c>
    28f8:	02 ff       	sbrs	r16, 2
    28fa:	06 c0       	rjmp	.+12     	; 0x2908 <vfprintf+0x31a>
    28fc:	1e 5f       	subi	r17, 0xFE	; 254
    28fe:	05 c0       	rjmp	.+10     	; 0x290a <vfprintf+0x31c>
    2900:	86 78       	andi	r24, 0x86	; 134
    2902:	90 70       	andi	r25, 0x00	; 0
    2904:	00 97       	sbiw	r24, 0x00	; 0
    2906:	09 f0       	breq	.+2      	; 0x290a <vfprintf+0x31c>
    2908:	1f 5f       	subi	r17, 0xFF	; 255
    290a:	80 2e       	mov	r8, r16
    290c:	99 24       	eor	r9, r9
    290e:	03 fd       	sbrc	r16, 3
    2910:	12 c0       	rjmp	.+36     	; 0x2936 <vfprintf+0x348>
    2912:	00 ff       	sbrs	r16, 0
    2914:	0d c0       	rjmp	.+26     	; 0x2930 <vfprintf+0x342>
    2916:	fd 2c       	mov	r15, r13
    2918:	1e 15       	cp	r17, r14
    291a:	50 f4       	brcc	.+20     	; 0x2930 <vfprintf+0x342>
    291c:	fe 0c       	add	r15, r14
    291e:	f1 1a       	sub	r15, r17
    2920:	1e 2d       	mov	r17, r14
    2922:	06 c0       	rjmp	.+12     	; 0x2930 <vfprintf+0x342>
    2924:	80 e2       	ldi	r24, 0x20	; 32
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	b3 01       	movw	r22, r6
    292a:	0e 94 14 15 	call	0x2a28	; 0x2a28 <fputc>
    292e:	1f 5f       	subi	r17, 0xFF	; 255
    2930:	1e 15       	cp	r17, r14
    2932:	c0 f3       	brcs	.-16     	; 0x2924 <vfprintf+0x336>
    2934:	04 c0       	rjmp	.+8      	; 0x293e <vfprintf+0x350>
    2936:	1e 15       	cp	r17, r14
    2938:	10 f4       	brcc	.+4      	; 0x293e <vfprintf+0x350>
    293a:	e1 1a       	sub	r14, r17
    293c:	01 c0       	rjmp	.+2      	; 0x2940 <vfprintf+0x352>
    293e:	ee 24       	eor	r14, r14
    2940:	84 fe       	sbrs	r8, 4
    2942:	0f c0       	rjmp	.+30     	; 0x2962 <vfprintf+0x374>
    2944:	80 e3       	ldi	r24, 0x30	; 48
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	b3 01       	movw	r22, r6
    294a:	0e 94 14 15 	call	0x2a28	; 0x2a28 <fputc>
    294e:	82 fe       	sbrs	r8, 2
    2950:	1f c0       	rjmp	.+62     	; 0x2990 <vfprintf+0x3a2>
    2952:	81 fe       	sbrs	r8, 1
    2954:	03 c0       	rjmp	.+6      	; 0x295c <vfprintf+0x36e>
    2956:	88 e5       	ldi	r24, 0x58	; 88
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	10 c0       	rjmp	.+32     	; 0x297c <vfprintf+0x38e>
    295c:	88 e7       	ldi	r24, 0x78	; 120
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	0d c0       	rjmp	.+26     	; 0x297c <vfprintf+0x38e>
    2962:	c4 01       	movw	r24, r8
    2964:	86 78       	andi	r24, 0x86	; 134
    2966:	90 70       	andi	r25, 0x00	; 0
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	91 f0       	breq	.+36     	; 0x2990 <vfprintf+0x3a2>
    296c:	81 fc       	sbrc	r8, 1
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <vfprintf+0x386>
    2970:	80 e2       	ldi	r24, 0x20	; 32
    2972:	01 c0       	rjmp	.+2      	; 0x2976 <vfprintf+0x388>
    2974:	8b e2       	ldi	r24, 0x2B	; 43
    2976:	07 fd       	sbrc	r16, 7
    2978:	8d e2       	ldi	r24, 0x2D	; 45
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	b3 01       	movw	r22, r6
    297e:	0e 94 14 15 	call	0x2a28	; 0x2a28 <fputc>
    2982:	06 c0       	rjmp	.+12     	; 0x2990 <vfprintf+0x3a2>
    2984:	80 e3       	ldi	r24, 0x30	; 48
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	b3 01       	movw	r22, r6
    298a:	0e 94 14 15 	call	0x2a28	; 0x2a28 <fputc>
    298e:	fa 94       	dec	r15
    2990:	df 14       	cp	r13, r15
    2992:	c0 f3       	brcs	.-16     	; 0x2984 <vfprintf+0x396>
    2994:	da 94       	dec	r13
    2996:	f2 01       	movw	r30, r4
    2998:	ed 0d       	add	r30, r13
    299a:	f1 1d       	adc	r31, r1
    299c:	80 81       	ld	r24, Z
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	b3 01       	movw	r22, r6
    29a2:	0e 94 14 15 	call	0x2a28	; 0x2a28 <fputc>
    29a6:	dd 20       	and	r13, r13
    29a8:	a9 f7       	brne	.-22     	; 0x2994 <vfprintf+0x3a6>
    29aa:	06 c0       	rjmp	.+12     	; 0x29b8 <vfprintf+0x3ca>
    29ac:	80 e2       	ldi	r24, 0x20	; 32
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	b3 01       	movw	r22, r6
    29b2:	0e 94 14 15 	call	0x2a28	; 0x2a28 <fputc>
    29b6:	ea 94       	dec	r14
    29b8:	ee 20       	and	r14, r14
    29ba:	c1 f7       	brne	.-16     	; 0x29ac <vfprintf+0x3be>
    29bc:	40 ce       	rjmp	.-896    	; 0x263e <vfprintf+0x50>
    29be:	f3 01       	movw	r30, r6
    29c0:	86 81       	ldd	r24, Z+6	; 0x06
    29c2:	97 81       	ldd	r25, Z+7	; 0x07
    29c4:	02 c0       	rjmp	.+4      	; 0x29ca <vfprintf+0x3dc>
    29c6:	8f ef       	ldi	r24, 0xFF	; 255
    29c8:	9f ef       	ldi	r25, 0xFF	; 255
    29ca:	2d 96       	adiw	r28, 0x0d	; 13
    29cc:	0f b6       	in	r0, 0x3f	; 63
    29ce:	f8 94       	cli
    29d0:	de bf       	out	0x3e, r29	; 62
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	cd bf       	out	0x3d, r28	; 61
    29d6:	df 91       	pop	r29
    29d8:	cf 91       	pop	r28
    29da:	1f 91       	pop	r17
    29dc:	0f 91       	pop	r16
    29de:	ff 90       	pop	r15
    29e0:	ef 90       	pop	r14
    29e2:	df 90       	pop	r13
    29e4:	cf 90       	pop	r12
    29e6:	bf 90       	pop	r11
    29e8:	af 90       	pop	r10
    29ea:	9f 90       	pop	r9
    29ec:	8f 90       	pop	r8
    29ee:	7f 90       	pop	r7
    29f0:	6f 90       	pop	r6
    29f2:	5f 90       	pop	r5
    29f4:	4f 90       	pop	r4
    29f6:	3f 90       	pop	r3
    29f8:	2f 90       	pop	r2
    29fa:	08 95       	ret

000029fc <strnlen_P>:
    29fc:	fc 01       	movw	r30, r24
    29fe:	05 90       	lpm	r0, Z+
    2a00:	61 50       	subi	r22, 0x01	; 1
    2a02:	70 40       	sbci	r23, 0x00	; 0
    2a04:	01 10       	cpse	r0, r1
    2a06:	d8 f7       	brcc	.-10     	; 0x29fe <strnlen_P+0x2>
    2a08:	80 95       	com	r24
    2a0a:	90 95       	com	r25
    2a0c:	8e 0f       	add	r24, r30
    2a0e:	9f 1f       	adc	r25, r31
    2a10:	08 95       	ret

00002a12 <strnlen>:
    2a12:	fc 01       	movw	r30, r24
    2a14:	61 50       	subi	r22, 0x01	; 1
    2a16:	70 40       	sbci	r23, 0x00	; 0
    2a18:	01 90       	ld	r0, Z+
    2a1a:	01 10       	cpse	r0, r1
    2a1c:	d8 f7       	brcc	.-10     	; 0x2a14 <strnlen+0x2>
    2a1e:	80 95       	com	r24
    2a20:	90 95       	com	r25
    2a22:	8e 0f       	add	r24, r30
    2a24:	9f 1f       	adc	r25, r31
    2a26:	08 95       	ret

00002a28 <fputc>:
    2a28:	0f 93       	push	r16
    2a2a:	1f 93       	push	r17
    2a2c:	cf 93       	push	r28
    2a2e:	df 93       	push	r29
    2a30:	8c 01       	movw	r16, r24
    2a32:	eb 01       	movw	r28, r22
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	81 ff       	sbrs	r24, 1
    2a38:	1b c0       	rjmp	.+54     	; 0x2a70 <fputc+0x48>
    2a3a:	82 ff       	sbrs	r24, 2
    2a3c:	0d c0       	rjmp	.+26     	; 0x2a58 <fputc+0x30>
    2a3e:	2e 81       	ldd	r18, Y+6	; 0x06
    2a40:	3f 81       	ldd	r19, Y+7	; 0x07
    2a42:	8c 81       	ldd	r24, Y+4	; 0x04
    2a44:	9d 81       	ldd	r25, Y+5	; 0x05
    2a46:	28 17       	cp	r18, r24
    2a48:	39 07       	cpc	r19, r25
    2a4a:	64 f4       	brge	.+24     	; 0x2a64 <fputc+0x3c>
    2a4c:	e8 81       	ld	r30, Y
    2a4e:	f9 81       	ldd	r31, Y+1	; 0x01
    2a50:	01 93       	st	Z+, r16
    2a52:	f9 83       	std	Y+1, r31	; 0x01
    2a54:	e8 83       	st	Y, r30
    2a56:	06 c0       	rjmp	.+12     	; 0x2a64 <fputc+0x3c>
    2a58:	e8 85       	ldd	r30, Y+8	; 0x08
    2a5a:	f9 85       	ldd	r31, Y+9	; 0x09
    2a5c:	80 2f       	mov	r24, r16
    2a5e:	19 95       	eicall
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	31 f4       	brne	.+12     	; 0x2a70 <fputc+0x48>
    2a64:	8e 81       	ldd	r24, Y+6	; 0x06
    2a66:	9f 81       	ldd	r25, Y+7	; 0x07
    2a68:	01 96       	adiw	r24, 0x01	; 1
    2a6a:	9f 83       	std	Y+7, r25	; 0x07
    2a6c:	8e 83       	std	Y+6, r24	; 0x06
    2a6e:	02 c0       	rjmp	.+4      	; 0x2a74 <fputc+0x4c>
    2a70:	0f ef       	ldi	r16, 0xFF	; 255
    2a72:	1f ef       	ldi	r17, 0xFF	; 255
    2a74:	c8 01       	movw	r24, r16
    2a76:	df 91       	pop	r29
    2a78:	cf 91       	pop	r28
    2a7a:	1f 91       	pop	r17
    2a7c:	0f 91       	pop	r16
    2a7e:	08 95       	ret

00002a80 <__ultoa_invert>:
    2a80:	fa 01       	movw	r30, r20
    2a82:	aa 27       	eor	r26, r26
    2a84:	28 30       	cpi	r18, 0x08	; 8
    2a86:	51 f1       	breq	.+84     	; 0x2adc <__ultoa_invert+0x5c>
    2a88:	20 31       	cpi	r18, 0x10	; 16
    2a8a:	81 f1       	breq	.+96     	; 0x2aec <__ultoa_invert+0x6c>
    2a8c:	e8 94       	clt
    2a8e:	6f 93       	push	r22
    2a90:	6e 7f       	andi	r22, 0xFE	; 254
    2a92:	6e 5f       	subi	r22, 0xFE	; 254
    2a94:	7f 4f       	sbci	r23, 0xFF	; 255
    2a96:	8f 4f       	sbci	r24, 0xFF	; 255
    2a98:	9f 4f       	sbci	r25, 0xFF	; 255
    2a9a:	af 4f       	sbci	r26, 0xFF	; 255
    2a9c:	b1 e0       	ldi	r27, 0x01	; 1
    2a9e:	3e d0       	rcall	.+124    	; 0x2b1c <__ultoa_invert+0x9c>
    2aa0:	b4 e0       	ldi	r27, 0x04	; 4
    2aa2:	3c d0       	rcall	.+120    	; 0x2b1c <__ultoa_invert+0x9c>
    2aa4:	67 0f       	add	r22, r23
    2aa6:	78 1f       	adc	r23, r24
    2aa8:	89 1f       	adc	r24, r25
    2aaa:	9a 1f       	adc	r25, r26
    2aac:	a1 1d       	adc	r26, r1
    2aae:	68 0f       	add	r22, r24
    2ab0:	79 1f       	adc	r23, r25
    2ab2:	8a 1f       	adc	r24, r26
    2ab4:	91 1d       	adc	r25, r1
    2ab6:	a1 1d       	adc	r26, r1
    2ab8:	6a 0f       	add	r22, r26
    2aba:	71 1d       	adc	r23, r1
    2abc:	81 1d       	adc	r24, r1
    2abe:	91 1d       	adc	r25, r1
    2ac0:	a1 1d       	adc	r26, r1
    2ac2:	20 d0       	rcall	.+64     	; 0x2b04 <__ultoa_invert+0x84>
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <__ultoa_invert+0x48>
    2ac6:	68 94       	set
    2ac8:	3f 91       	pop	r19
    2aca:	2a e0       	ldi	r18, 0x0A	; 10
    2acc:	26 9f       	mul	r18, r22
    2ace:	11 24       	eor	r1, r1
    2ad0:	30 19       	sub	r19, r0
    2ad2:	30 5d       	subi	r19, 0xD0	; 208
    2ad4:	31 93       	st	Z+, r19
    2ad6:	de f6       	brtc	.-74     	; 0x2a8e <__ultoa_invert+0xe>
    2ad8:	cf 01       	movw	r24, r30
    2ada:	08 95       	ret
    2adc:	46 2f       	mov	r20, r22
    2ade:	47 70       	andi	r20, 0x07	; 7
    2ae0:	40 5d       	subi	r20, 0xD0	; 208
    2ae2:	41 93       	st	Z+, r20
    2ae4:	b3 e0       	ldi	r27, 0x03	; 3
    2ae6:	0f d0       	rcall	.+30     	; 0x2b06 <__ultoa_invert+0x86>
    2ae8:	c9 f7       	brne	.-14     	; 0x2adc <__ultoa_invert+0x5c>
    2aea:	f6 cf       	rjmp	.-20     	; 0x2ad8 <__ultoa_invert+0x58>
    2aec:	46 2f       	mov	r20, r22
    2aee:	4f 70       	andi	r20, 0x0F	; 15
    2af0:	40 5d       	subi	r20, 0xD0	; 208
    2af2:	4a 33       	cpi	r20, 0x3A	; 58
    2af4:	18 f0       	brcs	.+6      	; 0x2afc <__ultoa_invert+0x7c>
    2af6:	49 5d       	subi	r20, 0xD9	; 217
    2af8:	31 fd       	sbrc	r19, 1
    2afa:	40 52       	subi	r20, 0x20	; 32
    2afc:	41 93       	st	Z+, r20
    2afe:	02 d0       	rcall	.+4      	; 0x2b04 <__ultoa_invert+0x84>
    2b00:	a9 f7       	brne	.-22     	; 0x2aec <__ultoa_invert+0x6c>
    2b02:	ea cf       	rjmp	.-44     	; 0x2ad8 <__ultoa_invert+0x58>
    2b04:	b4 e0       	ldi	r27, 0x04	; 4
    2b06:	a6 95       	lsr	r26
    2b08:	97 95       	ror	r25
    2b0a:	87 95       	ror	r24
    2b0c:	77 95       	ror	r23
    2b0e:	67 95       	ror	r22
    2b10:	ba 95       	dec	r27
    2b12:	c9 f7       	brne	.-14     	; 0x2b06 <__ultoa_invert+0x86>
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	61 05       	cpc	r22, r1
    2b18:	71 05       	cpc	r23, r1
    2b1a:	08 95       	ret
    2b1c:	9b 01       	movw	r18, r22
    2b1e:	ac 01       	movw	r20, r24
    2b20:	0a 2e       	mov	r0, r26
    2b22:	06 94       	lsr	r0
    2b24:	57 95       	ror	r21
    2b26:	47 95       	ror	r20
    2b28:	37 95       	ror	r19
    2b2a:	27 95       	ror	r18
    2b2c:	ba 95       	dec	r27
    2b2e:	c9 f7       	brne	.-14     	; 0x2b22 <__ultoa_invert+0xa2>
    2b30:	62 0f       	add	r22, r18
    2b32:	73 1f       	adc	r23, r19
    2b34:	84 1f       	adc	r24, r20
    2b36:	95 1f       	adc	r25, r21
    2b38:	a0 1d       	adc	r26, r0
    2b3a:	08 95       	ret

00002b3c <_exit>:
    2b3c:	f8 94       	cli

00002b3e <__stop_program>:
    2b3e:	ff cf       	rjmp	.-2      	; 0x2b3e <__stop_program>
