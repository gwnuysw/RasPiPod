
WifiTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000250  00800200  000029f4  00002a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000668  00800450  00800450  00002cd8  2**0
                  ALLOC
  3 .stab         00002784  00000000  00000000  00002cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000095a  00000000  00000000  0000545c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00005db8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000230b  00000000  00000000  00005f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e73  00000000  00000000  000082a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014e2  00000000  00000000  00009116  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000944  00000000  00000000  0000a5f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000992  00000000  00000000  0000af3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002650  00000000  00000000  0000b8ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000df1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_23>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_51>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 ef       	ldi	r30, 0xF4	; 244
      fc:	f9 e2       	ldi	r31, 0x29	; 41
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 35       	cpi	r26, 0x50	; 80
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	1a e0       	ldi	r17, 0x0A	; 10
     112:	a0 e5       	ldi	r26, 0x50	; 80
     114:	b4 e0       	ldi	r27, 0x04	; 4
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a8 3b       	cpi	r26, 0xB8	; 184
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <main>
     124:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <AdcInit>:
// ATmega2560 ADC Channel : 0(ADC0) ~ 7(ADC7), Single Ended Input
void AdcInit(unsigned char ucAdcChannel)
{
	// Internal 2.56V Voltage Reference with external capacitor at AREF pin
//	ADMUX	=	0xC0 | ucAdcChannel;     		// ADC Channel
	ADMUX	=	(1<<REFS1) | (1<<REFS0) | ucAdcChannel;     		// ADC Channel
     12c:	80 6c       	ori	r24, 0xC0	; 192
     12e:	80 93 7c 00 	sts	0x007C, r24

	// ADC Module Enable, Free Running Mode, ADC Prescaler : 64
	// ADC Auto Trigger Enable
//	ADCSRA	=	0xA7;
	ADCSRA	=	(1<<ADEN)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     132:	ea e7       	ldi	r30, 0x7A	; 122
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	87 ea       	ldi	r24, 0xA7	; 167
     138:	80 83       	st	Z, r24
//	ADCSRA	|=	0x40;			// ADC start conversion
	ADCSRA	|=	(1<<ADSC);		// ADC start conversion
     13a:	80 81       	ld	r24, Z
     13c:	80 64       	ori	r24, 0x40	; 64
     13e:	80 83       	st	Z, r24
}
     140:	08 95       	ret

00000142 <AdcRead>:
unsigned int AdcRead(void)
{
	unsigned char ucLowValue = 0;
	unsigned char ucHighValue = 0;
	unsigned int unAdcValue = 0;
	while ((ADCSRA&0x10)==0x00);	// ADC Î≥ÄÌôòÏù¥ ÎÅùÎÇ†ÎñÑ ÍπåÏßÄ ÎåÄÍ∏∞
     142:	ea e7       	ldi	r30, 0x7A	; 122
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	84 ff       	sbrs	r24, 4
     14a:	fd cf       	rjmp	.-6      	; 0x146 <AdcRead+0x4>
	
	ucLowValue = ADCL;				//ÌïòÏúÑ 8bit
     14c:	80 91 78 00 	lds	r24, 0x0078
	ucHighValue	= ADCH ;			//ÏÉÅÏúÑ 2bit
     150:	90 91 79 00 	lds	r25, 0x0079
	
	unAdcValue = (ucHighValue << 8) | ucLowValue;
     154:	39 2f       	mov	r19, r25
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	82 2b       	or	r24, r18
     15c:	93 2b       	or	r25, r19
//	debugprint("unAdcValue : %d\r\n", unAdcValue);
	
	return unAdcValue;
     15e:	08 95       	ret

00000160 <__vector_23>:
//unsigned int gun_AdcValue	=	0;
unsigned char guc_OverflowCnt	=	0;
unsigned int n_flag_getADC = 0;

ISR (TIMER0_OVF_vect)	// Timer0 Overflow0 ISR
{
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	0f 92       	push	r0
     168:	11 24       	eor	r1, r1
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
	cli();																	//----------------v ±‚¥… ∫π∫Ÿ
     17a:	f8 94       	cli
	// 0.01sø° ø¿πˆ«√∑ŒøÏ πﬂª˝, 1/(14745600Hz/1024)•™144 = 0.01s
	TCNT0	=	0xff - 144;
     17c:	8f e6       	ldi	r24, 0x6F	; 111
     17e:	86 bd       	out	0x26, r24	; 38

	timerCouter++;
     180:	80 91 5f 04 	lds	r24, 0x045F
     184:	90 91 60 04 	lds	r25, 0x0460
     188:	a0 91 61 04 	lds	r26, 0x0461
     18c:	b0 91 62 04 	lds	r27, 0x0462
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	a1 1d       	adc	r26, r1
     194:	b1 1d       	adc	r27, r1
     196:	80 93 5f 04 	sts	0x045F, r24
     19a:	90 93 60 04 	sts	0x0460, r25
     19e:	a0 93 61 04 	sts	0x0461, r26
     1a2:	b0 93 62 04 	sts	0x0462, r27
	
	if ( timerCouter >= setTimerCheckCounter )
     1a6:	40 91 5f 04 	lds	r20, 0x045F
     1aa:	50 91 60 04 	lds	r21, 0x0460
     1ae:	60 91 61 04 	lds	r22, 0x0461
     1b2:	70 91 62 04 	lds	r23, 0x0462
     1b6:	80 91 5b 04 	lds	r24, 0x045B
     1ba:	90 91 5c 04 	lds	r25, 0x045C
     1be:	a0 91 5d 04 	lds	r26, 0x045D
     1c2:	b0 91 5e 04 	lds	r27, 0x045E
     1c6:	48 17       	cp	r20, r24
     1c8:	59 07       	cpc	r21, r25
     1ca:	6a 07       	cpc	r22, r26
     1cc:	7b 07       	cpc	r23, r27
     1ce:	58 f0       	brcs	.+22     	; 0x1e6 <__vector_23+0x86>
	{
		flagOverflowSetTimer = 1;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	80 93 5a 04 	sts	0x045A, r24
		timerCouter = 0;
     1d6:	10 92 5f 04 	sts	0x045F, r1
     1da:	10 92 60 04 	sts	0x0460, r1
     1de:	10 92 61 04 	sts	0x0461, r1
     1e2:	10 92 62 04 	sts	0x0462, r1
	}
	sei();
     1e6:	78 94       	sei
														//-------------------------------------^±‚¥… ∫π∫Ÿ
	guc_OverflowCnt++;
     1e8:	80 91 52 04 	lds	r24, 0x0452
     1ec:	8f 5f       	subi	r24, 0xFF	; 255
     1ee:	80 93 52 04 	sts	0x0452, r24

	if (guc_OverflowCnt == 100)		// 0.003s * 100 = 0.3s
     1f2:	84 36       	cpi	r24, 0x64	; 100
     1f4:	41 f4       	brne	.+16     	; 0x206 <__vector_23+0xa6>
	{
		guc_OverflowCnt	=	0;
     1f6:	10 92 52 04 	sts	0x0452, r1
		n_flag_getADC = 1;
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	90 93 51 04 	sts	0x0451, r25
     202:	80 93 50 04 	sts	0x0450, r24
	}
}
     206:	bf 91       	pop	r27
     208:	af 91       	pop	r26
     20a:	9f 91       	pop	r25
     20c:	8f 91       	pop	r24
     20e:	7f 91       	pop	r23
     210:	6f 91       	pop	r22
     212:	5f 91       	pop	r21
     214:	4f 91       	pop	r20
     216:	0f 90       	pop	r0
     218:	0f be       	out	0x3f, r0	; 63
     21a:	0f 90       	pop	r0
     21c:	1f 90       	pop	r1
     21e:	18 95       	reti

00000220 <putCh2>:
     220:	e0 ed       	ldi	r30, 0xD0	; 208
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	90 81       	ld	r25, Z
     226:	95 ff       	sbrs	r25, 5
     228:	fd cf       	rjmp	.-6      	; 0x224 <putCh2+0x4>
     22a:	80 93 d6 00 	sts	0x00D6, r24
     22e:	08 95       	ret

00000230 <__vector_51>:
     230:	1f 92       	push	r1
     232:	0f 92       	push	r0
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	0f 92       	push	r0
     238:	0b b6       	in	r0, 0x3b	; 59
     23a:	0f 92       	push	r0
     23c:	11 24       	eor	r1, r1
     23e:	8f 93       	push	r24
     240:	9f 93       	push	r25
     242:	ef 93       	push	r30
     244:	ff 93       	push	r31
     246:	90 91 53 04 	lds	r25, 0x0453
     24a:	80 91 d6 00 	lds	r24, 0x00D6
     24e:	e5 e6       	ldi	r30, 0x65	; 101
     250:	f4 e0       	ldi	r31, 0x04	; 4
     252:	e9 0f       	add	r30, r25
     254:	f1 1d       	adc	r31, r1
     256:	80 83       	st	Z, r24
     258:	80 91 53 04 	lds	r24, 0x0453
     25c:	8f 5f       	subi	r24, 0xFF	; 255
     25e:	80 93 53 04 	sts	0x0453, r24
     262:	80 91 53 04 	lds	r24, 0x0453
     266:	80 34       	cpi	r24, 0x40	; 64
     268:	10 f0       	brcs	.+4      	; 0x26e <__vector_51+0x3e>
     26a:	10 92 53 04 	sts	0x0453, r1
     26e:	ff 91       	pop	r31
     270:	ef 91       	pop	r30
     272:	9f 91       	pop	r25
     274:	8f 91       	pop	r24
     276:	0f 90       	pop	r0
     278:	0b be       	out	0x3b, r0	; 59
     27a:	0f 90       	pop	r0
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	0f 90       	pop	r0
     280:	1f 90       	pop	r1
     282:	18 95       	reti

00000284 <debugInit>:
     284:	e1 e0       	ldi	r30, 0x01	; 1
     286:	f1 e0       	ldi	r31, 0x01	; 1
     288:	80 81       	ld	r24, Z
     28a:	8c 7f       	andi	r24, 0xFC	; 252
     28c:	80 83       	st	Z, r24
     28e:	e2 e0       	ldi	r30, 0x02	; 2
     290:	f1 e0       	ldi	r31, 0x01	; 1
     292:	80 81       	ld	r24, Z
     294:	80 83       	st	Z, r24
     296:	10 92 d0 00 	sts	0x00D0, r1
     29a:	88 e9       	ldi	r24, 0x98	; 152
     29c:	80 93 d1 00 	sts	0x00D1, r24
     2a0:	86 e0       	ldi	r24, 0x06	; 6
     2a2:	80 93 d2 00 	sts	0x00D2, r24
     2a6:	10 92 d5 00 	sts	0x00D5, r1
     2aa:	87 e0       	ldi	r24, 0x07	; 7
     2ac:	80 93 d4 00 	sts	0x00D4, r24
     2b0:	08 95       	ret

000002b2 <debugprint>:
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
     2be:	c0 58       	subi	r28, 0x80	; 128
     2c0:	d0 40       	sbci	r29, 0x00	; 0
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	de bf       	out	0x3e, r29	; 62
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	cd bf       	out	0x3d, r28	; 61
     2cc:	fe 01       	movw	r30, r28
     2ce:	e8 57       	subi	r30, 0x78	; 120
     2d0:	ff 4f       	sbci	r31, 0xFF	; 255
     2d2:	61 91       	ld	r22, Z+
     2d4:	71 91       	ld	r23, Z+
     2d6:	ce 01       	movw	r24, r28
     2d8:	01 96       	adiw	r24, 0x01	; 1
     2da:	4e 2f       	mov	r20, r30
     2dc:	5f 2f       	mov	r21, r31
     2de:	0e 94 28 12 	call	0x2450	; 0x2450 <vsprintf>
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	88 23       	and	r24, r24
     2e6:	51 f0       	breq	.+20     	; 0x2fc <debugprint+0x4a>
     2e8:	8e 01       	movw	r16, r28
     2ea:	0e 5f       	subi	r16, 0xFE	; 254
     2ec:	1f 4f       	sbci	r17, 0xFF	; 255
     2ee:	0e 94 10 01 	call	0x220	; 0x220 <putCh2>
     2f2:	f8 01       	movw	r30, r16
     2f4:	81 91       	ld	r24, Z+
     2f6:	8f 01       	movw	r16, r30
     2f8:	88 23       	and	r24, r24
     2fa:	c9 f7       	brne	.-14     	; 0x2ee <debugprint+0x3c>
     2fc:	c0 58       	subi	r28, 0x80	; 128
     2fe:	df 4f       	sbci	r29, 0xFF	; 255
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	de bf       	out	0x3e, r29	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	cd bf       	out	0x3d, r28	; 61
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	1f 91       	pop	r17
     310:	0f 91       	pop	r16
     312:	08 95       	ret

00000314 <debugConsoleMain>:
     314:	80 91 53 04 	lds	r24, 0x0453
     318:	88 23       	and	r24, r24
     31a:	79 f0       	breq	.+30     	; 0x33a <debugConsoleMain+0x26>
     31c:	80 91 53 04 	lds	r24, 0x0453
     320:	88 23       	and	r24, r24
     322:	49 f0       	breq	.+18     	; 0x336 <debugConsoleMain+0x22>
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	01 96       	adiw	r24, 0x01	; 1
     32a:	20 91 53 04 	lds	r18, 0x0453
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	82 17       	cp	r24, r18
     332:	93 07       	cpc	r25, r19
     334:	cc f3       	brlt	.-14     	; 0x328 <debugConsoleMain+0x14>
     336:	10 92 53 04 	sts	0x0453, r1
     33a:	08 95       	ret

0000033c <putCh0>:
     33c:	e0 ec       	ldi	r30, 0xC0	; 192
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	90 81       	ld	r25, Z
     342:	95 ff       	sbrs	r25, 5
     344:	fd cf       	rjmp	.-6      	; 0x340 <putCh0+0x4>
     346:	80 93 c6 00 	sts	0x00C6, r24
     34a:	08 95       	ret

0000034c <__vector_25>:
     34c:	1f 92       	push	r1
     34e:	0f 92       	push	r0
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	0f 92       	push	r0
     354:	0b b6       	in	r0, 0x3b	; 59
     356:	0f 92       	push	r0
     358:	11 24       	eor	r1, r1
     35a:	8f 93       	push	r24
     35c:	9f 93       	push	r25
     35e:	ef 93       	push	r30
     360:	ff 93       	push	r31
     362:	90 91 59 04 	lds	r25, 0x0459
     366:	80 91 c6 00 	lds	r24, 0x00C6
     36a:	e5 ea       	ldi	r30, 0xA5	; 165
     36c:	f6 e0       	ldi	r31, 0x06	; 6
     36e:	e9 0f       	add	r30, r25
     370:	f1 1d       	adc	r31, r1
     372:	80 83       	st	Z, r24
     374:	80 91 59 04 	lds	r24, 0x0459
     378:	8f 5f       	subi	r24, 0xFF	; 255
     37a:	80 93 59 04 	sts	0x0459, r24
     37e:	80 91 59 04 	lds	r24, 0x0459
     382:	ff 91       	pop	r31
     384:	ef 91       	pop	r30
     386:	9f 91       	pop	r25
     388:	8f 91       	pop	r24
     38a:	0f 90       	pop	r0
     38c:	0b be       	out	0x3b, r0	; 59
     38e:	0f 90       	pop	r0
     390:	0f be       	out	0x3f, r0	; 63
     392:	0f 90       	pop	r0
     394:	1f 90       	pop	r1
     396:	18 95       	reti

00000398 <wifiAndBTModuleReset>:
     398:	56 98       	cbi	0x0a, 6	; 10
     39a:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     39c:	89 e9       	ldi	r24, 0x99	; 153
     39e:	99 e5       	ldi	r25, 0x59	; 89
     3a0:	a1 e0       	ldi	r26, 0x01	; 1
     3a2:	81 50       	subi	r24, 0x01	; 1
     3a4:	90 40       	sbci	r25, 0x00	; 0
     3a6:	a0 40       	sbci	r26, 0x00	; 0
     3a8:	e1 f7       	brne	.-8      	; 0x3a2 <wifiAndBTModuleReset+0xa>
     3aa:	00 00       	nop
     3ac:	56 9a       	sbi	0x0a, 6	; 10
     3ae:	8f ef       	ldi	r24, 0xFF	; 255
     3b0:	9f e3       	ldi	r25, 0x3F	; 63
     3b2:	a2 e0       	ldi	r26, 0x02	; 2
     3b4:	81 50       	subi	r24, 0x01	; 1
     3b6:	90 40       	sbci	r25, 0x00	; 0
     3b8:	a0 40       	sbci	r26, 0x00	; 0
     3ba:	e1 f7       	brne	.-8      	; 0x3b4 <wifiAndBTModuleReset+0x1c>
     3bc:	00 c0       	rjmp	.+0      	; 0x3be <wifiAndBTModuleReset+0x26>
     3be:	00 00       	nop
     3c0:	56 98       	cbi	0x0a, 6	; 10
     3c2:	5e 9a       	sbi	0x0b, 6	; 11
     3c4:	8f ef       	ldi	r24, 0xFF	; 255
     3c6:	9f ef       	ldi	r25, 0xFF	; 255
     3c8:	a9 e5       	ldi	r26, 0x59	; 89
     3ca:	81 50       	subi	r24, 0x01	; 1
     3cc:	90 40       	sbci	r25, 0x00	; 0
     3ce:	a0 40       	sbci	r26, 0x00	; 0
     3d0:	e1 f7       	brne	.-8      	; 0x3ca <wifiAndBTModuleReset+0x32>
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <wifiAndBTModuleReset+0x3c>
     3d4:	00 00       	nop
     3d6:	08 95       	ret

000003d8 <wifiEnable>:
     3d8:	88 23       	and	r24, r24
     3da:	11 f0       	breq	.+4      	; 0x3e0 <wifiEnable+0x8>
     3dc:	5f 9a       	sbi	0x0b, 7	; 11
     3de:	01 c0       	rjmp	.+2      	; 0x3e2 <wifiEnable+0xa>
     3e0:	5f 98       	cbi	0x0b, 7	; 11
     3e2:	8f ef       	ldi	r24, 0xFF	; 255
     3e4:	9f ef       	ldi	r25, 0xFF	; 255
     3e6:	a8 e0       	ldi	r26, 0x08	; 8
     3e8:	81 50       	subi	r24, 0x01	; 1
     3ea:	90 40       	sbci	r25, 0x00	; 0
     3ec:	a0 40       	sbci	r26, 0x00	; 0
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <wifiEnable+0x10>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <wifiEnable+0x1a>
     3f2:	00 00       	nop
     3f4:	08 95       	ret

000003f6 <wifiInit>:
     3f6:	8d b1       	in	r24, 0x0d	; 13
     3f8:	8c 7f       	andi	r24, 0xFC	; 252
     3fa:	8d b9       	out	0x0d, r24	; 13
     3fc:	8e b1       	in	r24, 0x0e	; 14
     3fe:	8e b9       	out	0x0e, r24	; 14
     400:	10 92 c0 00 	sts	0x00C0, r1
     404:	88 e9       	ldi	r24, 0x98	; 152
     406:	80 93 c1 00 	sts	0x00C1, r24
     40a:	86 e0       	ldi	r24, 0x06	; 6
     40c:	80 93 c2 00 	sts	0x00C2, r24
     410:	10 92 c5 00 	sts	0x00C5, r1
     414:	87 e0       	ldi	r24, 0x07	; 7
     416:	80 93 c4 00 	sts	0x00C4, r24
     41a:	57 9a       	sbi	0x0a, 7	; 10
     41c:	5f 9a       	sbi	0x0b, 7	; 11
     41e:	0e 94 cc 01 	call	0x398	; 0x398 <wifiAndBTModuleReset>
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	9f e7       	ldi	r25, 0x7F	; 127
     426:	a4 e0       	ldi	r26, 0x04	; 4
     428:	81 50       	subi	r24, 0x01	; 1
     42a:	90 40       	sbci	r25, 0x00	; 0
     42c:	a0 40       	sbci	r26, 0x00	; 0
     42e:	e1 f7       	brne	.-8      	; 0x428 <wifiInit+0x32>
     430:	00 c0       	rjmp	.+0      	; 0x432 <wifiInit+0x3c>
     432:	00 00       	nop
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <wifiEnable>
     43a:	10 92 a6 0a 	sts	0x0AA6, r1
     43e:	10 92 a5 0a 	sts	0x0AA5, r1
     442:	08 95       	ret

00000444 <wifiprint>:
     444:	0f 93       	push	r16
     446:	1f 93       	push	r17
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	c0 58       	subi	r28, 0x80	; 128
     452:	d0 40       	sbci	r29, 0x00	; 0
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	fe 01       	movw	r30, r28
     460:	e8 57       	subi	r30, 0x78	; 120
     462:	ff 4f       	sbci	r31, 0xFF	; 255
     464:	61 91       	ld	r22, Z+
     466:	71 91       	ld	r23, Z+
     468:	ce 01       	movw	r24, r28
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	4e 2f       	mov	r20, r30
     46e:	5f 2f       	mov	r21, r31
     470:	0e 94 28 12 	call	0x2450	; 0x2450 <vsprintf>
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	88 23       	and	r24, r24
     478:	51 f0       	breq	.+20     	; 0x48e <wifiprint+0x4a>
     47a:	8e 01       	movw	r16, r28
     47c:	0e 5f       	subi	r16, 0xFE	; 254
     47e:	1f 4f       	sbci	r17, 0xFF	; 255
     480:	0e 94 9e 01 	call	0x33c	; 0x33c <putCh0>
     484:	f8 01       	movw	r30, r16
     486:	81 91       	ld	r24, Z+
     488:	8f 01       	movw	r16, r30
     48a:	88 23       	and	r24, r24
     48c:	c9 f7       	brne	.-14     	; 0x480 <wifiprint+0x3c>
     48e:	c0 58       	subi	r28, 0x80	; 128
     490:	df 4f       	sbci	r29, 0xFF	; 255
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	f8 94       	cli
     496:	de bf       	out	0x3e, r29	; 62
     498:	0f be       	out	0x3f, r0	; 63
     49a:	cd bf       	out	0x3d, r28	; 61
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	08 95       	ret

000004a6 <parsingIPDRxData>:
     4a6:	8f 92       	push	r8
     4a8:	9f 92       	push	r9
     4aa:	af 92       	push	r10
     4ac:	bf 92       	push	r11
     4ae:	cf 92       	push	r12
     4b0:	df 92       	push	r13
     4b2:	ef 92       	push	r14
     4b4:	ff 92       	push	r15
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
     4c2:	2a 97       	sbiw	r28, 0x0a	; 10
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	6c 01       	movw	r12, r24
     4d0:	7b 01       	movw	r14, r22
     4d2:	16 16       	cp	r1, r22
     4d4:	17 06       	cpc	r1, r23
     4d6:	0c f0       	brlt	.+2      	; 0x4da <parsingIPDRxData+0x34>
     4d8:	76 c0       	rjmp	.+236    	; 0x5c6 <parsingIPDRxData+0x120>
     4da:	fc 01       	movw	r30, r24
     4dc:	80 81       	ld	r24, Z
     4de:	8a 33       	cpi	r24, 0x3A	; 58
     4e0:	c1 f0       	breq	.+48     	; 0x512 <parsingIPDRxData+0x6c>
     4e2:	31 96       	adiw	r30, 0x01	; 1
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <parsingIPDRxData+0x4a>
     4ea:	21 91       	ld	r18, Z+
     4ec:	2a 33       	cpi	r18, 0x3A	; 58
     4ee:	31 f0       	breq	.+12     	; 0x4fc <parsingIPDRxData+0x56>
     4f0:	01 96       	adiw	r24, 0x01	; 1
     4f2:	8e 15       	cp	r24, r14
     4f4:	9f 05       	cpc	r25, r15
     4f6:	c9 f7       	brne	.-14     	; 0x4ea <parsingIPDRxData+0x44>
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	6e c0       	rjmp	.+220    	; 0x5d8 <parsingIPDRxData+0x132>
     4fc:	ff ef       	ldi	r31, 0xFF	; 255
     4fe:	8f 3f       	cpi	r24, 0xFF	; 255
     500:	9f 07       	cpc	r25, r31
     502:	09 f4       	brne	.+2      	; 0x506 <parsingIPDRxData+0x60>
     504:	62 c0       	rjmp	.+196    	; 0x5ca <parsingIPDRxData+0x124>
     506:	5c 01       	movw	r10, r24
     508:	8c 30       	cpi	r24, 0x0C	; 12
     50a:	91 05       	cpc	r25, r1
     50c:	0c f0       	brlt	.+2      	; 0x510 <parsingIPDRxData+0x6a>
     50e:	5f c0       	rjmp	.+190    	; 0x5ce <parsingIPDRxData+0x128>
     510:	02 c0       	rjmp	.+4      	; 0x516 <parsingIPDRxData+0x70>
     512:	aa 24       	eor	r10, r10
     514:	bb 24       	eor	r11, r11
     516:	85 01       	movw	r16, r10
     518:	05 50       	subi	r16, 0x05	; 5
     51a:	10 40       	sbci	r17, 0x00	; 0
     51c:	b6 01       	movw	r22, r12
     51e:	6b 5f       	subi	r22, 0xFB	; 251
     520:	7f 4f       	sbci	r23, 0xFF	; 255
     522:	ce 01       	movw	r24, r28
     524:	01 96       	adiw	r24, 0x01	; 1
     526:	40 2f       	mov	r20, r16
     528:	51 2f       	mov	r21, r17
     52a:	0e 94 da 11 	call	0x23b4	; 0x23b4 <memcpy>
     52e:	e1 e0       	ldi	r30, 0x01	; 1
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	ec 0f       	add	r30, r28
     534:	fd 1f       	adc	r31, r29
     536:	e0 0f       	add	r30, r16
     538:	f1 1f       	adc	r31, r17
     53a:	10 82       	st	Z, r1
     53c:	ce 01       	movw	r24, r28
     53e:	01 96       	adiw	r24, 0x01	; 1
     540:	0e 94 bc 11 	call	0x2378	; 0x2378 <atoi>
     544:	ac 01       	movw	r20, r24
     546:	00 97       	sbiw	r24, 0x00	; 0
     548:	09 f4       	brne	.+2      	; 0x54c <parsingIPDRxData+0xa6>
     54a:	43 c0       	rjmp	.+134    	; 0x5d2 <parsingIPDRxData+0x12c>
     54c:	ea 18       	sub	r14, r10
     54e:	fb 08       	sbc	r15, r11
     550:	87 01       	movw	r16, r14
     552:	01 50       	subi	r16, 0x01	; 1
     554:	10 40       	sbci	r17, 0x00	; 0
     556:	08 17       	cp	r16, r24
     558:	19 07       	cpc	r17, r25
     55a:	34 f5       	brge	.+76     	; 0x5a8 <parsingIPDRxData+0x102>
     55c:	c7 01       	movw	r24, r14
     55e:	01 96       	adiw	r24, 0x01	; 1
     560:	84 17       	cp	r24, r20
     562:	95 07       	cpc	r25, r21
     564:	c1 f5       	brne	.+112    	; 0x5d6 <parsingIPDRxData+0x130>
     566:	90 93 58 04 	sts	0x0458, r25
     56a:	80 93 57 04 	sts	0x0457, r24
     56e:	0f 2e       	mov	r0, r31
     570:	f5 ea       	ldi	r31, 0xA5	; 165
     572:	8f 2e       	mov	r8, r31
     574:	f4 e0       	ldi	r31, 0x04	; 4
     576:	9f 2e       	mov	r9, r31
     578:	f0 2d       	mov	r31, r0
     57a:	b5 01       	movw	r22, r10
     57c:	6f 5f       	subi	r22, 0xFF	; 255
     57e:	7f 4f       	sbci	r23, 0xFF	; 255
     580:	6c 0d       	add	r22, r12
     582:	7d 1d       	adc	r23, r13
     584:	88 2d       	mov	r24, r8
     586:	99 2d       	mov	r25, r9
     588:	40 2f       	mov	r20, r16
     58a:	51 2f       	mov	r21, r17
     58c:	0e 94 da 11 	call	0x23b4	; 0x23b4 <memcpy>
     590:	f4 01       	movw	r30, r8
     592:	e0 0f       	add	r30, r16
     594:	f1 1f       	adc	r31, r17
     596:	8d e0       	ldi	r24, 0x0D	; 13
     598:	80 83       	st	Z, r24
     59a:	f4 01       	movw	r30, r8
     59c:	ee 0d       	add	r30, r14
     59e:	ff 1d       	adc	r31, r15
     5a0:	8a e0       	ldi	r24, 0x0A	; 10
     5a2:	80 83       	st	Z, r24
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	18 c0       	rjmp	.+48     	; 0x5d8 <parsingIPDRxData+0x132>
     5a8:	90 93 58 04 	sts	0x0458, r25
     5ac:	80 93 57 04 	sts	0x0457, r24
     5b0:	85 ea       	ldi	r24, 0xA5	; 165
     5b2:	94 e0       	ldi	r25, 0x04	; 4
     5b4:	b5 01       	movw	r22, r10
     5b6:	6f 5f       	subi	r22, 0xFF	; 255
     5b8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ba:	6c 0d       	add	r22, r12
     5bc:	7d 1d       	adc	r23, r13
     5be:	0e 94 da 11 	call	0x23b4	; 0x23b4 <memcpy>
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	09 c0       	rjmp	.+18     	; 0x5d8 <parsingIPDRxData+0x132>
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	07 c0       	rjmp	.+14     	; 0x5d8 <parsingIPDRxData+0x132>
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	05 c0       	rjmp	.+10     	; 0x5d8 <parsingIPDRxData+0x132>
     5ce:	82 e0       	ldi	r24, 0x02	; 2
     5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <parsingIPDRxData+0x132>
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <parsingIPDRxData+0x132>
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	2a 96       	adiw	r28, 0x0a	; 10
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	df 90       	pop	r13
     5f2:	cf 90       	pop	r12
     5f4:	bf 90       	pop	r11
     5f6:	af 90       	pop	r10
     5f8:	9f 90       	pop	r9
     5fa:	8f 90       	pop	r8
     5fc:	08 95       	ret

000005fe <parsingMsg>:
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	ec 01       	movw	r28, r24
     608:	8b 01       	movw	r16, r22
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	72 e0       	ldi	r23, 0x02	; 2
     60e:	42 e0       	ldi	r20, 0x02	; 2
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <strncmp>
     616:	28 2f       	mov	r18, r24
     618:	39 2f       	mov	r19, r25
     61a:	21 15       	cp	r18, r1
     61c:	31 05       	cpc	r19, r1
     61e:	09 f4       	brne	.+2      	; 0x622 <parsingMsg+0x24>
     620:	6a c0       	rjmp	.+212    	; 0x6f6 <parsingMsg+0xf8>
     622:	88 81       	ld	r24, Y
     624:	8e 33       	cpi	r24, 0x3E	; 62
     626:	09 f4       	brne	.+2      	; 0x62a <parsingMsg+0x2c>
     628:	68 c0       	rjmp	.+208    	; 0x6fa <parsingMsg+0xfc>
     62a:	07 30       	cpi	r16, 0x07	; 7
     62c:	11 05       	cpc	r17, r1
     62e:	6c f0       	brlt	.+26     	; 0x64a <parsingMsg+0x4c>
     630:	ce 01       	movw	r24, r28
     632:	63 e0       	ldi	r22, 0x03	; 3
     634:	72 e0       	ldi	r23, 0x02	; 2
     636:	47 e0       	ldi	r20, 0x07	; 7
     638:	50 e0       	ldi	r21, 0x00	; 0
     63a:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <strncmp>
     63e:	28 2f       	mov	r18, r24
     640:	39 2f       	mov	r19, r25
     642:	21 15       	cp	r18, r1
     644:	31 05       	cpc	r19, r1
     646:	09 f4       	brne	.+2      	; 0x64a <parsingMsg+0x4c>
     648:	5a c0       	rjmp	.+180    	; 0x6fe <parsingMsg+0x100>
     64a:	04 30       	cpi	r16, 0x04	; 4
     64c:	11 05       	cpc	r17, r1
     64e:	c4 f0       	brlt	.+48     	; 0x680 <parsingMsg+0x82>
     650:	ce 01       	movw	r24, r28
     652:	6b e0       	ldi	r22, 0x0B	; 11
     654:	72 e0       	ldi	r23, 0x02	; 2
     656:	44 e0       	ldi	r20, 0x04	; 4
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <strncmp>
     65e:	28 2f       	mov	r18, r24
     660:	39 2f       	mov	r19, r25
     662:	21 15       	cp	r18, r1
     664:	31 05       	cpc	r19, r1
     666:	61 f4       	brne	.+24     	; 0x680 <parsingMsg+0x82>
     668:	ce 01       	movw	r24, r28
     66a:	b8 01       	movw	r22, r16
     66c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <parsingIPDRxData>
     670:	88 23       	and	r24, r24
     672:	09 f4       	brne	.+2      	; 0x676 <parsingMsg+0x78>
     674:	46 c0       	rjmp	.+140    	; 0x702 <parsingMsg+0x104>
     676:	81 30       	cpi	r24, 0x01	; 1
     678:	09 f0       	breq	.+2      	; 0x67c <parsingMsg+0x7e>
     67a:	45 c0       	rjmp	.+138    	; 0x706 <parsingMsg+0x108>
     67c:	84 e0       	ldi	r24, 0x04	; 4
     67e:	4e c0       	rjmp	.+156    	; 0x71c <parsingMsg+0x11e>
     680:	05 30       	cpi	r16, 0x05	; 5
     682:	11 05       	cpc	r17, r1
     684:	64 f0       	brlt	.+24     	; 0x69e <parsingMsg+0xa0>
     686:	ce 01       	movw	r24, r28
     688:	61 e1       	ldi	r22, 0x11	; 17
     68a:	72 e0       	ldi	r23, 0x02	; 2
     68c:	45 e0       	ldi	r20, 0x05	; 5
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <strncmp>
     694:	28 2f       	mov	r18, r24
     696:	39 2f       	mov	r19, r25
     698:	21 15       	cp	r18, r1
     69a:	31 05       	cpc	r19, r1
     69c:	b1 f1       	breq	.+108    	; 0x70a <parsingMsg+0x10c>
     69e:	04 30       	cpi	r16, 0x04	; 4
     6a0:	11 05       	cpc	r17, r1
     6a2:	64 f0       	brlt	.+24     	; 0x6bc <parsingMsg+0xbe>
     6a4:	ce 01       	movw	r24, r28
     6a6:	67 e1       	ldi	r22, 0x17	; 23
     6a8:	72 e0       	ldi	r23, 0x02	; 2
     6aa:	45 e0       	ldi	r20, 0x05	; 5
     6ac:	50 e0       	ldi	r21, 0x00	; 0
     6ae:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <strncmp>
     6b2:	28 2f       	mov	r18, r24
     6b4:	39 2f       	mov	r19, r25
     6b6:	21 15       	cp	r18, r1
     6b8:	31 05       	cpc	r19, r1
     6ba:	49 f1       	breq	.+82     	; 0x70e <parsingMsg+0x110>
     6bc:	07 30       	cpi	r16, 0x07	; 7
     6be:	11 05       	cpc	r17, r1
     6c0:	44 f1       	brlt	.+80     	; 0x712 <parsingMsg+0x114>
     6c2:	ce 01       	movw	r24, r28
     6c4:	6c e1       	ldi	r22, 0x1C	; 28
     6c6:	72 e0       	ldi	r23, 0x02	; 2
     6c8:	47 e0       	ldi	r20, 0x07	; 7
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <strncmp>
     6d0:	28 2f       	mov	r18, r24
     6d2:	39 2f       	mov	r19, r25
     6d4:	21 15       	cp	r18, r1
     6d6:	31 05       	cpc	r19, r1
     6d8:	f1 f0       	breq	.+60     	; 0x716 <parsingMsg+0x118>
     6da:	ce 01       	movw	r24, r28
     6dc:	64 e2       	ldi	r22, 0x24	; 36
     6de:	72 e0       	ldi	r23, 0x02	; 2
     6e0:	47 e0       	ldi	r20, 0x07	; 7
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <strncmp>
     6e8:	28 2f       	mov	r18, r24
     6ea:	39 2f       	mov	r19, r25
     6ec:	21 15       	cp	r18, r1
     6ee:	31 05       	cpc	r19, r1
     6f0:	a1 f4       	brne	.+40     	; 0x71a <parsingMsg+0x11c>
     6f2:	89 e0       	ldi	r24, 0x09	; 9
     6f4:	13 c0       	rjmp	.+38     	; 0x71c <parsingMsg+0x11e>
     6f6:	82 e0       	ldi	r24, 0x02	; 2
     6f8:	11 c0       	rjmp	.+34     	; 0x71c <parsingMsg+0x11e>
     6fa:	88 e0       	ldi	r24, 0x08	; 8
     6fc:	0f c0       	rjmp	.+30     	; 0x71c <parsingMsg+0x11e>
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	0d c0       	rjmp	.+26     	; 0x71c <parsingMsg+0x11e>
     702:	83 e0       	ldi	r24, 0x03	; 3
     704:	0b c0       	rjmp	.+22     	; 0x71c <parsingMsg+0x11e>
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	09 c0       	rjmp	.+18     	; 0x71c <parsingMsg+0x11e>
     70a:	85 e0       	ldi	r24, 0x05	; 5
     70c:	07 c0       	rjmp	.+14     	; 0x71c <parsingMsg+0x11e>
     70e:	86 e0       	ldi	r24, 0x06	; 6
     710:	05 c0       	rjmp	.+10     	; 0x71c <parsingMsg+0x11e>
     712:	8a e0       	ldi	r24, 0x0A	; 10
     714:	03 c0       	rjmp	.+6      	; 0x71c <parsingMsg+0x11e>
     716:	87 e0       	ldi	r24, 0x07	; 7
     718:	01 c0       	rjmp	.+2      	; 0x71c <parsingMsg+0x11e>
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	08 95       	ret

00000726 <rxDataProcess>:
     726:	2f 92       	push	r2
     728:	3f 92       	push	r3
     72a:	4f 92       	push	r4
     72c:	5f 92       	push	r5
     72e:	6f 92       	push	r6
     730:	7f 92       	push	r7
     732:	8f 92       	push	r8
     734:	9f 92       	push	r9
     736:	af 92       	push	r10
     738:	bf 92       	push	r11
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	c2 50       	subi	r28, 0x02	; 2
     750:	d2 40       	sbci	r29, 0x02	; 2
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	3c 01       	movw	r6, r24
     75e:	c6 2e       	mov	r12, r22
     760:	80 91 59 04 	lds	r24, 0x0459
     764:	88 23       	and	r24, r24
     766:	09 f4       	brne	.+2      	; 0x76a <rxDataProcess+0x44>
     768:	0b c1       	rjmp	.+534    	; 0x980 <rxDataProcess+0x25a>
     76a:	20 91 59 04 	lds	r18, 0x0459
     76e:	80 91 54 04 	lds	r24, 0x0454
     772:	90 91 55 04 	lds	r25, 0x0455
     776:	82 0f       	add	r24, r18
     778:	91 1d       	adc	r25, r1
     77a:	22 e0       	ldi	r18, 0x02	; 2
     77c:	80 30       	cpi	r24, 0x00	; 0
     77e:	92 07       	cpc	r25, r18
     780:	44 f0       	brlt	.+16     	; 0x792 <rxDataProcess+0x6c>
     782:	10 92 55 04 	sts	0x0455, r1
     786:	10 92 54 04 	sts	0x0454, r1
     78a:	10 92 56 04 	sts	0x0456, r1
     78e:	dd 24       	eor	r13, r13
     790:	f8 c0       	rjmp	.+496    	; 0x982 <rxDataProcess+0x25c>
     792:	40 91 59 04 	lds	r20, 0x0459
     796:	85 ea       	ldi	r24, 0xA5	; 165
     798:	98 e0       	ldi	r25, 0x08	; 8
     79a:	65 ea       	ldi	r22, 0xA5	; 165
     79c:	76 e0       	ldi	r23, 0x06	; 6
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	0e 94 da 11 	call	0x23b4	; 0x23b4 <memcpy>
     7a4:	20 91 59 04 	lds	r18, 0x0459
     7a8:	80 91 54 04 	lds	r24, 0x0454
     7ac:	90 91 55 04 	lds	r25, 0x0455
     7b0:	82 0f       	add	r24, r18
     7b2:	91 1d       	adc	r25, r1
     7b4:	90 93 55 04 	sts	0x0455, r25
     7b8:	80 93 54 04 	sts	0x0454, r24
     7bc:	10 92 59 04 	sts	0x0459, r1
     7c0:	dd 24       	eor	r13, r13
     7c2:	aa 24       	eor	r10, r10
     7c4:	bb 24       	eor	r11, r11
     7c6:	88 24       	eor	r8, r8
     7c8:	8a 94       	dec	r8
     7ca:	98 2c       	mov	r9, r8
     7cc:	0f 2e       	mov	r0, r31
     7ce:	f5 ea       	ldi	r31, 0xA5	; 165
     7d0:	ef 2e       	mov	r14, r31
     7d2:	f8 e0       	ldi	r31, 0x08	; 8
     7d4:	ff 2e       	mov	r15, r31
     7d6:	f0 2d       	mov	r31, r0
     7d8:	cf 5f       	subi	r28, 0xFF	; 255
     7da:	dd 4f       	sbci	r29, 0xFD	; 253
     7dc:	e8 82       	st	Y, r14
     7de:	c1 50       	subi	r28, 0x01	; 1
     7e0:	d2 40       	sbci	r29, 0x02	; 2
     7e2:	ce 5f       	subi	r28, 0xFE	; 254
     7e4:	dd 4f       	sbci	r29, 0xFD	; 253
     7e6:	f8 82       	st	Y, r15
     7e8:	c2 50       	subi	r28, 0x02	; 2
     7ea:	d2 40       	sbci	r29, 0x02	; 2
     7ec:	0f 2e       	mov	r0, r31
     7ee:	f7 ea       	ldi	r31, 0xA7	; 167
     7f0:	4f 2e       	mov	r4, r31
     7f2:	f8 e0       	ldi	r31, 0x08	; 8
     7f4:	5f 2e       	mov	r5, r31
     7f6:	f0 2d       	mov	r31, r0
     7f8:	0f 2e       	mov	r0, r31
     7fa:	fe ef       	ldi	r31, 0xFE	; 254
     7fc:	2f 2e       	mov	r2, r31
     7fe:	ff ef       	ldi	r31, 0xFF	; 255
     800:	3f 2e       	mov	r3, r31
     802:	f0 2d       	mov	r31, r0
     804:	24 0c       	add	r2, r4
     806:	35 1c       	adc	r3, r5
     808:	80 91 54 04 	lds	r24, 0x0454
     80c:	90 91 55 04 	lds	r25, 0x0455
     810:	18 16       	cp	r1, r24
     812:	19 06       	cpc	r1, r25
     814:	0c f0       	brlt	.+2      	; 0x818 <rxDataProcess+0xf2>
     816:	9b c0       	rjmp	.+310    	; 0x94e <rxDataProcess+0x228>
     818:	85 01       	movw	r16, r10
     81a:	b4 01       	movw	r22, r8
     81c:	8f ef       	ldi	r24, 0xFF	; 255
     81e:	6f 3f       	cpi	r22, 0xFF	; 255
     820:	78 07       	cpc	r23, r24
     822:	09 f4       	brne	.+2      	; 0x826 <rxDataProcess+0x100>
     824:	83 c0       	rjmp	.+262    	; 0x92c <rxDataProcess+0x206>
     826:	f7 01       	movw	r30, r14
     828:	e0 0f       	add	r30, r16
     82a:	f1 1f       	adc	r31, r17
     82c:	80 81       	ld	r24, Z
     82e:	8a 30       	cpi	r24, 0x0A	; 10
     830:	09 f0       	breq	.+2      	; 0x834 <rxDataProcess+0x10e>
     832:	83 c0       	rjmp	.+262    	; 0x93a <rxDataProcess+0x214>
     834:	cb 01       	movw	r24, r22
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	80 17       	cp	r24, r16
     83a:	91 07       	cpc	r25, r17
     83c:	09 f0       	breq	.+2      	; 0x840 <rxDataProcess+0x11a>
     83e:	7d c0       	rjmp	.+250    	; 0x93a <rxDataProcess+0x214>
     840:	81 30       	cpi	r24, 0x01	; 1
     842:	91 05       	cpc	r25, r1
     844:	19 f5       	brne	.+70     	; 0x88c <rxDataProcess+0x166>
     846:	40 91 54 04 	lds	r20, 0x0454
     84a:	50 91 55 04 	lds	r21, 0x0455
     84e:	42 50       	subi	r20, 0x02	; 2
     850:	50 40       	sbci	r21, 0x00	; 0
     852:	ce 01       	movw	r24, r28
     854:	01 96       	adiw	r24, 0x01	; 1
     856:	64 2d       	mov	r22, r4
     858:	75 2d       	mov	r23, r5
     85a:	0e 94 da 11 	call	0x23b4	; 0x23b4 <memcpy>
     85e:	40 91 54 04 	lds	r20, 0x0454
     862:	50 91 55 04 	lds	r21, 0x0455
     866:	42 50       	subi	r20, 0x02	; 2
     868:	50 40       	sbci	r21, 0x00	; 0
     86a:	82 2d       	mov	r24, r2
     86c:	93 2d       	mov	r25, r3
     86e:	be 01       	movw	r22, r28
     870:	6f 5f       	subi	r22, 0xFF	; 255
     872:	7f 4f       	sbci	r23, 0xFF	; 255
     874:	0e 94 da 11 	call	0x23b4	; 0x23b4 <memcpy>
     878:	80 91 54 04 	lds	r24, 0x0454
     87c:	90 91 55 04 	lds	r25, 0x0455
     880:	02 97       	sbiw	r24, 0x02	; 2
     882:	90 93 55 04 	sts	0x0455, r25
     886:	80 93 54 04 	sts	0x0454, r24
     88a:	be cf       	rjmp	.-132    	; 0x808 <rxDataProcess+0xe2>
     88c:	cf 5f       	subi	r28, 0xFF	; 255
     88e:	dd 4f       	sbci	r29, 0xFD	; 253
     890:	88 81       	ld	r24, Y
     892:	c1 50       	subi	r28, 0x01	; 1
     894:	d2 40       	sbci	r29, 0x02	; 2
     896:	ce 5f       	subi	r28, 0xFE	; 254
     898:	dd 4f       	sbci	r29, 0xFD	; 253
     89a:	98 81       	ld	r25, Y
     89c:	c2 50       	subi	r28, 0x02	; 2
     89e:	d2 40       	sbci	r29, 0x02	; 2
     8a0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <parsingMsg>
     8a4:	dc 14       	cp	r13, r12
     8a6:	28 f4       	brcc	.+10     	; 0x8b2 <rxDataProcess+0x18c>
     8a8:	f3 01       	movw	r30, r6
     8aa:	ed 0d       	add	r30, r13
     8ac:	f1 1d       	adc	r31, r1
     8ae:	80 83       	st	Z, r24
     8b0:	d3 94       	inc	r13
     8b2:	20 91 54 04 	lds	r18, 0x0454
     8b6:	30 91 55 04 	lds	r19, 0x0455
     8ba:	c8 01       	movw	r24, r16
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	82 17       	cp	r24, r18
     8c0:	93 07       	cpc	r25, r19
     8c2:	19 f4       	brne	.+6      	; 0x8ca <rxDataProcess+0x1a4>
     8c4:	10 92 56 04 	sts	0x0456, r1
     8c8:	5c c0       	rjmp	.+184    	; 0x982 <rxDataProcess+0x25c>
     8ca:	b8 01       	movw	r22, r16
     8cc:	6a 55       	subi	r22, 0x5A	; 90
     8ce:	77 4f       	sbci	r23, 0xF7	; 247
     8d0:	40 91 54 04 	lds	r20, 0x0454
     8d4:	50 91 55 04 	lds	r21, 0x0455
     8d8:	40 1b       	sub	r20, r16
     8da:	51 0b       	sbc	r21, r17
     8dc:	41 50       	subi	r20, 0x01	; 1
     8de:	50 40       	sbci	r21, 0x00	; 0
     8e0:	ce 01       	movw	r24, r28
     8e2:	01 96       	adiw	r24, 0x01	; 1
     8e4:	0e 94 da 11 	call	0x23b4	; 0x23b4 <memcpy>
     8e8:	40 91 54 04 	lds	r20, 0x0454
     8ec:	50 91 55 04 	lds	r21, 0x0455
     8f0:	40 1b       	sub	r20, r16
     8f2:	51 0b       	sbc	r21, r17
     8f4:	41 50       	subi	r20, 0x01	; 1
     8f6:	50 40       	sbci	r21, 0x00	; 0
     8f8:	8e 2d       	mov	r24, r14
     8fa:	9f 2d       	mov	r25, r15
     8fc:	be 01       	movw	r22, r28
     8fe:	6f 5f       	subi	r22, 0xFF	; 255
     900:	7f 4f       	sbci	r23, 0xFF	; 255
     902:	0e 94 da 11 	call	0x23b4	; 0x23b4 <memcpy>
     906:	20 91 54 04 	lds	r18, 0x0454
     90a:	30 91 55 04 	lds	r19, 0x0455
     90e:	c8 01       	movw	r24, r16
     910:	80 95       	com	r24
     912:	90 95       	com	r25
     914:	82 0f       	add	r24, r18
     916:	93 1f       	adc	r25, r19
     918:	90 93 55 04 	sts	0x0455, r25
     91c:	80 93 54 04 	sts	0x0454, r24
     920:	2f ef       	ldi	r18, 0xFF	; 255
     922:	0f 3f       	cpi	r16, 0xFF	; 255
     924:	12 07       	cpc	r17, r18
     926:	09 f0       	breq	.+2      	; 0x92a <rxDataProcess+0x204>
     928:	6f cf       	rjmp	.-290    	; 0x808 <rxDataProcess+0xe2>
     92a:	11 c0       	rjmp	.+34     	; 0x94e <rxDataProcess+0x228>
     92c:	f7 01       	movw	r30, r14
     92e:	e0 0f       	add	r30, r16
     930:	f1 1f       	adc	r31, r17
     932:	80 81       	ld	r24, Z
     934:	8d 30       	cpi	r24, 0x0D	; 13
     936:	09 f4       	brne	.+2      	; 0x93a <rxDataProcess+0x214>
     938:	b8 01       	movw	r22, r16
     93a:	0f 5f       	subi	r16, 0xFF	; 255
     93c:	1f 4f       	sbci	r17, 0xFF	; 255
     93e:	80 91 54 04 	lds	r24, 0x0454
     942:	90 91 55 04 	lds	r25, 0x0455
     946:	08 17       	cp	r16, r24
     948:	19 07       	cpc	r17, r25
     94a:	0c f4       	brge	.+2      	; 0x94e <rxDataProcess+0x228>
     94c:	67 cf       	rjmp	.-306    	; 0x81c <rxDataProcess+0xf6>
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	80 93 56 04 	sts	0x0456, r24
     954:	60 91 54 04 	lds	r22, 0x0454
     958:	70 91 55 04 	lds	r23, 0x0455
     95c:	85 ea       	ldi	r24, 0xA5	; 165
     95e:	98 e0       	ldi	r25, 0x08	; 8
     960:	0e 94 ff 02 	call	0x5fe	; 0x5fe <parsingMsg>
     964:	8a 30       	cpi	r24, 0x0A	; 10
     966:	31 f0       	breq	.+12     	; 0x974 <rxDataProcess+0x24e>
     968:	84 30       	cpi	r24, 0x04	; 4
     96a:	21 f0       	breq	.+8      	; 0x974 <rxDataProcess+0x24e>
     96c:	10 92 55 04 	sts	0x0455, r1
     970:	10 92 54 04 	sts	0x0454, r1
     974:	f3 01       	movw	r30, r6
     976:	ed 0d       	add	r30, r13
     978:	f1 1d       	adc	r31, r1
     97a:	80 83       	st	Z, r24
     97c:	d3 94       	inc	r13
     97e:	01 c0       	rjmp	.+2      	; 0x982 <rxDataProcess+0x25c>
     980:	dd 24       	eor	r13, r13
     982:	8d 2d       	mov	r24, r13
     984:	ce 5f       	subi	r28, 0xFE	; 254
     986:	dd 4f       	sbci	r29, 0xFD	; 253
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	cd bf       	out	0x3d, r28	; 61
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	bf 90       	pop	r11
     9a4:	af 90       	pop	r10
     9a6:	9f 90       	pop	r9
     9a8:	8f 90       	pop	r8
     9aa:	7f 90       	pop	r7
     9ac:	6f 90       	pop	r6
     9ae:	5f 90       	pop	r5
     9b0:	4f 90       	pop	r4
     9b2:	3f 90       	pop	r3
     9b4:	2f 90       	pop	r2
     9b6:	08 95       	ret

000009b8 <wifiMain>:
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	00 d0       	rcall	.+0      	; 0x9be <wifiMain+0x6>
     9be:	0f 92       	push	r0
     9c0:	cd b7       	in	r28, 0x3d	; 61
     9c2:	de b7       	in	r29, 0x3e	; 62
     9c4:	80 91 57 04 	lds	r24, 0x0457
     9c8:	90 91 58 04 	lds	r25, 0x0458
     9cc:	00 97       	sbiw	r24, 0x00	; 0
     9ce:	99 f0       	breq	.+38     	; 0x9f6 <wifiMain+0x3e>
     9d0:	e0 91 a5 0a 	lds	r30, 0x0AA5
     9d4:	f0 91 a6 0a 	lds	r31, 0x0AA6
     9d8:	30 97       	sbiw	r30, 0x00	; 0
     9da:	49 f0       	breq	.+18     	; 0x9ee <wifiMain+0x36>
     9dc:	40 91 57 04 	lds	r20, 0x0457
     9e0:	50 91 58 04 	lds	r21, 0x0458
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	65 ea       	ldi	r22, 0xA5	; 165
     9ea:	74 e0       	ldi	r23, 0x04	; 4
     9ec:	19 95       	eicall
     9ee:	10 92 58 04 	sts	0x0458, r1
     9f2:	10 92 57 04 	sts	0x0457, r1
     9f6:	80 91 59 04 	lds	r24, 0x0459
     9fa:	88 23       	and	r24, r24
     9fc:	f1 f0       	breq	.+60     	; 0xa3a <wifiMain+0x82>
     9fe:	ce 01       	movw	r24, r28
     a00:	01 96       	adiw	r24, 0x01	; 1
     a02:	64 e0       	ldi	r22, 0x04	; 4
     a04:	0e 94 93 03 	call	0x726	; 0x726 <rxDataProcess>
     a08:	80 91 57 04 	lds	r24, 0x0457
     a0c:	90 91 58 04 	lds	r25, 0x0458
     a10:	00 97       	sbiw	r24, 0x00	; 0
     a12:	99 f0       	breq	.+38     	; 0xa3a <wifiMain+0x82>
     a14:	e0 91 a5 0a 	lds	r30, 0x0AA5
     a18:	f0 91 a6 0a 	lds	r31, 0x0AA6
     a1c:	30 97       	sbiw	r30, 0x00	; 0
     a1e:	49 f0       	breq	.+18     	; 0xa32 <wifiMain+0x7a>
     a20:	40 91 57 04 	lds	r20, 0x0457
     a24:	50 91 58 04 	lds	r21, 0x0458
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	65 ea       	ldi	r22, 0xA5	; 165
     a2e:	74 e0       	ldi	r23, 0x04	; 4
     a30:	19 95       	eicall
     a32:	10 92 58 04 	sts	0x0458, r1
     a36:	10 92 57 04 	sts	0x0457, r1
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <WaitOKWithPrint>:
     a48:	2f 92       	push	r2
     a4a:	3f 92       	push	r3
     a4c:	4f 92       	push	r4
     a4e:	5f 92       	push	r5
     a50:	6f 92       	push	r6
     a52:	7f 92       	push	r7
     a54:	8f 92       	push	r8
     a56:	9f 92       	push	r9
     a58:	af 92       	push	r10
     a5a:	bf 92       	push	r11
     a5c:	cf 92       	push	r12
     a5e:	df 92       	push	r13
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	c0 50       	subi	r28, 0x00	; 0
     a72:	d2 40       	sbci	r29, 0x02	; 2
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	de bf       	out	0x3e, r29	; 62
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	cd bf       	out	0x3d, r28	; 61
     a7e:	ee 24       	eor	r14, r14
     a80:	ff 24       	eor	r15, r15
     a82:	0f 2e       	mov	r0, r31
     a84:	f5 ea       	ldi	r31, 0xA5	; 165
     a86:	af 2e       	mov	r10, r31
     a88:	f6 e0       	ldi	r31, 0x06	; 6
     a8a:	bf 2e       	mov	r11, r31
     a8c:	f0 2d       	mov	r31, r0
     a8e:	0f 2e       	mov	r0, r31
     a90:	f1 e1       	ldi	r31, 0x11	; 17
     a92:	2f 2e       	mov	r2, r31
     a94:	f2 e0       	ldi	r31, 0x02	; 2
     a96:	3f 2e       	mov	r3, r31
     a98:	f0 2d       	mov	r31, r0
     a9a:	0f 2e       	mov	r0, r31
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	6f 2e       	mov	r6, r31
     aa0:	f2 e0       	ldi	r31, 0x02	; 2
     aa2:	7f 2e       	mov	r7, r31
     aa4:	f0 2d       	mov	r31, r0
     aa6:	0f 2e       	mov	r0, r31
     aa8:	fb e0       	ldi	r31, 0x0B	; 11
     aaa:	4f 2e       	mov	r4, r31
     aac:	f2 e0       	ldi	r31, 0x02	; 2
     aae:	5f 2e       	mov	r5, r31
     ab0:	f0 2d       	mov	r31, r0
     ab2:	80 91 59 04 	lds	r24, 0x0459
     ab6:	88 23       	and	r24, r24
     ab8:	e1 f3       	breq	.-8      	; 0xab2 <WaitOKWithPrint+0x6a>
     aba:	80 91 59 04 	lds	r24, 0x0459
     abe:	88 23       	and	r24, r24
     ac0:	09 f4       	brne	.+2      	; 0xac4 <WaitOKWithPrint+0x7c>
     ac2:	a9 c0       	rjmp	.+338    	; 0xc16 <WaitOKWithPrint+0x1ce>
     ac4:	cc 24       	eor	r12, r12
     ac6:	dd 24       	eor	r13, r13
     ac8:	88 24       	eor	r8, r8
     aca:	99 24       	eor	r9, r9
     acc:	85 01       	movw	r16, r10
     ace:	0c 0d       	add	r16, r12
     ad0:	1d 1d       	adc	r17, r13
     ad2:	f8 01       	movw	r30, r16
     ad4:	80 81       	ld	r24, Z
     ad6:	e1 e0       	ldi	r30, 0x01	; 1
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	ec 0f       	add	r30, r28
     adc:	fd 1f       	adc	r31, r29
     ade:	ee 0d       	add	r30, r14
     ae0:	ff 1d       	adc	r31, r15
     ae2:	80 83       	st	Z, r24
     ae4:	08 94       	sec
     ae6:	e1 1c       	adc	r14, r1
     ae8:	f1 1c       	adc	r15, r1
     aea:	f8 01       	movw	r30, r16
     aec:	80 81       	ld	r24, Z
     aee:	0e 94 10 01 	call	0x220	; 0x220 <putCh2>
     af2:	f8 01       	movw	r30, r16
     af4:	80 81       	ld	r24, Z
     af6:	8a 30       	cpi	r24, 0x0A	; 10
     af8:	09 f0       	breq	.+2      	; 0xafc <WaitOKWithPrint+0xb4>
     afa:	83 c0       	rjmp	.+262    	; 0xc02 <WaitOKWithPrint+0x1ba>
     afc:	f4 e0       	ldi	r31, 0x04	; 4
     afe:	ef 16       	cp	r14, r31
     b00:	f1 04       	cpc	r15, r1
     b02:	0c f4       	brge	.+2      	; 0xb06 <WaitOKWithPrint+0xbe>
     b04:	79 c0       	rjmp	.+242    	; 0xbf8 <WaitOKWithPrint+0x1b0>
     b06:	ce 01       	movw	r24, r28
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	b3 01       	movw	r22, r6
     b0c:	42 e0       	ldi	r20, 0x02	; 2
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <strncmp>
     b14:	28 2f       	mov	r18, r24
     b16:	39 2f       	mov	r19, r25
     b18:	21 15       	cp	r18, r1
     b1a:	31 05       	cpc	r19, r1
     b1c:	29 f4       	brne	.+10     	; 0xb28 <WaitOKWithPrint+0xe0>
     b1e:	10 92 59 04 	sts	0x0459, r1
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	7a c0       	rjmp	.+244    	; 0xc1c <WaitOKWithPrint+0x1d4>
     b28:	ce 01       	movw	r24, r28
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	b2 01       	movw	r22, r4
     b2e:	44 e0       	ldi	r20, 0x04	; 4
     b30:	50 e0       	ldi	r21, 0x00	; 0
     b32:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <strncmp>
     b36:	28 2f       	mov	r18, r24
     b38:	39 2f       	mov	r19, r25
     b3a:	21 15       	cp	r18, r1
     b3c:	31 05       	cpc	r19, r1
     b3e:	29 f4       	brne	.+10     	; 0xb4a <WaitOKWithPrint+0x102>
     b40:	10 92 59 04 	sts	0x0459, r1
     b44:	8f ef       	ldi	r24, 0xFF	; 255
     b46:	9f ef       	ldi	r25, 0xFF	; 255
     b48:	69 c0       	rjmp	.+210    	; 0xc1c <WaitOKWithPrint+0x1d4>
     b4a:	87 e0       	ldi	r24, 0x07	; 7
     b4c:	e8 16       	cp	r14, r24
     b4e:	f1 04       	cpc	r15, r1
     b50:	8c f0       	brlt	.+34     	; 0xb74 <WaitOKWithPrint+0x12c>
     b52:	ce 01       	movw	r24, r28
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	b1 01       	movw	r22, r2
     b58:	45 e0       	ldi	r20, 0x05	; 5
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <strncmp>
     b60:	28 2f       	mov	r18, r24
     b62:	39 2f       	mov	r19, r25
     b64:	21 15       	cp	r18, r1
     b66:	31 05       	cpc	r19, r1
     b68:	29 f4       	brne	.+10     	; 0xb74 <WaitOKWithPrint+0x12c>
     b6a:	10 92 59 04 	sts	0x0459, r1
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	9f ef       	ldi	r25, 0xFF	; 255
     b72:	54 c0       	rjmp	.+168    	; 0xc1c <WaitOKWithPrint+0x1d4>
     b74:	e6 e0       	ldi	r30, 0x06	; 6
     b76:	ee 16       	cp	r14, r30
     b78:	f1 04       	cpc	r15, r1
     b7a:	94 f0       	brlt	.+36     	; 0xba0 <WaitOKWithPrint+0x158>
     b7c:	ce 01       	movw	r24, r28
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	67 e1       	ldi	r22, 0x17	; 23
     b82:	72 e0       	ldi	r23, 0x02	; 2
     b84:	45 e0       	ldi	r20, 0x05	; 5
     b86:	50 e0       	ldi	r21, 0x00	; 0
     b88:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <strncmp>
     b8c:	28 2f       	mov	r18, r24
     b8e:	39 2f       	mov	r19, r25
     b90:	21 15       	cp	r18, r1
     b92:	31 05       	cpc	r19, r1
     b94:	29 f4       	brne	.+10     	; 0xba0 <WaitOKWithPrint+0x158>
     b96:	10 92 59 04 	sts	0x0459, r1
     b9a:	8f ef       	ldi	r24, 0xFF	; 255
     b9c:	9f ef       	ldi	r25, 0xFF	; 255
     b9e:	3e c0       	rjmp	.+124    	; 0xc1c <WaitOKWithPrint+0x1d4>
     ba0:	f7 e0       	ldi	r31, 0x07	; 7
     ba2:	ef 16       	cp	r14, r31
     ba4:	f1 04       	cpc	r15, r1
     ba6:	94 f0       	brlt	.+36     	; 0xbcc <WaitOKWithPrint+0x184>
     ba8:	ce 01       	movw	r24, r28
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	6c e2       	ldi	r22, 0x2C	; 44
     bae:	72 e0       	ldi	r23, 0x02	; 2
     bb0:	45 e0       	ldi	r20, 0x05	; 5
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <strncmp>
     bb8:	28 2f       	mov	r18, r24
     bba:	39 2f       	mov	r19, r25
     bbc:	21 15       	cp	r18, r1
     bbe:	31 05       	cpc	r19, r1
     bc0:	29 f4       	brne	.+10     	; 0xbcc <WaitOKWithPrint+0x184>
     bc2:	10 92 59 04 	sts	0x0459, r1
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	28 c0       	rjmp	.+80     	; 0xc1c <WaitOKWithPrint+0x1d4>
     bcc:	89 e0       	ldi	r24, 0x09	; 9
     bce:	e8 16       	cp	r14, r24
     bd0:	f1 04       	cpc	r15, r1
     bd2:	a4 f0       	brlt	.+40     	; 0xbfc <WaitOKWithPrint+0x1b4>
     bd4:	ce 01       	movw	r24, r28
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	63 e0       	ldi	r22, 0x03	; 3
     bda:	72 e0       	ldi	r23, 0x02	; 2
     bdc:	47 e0       	ldi	r20, 0x07	; 7
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <strncmp>
     be4:	28 2f       	mov	r18, r24
     be6:	39 2f       	mov	r19, r25
     be8:	21 15       	cp	r18, r1
     bea:	31 05       	cpc	r19, r1
     bec:	49 f4       	brne	.+18     	; 0xc00 <WaitOKWithPrint+0x1b8>
     bee:	10 92 59 04 	sts	0x0459, r1
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	12 c0       	rjmp	.+36     	; 0xc1c <WaitOKWithPrint+0x1d4>
     bf8:	74 01       	movw	r14, r8
     bfa:	03 c0       	rjmp	.+6      	; 0xc02 <WaitOKWithPrint+0x1ba>
     bfc:	74 01       	movw	r14, r8
     bfe:	01 c0       	rjmp	.+2      	; 0xc02 <WaitOKWithPrint+0x1ba>
     c00:	74 01       	movw	r14, r8
     c02:	08 94       	sec
     c04:	c1 1c       	adc	r12, r1
     c06:	d1 1c       	adc	r13, r1
     c08:	80 91 59 04 	lds	r24, 0x0459
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	c8 16       	cp	r12, r24
     c10:	d9 06       	cpc	r13, r25
     c12:	0c f4       	brge	.+2      	; 0xc16 <WaitOKWithPrint+0x1ce>
     c14:	5b cf       	rjmp	.-330    	; 0xacc <WaitOKWithPrint+0x84>
     c16:	10 92 59 04 	sts	0x0459, r1
     c1a:	4b cf       	rjmp	.-362    	; 0xab2 <WaitOKWithPrint+0x6a>
     c1c:	c0 50       	subi	r28, 0x00	; 0
     c1e:	de 4f       	sbci	r29, 0xFE	; 254
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	ff 90       	pop	r15
     c34:	ef 90       	pop	r14
     c36:	df 90       	pop	r13
     c38:	cf 90       	pop	r12
     c3a:	bf 90       	pop	r11
     c3c:	af 90       	pop	r10
     c3e:	9f 90       	pop	r9
     c40:	8f 90       	pop	r8
     c42:	7f 90       	pop	r7
     c44:	6f 90       	pop	r6
     c46:	5f 90       	pop	r5
     c48:	4f 90       	pop	r4
     c4a:	3f 90       	pop	r3
     c4c:	2f 90       	pop	r2
     c4e:	08 95       	ret

00000c50 <WaitSendReadyWithoutPrint>:
     c50:	cf 92       	push	r12
     c52:	df 92       	push	r13
     c54:	ff 92       	push	r15
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <WaitSendReadyWithoutPrint+0x10>
     c60:	0f 92       	push	r0
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	0f 2e       	mov	r0, r31
     c68:	f5 e6       	ldi	r31, 0x65	; 101
     c6a:	cf 2e       	mov	r12, r31
     c6c:	dd 24       	eor	r13, r13
     c6e:	f0 2d       	mov	r31, r0
     c70:	00 e0       	ldi	r16, 0x00	; 0
     c72:	ff 24       	eor	r15, r15
     c74:	11 e0       	ldi	r17, 0x01	; 1
     c76:	ce 01       	movw	r24, r28
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	64 e0       	ldi	r22, 0x04	; 4
     c7c:	0e 94 93 03 	call	0x726	; 0x726 <rxDataProcess>
     c80:	88 23       	and	r24, r24
     c82:	a1 f0       	breq	.+40     	; 0xcac <WaitSendReadyWithoutPrint+0x5c>
     c84:	fe 01       	movw	r30, r28
     c86:	31 96       	adiw	r30, 0x01	; 1
     c88:	9f 01       	movw	r18, r30
     c8a:	28 0f       	add	r18, r24
     c8c:	31 1d       	adc	r19, r1
     c8e:	c9 01       	movw	r24, r18
     c90:	21 91       	ld	r18, Z+
     c92:	28 30       	cpi	r18, 0x08	; 8
     c94:	29 f0       	breq	.+10     	; 0xca0 <WaitSendReadyWithoutPrint+0x50>
     c96:	22 30       	cpi	r18, 0x02	; 2
     c98:	29 f0       	breq	.+10     	; 0xca4 <WaitSendReadyWithoutPrint+0x54>
     c9a:	25 30       	cpi	r18, 0x05	; 5
     c9c:	21 f4       	brne	.+8      	; 0xca6 <WaitSendReadyWithoutPrint+0x56>
     c9e:	26 c0       	rjmp	.+76     	; 0xcec <WaitSendReadyWithoutPrint+0x9c>
     ca0:	01 2f       	mov	r16, r17
     ca2:	01 c0       	rjmp	.+2      	; 0xca6 <WaitSendReadyWithoutPrint+0x56>
     ca4:	f1 2e       	mov	r15, r17
     ca6:	e8 17       	cp	r30, r24
     ca8:	f9 07       	cpc	r31, r25
     caa:	91 f7       	brne	.-28     	; 0xc90 <WaitSendReadyWithoutPrint+0x40>
     cac:	00 23       	and	r16, r16
     cae:	11 f0       	breq	.+4      	; 0xcb4 <WaitSendReadyWithoutPrint+0x64>
     cb0:	ff 20       	and	r15, r15
     cb2:	f9 f4       	brne	.+62     	; 0xcf2 <WaitSendReadyWithoutPrint+0xa2>
     cb4:	08 94       	sec
     cb6:	c1 08       	sbc	r12, r1
     cb8:	d1 08       	sbc	r13, r1
     cba:	c1 14       	cp	r12, r1
     cbc:	d1 04       	cpc	r13, r1
     cbe:	79 f4       	brne	.+30     	; 0xcde <WaitSendReadyWithoutPrint+0x8e>
     cc0:	0f 92       	push	r0
     cc2:	0f 92       	push	r0
     cc4:	83 e3       	ldi	r24, 0x33	; 51
     cc6:	92 e0       	ldi	r25, 0x02	; 2
     cc8:	ed b7       	in	r30, 0x3d	; 61
     cca:	fe b7       	in	r31, 0x3e	; 62
     ccc:	92 83       	std	Z+2, r25	; 0x02
     cce:	81 83       	std	Z+1, r24	; 0x01
     cd0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debugprint>
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	8f ef       	ldi	r24, 0xFF	; 255
     cda:	9f ef       	ldi	r25, 0xFF	; 255
     cdc:	0c c0       	rjmp	.+24     	; 0xcf6 <WaitSendReadyWithoutPrint+0xa6>
     cde:	8f ef       	ldi	r24, 0xFF	; 255
     ce0:	9f e8       	ldi	r25, 0x8F	; 143
     ce2:	01 97       	sbiw	r24, 0x01	; 1
     ce4:	f1 f7       	brne	.-4      	; 0xce2 <WaitSendReadyWithoutPrint+0x92>
     ce6:	00 c0       	rjmp	.+0      	; 0xce8 <WaitSendReadyWithoutPrint+0x98>
     ce8:	00 00       	nop
     cea:	c5 cf       	rjmp	.-118    	; 0xc76 <WaitSendReadyWithoutPrint+0x26>
     cec:	8f ef       	ldi	r24, 0xFF	; 255
     cee:	9f ef       	ldi	r25, 0xFF	; 255
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <WaitSendReadyWithoutPrint+0xa6>
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	df 90       	pop	r13
     d0a:	cf 90       	pop	r12
     d0c:	08 95       	ret

00000d0e <WaitSendOKWithoutPrint>:
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	00 d0       	rcall	.+0      	; 0xd18 <WaitSendOKWithoutPrint+0xa>
     d18:	0f 92       	push	r0
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	05 e6       	ldi	r16, 0x65	; 101
     d20:	10 e0       	ldi	r17, 0x00	; 0
     d22:	ce 01       	movw	r24, r28
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	64 e0       	ldi	r22, 0x04	; 4
     d28:	0e 94 93 03 	call	0x726	; 0x726 <rxDataProcess>
     d2c:	88 23       	and	r24, r24
     d2e:	b9 f0       	breq	.+46     	; 0xd5e <WaitSendOKWithoutPrint+0x50>
     d30:	99 81       	ldd	r25, Y+1	; 0x01
     d32:	91 30       	cpi	r25, 0x01	; 1
     d34:	69 f1       	breq	.+90     	; 0xd90 <WaitSendOKWithoutPrint+0x82>
     d36:	95 30       	cpi	r25, 0x05	; 5
     d38:	71 f1       	breq	.+92     	; 0xd96 <WaitSendOKWithoutPrint+0x88>
     d3a:	fe 01       	movw	r30, r28
     d3c:	32 96       	adiw	r30, 0x02	; 2
     d3e:	21 e0       	ldi	r18, 0x01	; 1
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	2c 0f       	add	r18, r28
     d44:	3d 1f       	adc	r19, r29
     d46:	28 0f       	add	r18, r24
     d48:	31 1d       	adc	r19, r1
     d4a:	c9 01       	movw	r24, r18
     d4c:	05 c0       	rjmp	.+10     	; 0xd58 <WaitSendOKWithoutPrint+0x4a>
     d4e:	21 91       	ld	r18, Z+
     d50:	21 30       	cpi	r18, 0x01	; 1
     d52:	21 f1       	breq	.+72     	; 0xd9c <WaitSendOKWithoutPrint+0x8e>
     d54:	25 30       	cpi	r18, 0x05	; 5
     d56:	29 f1       	breq	.+74     	; 0xda2 <WaitSendOKWithoutPrint+0x94>
     d58:	e8 17       	cp	r30, r24
     d5a:	f9 07       	cpc	r31, r25
     d5c:	c1 f7       	brne	.-16     	; 0xd4e <WaitSendOKWithoutPrint+0x40>
     d5e:	01 50       	subi	r16, 0x01	; 1
     d60:	10 40       	sbci	r17, 0x00	; 0
     d62:	79 f4       	brne	.+30     	; 0xd82 <WaitSendOKWithoutPrint+0x74>
     d64:	0f 92       	push	r0
     d66:	0f 92       	push	r0
     d68:	8b e5       	ldi	r24, 0x5B	; 91
     d6a:	92 e0       	ldi	r25, 0x02	; 2
     d6c:	ed b7       	in	r30, 0x3d	; 61
     d6e:	fe b7       	in	r31, 0x3e	; 62
     d70:	92 83       	std	Z+2, r25	; 0x02
     d72:	81 83       	std	Z+1, r24	; 0x01
     d74:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debugprint>
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	8f ef       	ldi	r24, 0xFF	; 255
     d7e:	9f ef       	ldi	r25, 0xFF	; 255
     d80:	12 c0       	rjmp	.+36     	; 0xda6 <WaitSendOKWithoutPrint+0x98>
     d82:	8f ef       	ldi	r24, 0xFF	; 255
     d84:	9f e8       	ldi	r25, 0x8F	; 143
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	f1 f7       	brne	.-4      	; 0xd86 <WaitSendOKWithoutPrint+0x78>
     d8a:	00 c0       	rjmp	.+0      	; 0xd8c <WaitSendOKWithoutPrint+0x7e>
     d8c:	00 00       	nop
     d8e:	c9 cf       	rjmp	.-110    	; 0xd22 <WaitSendOKWithoutPrint+0x14>
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	08 c0       	rjmp	.+16     	; 0xda6 <WaitSendOKWithoutPrint+0x98>
     d96:	8f ef       	ldi	r24, 0xFF	; 255
     d98:	9f ef       	ldi	r25, 0xFF	; 255
     d9a:	05 c0       	rjmp	.+10     	; 0xda6 <WaitSendOKWithoutPrint+0x98>
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <WaitSendOKWithoutPrint+0x98>
     da2:	8f ef       	ldi	r24, 0xFF	; 255
     da4:	9f ef       	ldi	r25, 0xFF	; 255
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	08 95       	ret

00000db8 <WaitOk>:
     db8:	cf 92       	push	r12
     dba:	df 92       	push	r13
     dbc:	ef 92       	push	r14
     dbe:	ff 92       	push	r15
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	c0 50       	subi	r28, 0x00	; 0
     dce:	d1 40       	sbci	r29, 0x01	; 1
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	dd 24       	eor	r13, r13
     ddc:	40 e0       	ldi	r20, 0x00	; 0
     dde:	50 e0       	ldi	r21, 0x00	; 0
     de0:	be 01       	movw	r22, r28
     de2:	6f 5f       	subi	r22, 0xFF	; 255
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
     de6:	ee 24       	eor	r14, r14
     de8:	ff 24       	eor	r15, r15
     dea:	05 ea       	ldi	r16, 0xA5	; 165
     dec:	16 e0       	ldi	r17, 0x06	; 6
     dee:	cc 24       	eor	r12, r12
     df0:	c3 94       	inc	r12
     df2:	80 91 59 04 	lds	r24, 0x0459
     df6:	88 23       	and	r24, r24
     df8:	e1 f3       	breq	.-8      	; 0xdf2 <WaitOk+0x3a>
     dfa:	80 91 59 04 	lds	r24, 0x0459
     dfe:	88 23       	and	r24, r24
     e00:	c1 f3       	breq	.-16     	; 0xdf2 <WaitOk+0x3a>
     e02:	db 01       	movw	r26, r22
     e04:	a4 0f       	add	r26, r20
     e06:	b5 1f       	adc	r27, r21
     e08:	97 01       	movw	r18, r14
     e0a:	f8 01       	movw	r30, r16
     e0c:	e2 0f       	add	r30, r18
     e0e:	f3 1f       	adc	r31, r19
     e10:	80 81       	ld	r24, Z
     e12:	8d 93       	st	X+, r24
     e14:	80 81       	ld	r24, Z
     e16:	8a 30       	cpi	r24, 0x0A	; 10
     e18:	39 f5       	brne	.+78     	; 0xe68 <WaitOk+0xb0>
     e1a:	dd 20       	and	r13, r13
     e1c:	21 f1       	breq	.+72     	; 0xe66 <WaitOk+0xae>
     e1e:	ce 01       	movw	r24, r28
     e20:	03 96       	adiw	r24, 0x03	; 3
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	72 e0       	ldi	r23, 0x02	; 2
     e26:	42 e0       	ldi	r20, 0x02	; 2
     e28:	50 e0       	ldi	r21, 0x00	; 0
     e2a:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <strncmp>
     e2e:	28 2f       	mov	r18, r24
     e30:	39 2f       	mov	r19, r25
     e32:	21 15       	cp	r18, r1
     e34:	31 05       	cpc	r19, r1
     e36:	29 f4       	brne	.+10     	; 0xe42 <WaitOk+0x8a>
     e38:	10 92 59 04 	sts	0x0459, r1
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	22 c0       	rjmp	.+68     	; 0xe86 <WaitOk+0xce>
     e42:	ce 01       	movw	r24, r28
     e44:	03 96       	adiw	r24, 0x03	; 3
     e46:	61 e1       	ldi	r22, 0x11	; 17
     e48:	72 e0       	ldi	r23, 0x02	; 2
     e4a:	45 e0       	ldi	r20, 0x05	; 5
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <strncmp>
     e52:	28 2f       	mov	r18, r24
     e54:	39 2f       	mov	r19, r25
     e56:	21 15       	cp	r18, r1
     e58:	31 05       	cpc	r19, r1
     e5a:	99 f4       	brne	.+38     	; 0xe82 <WaitOk+0xca>
     e5c:	10 92 59 04 	sts	0x0459, r1
     e60:	8f ef       	ldi	r24, 0xFF	; 255
     e62:	9f ef       	ldi	r25, 0xFF	; 255
     e64:	10 c0       	rjmp	.+32     	; 0xe86 <WaitOk+0xce>
     e66:	dc 2c       	mov	r13, r12
     e68:	ad 01       	movw	r20, r26
     e6a:	46 1b       	sub	r20, r22
     e6c:	57 0b       	sbc	r21, r23
     e6e:	2f 5f       	subi	r18, 0xFF	; 255
     e70:	3f 4f       	sbci	r19, 0xFF	; 255
     e72:	80 91 59 04 	lds	r24, 0x0459
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	28 17       	cp	r18, r24
     e7a:	39 07       	cpc	r19, r25
     e7c:	0c f0       	brlt	.+2      	; 0xe80 <WaitOk+0xc8>
     e7e:	b9 cf       	rjmp	.-142    	; 0xdf2 <WaitOk+0x3a>
     e80:	c4 cf       	rjmp	.-120    	; 0xe0a <WaitOk+0x52>
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	9f ef       	ldi	r25, 0xFF	; 255
     e86:	c0 50       	subi	r28, 0x00	; 0
     e88:	df 4f       	sbci	r29, 0xFF	; 255
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	ff 90       	pop	r15
     e9e:	ef 90       	pop	r14
     ea0:	df 90       	pop	r13
     ea2:	cf 90       	pop	r12
     ea4:	08 95       	ret

00000ea6 <wifiDisplayAPlist>:
     ea6:	0f 92       	push	r0
     ea8:	0f 92       	push	r0
     eaa:	8c e7       	ldi	r24, 0x7C	; 124
     eac:	92 e0       	ldi	r25, 0x02	; 2
     eae:	ad b7       	in	r26, 0x3d	; 61
     eb0:	be b7       	in	r27, 0x3e	; 62
     eb2:	12 96       	adiw	r26, 0x02	; 2
     eb4:	9c 93       	st	X, r25
     eb6:	8e 93       	st	-X, r24
     eb8:	11 97       	sbiw	r26, 0x01	; 1
     eba:	0e 94 22 02 	call	0x444	; 0x444 <wifiprint>
     ebe:	8f ef       	ldi	r24, 0xFF	; 255
     ec0:	9f ef       	ldi	r25, 0xFF	; 255
     ec2:	a9 e5       	ldi	r26, 0x59	; 89
     ec4:	81 50       	subi	r24, 0x01	; 1
     ec6:	90 40       	sbci	r25, 0x00	; 0
     ec8:	a0 40       	sbci	r26, 0x00	; 0
     eca:	e1 f7       	brne	.-8      	; 0xec4 <wifiDisplayAPlist+0x1e>
     ecc:	00 c0       	rjmp	.+0      	; 0xece <wifiDisplayAPlist+0x28>
     ece:	00 00       	nop
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0e 94 24 05 	call	0xa48	; 0xa48 <WaitOKWithPrint>
     ed8:	08 95       	ret

00000eda <wifiConnectAP>:
     eda:	00 d0       	rcall	.+0      	; 0xedc <wifiConnectAP+0x2>
     edc:	00 d0       	rcall	.+0      	; 0xede <wifiConnectAP+0x4>
     ede:	ed b7       	in	r30, 0x3d	; 61
     ee0:	fe b7       	in	r31, 0x3e	; 62
     ee2:	31 96       	adiw	r30, 0x01	; 1
     ee4:	27 e8       	ldi	r18, 0x87	; 135
     ee6:	32 e0       	ldi	r19, 0x02	; 2
     ee8:	ad b7       	in	r26, 0x3d	; 61
     eea:	be b7       	in	r27, 0x3e	; 62
     eec:	12 96       	adiw	r26, 0x02	; 2
     eee:	3c 93       	st	X, r19
     ef0:	2e 93       	st	-X, r18
     ef2:	11 97       	sbiw	r26, 0x01	; 1
     ef4:	93 83       	std	Z+3, r25	; 0x03
     ef6:	82 83       	std	Z+2, r24	; 0x02
     ef8:	75 83       	std	Z+5, r23	; 0x05
     efa:	64 83       	std	Z+4, r22	; 0x04
     efc:	0e 94 22 02 	call	0x444	; 0x444 <wifiprint>
     f00:	8d b7       	in	r24, 0x3d	; 61
     f02:	9e b7       	in	r25, 0x3e	; 62
     f04:	06 96       	adiw	r24, 0x06	; 6
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	9e bf       	out	0x3e, r25	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	8d bf       	out	0x3d, r24	; 61
     f10:	0e 94 24 05 	call	0xa48	; 0xa48 <WaitOKWithPrint>
     f14:	08 95       	ret

00000f16 <wifiModeSet>:
     f16:	0f 92       	push	r0
     f18:	0f 92       	push	r0
     f1a:	80 ea       	ldi	r24, 0xA0	; 160
     f1c:	92 e0       	ldi	r25, 0x02	; 2
     f1e:	ed b7       	in	r30, 0x3d	; 61
     f20:	fe b7       	in	r31, 0x3e	; 62
     f22:	92 83       	std	Z+2, r25	; 0x02
     f24:	81 83       	std	Z+1, r24	; 0x01
     f26:	0e 94 22 02 	call	0x444	; 0x444 <wifiprint>
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0e 94 24 05 	call	0xa48	; 0xa48 <WaitOKWithPrint>
     f32:	08 95       	ret

00000f34 <wifiDisplayLocalIP>:
     f34:	0f 92       	push	r0
     f36:	0f 92       	push	r0
     f38:	8e ea       	ldi	r24, 0xAE	; 174
     f3a:	92 e0       	ldi	r25, 0x02	; 2
     f3c:	ed b7       	in	r30, 0x3d	; 61
     f3e:	fe b7       	in	r31, 0x3e	; 62
     f40:	92 83       	std	Z+2, r25	; 0x02
     f42:	81 83       	std	Z+1, r24	; 0x01
     f44:	0e 94 22 02 	call	0x444	; 0x444 <wifiprint>
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0e 94 24 05 	call	0xa48	; 0xa48 <WaitOKWithPrint>
     f50:	08 95       	ret

00000f52 <wifiEnableDHCP>:
     f52:	0f 92       	push	r0
     f54:	0f 92       	push	r0
     f56:	8f eb       	ldi	r24, 0xBF	; 191
     f58:	92 e0       	ldi	r25, 0x02	; 2
     f5a:	ed b7       	in	r30, 0x3d	; 61
     f5c:	fe b7       	in	r31, 0x3e	; 62
     f5e:	92 83       	std	Z+2, r25	; 0x02
     f60:	81 83       	std	Z+1, r24	; 0x01
     f62:	0e 94 22 02 	call	0x444	; 0x444 <wifiprint>
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0e 94 24 05 	call	0xa48	; 0xa48 <WaitOKWithPrint>
     f6e:	08 95       	ret

00000f70 <wifiConnectTCPServer>:
     f70:	2d b7       	in	r18, 0x3d	; 61
     f72:	3e b7       	in	r19, 0x3e	; 62
     f74:	28 50       	subi	r18, 0x08	; 8
     f76:	30 40       	sbci	r19, 0x00	; 0
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	3e bf       	out	0x3e, r19	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	2d bf       	out	0x3d, r18	; 61
     f82:	ed b7       	in	r30, 0x3d	; 61
     f84:	fe b7       	in	r31, 0x3e	; 62
     f86:	31 96       	adiw	r30, 0x01	; 1
     f88:	23 ed       	ldi	r18, 0xD3	; 211
     f8a:	32 e0       	ldi	r19, 0x02	; 2
     f8c:	ad b7       	in	r26, 0x3d	; 61
     f8e:	be b7       	in	r27, 0x3e	; 62
     f90:	12 96       	adiw	r26, 0x02	; 2
     f92:	3c 93       	st	X, r19
     f94:	2e 93       	st	-X, r18
     f96:	11 97       	sbiw	r26, 0x01	; 1
     f98:	93 83       	std	Z+3, r25	; 0x03
     f9a:	82 83       	std	Z+2, r24	; 0x02
     f9c:	44 83       	std	Z+4, r20	; 0x04
     f9e:	55 83       	std	Z+5, r21	; 0x05
     fa0:	66 83       	std	Z+6, r22	; 0x06
     fa2:	77 83       	std	Z+7, r23	; 0x07
     fa4:	0e 94 22 02 	call	0x444	; 0x444 <wifiprint>
     fa8:	2d b7       	in	r18, 0x3d	; 61
     faa:	3e b7       	in	r19, 0x3e	; 62
     fac:	28 5f       	subi	r18, 0xF8	; 248
     fae:	3f 4f       	sbci	r19, 0xFF	; 255
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	3e bf       	out	0x3e, r19	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	2d bf       	out	0x3d, r18	; 61
     fba:	0e 94 24 05 	call	0xa48	; 0xa48 <WaitOKWithPrint>
     fbe:	08 95       	ret

00000fc0 <wifiSetEventCallback>:
     fc0:	90 93 a6 0a 	sts	0x0AA6, r25
     fc4:	80 93 a5 0a 	sts	0x0AA5, r24
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	08 95       	ret

00000fcc <wifiSendData>:
     fcc:	ef 92       	push	r14
     fce:	ff 92       	push	r15
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	08 2f       	mov	r16, r24
     fda:	19 2f       	mov	r17, r25
     fdc:	eb 01       	movw	r28, r22
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <wifiSendData+0x14>
     fe0:	0f 92       	push	r0
     fe2:	8f ee       	ldi	r24, 0xEF	; 239
     fe4:	92 e0       	ldi	r25, 0x02	; 2
     fe6:	ad b7       	in	r26, 0x3d	; 61
     fe8:	be b7       	in	r27, 0x3e	; 62
     fea:	12 96       	adiw	r26, 0x02	; 2
     fec:	9c 93       	st	X, r25
     fee:	8e 93       	st	-X, r24
     ff0:	11 97       	sbiw	r26, 0x01	; 1
     ff2:	14 96       	adiw	r26, 0x04	; 4
     ff4:	7c 93       	st	X, r23
     ff6:	6e 93       	st	-X, r22
     ff8:	13 97       	sbiw	r26, 0x03	; 3
     ffa:	0e 94 22 02 	call	0x444	; 0x444 <wifiprint>
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0e 94 28 06 	call	0xc50	; 0xc50 <WaitSendReadyWithoutPrint>
    100a:	99 23       	and	r25, r25
    100c:	2c f0       	brlt	.+10     	; 0x1018 <wifiSendData+0x4c>
    100e:	1c 16       	cp	r1, r28
    1010:	1d 06       	cpc	r1, r29
    1012:	0c f4       	brge	.+2      	; 0x1016 <wifiSendData+0x4a>
    1014:	4a c0       	rjmp	.+148    	; 0x10aa <wifiSendData+0xde>
    1016:	57 c0       	rjmp	.+174    	; 0x10c6 <wifiSendData+0xfa>
    1018:	0f 92       	push	r0
    101a:	0f 92       	push	r0
    101c:	8f ef       	ldi	r24, 0xFF	; 255
    101e:	92 e0       	ldi	r25, 0x02	; 2
    1020:	ed b7       	in	r30, 0x3d	; 61
    1022:	fe b7       	in	r31, 0x3e	; 62
    1024:	92 83       	std	Z+2, r25	; 0x02
    1026:	81 83       	std	Z+1, r24	; 0x01
    1028:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debugprint>
    102c:	88 e1       	ldi	r24, 0x18	; 24
    102e:	93 e0       	ldi	r25, 0x03	; 3
    1030:	ad b7       	in	r26, 0x3d	; 61
    1032:	be b7       	in	r27, 0x3e	; 62
    1034:	12 96       	adiw	r26, 0x02	; 2
    1036:	9c 93       	st	X, r25
    1038:	8e 93       	st	-X, r24
    103a:	11 97       	sbiw	r26, 0x01	; 1
    103c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debugprint>
    1040:	80 91 54 04 	lds	r24, 0x0454
    1044:	90 91 55 04 	lds	r25, 0x0455
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	18 16       	cp	r1, r24
    104e:	19 06       	cpc	r1, r25
    1050:	ec f5       	brge	.+122    	; 0x10cc <wifiSendData+0x100>
    1052:	c0 e0       	ldi	r28, 0x00	; 0
    1054:	d0 e0       	ldi	r29, 0x00	; 0
    1056:	05 ea       	ldi	r16, 0xA5	; 165
    1058:	18 e0       	ldi	r17, 0x08	; 8
    105a:	0f 2e       	mov	r0, r31
    105c:	fb e1       	ldi	r31, 0x1B	; 27
    105e:	ef 2e       	mov	r14, r31
    1060:	f3 e0       	ldi	r31, 0x03	; 3
    1062:	ff 2e       	mov	r15, r31
    1064:	f0 2d       	mov	r31, r0
    1066:	f8 01       	movw	r30, r16
    1068:	ec 0f       	add	r30, r28
    106a:	fd 1f       	adc	r31, r29
    106c:	80 81       	ld	r24, Z
    106e:	00 d0       	rcall	.+0      	; 0x1070 <wifiSendData+0xa4>
    1070:	0f 92       	push	r0
    1072:	ed b7       	in	r30, 0x3d	; 61
    1074:	fe b7       	in	r31, 0x3e	; 62
    1076:	31 96       	adiw	r30, 0x01	; 1
    1078:	ad b7       	in	r26, 0x3d	; 61
    107a:	be b7       	in	r27, 0x3e	; 62
    107c:	12 96       	adiw	r26, 0x02	; 2
    107e:	fc 92       	st	X, r15
    1080:	ee 92       	st	-X, r14
    1082:	11 97       	sbiw	r26, 0x01	; 1
    1084:	82 83       	std	Z+2, r24	; 0x02
    1086:	13 82       	std	Z+3, r1	; 0x03
    1088:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debugprint>
    108c:	21 96       	adiw	r28, 0x01	; 1
    108e:	80 91 54 04 	lds	r24, 0x0454
    1092:	90 91 55 04 	lds	r25, 0x0455
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	c8 17       	cp	r28, r24
    10a0:	d9 07       	cpc	r29, r25
    10a2:	0c f3       	brlt	.-62     	; 0x1066 <wifiSendData+0x9a>
    10a4:	8f ef       	ldi	r24, 0xFF	; 255
    10a6:	9f ef       	ldi	r25, 0xFF	; 255
    10a8:	13 c0       	rjmp	.+38     	; 0x10d0 <wifiSendData+0x104>
    10aa:	e0 2e       	mov	r14, r16
    10ac:	f1 2e       	mov	r15, r17
    10ae:	00 e0       	ldi	r16, 0x00	; 0
    10b0:	10 e0       	ldi	r17, 0x00	; 0
    10b2:	f7 01       	movw	r30, r14
    10b4:	81 91       	ld	r24, Z+
    10b6:	7f 01       	movw	r14, r30
    10b8:	0e 94 9e 01 	call	0x33c	; 0x33c <putCh0>
    10bc:	0f 5f       	subi	r16, 0xFF	; 255
    10be:	1f 4f       	sbci	r17, 0xFF	; 255
    10c0:	0c 17       	cp	r16, r28
    10c2:	1d 07       	cpc	r17, r29
    10c4:	b1 f7       	brne	.-20     	; 0x10b2 <wifiSendData+0xe6>
    10c6:	0e 94 87 06 	call	0xd0e	; 0xd0e <WaitSendOKWithoutPrint>
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <wifiSendData+0x104>
    10cc:	8f ef       	ldi	r24, 0xFF	; 255
    10ce:	9f ef       	ldi	r25, 0xFF	; 255
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	08 95       	ret

000010de <wificlearUartBuff>:
    10de:	10 92 59 04 	sts	0x0459, r1
    10e2:	10 92 55 04 	sts	0x0455, r1
    10e6:	10 92 54 04 	sts	0x0454, r1
    10ea:	08 95       	ret

000010ec <wifiAutoConnectDisable>:
    10ec:	0f 92       	push	r0
    10ee:	0f 92       	push	r0
    10f0:	82 e2       	ldi	r24, 0x22	; 34
    10f2:	93 e0       	ldi	r25, 0x03	; 3
    10f4:	ad b7       	in	r26, 0x3d	; 61
    10f6:	be b7       	in	r27, 0x3e	; 62
    10f8:	12 96       	adiw	r26, 0x02	; 2
    10fa:	9c 93       	st	X, r25
    10fc:	8e 93       	st	-X, r24
    10fe:	11 97       	sbiw	r26, 0x01	; 1
    1100:	0e 94 22 02 	call	0x444	; 0x444 <wifiprint>
    1104:	8f ef       	ldi	r24, 0xFF	; 255
    1106:	9f e3       	ldi	r25, 0x3F	; 63
    1108:	a2 e0       	ldi	r26, 0x02	; 2
    110a:	81 50       	subi	r24, 0x01	; 1
    110c:	90 40       	sbci	r25, 0x00	; 0
    110e:	a0 40       	sbci	r26, 0x00	; 0
    1110:	e1 f7       	brne	.-8      	; 0x110a <wifiAutoConnectDisable+0x1e>
    1112:	00 c0       	rjmp	.+0      	; 0x1114 <wifiAutoConnectDisable+0x28>
    1114:	00 00       	nop
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <WaitOk>
    111e:	08 95       	ret

00001120 <wifiEchoDisable>:
    1120:	0f 92       	push	r0
    1122:	0f 92       	push	r0
    1124:	84 e3       	ldi	r24, 0x34	; 52
    1126:	93 e0       	ldi	r25, 0x03	; 3
    1128:	ad b7       	in	r26, 0x3d	; 61
    112a:	be b7       	in	r27, 0x3e	; 62
    112c:	12 96       	adiw	r26, 0x02	; 2
    112e:	9c 93       	st	X, r25
    1130:	8e 93       	st	-X, r24
    1132:	11 97       	sbiw	r26, 0x01	; 1
    1134:	0e 94 22 02 	call	0x444	; 0x444 <wifiprint>
    1138:	8f ef       	ldi	r24, 0xFF	; 255
    113a:	9f e7       	ldi	r25, 0x7F	; 127
    113c:	a4 e0       	ldi	r26, 0x04	; 4
    113e:	81 50       	subi	r24, 0x01	; 1
    1140:	90 40       	sbci	r25, 0x00	; 0
    1142:	a0 40       	sbci	r26, 0x00	; 0
    1144:	e1 f7       	brne	.-8      	; 0x113e <wifiEchoDisable+0x1e>
    1146:	00 c0       	rjmp	.+0      	; 0x1148 <wifiEchoDisable+0x28>
    1148:	00 00       	nop
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0e 94 6f 08 	call	0x10de	; 0x10de <wificlearUartBuff>
    1152:	08 95       	ret

00001154 <pinMode>:
//	G (PORTG), H (PORTH), J (PORTJ), K (PORTK), L (PORTL),
// pin  = 0~7
// mode = 0(Input), 1(OutPut)
void pinMode(uint8_t port,uint8_t pin,uint8_t mode)
{
	if(port == A) {
    1154:	88 23       	and	r24, r24
    1156:	e9 f4       	brne	.+58     	; 0x1192 <pinMode+0x3e>
		if(mode) {
    1158:	44 23       	and	r20, r20
    115a:	69 f0       	breq	.+26     	; 0x1176 <pinMode+0x22>
			sbit(DDRA,pin);	
    115c:	21 b1       	in	r18, 0x01	; 1
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	ac 01       	movw	r20, r24
    1164:	02 c0       	rjmp	.+4      	; 0x116a <pinMode+0x16>
    1166:	44 0f       	add	r20, r20
    1168:	55 1f       	adc	r21, r21
    116a:	6a 95       	dec	r22
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <pinMode+0x12>
    116e:	ba 01       	movw	r22, r20
    1170:	62 2b       	or	r22, r18
    1172:	61 b9       	out	0x01, r22	; 1
    1174:	08 95       	ret
		}
		else {
			cbit(DDRA,pin);
    1176:	21 b1       	in	r18, 0x01	; 1
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	ac 01       	movw	r20, r24
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <pinMode+0x30>
    1180:	44 0f       	add	r20, r20
    1182:	55 1f       	adc	r21, r21
    1184:	6a 95       	dec	r22
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <pinMode+0x2c>
    1188:	ba 01       	movw	r22, r20
    118a:	60 95       	com	r22
    118c:	62 23       	and	r22, r18
    118e:	61 b9       	out	0x01, r22	; 1
    1190:	08 95       	ret
		}	
	}
	else if(port == B) {
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	e9 f4       	brne	.+58     	; 0x11d0 <pinMode+0x7c>
		if(mode) {
    1196:	44 23       	and	r20, r20
    1198:	69 f0       	breq	.+26     	; 0x11b4 <pinMode+0x60>
			sbit(DDRB,pin);	
    119a:	24 b1       	in	r18, 0x04	; 4
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	ac 01       	movw	r20, r24
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <pinMode+0x54>
    11a4:	44 0f       	add	r20, r20
    11a6:	55 1f       	adc	r21, r21
    11a8:	6a 95       	dec	r22
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <pinMode+0x50>
    11ac:	ba 01       	movw	r22, r20
    11ae:	62 2b       	or	r22, r18
    11b0:	64 b9       	out	0x04, r22	; 4
    11b2:	08 95       	ret
		}
		else {
			cbit(DDRB,pin);
    11b4:	24 b1       	in	r18, 0x04	; 4
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	ac 01       	movw	r20, r24
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <pinMode+0x6e>
    11be:	44 0f       	add	r20, r20
    11c0:	55 1f       	adc	r21, r21
    11c2:	6a 95       	dec	r22
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <pinMode+0x6a>
    11c6:	ba 01       	movw	r22, r20
    11c8:	60 95       	com	r22
    11ca:	62 23       	and	r22, r18
    11cc:	64 b9       	out	0x04, r22	; 4
    11ce:	08 95       	ret
		}	
	}
	else if(port == C) {
    11d0:	82 30       	cpi	r24, 0x02	; 2
    11d2:	e9 f4       	brne	.+58     	; 0x120e <pinMode+0xba>
		if(mode) {
    11d4:	44 23       	and	r20, r20
    11d6:	69 f0       	breq	.+26     	; 0x11f2 <pinMode+0x9e>
			sbit(DDRC,pin);	
    11d8:	27 b1       	in	r18, 0x07	; 7
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	ac 01       	movw	r20, r24
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <pinMode+0x92>
    11e2:	44 0f       	add	r20, r20
    11e4:	55 1f       	adc	r21, r21
    11e6:	6a 95       	dec	r22
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <pinMode+0x8e>
    11ea:	ba 01       	movw	r22, r20
    11ec:	62 2b       	or	r22, r18
    11ee:	67 b9       	out	0x07, r22	; 7
    11f0:	08 95       	ret
		}
		else {
			cbit(DDRC,pin);
    11f2:	27 b1       	in	r18, 0x07	; 7
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	ac 01       	movw	r20, r24
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <pinMode+0xac>
    11fc:	44 0f       	add	r20, r20
    11fe:	55 1f       	adc	r21, r21
    1200:	6a 95       	dec	r22
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <pinMode+0xa8>
    1204:	ba 01       	movw	r22, r20
    1206:	60 95       	com	r22
    1208:	62 23       	and	r22, r18
    120a:	67 b9       	out	0x07, r22	; 7
    120c:	08 95       	ret
		}
	}	
	else if(port == D) {
    120e:	83 30       	cpi	r24, 0x03	; 3
    1210:	e9 f4       	brne	.+58     	; 0x124c <pinMode+0xf8>
		if(mode) {
    1212:	44 23       	and	r20, r20
    1214:	69 f0       	breq	.+26     	; 0x1230 <pinMode+0xdc>
			sbit(DDRD,pin);	
    1216:	2a b1       	in	r18, 0x0a	; 10
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	ac 01       	movw	r20, r24
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <pinMode+0xd0>
    1220:	44 0f       	add	r20, r20
    1222:	55 1f       	adc	r21, r21
    1224:	6a 95       	dec	r22
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <pinMode+0xcc>
    1228:	ba 01       	movw	r22, r20
    122a:	62 2b       	or	r22, r18
    122c:	6a b9       	out	0x0a, r22	; 10
    122e:	08 95       	ret
		}
		else {
			cbit(DDRD,pin);
    1230:	2a b1       	in	r18, 0x0a	; 10
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	ac 01       	movw	r20, r24
    1238:	02 c0       	rjmp	.+4      	; 0x123e <pinMode+0xea>
    123a:	44 0f       	add	r20, r20
    123c:	55 1f       	adc	r21, r21
    123e:	6a 95       	dec	r22
    1240:	e2 f7       	brpl	.-8      	; 0x123a <pinMode+0xe6>
    1242:	ba 01       	movw	r22, r20
    1244:	60 95       	com	r22
    1246:	62 23       	and	r22, r18
    1248:	6a b9       	out	0x0a, r22	; 10
    124a:	08 95       	ret
		}
	}
	else if(port == E) {
    124c:	84 30       	cpi	r24, 0x04	; 4
    124e:	e9 f4       	brne	.+58     	; 0x128a <pinMode+0x136>
		if(mode) {
    1250:	44 23       	and	r20, r20
    1252:	69 f0       	breq	.+26     	; 0x126e <pinMode+0x11a>
			sbit(DDRE,pin);	
    1254:	2d b1       	in	r18, 0x0d	; 13
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	ac 01       	movw	r20, r24
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <pinMode+0x10e>
    125e:	44 0f       	add	r20, r20
    1260:	55 1f       	adc	r21, r21
    1262:	6a 95       	dec	r22
    1264:	e2 f7       	brpl	.-8      	; 0x125e <pinMode+0x10a>
    1266:	ba 01       	movw	r22, r20
    1268:	62 2b       	or	r22, r18
    126a:	6d b9       	out	0x0d, r22	; 13
    126c:	08 95       	ret
		}
		else {
			cbit(DDRE,pin);
    126e:	2d b1       	in	r18, 0x0d	; 13
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	ac 01       	movw	r20, r24
    1276:	02 c0       	rjmp	.+4      	; 0x127c <pinMode+0x128>
    1278:	44 0f       	add	r20, r20
    127a:	55 1f       	adc	r21, r21
    127c:	6a 95       	dec	r22
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <pinMode+0x124>
    1280:	ba 01       	movw	r22, r20
    1282:	60 95       	com	r22
    1284:	62 23       	and	r22, r18
    1286:	6d b9       	out	0x0d, r22	; 13
    1288:	08 95       	ret
		}
	}
	else if(port == F) {
    128a:	85 30       	cpi	r24, 0x05	; 5
    128c:	e9 f4       	brne	.+58     	; 0x12c8 <pinMode+0x174>
		if(mode) {
    128e:	44 23       	and	r20, r20
    1290:	69 f0       	breq	.+26     	; 0x12ac <pinMode+0x158>
			sbit(DDRF,pin);	
    1292:	20 b3       	in	r18, 0x10	; 16
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	ac 01       	movw	r20, r24
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <pinMode+0x14c>
    129c:	44 0f       	add	r20, r20
    129e:	55 1f       	adc	r21, r21
    12a0:	6a 95       	dec	r22
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <pinMode+0x148>
    12a4:	ba 01       	movw	r22, r20
    12a6:	62 2b       	or	r22, r18
    12a8:	60 bb       	out	0x10, r22	; 16
    12aa:	08 95       	ret
		}
		else {
			cbit(DDRF,pin);
    12ac:	20 b3       	in	r18, 0x10	; 16
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	ac 01       	movw	r20, r24
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <pinMode+0x166>
    12b6:	44 0f       	add	r20, r20
    12b8:	55 1f       	adc	r21, r21
    12ba:	6a 95       	dec	r22
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <pinMode+0x162>
    12be:	ba 01       	movw	r22, r20
    12c0:	60 95       	com	r22
    12c2:	62 23       	and	r22, r18
    12c4:	60 bb       	out	0x10, r22	; 16
    12c6:	08 95       	ret
		}
	}
	else if(port == G) {
    12c8:	86 30       	cpi	r24, 0x06	; 6
    12ca:	e9 f4       	brne	.+58     	; 0x1306 <pinMode+0x1b2>
		if(mode) {
    12cc:	44 23       	and	r20, r20
    12ce:	69 f0       	breq	.+26     	; 0x12ea <pinMode+0x196>
			sbit(DDRG,pin);	
    12d0:	23 b3       	in	r18, 0x13	; 19
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	ac 01       	movw	r20, r24
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <pinMode+0x18a>
    12da:	44 0f       	add	r20, r20
    12dc:	55 1f       	adc	r21, r21
    12de:	6a 95       	dec	r22
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <pinMode+0x186>
    12e2:	ba 01       	movw	r22, r20
    12e4:	62 2b       	or	r22, r18
    12e6:	63 bb       	out	0x13, r22	; 19
    12e8:	08 95       	ret
		}
		else {
			cbit(DDRG,pin);
    12ea:	23 b3       	in	r18, 0x13	; 19
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	ac 01       	movw	r20, r24
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <pinMode+0x1a4>
    12f4:	44 0f       	add	r20, r20
    12f6:	55 1f       	adc	r21, r21
    12f8:	6a 95       	dec	r22
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <pinMode+0x1a0>
    12fc:	ba 01       	movw	r22, r20
    12fe:	60 95       	com	r22
    1300:	62 23       	and	r22, r18
    1302:	63 bb       	out	0x13, r22	; 19
    1304:	08 95       	ret
		}
	}
	else if(port == H) {
    1306:	87 30       	cpi	r24, 0x07	; 7
    1308:	09 f5       	brne	.+66     	; 0x134c <pinMode+0x1f8>
		if(mode) {
    130a:	44 23       	and	r20, r20
    130c:	79 f0       	breq	.+30     	; 0x132c <pinMode+0x1d8>
			sbit(DDRH,pin);	
    130e:	e1 e0       	ldi	r30, 0x01	; 1
    1310:	f1 e0       	ldi	r31, 0x01	; 1
    1312:	20 81       	ld	r18, Z
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	ac 01       	movw	r20, r24
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <pinMode+0x1cc>
    131c:	44 0f       	add	r20, r20
    131e:	55 1f       	adc	r21, r21
    1320:	6a 95       	dec	r22
    1322:	e2 f7       	brpl	.-8      	; 0x131c <pinMode+0x1c8>
    1324:	ba 01       	movw	r22, r20
    1326:	62 2b       	or	r22, r18
    1328:	60 83       	st	Z, r22
    132a:	08 95       	ret
		}
		else {
			cbit(DDRH,pin);
    132c:	e1 e0       	ldi	r30, 0x01	; 1
    132e:	f1 e0       	ldi	r31, 0x01	; 1
    1330:	20 81       	ld	r18, Z
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	ac 01       	movw	r20, r24
    1338:	02 c0       	rjmp	.+4      	; 0x133e <pinMode+0x1ea>
    133a:	44 0f       	add	r20, r20
    133c:	55 1f       	adc	r21, r21
    133e:	6a 95       	dec	r22
    1340:	e2 f7       	brpl	.-8      	; 0x133a <pinMode+0x1e6>
    1342:	ba 01       	movw	r22, r20
    1344:	60 95       	com	r22
    1346:	62 23       	and	r22, r18
    1348:	60 83       	st	Z, r22
    134a:	08 95       	ret
		}
	}
	// PORTI is not present
	else if(port == J) {
    134c:	89 30       	cpi	r24, 0x09	; 9
    134e:	09 f5       	brne	.+66     	; 0x1392 <pinMode+0x23e>
		if(mode) {
    1350:	44 23       	and	r20, r20
    1352:	79 f0       	breq	.+30     	; 0x1372 <pinMode+0x21e>
			sbit(DDRJ,pin);	
    1354:	e4 e0       	ldi	r30, 0x04	; 4
    1356:	f1 e0       	ldi	r31, 0x01	; 1
    1358:	20 81       	ld	r18, Z
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	ac 01       	movw	r20, r24
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <pinMode+0x212>
    1362:	44 0f       	add	r20, r20
    1364:	55 1f       	adc	r21, r21
    1366:	6a 95       	dec	r22
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <pinMode+0x20e>
    136a:	ba 01       	movw	r22, r20
    136c:	62 2b       	or	r22, r18
    136e:	60 83       	st	Z, r22
    1370:	08 95       	ret
		}
		else {
			cbit(DDRJ,pin);
    1372:	e4 e0       	ldi	r30, 0x04	; 4
    1374:	f1 e0       	ldi	r31, 0x01	; 1
    1376:	20 81       	ld	r18, Z
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	ac 01       	movw	r20, r24
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <pinMode+0x230>
    1380:	44 0f       	add	r20, r20
    1382:	55 1f       	adc	r21, r21
    1384:	6a 95       	dec	r22
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <pinMode+0x22c>
    1388:	ba 01       	movw	r22, r20
    138a:	60 95       	com	r22
    138c:	62 23       	and	r22, r18
    138e:	60 83       	st	Z, r22
    1390:	08 95       	ret
		}
	}
	else if(port == K) {
    1392:	8a 30       	cpi	r24, 0x0A	; 10
    1394:	09 f5       	brne	.+66     	; 0x13d8 <pinMode+0x284>
		if(mode) {
    1396:	44 23       	and	r20, r20
    1398:	79 f0       	breq	.+30     	; 0x13b8 <pinMode+0x264>
			sbit(DDRK,pin);
    139a:	e7 e0       	ldi	r30, 0x07	; 7
    139c:	f1 e0       	ldi	r31, 0x01	; 1
    139e:	20 81       	ld	r18, Z
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	ac 01       	movw	r20, r24
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <pinMode+0x258>
    13a8:	44 0f       	add	r20, r20
    13aa:	55 1f       	adc	r21, r21
    13ac:	6a 95       	dec	r22
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <pinMode+0x254>
    13b0:	ba 01       	movw	r22, r20
    13b2:	62 2b       	or	r22, r18
    13b4:	60 83       	st	Z, r22
    13b6:	08 95       	ret
		}
		else {
			cbit(DDRK,pin);
    13b8:	e7 e0       	ldi	r30, 0x07	; 7
    13ba:	f1 e0       	ldi	r31, 0x01	; 1
    13bc:	20 81       	ld	r18, Z
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	ac 01       	movw	r20, r24
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <pinMode+0x276>
    13c6:	44 0f       	add	r20, r20
    13c8:	55 1f       	adc	r21, r21
    13ca:	6a 95       	dec	r22
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <pinMode+0x272>
    13ce:	ba 01       	movw	r22, r20
    13d0:	60 95       	com	r22
    13d2:	62 23       	and	r22, r18
    13d4:	60 83       	st	Z, r22
    13d6:	08 95       	ret
		}
	}
	else if(port == L) {
    13d8:	8b 30       	cpi	r24, 0x0B	; 11
    13da:	01 f5       	brne	.+64     	; 0x141c <pinMode+0x2c8>
		if(mode) {
    13dc:	44 23       	and	r20, r20
    13de:	79 f0       	breq	.+30     	; 0x13fe <pinMode+0x2aa>
			sbit(DDRL,pin);
    13e0:	ea e0       	ldi	r30, 0x0A	; 10
    13e2:	f1 e0       	ldi	r31, 0x01	; 1
    13e4:	20 81       	ld	r18, Z
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	ac 01       	movw	r20, r24
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <pinMode+0x29e>
    13ee:	44 0f       	add	r20, r20
    13f0:	55 1f       	adc	r21, r21
    13f2:	6a 95       	dec	r22
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <pinMode+0x29a>
    13f6:	ba 01       	movw	r22, r20
    13f8:	62 2b       	or	r22, r18
    13fa:	60 83       	st	Z, r22
    13fc:	08 95       	ret
		}
		else {
			cbit(DDRL,pin);
    13fe:	ea e0       	ldi	r30, 0x0A	; 10
    1400:	f1 e0       	ldi	r31, 0x01	; 1
    1402:	20 81       	ld	r18, Z
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	ac 01       	movw	r20, r24
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <pinMode+0x2bc>
    140c:	44 0f       	add	r20, r20
    140e:	55 1f       	adc	r21, r21
    1410:	6a 95       	dec	r22
    1412:	e2 f7       	brpl	.-8      	; 0x140c <pinMode+0x2b8>
    1414:	ba 01       	movw	r22, r20
    1416:	60 95       	com	r22
    1418:	62 23       	and	r22, r18
    141a:	60 83       	st	Z, r22
    141c:	08 95       	ret

0000141e <digitalWrite>:
//	G (PORTG), H (PORTH), J (PORTJ), K (PORTK), L (PORTL),
// pin  = 0~7
// signal = 0(LOW), 1(HIGH)
void digitalWrite(uint8_t port, uint8_t pin, uint8_t signal)
{
	if(port == A) {
    141e:	88 23       	and	r24, r24
    1420:	e9 f4       	brne	.+58     	; 0x145c <digitalWrite+0x3e>
		if(signal) {
    1422:	44 23       	and	r20, r20
    1424:	69 f0       	breq	.+26     	; 0x1440 <digitalWrite+0x22>
			sbit(PORTA,pin);
    1426:	22 b1       	in	r18, 0x02	; 2
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	ac 01       	movw	r20, r24
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <digitalWrite+0x16>
    1430:	44 0f       	add	r20, r20
    1432:	55 1f       	adc	r21, r21
    1434:	6a 95       	dec	r22
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <digitalWrite+0x12>
    1438:	ba 01       	movw	r22, r20
    143a:	62 2b       	or	r22, r18
    143c:	62 b9       	out	0x02, r22	; 2
    143e:	08 95       	ret
		}
		else {
			cbit(PORTA,pin);
    1440:	22 b1       	in	r18, 0x02	; 2
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	ac 01       	movw	r20, r24
    1448:	02 c0       	rjmp	.+4      	; 0x144e <digitalWrite+0x30>
    144a:	44 0f       	add	r20, r20
    144c:	55 1f       	adc	r21, r21
    144e:	6a 95       	dec	r22
    1450:	e2 f7       	brpl	.-8      	; 0x144a <digitalWrite+0x2c>
    1452:	ba 01       	movw	r22, r20
    1454:	60 95       	com	r22
    1456:	62 23       	and	r22, r18
    1458:	62 b9       	out	0x02, r22	; 2
    145a:	08 95       	ret
		}
	}
	else if(port == B) {
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	e9 f4       	brne	.+58     	; 0x149a <digitalWrite+0x7c>
		if(signal) {
    1460:	44 23       	and	r20, r20
    1462:	69 f0       	breq	.+26     	; 0x147e <digitalWrite+0x60>
			sbit(PORTB,pin);
    1464:	25 b1       	in	r18, 0x05	; 5
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	ac 01       	movw	r20, r24
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <digitalWrite+0x54>
    146e:	44 0f       	add	r20, r20
    1470:	55 1f       	adc	r21, r21
    1472:	6a 95       	dec	r22
    1474:	e2 f7       	brpl	.-8      	; 0x146e <digitalWrite+0x50>
    1476:	ba 01       	movw	r22, r20
    1478:	62 2b       	or	r22, r18
    147a:	65 b9       	out	0x05, r22	; 5
    147c:	08 95       	ret
		}
		else {
			cbit(PORTB,pin);
    147e:	25 b1       	in	r18, 0x05	; 5
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	ac 01       	movw	r20, r24
    1486:	02 c0       	rjmp	.+4      	; 0x148c <digitalWrite+0x6e>
    1488:	44 0f       	add	r20, r20
    148a:	55 1f       	adc	r21, r21
    148c:	6a 95       	dec	r22
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <digitalWrite+0x6a>
    1490:	ba 01       	movw	r22, r20
    1492:	60 95       	com	r22
    1494:	62 23       	and	r22, r18
    1496:	65 b9       	out	0x05, r22	; 5
    1498:	08 95       	ret
		}
	}
	else if(port == C) {
    149a:	82 30       	cpi	r24, 0x02	; 2
    149c:	e9 f4       	brne	.+58     	; 0x14d8 <digitalWrite+0xba>
		if(signal) {
    149e:	44 23       	and	r20, r20
    14a0:	69 f0       	breq	.+26     	; 0x14bc <digitalWrite+0x9e>
			sbit(PORTC,pin);
    14a2:	28 b1       	in	r18, 0x08	; 8
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	ac 01       	movw	r20, r24
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <digitalWrite+0x92>
    14ac:	44 0f       	add	r20, r20
    14ae:	55 1f       	adc	r21, r21
    14b0:	6a 95       	dec	r22
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <digitalWrite+0x8e>
    14b4:	ba 01       	movw	r22, r20
    14b6:	62 2b       	or	r22, r18
    14b8:	68 b9       	out	0x08, r22	; 8
    14ba:	08 95       	ret
		}
		else {
			cbit(PORTC,pin);
    14bc:	28 b1       	in	r18, 0x08	; 8
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	ac 01       	movw	r20, r24
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <digitalWrite+0xac>
    14c6:	44 0f       	add	r20, r20
    14c8:	55 1f       	adc	r21, r21
    14ca:	6a 95       	dec	r22
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <digitalWrite+0xa8>
    14ce:	ba 01       	movw	r22, r20
    14d0:	60 95       	com	r22
    14d2:	62 23       	and	r22, r18
    14d4:	68 b9       	out	0x08, r22	; 8
    14d6:	08 95       	ret
		}
	}
	else if(port == D) {
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	e9 f4       	brne	.+58     	; 0x1516 <digitalWrite+0xf8>
		if(signal) {
    14dc:	44 23       	and	r20, r20
    14de:	69 f0       	breq	.+26     	; 0x14fa <digitalWrite+0xdc>
			sbit(PORTD,pin);
    14e0:	2b b1       	in	r18, 0x0b	; 11
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	ac 01       	movw	r20, r24
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <digitalWrite+0xd0>
    14ea:	44 0f       	add	r20, r20
    14ec:	55 1f       	adc	r21, r21
    14ee:	6a 95       	dec	r22
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <digitalWrite+0xcc>
    14f2:	ba 01       	movw	r22, r20
    14f4:	62 2b       	or	r22, r18
    14f6:	6b b9       	out	0x0b, r22	; 11
    14f8:	08 95       	ret
		}
		else {
			cbit(PORTD,pin);
    14fa:	2b b1       	in	r18, 0x0b	; 11
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	ac 01       	movw	r20, r24
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <digitalWrite+0xea>
    1504:	44 0f       	add	r20, r20
    1506:	55 1f       	adc	r21, r21
    1508:	6a 95       	dec	r22
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <digitalWrite+0xe6>
    150c:	ba 01       	movw	r22, r20
    150e:	60 95       	com	r22
    1510:	62 23       	and	r22, r18
    1512:	6b b9       	out	0x0b, r22	; 11
    1514:	08 95       	ret
		}
	}
	else if(port == E) {
    1516:	84 30       	cpi	r24, 0x04	; 4
    1518:	e9 f4       	brne	.+58     	; 0x1554 <digitalWrite+0x136>
		if(signal) {
    151a:	44 23       	and	r20, r20
    151c:	69 f0       	breq	.+26     	; 0x1538 <digitalWrite+0x11a>
			sbit(PORTE,pin);
    151e:	2e b1       	in	r18, 0x0e	; 14
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	ac 01       	movw	r20, r24
    1526:	02 c0       	rjmp	.+4      	; 0x152c <digitalWrite+0x10e>
    1528:	44 0f       	add	r20, r20
    152a:	55 1f       	adc	r21, r21
    152c:	6a 95       	dec	r22
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <digitalWrite+0x10a>
    1530:	ba 01       	movw	r22, r20
    1532:	62 2b       	or	r22, r18
    1534:	6e b9       	out	0x0e, r22	; 14
    1536:	08 95       	ret
		}
		else {
			cbit(PORTE,pin);
    1538:	2e b1       	in	r18, 0x0e	; 14
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	ac 01       	movw	r20, r24
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <digitalWrite+0x128>
    1542:	44 0f       	add	r20, r20
    1544:	55 1f       	adc	r21, r21
    1546:	6a 95       	dec	r22
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <digitalWrite+0x124>
    154a:	ba 01       	movw	r22, r20
    154c:	60 95       	com	r22
    154e:	62 23       	and	r22, r18
    1550:	6e b9       	out	0x0e, r22	; 14
    1552:	08 95       	ret
		}
	}
	else if(port == F) {
    1554:	85 30       	cpi	r24, 0x05	; 5
    1556:	e9 f4       	brne	.+58     	; 0x1592 <digitalWrite+0x174>
		if(signal) {
    1558:	44 23       	and	r20, r20
    155a:	69 f0       	breq	.+26     	; 0x1576 <digitalWrite+0x158>
			sbit(PORTF,pin);
    155c:	21 b3       	in	r18, 0x11	; 17
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	ac 01       	movw	r20, r24
    1564:	02 c0       	rjmp	.+4      	; 0x156a <digitalWrite+0x14c>
    1566:	44 0f       	add	r20, r20
    1568:	55 1f       	adc	r21, r21
    156a:	6a 95       	dec	r22
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <digitalWrite+0x148>
    156e:	ba 01       	movw	r22, r20
    1570:	62 2b       	or	r22, r18
    1572:	61 bb       	out	0x11, r22	; 17
    1574:	08 95       	ret
		}
		else {
			cbit(PORTF,pin);
    1576:	21 b3       	in	r18, 0x11	; 17
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	ac 01       	movw	r20, r24
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <digitalWrite+0x166>
    1580:	44 0f       	add	r20, r20
    1582:	55 1f       	adc	r21, r21
    1584:	6a 95       	dec	r22
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <digitalWrite+0x162>
    1588:	ba 01       	movw	r22, r20
    158a:	60 95       	com	r22
    158c:	62 23       	and	r22, r18
    158e:	61 bb       	out	0x11, r22	; 17
    1590:	08 95       	ret
		}
	}
	else if(port == G) {
    1592:	86 30       	cpi	r24, 0x06	; 6
    1594:	e9 f4       	brne	.+58     	; 0x15d0 <digitalWrite+0x1b2>
		if(signal) {
    1596:	44 23       	and	r20, r20
    1598:	69 f0       	breq	.+26     	; 0x15b4 <digitalWrite+0x196>
			sbit(PORTG,pin);
    159a:	24 b3       	in	r18, 0x14	; 20
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	ac 01       	movw	r20, r24
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <digitalWrite+0x18a>
    15a4:	44 0f       	add	r20, r20
    15a6:	55 1f       	adc	r21, r21
    15a8:	6a 95       	dec	r22
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <digitalWrite+0x186>
    15ac:	ba 01       	movw	r22, r20
    15ae:	62 2b       	or	r22, r18
    15b0:	64 bb       	out	0x14, r22	; 20
    15b2:	08 95       	ret
		}
		else {
			cbit(PORTG,pin);
    15b4:	24 b3       	in	r18, 0x14	; 20
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	ac 01       	movw	r20, r24
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <digitalWrite+0x1a4>
    15be:	44 0f       	add	r20, r20
    15c0:	55 1f       	adc	r21, r21
    15c2:	6a 95       	dec	r22
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <digitalWrite+0x1a0>
    15c6:	ba 01       	movw	r22, r20
    15c8:	60 95       	com	r22
    15ca:	62 23       	and	r22, r18
    15cc:	64 bb       	out	0x14, r22	; 20
    15ce:	08 95       	ret
		}
	}
	else if(port == H) {
    15d0:	87 30       	cpi	r24, 0x07	; 7
    15d2:	09 f5       	brne	.+66     	; 0x1616 <digitalWrite+0x1f8>
		if(signal) {
    15d4:	44 23       	and	r20, r20
    15d6:	79 f0       	breq	.+30     	; 0x15f6 <digitalWrite+0x1d8>
			sbit(PORTH,pin);
    15d8:	e2 e0       	ldi	r30, 0x02	; 2
    15da:	f1 e0       	ldi	r31, 0x01	; 1
    15dc:	20 81       	ld	r18, Z
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	ac 01       	movw	r20, r24
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <digitalWrite+0x1cc>
    15e6:	44 0f       	add	r20, r20
    15e8:	55 1f       	adc	r21, r21
    15ea:	6a 95       	dec	r22
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <digitalWrite+0x1c8>
    15ee:	ba 01       	movw	r22, r20
    15f0:	62 2b       	or	r22, r18
    15f2:	60 83       	st	Z, r22
    15f4:	08 95       	ret
		}
		else {
			cbit(PORTH,pin);
    15f6:	e2 e0       	ldi	r30, 0x02	; 2
    15f8:	f1 e0       	ldi	r31, 0x01	; 1
    15fa:	20 81       	ld	r18, Z
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	ac 01       	movw	r20, r24
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <digitalWrite+0x1ea>
    1604:	44 0f       	add	r20, r20
    1606:	55 1f       	adc	r21, r21
    1608:	6a 95       	dec	r22
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <digitalWrite+0x1e6>
    160c:	ba 01       	movw	r22, r20
    160e:	60 95       	com	r22
    1610:	62 23       	and	r22, r18
    1612:	60 83       	st	Z, r22
    1614:	08 95       	ret
		}
	}
	// PORTI is not present
	else if(port == J) {
    1616:	89 30       	cpi	r24, 0x09	; 9
    1618:	09 f5       	brne	.+66     	; 0x165c <digitalWrite+0x23e>
		if(signal) {
    161a:	44 23       	and	r20, r20
    161c:	79 f0       	breq	.+30     	; 0x163c <digitalWrite+0x21e>
			sbit(PORTJ,pin);
    161e:	e5 e0       	ldi	r30, 0x05	; 5
    1620:	f1 e0       	ldi	r31, 0x01	; 1
    1622:	20 81       	ld	r18, Z
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	ac 01       	movw	r20, r24
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <digitalWrite+0x212>
    162c:	44 0f       	add	r20, r20
    162e:	55 1f       	adc	r21, r21
    1630:	6a 95       	dec	r22
    1632:	e2 f7       	brpl	.-8      	; 0x162c <digitalWrite+0x20e>
    1634:	ba 01       	movw	r22, r20
    1636:	62 2b       	or	r22, r18
    1638:	60 83       	st	Z, r22
    163a:	08 95       	ret
		}
		else {
			cbit(PORTJ,pin);
    163c:	e5 e0       	ldi	r30, 0x05	; 5
    163e:	f1 e0       	ldi	r31, 0x01	; 1
    1640:	20 81       	ld	r18, Z
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	ac 01       	movw	r20, r24
    1648:	02 c0       	rjmp	.+4      	; 0x164e <digitalWrite+0x230>
    164a:	44 0f       	add	r20, r20
    164c:	55 1f       	adc	r21, r21
    164e:	6a 95       	dec	r22
    1650:	e2 f7       	brpl	.-8      	; 0x164a <digitalWrite+0x22c>
    1652:	ba 01       	movw	r22, r20
    1654:	60 95       	com	r22
    1656:	62 23       	and	r22, r18
    1658:	60 83       	st	Z, r22
    165a:	08 95       	ret
		}
	}
	else if(port == K) {
    165c:	8a 30       	cpi	r24, 0x0A	; 10
    165e:	09 f5       	brne	.+66     	; 0x16a2 <digitalWrite+0x284>
		if(signal) {
    1660:	44 23       	and	r20, r20
    1662:	79 f0       	breq	.+30     	; 0x1682 <digitalWrite+0x264>
			sbit(PORTK,pin);
    1664:	e8 e0       	ldi	r30, 0x08	; 8
    1666:	f1 e0       	ldi	r31, 0x01	; 1
    1668:	20 81       	ld	r18, Z
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	ac 01       	movw	r20, r24
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <digitalWrite+0x258>
    1672:	44 0f       	add	r20, r20
    1674:	55 1f       	adc	r21, r21
    1676:	6a 95       	dec	r22
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <digitalWrite+0x254>
    167a:	ba 01       	movw	r22, r20
    167c:	62 2b       	or	r22, r18
    167e:	60 83       	st	Z, r22
    1680:	08 95       	ret
		}
		else {
			cbit(PORTK,pin);
    1682:	e8 e0       	ldi	r30, 0x08	; 8
    1684:	f1 e0       	ldi	r31, 0x01	; 1
    1686:	20 81       	ld	r18, Z
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	ac 01       	movw	r20, r24
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <digitalWrite+0x276>
    1690:	44 0f       	add	r20, r20
    1692:	55 1f       	adc	r21, r21
    1694:	6a 95       	dec	r22
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <digitalWrite+0x272>
    1698:	ba 01       	movw	r22, r20
    169a:	60 95       	com	r22
    169c:	62 23       	and	r22, r18
    169e:	60 83       	st	Z, r22
    16a0:	08 95       	ret
		}
	}
	else if(port == L) {
    16a2:	8b 30       	cpi	r24, 0x0B	; 11
    16a4:	01 f5       	brne	.+64     	; 0x16e6 <digitalWrite+0x2c8>
		if(signal) {
    16a6:	44 23       	and	r20, r20
    16a8:	79 f0       	breq	.+30     	; 0x16c8 <digitalWrite+0x2aa>
			sbit(PORTL,pin);
    16aa:	eb e0       	ldi	r30, 0x0B	; 11
    16ac:	f1 e0       	ldi	r31, 0x01	; 1
    16ae:	20 81       	ld	r18, Z
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	ac 01       	movw	r20, r24
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <digitalWrite+0x29e>
    16b8:	44 0f       	add	r20, r20
    16ba:	55 1f       	adc	r21, r21
    16bc:	6a 95       	dec	r22
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <digitalWrite+0x29a>
    16c0:	ba 01       	movw	r22, r20
    16c2:	62 2b       	or	r22, r18
    16c4:	60 83       	st	Z, r22
    16c6:	08 95       	ret
		}
		else {
			cbit(PORTL,pin);
    16c8:	eb e0       	ldi	r30, 0x0B	; 11
    16ca:	f1 e0       	ldi	r31, 0x01	; 1
    16cc:	20 81       	ld	r18, Z
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	ac 01       	movw	r20, r24
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <digitalWrite+0x2bc>
    16d6:	44 0f       	add	r20, r20
    16d8:	55 1f       	adc	r21, r21
    16da:	6a 95       	dec	r22
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <digitalWrite+0x2b8>
    16de:	ba 01       	movw	r22, r20
    16e0:	60 95       	com	r22
    16e2:	62 23       	and	r22, r18
    16e4:	60 83       	st	Z, r22
    16e6:	08 95       	ret

000016e8 <digitalRead>:
//	G (PORTG), H (PORTH), J (PORTJ), K (PORTK), L (PORTL),
// pin  = 0~7
int digitalRead(uint8_t port, uint8_t pin)
{
	unsigned char ucReadValue;
	if(port == A)
    16e8:	88 23       	and	r24, r24
    16ea:	59 f4       	brne	.+22     	; 0x1702 <digitalRead+0x1a>
	{
		ucReadValue = (PINA>>pin)&0x01;
    16ec:	20 b1       	in	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	c9 01       	movw	r24, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <digitalRead+0x10>
    16f4:	95 95       	asr	r25
    16f6:	87 95       	ror	r24
    16f8:	6a 95       	dec	r22
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <digitalRead+0xc>
    16fc:	98 2f       	mov	r25, r24
    16fe:	91 70       	andi	r25, 0x01	; 1
    1700:	7b c0       	rjmp	.+246    	; 0x17f8 <digitalRead+0x110>
	}
	else if(port == B)
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	59 f4       	brne	.+22     	; 0x171c <digitalRead+0x34>
	{
		ucReadValue = (PINB>>pin)&0x01;
    1706:	23 b1       	in	r18, 0x03	; 3
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	c9 01       	movw	r24, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <digitalRead+0x2a>
    170e:	95 95       	asr	r25
    1710:	87 95       	ror	r24
    1712:	6a 95       	dec	r22
    1714:	e2 f7       	brpl	.-8      	; 0x170e <digitalRead+0x26>
    1716:	98 2f       	mov	r25, r24
    1718:	91 70       	andi	r25, 0x01	; 1
    171a:	6e c0       	rjmp	.+220    	; 0x17f8 <digitalRead+0x110>
	}
	else if(port == C)
    171c:	82 30       	cpi	r24, 0x02	; 2
    171e:	59 f4       	brne	.+22     	; 0x1736 <digitalRead+0x4e>
	{
		ucReadValue = (PINC>>pin)&0x01;
    1720:	26 b1       	in	r18, 0x06	; 6
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	c9 01       	movw	r24, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <digitalRead+0x44>
    1728:	95 95       	asr	r25
    172a:	87 95       	ror	r24
    172c:	6a 95       	dec	r22
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <digitalRead+0x40>
    1730:	98 2f       	mov	r25, r24
    1732:	91 70       	andi	r25, 0x01	; 1
    1734:	61 c0       	rjmp	.+194    	; 0x17f8 <digitalRead+0x110>
	}
	else if(port == D)
    1736:	83 30       	cpi	r24, 0x03	; 3
    1738:	39 f4       	brne	.+14     	; 0x1748 <digitalRead+0x60>
	{
		ucReadValue = (PIND>pin)&0x01;
    173a:	89 b1       	in	r24, 0x09	; 9
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	68 17       	cp	r22, r24
    1740:	08 f4       	brcc	.+2      	; 0x1744 <digitalRead+0x5c>
    1742:	5a c0       	rjmp	.+180    	; 0x17f8 <digitalRead+0x110>
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	58 c0       	rjmp	.+176    	; 0x17f8 <digitalRead+0x110>
	}
	else if(port == E)
    1748:	84 30       	cpi	r24, 0x04	; 4
    174a:	59 f4       	brne	.+22     	; 0x1762 <digitalRead+0x7a>
	{
		ucReadValue = (PINE>>pin)&0x01;
    174c:	2c b1       	in	r18, 0x0c	; 12
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	c9 01       	movw	r24, r18
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <digitalRead+0x70>
    1754:	95 95       	asr	r25
    1756:	87 95       	ror	r24
    1758:	6a 95       	dec	r22
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <digitalRead+0x6c>
    175c:	98 2f       	mov	r25, r24
    175e:	91 70       	andi	r25, 0x01	; 1
    1760:	4b c0       	rjmp	.+150    	; 0x17f8 <digitalRead+0x110>
	}
	else if(port == F)
    1762:	85 30       	cpi	r24, 0x05	; 5
    1764:	51 f4       	brne	.+20     	; 0x177a <digitalRead+0x92>
	{
		ucReadValue = (PINF>>pin)&0x01;
    1766:	8f b1       	in	r24, 0x0f	; 15
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <digitalRead+0x88>
    176c:	95 95       	asr	r25
    176e:	87 95       	ror	r24
    1770:	6a 95       	dec	r22
    1772:	e2 f7       	brpl	.-8      	; 0x176c <digitalRead+0x84>
    1774:	98 2f       	mov	r25, r24
    1776:	91 70       	andi	r25, 0x01	; 1
    1778:	3f c0       	rjmp	.+126    	; 0x17f8 <digitalRead+0x110>
	}
	else if(port == G)
    177a:	86 30       	cpi	r24, 0x06	; 6
    177c:	51 f4       	brne	.+20     	; 0x1792 <digitalRead+0xaa>
	{
		ucReadValue = (PING>>pin)&0x01;
    177e:	82 b3       	in	r24, 0x12	; 18
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <digitalRead+0xa0>
    1784:	95 95       	asr	r25
    1786:	87 95       	ror	r24
    1788:	6a 95       	dec	r22
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <digitalRead+0x9c>
    178c:	98 2f       	mov	r25, r24
    178e:	91 70       	andi	r25, 0x01	; 1
    1790:	33 c0       	rjmp	.+102    	; 0x17f8 <digitalRead+0x110>
	}
	else if(port == H)
    1792:	87 30       	cpi	r24, 0x07	; 7
    1794:	59 f4       	brne	.+22     	; 0x17ac <digitalRead+0xc4>
	{
		ucReadValue = (PINH>>pin)&0x01;
    1796:	80 91 00 01 	lds	r24, 0x0100
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <digitalRead+0xba>
    179e:	95 95       	asr	r25
    17a0:	87 95       	ror	r24
    17a2:	6a 95       	dec	r22
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <digitalRead+0xb6>
    17a6:	98 2f       	mov	r25, r24
    17a8:	91 70       	andi	r25, 0x01	; 1
    17aa:	26 c0       	rjmp	.+76     	; 0x17f8 <digitalRead+0x110>
	}
	// PORTI is not present
	else if(port == J)
    17ac:	89 30       	cpi	r24, 0x09	; 9
    17ae:	59 f4       	brne	.+22     	; 0x17c6 <digitalRead+0xde>
	{
		ucReadValue = (PINJ>>pin)&0x01;
    17b0:	80 91 03 01 	lds	r24, 0x0103
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <digitalRead+0xd4>
    17b8:	95 95       	asr	r25
    17ba:	87 95       	ror	r24
    17bc:	6a 95       	dec	r22
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <digitalRead+0xd0>
    17c0:	98 2f       	mov	r25, r24
    17c2:	91 70       	andi	r25, 0x01	; 1
    17c4:	19 c0       	rjmp	.+50     	; 0x17f8 <digitalRead+0x110>
	}
	else if(port == K)
    17c6:	8a 30       	cpi	r24, 0x0A	; 10
    17c8:	59 f4       	brne	.+22     	; 0x17e0 <digitalRead+0xf8>
	{
		ucReadValue = (PINK>>pin)&0x01;
    17ca:	80 91 06 01 	lds	r24, 0x0106
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <digitalRead+0xee>
    17d2:	95 95       	asr	r25
    17d4:	87 95       	ror	r24
    17d6:	6a 95       	dec	r22
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <digitalRead+0xea>
    17da:	98 2f       	mov	r25, r24
    17dc:	91 70       	andi	r25, 0x01	; 1
    17de:	0c c0       	rjmp	.+24     	; 0x17f8 <digitalRead+0x110>
	}
	else if(port == L)
    17e0:	8b 30       	cpi	r24, 0x0B	; 11
    17e2:	51 f4       	brne	.+20     	; 0x17f8 <digitalRead+0x110>
	{
		ucReadValue = (PINL>>pin)&0x01;
    17e4:	80 91 09 01 	lds	r24, 0x0109
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <digitalRead+0x108>
    17ec:	95 95       	asr	r25
    17ee:	87 95       	ror	r24
    17f0:	6a 95       	dec	r22
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <digitalRead+0x104>
    17f4:	98 2f       	mov	r25, r24
    17f6:	91 70       	andi	r25, 0x01	; 1
	}
	
	return ucReadValue;
}
    17f8:	89 2f       	mov	r24, r25
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	08 95       	ret

000017fe <I2C_data_input>:


static void I2C_data_output (void)
{	pinMode(TEMP_PORT, DATA, OUTPUT);}
static void I2C_data_input()
{	pinMode(TEMP_PORT, DATA, INPUT);}
    17fe:	85 e0       	ldi	r24, 0x05	; 5
    1800:	61 e0       	ldi	r22, 0x01	; 1
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	0e 94 aa 08 	call	0x1154	; 0x1154 <pinMode>
    1808:	08 95       	ret

0000180a <I2C_data_output>:
unsigned short error, checksum;
unsigned char sensing_type;


static void I2C_data_output (void)
{	pinMode(TEMP_PORT, DATA, OUTPUT);}
    180a:	85 e0       	ldi	r24, 0x05	; 5
    180c:	61 e0       	ldi	r22, 0x01	; 1
    180e:	41 e0       	ldi	r20, 0x01	; 1
    1810:	0e 94 aa 08 	call	0x1154	; 0x1154 <pinMode>
    1814:	08 95       	ret

00001816 <READ_DATA>:
static void SET_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, HIGH);}
static void CLR_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, LOW);}
static int READ_DATA (void)
{	return digitalRead(TEMP_PORT, DATA);}
    1816:	85 e0       	ldi	r24, 0x05	; 5
    1818:	61 e0       	ldi	r22, 0x01	; 1
    181a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <digitalRead>
    181e:	08 95       	ret

00001820 <CLR_DATA>:
static void I2C_sck_input (void)
{	pinMode(TEMP_PORT, SCK, INPUT);}
static void SET_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, HIGH);}
static void CLR_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, LOW);}
    1820:	85 e0       	ldi	r24, 0x05	; 5
    1822:	61 e0       	ldi	r22, 0x01	; 1
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	0e 94 0f 0a 	call	0x141e	; 0x141e <digitalWrite>
    182a:	08 95       	ret

0000182c <SET_SCK>:
static int READ_DATA (void)
{	return digitalRead(TEMP_PORT, DATA);}
static void SET_SCK()
{	digitalWrite(TEMP_PORT, SCK, HIGH);}
    182c:	85 e0       	ldi	r24, 0x05	; 5
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	0e 94 0f 0a 	call	0x141e	; 0x141e <digitalWrite>
    1836:	08 95       	ret

00001838 <CLR_SCK>:
static void CLR_SCK()
{	digitalWrite(TEMP_PORT, SCK, LOW);}
    1838:	85 e0       	ldi	r24, 0x05	; 5
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	0e 94 0f 0a 	call	0x141e	; 0x141e <digitalWrite>
    1842:	08 95       	ret

00001844 <SET_DATA>:
static void I2C_sck_output (void)
{	pinMode(TEMP_PORT, SCK, OUTPUT);}
static void I2C_sck_input (void)
{	pinMode(TEMP_PORT, SCK, INPUT);}
static void SET_DATA (void)
{	digitalWrite(TEMP_PORT, DATA, HIGH);}
    1844:	85 e0       	ldi	r24, 0x05	; 5
    1846:	61 e0       	ldi	r22, 0x01	; 1
    1848:	41 e0       	ldi	r20, 0x01	; 1
    184a:	0e 94 0f 0a 	call	0x141e	; 0x141e <digitalWrite>
    184e:	08 95       	ret

00001850 <Transmission_start>:
  	Transmission_start();	// transmission start
}

void Transmission_start (void)
{  
	SET_DATA();                   //Initial state
    1850:	0e 94 22 0c 	call	0x1844	; 0x1844 <SET_DATA>
	CLR_SCK();                    //Initial state
    1854:	0e 94 1c 0c 	call	0x1838	; 0x1838 <CLR_SCK>
	asm("nop");asm("nop");
    1858:	00 00       	nop
    185a:	00 00       	nop

	SET_SCK();
    185c:	0e 94 16 0c 	call	0x182c	; 0x182c <SET_SCK>
	asm("nop");asm("nop");
    1860:	00 00       	nop
    1862:	00 00       	nop

	CLR_DATA();
    1864:	0e 94 10 0c 	call	0x1820	; 0x1820 <CLR_DATA>
	asm("nop");asm("nop");
    1868:	00 00       	nop
    186a:	00 00       	nop

	CLR_SCK();  
    186c:	0e 94 1c 0c 	call	0x1838	; 0x1838 <CLR_SCK>
	asm("nop");asm("nop");
    1870:	00 00       	nop
    1872:	00 00       	nop

	SET_SCK();
    1874:	0e 94 16 0c 	call	0x182c	; 0x182c <SET_SCK>
	asm("nop");asm("nop");
    1878:	00 00       	nop
    187a:	00 00       	nop

	SET_DATA();		   
    187c:	0e 94 22 0c 	call	0x1844	; 0x1844 <SET_DATA>
	asm("nop");asm("nop");
    1880:	00 00       	nop
    1882:	00 00       	nop

	CLR_SCK();
    1884:	0e 94 1c 0c 	call	0x1838	; 0x1838 <CLR_SCK>
}
    1888:	08 95       	ret

0000188a <Connection_reset>:
	I2C_sck_output ();		// DDRF |= 0x01;
	Connection_reset ();
}

void Connection_reset (void)
{
    188a:	cf 93       	push	r28
	unsigned char i; 
  	SET_DATA();				// Initial state
    188c:	0e 94 22 0c 	call	0x1844	; 0x1844 <SET_DATA>
	CLR_SCK();				// Initial state
    1890:	0e 94 1c 0c 	call	0x1838	; 0x1838 <CLR_SCK>
    1894:	c9 e0       	ldi	r28, 0x09	; 9
  	for (i=0; i<9; i++)		// 9 SCK cycles
  	{
  		SET_SCK();
    1896:	0e 94 16 0c 	call	0x182c	; 0x182c <SET_SCK>
    	CLR_SCK();
    189a:	0e 94 1c 0c 	call	0x1838	; 0x1838 <CLR_SCK>
    189e:	c1 50       	subi	r28, 0x01	; 1
void Connection_reset (void)
{
	unsigned char i; 
  	SET_DATA();				// Initial state
	CLR_SCK();				// Initial state
  	for (i=0; i<9; i++)		// 9 SCK cycles
    18a0:	d1 f7       	brne	.-12     	; 0x1896 <Connection_reset+0xc>
  	{
  		SET_SCK();
    	CLR_SCK();
  	}
  	Transmission_start();	// transmission start
    18a2:	0e 94 28 0c 	call	0x1850	; 0x1850 <Transmission_start>
}
    18a6:	cf 91       	pop	r28
    18a8:	08 95       	ret

000018aa <SHT11_Init>:
{	return digitalRead(TEMP_PORT, SCK);}


void SHT11_Init (void)
{
	I2C_data_output ();		// DDRF |= 0x02;
    18aa:	0e 94 05 0c 	call	0x180a	; 0x180a <I2C_data_output>
static void I2C_data_output (void)
{	pinMode(TEMP_PORT, DATA, OUTPUT);}
static void I2C_data_input()
{	pinMode(TEMP_PORT, DATA, INPUT);}
static void I2C_sck_output (void)
{	pinMode(TEMP_PORT, SCK, OUTPUT);}
    18ae:	85 e0       	ldi	r24, 0x05	; 5
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	41 e0       	ldi	r20, 0x01	; 1
    18b4:	0e 94 aa 08 	call	0x1154	; 0x1154 <pinMode>

void SHT11_Init (void)
{
	I2C_data_output ();		// DDRF |= 0x02;
	I2C_sck_output ();		// DDRF |= 0x01;
	Connection_reset ();
    18b8:	0e 94 45 0c 	call	0x188a	; 0x188a <Connection_reset>
}
    18bc:	08 95       	ret

000018be <Write_byte>:

	return error;
}

unsigned char Write_byte (unsigned char value)
{ 
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	08 2f       	mov	r16, r24
	unsigned char i, error	=	0;
	I2C_data_output ();
    18c8:	0e 94 05 0c 	call	0x180a	; 0x180a <I2C_data_output>
    18cc:	c8 e0       	ldi	r28, 0x08	; 8
    18ce:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0x80; i>0; i/=2)
    18d0:	10 e8       	ldi	r17, 0x80	; 128
	{
		if (i & value)	SET_DATA ();
    18d2:	81 2f       	mov	r24, r17
    18d4:	80 23       	and	r24, r16
    18d6:	19 f0       	breq	.+6      	; 0x18de <Write_byte+0x20>
    18d8:	0e 94 22 0c 	call	0x1844	; 0x1844 <SET_DATA>
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <Write_byte+0x24>
		else		CLR_DATA ();
    18de:	0e 94 10 0c 	call	0x1820	; 0x1820 <CLR_DATA>

		SET_SCK ();
    18e2:	0e 94 16 0c 	call	0x182c	; 0x182c <SET_SCK>
		asm("nop");asm("nop");
    18e6:	00 00       	nop
    18e8:	00 00       	nop
		CLR_SCK ();
    18ea:	0e 94 1c 0c 	call	0x1838	; 0x1838 <CLR_SCK>

unsigned char Write_byte (unsigned char value)
{ 
	unsigned char i, error	=	0;
	I2C_data_output ();
	for (i=0x80; i>0; i/=2)
    18ee:	16 95       	lsr	r17
    18f0:	21 97       	sbiw	r28, 0x01	; 1
    18f2:	79 f7       	brne	.-34     	; 0x18d2 <Write_byte+0x14>

		SET_SCK ();
		asm("nop");asm("nop");
		CLR_SCK ();
	}
	SET_DATA ();
    18f4:	0e 94 22 0c 	call	0x1844	; 0x1844 <SET_DATA>
	I2C_data_input ();
    18f8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <I2C_data_input>
	asm("nop");asm("nop");
    18fc:	00 00       	nop
    18fe:	00 00       	nop
	SET_SCK (); 
    1900:	0e 94 16 0c 	call	0x182c	; 0x182c <SET_SCK>
	error	=	READ_DATA ();
    1904:	0e 94 0b 0c 	call	0x1816	; 0x1816 <READ_DATA>
    1908:	c8 2f       	mov	r28, r24

	CLR_SCK ();
    190a:	0e 94 1c 0c 	call	0x1838	; 0x1838 <CLR_SCK>
	I2C_data_output ();
    190e:	0e 94 05 0c 	call	0x180a	; 0x180a <I2C_data_output>

	return error;
}
    1912:	8c 2f       	mov	r24, r28
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	1f 91       	pop	r17
    191a:	0f 91       	pop	r16
    191c:	08 95       	ret

0000191e <Read_byte>:

unsigned char Read_byte(unsigned char ack)
{ 
    191e:	ff 92       	push	r15
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	f8 2e       	mov	r15, r24
	unsigned char i, val	=	0;
	I2C_data_input ();
    192a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <I2C_data_input>
	SET_DATA();
    192e:	0e 94 22 0c 	call	0x1844	; 0x1844 <SET_DATA>
	asm("nop");asm("nop");
    1932:	00 00       	nop
    1934:	00 00       	nop
    1936:	c8 e0       	ldi	r28, 0x08	; 8
    1938:	d0 e0       	ldi	r29, 0x00	; 0
	return error;
}

unsigned char Read_byte(unsigned char ack)
{ 
	unsigned char i, val	=	0;
    193a:	00 e0       	ldi	r16, 0x00	; 0
	I2C_data_input ();
	SET_DATA();
	asm("nop");asm("nop");

	for (i=0x80; i>0; i/=2)
    193c:	10 e8       	ldi	r17, 0x80	; 128
	{
		SET_SCK();
    193e:	0e 94 16 0c 	call	0x182c	; 0x182c <SET_SCK>
		asm("nop");asm("nop");
    1942:	00 00       	nop
    1944:	00 00       	nop
		if (READ_DATA())
    1946:	0e 94 0b 0c 	call	0x1816	; 0x1816 <READ_DATA>
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	09 f0       	breq	.+2      	; 0x1950 <Read_byte+0x32>
			val = (val | i); 
    194e:	01 2b       	or	r16, r17
		CLR_SCK();
    1950:	0e 94 1c 0c 	call	0x1838	; 0x1838 <CLR_SCK>
		asm("nop");asm("nop");
    1954:	00 00       	nop
    1956:	00 00       	nop
	unsigned char i, val	=	0;
	I2C_data_input ();
	SET_DATA();
	asm("nop");asm("nop");

	for (i=0x80; i>0; i/=2)
    1958:	16 95       	lsr	r17
    195a:	21 97       	sbiw	r28, 0x01	; 1
    195c:	81 f7       	brne	.-32     	; 0x193e <Read_byte+0x20>
		if (READ_DATA())
			val = (val | i); 
		CLR_SCK();
		asm("nop");asm("nop");
	}
	I2C_data_output();
    195e:	0e 94 05 0c 	call	0x180a	; 0x180a <I2C_data_output>

	if (ack)	CLR_DATA();
    1962:	ff 20       	and	r15, r15
    1964:	19 f0       	breq	.+6      	; 0x196c <Read_byte+0x4e>
    1966:	0e 94 10 0c 	call	0x1820	; 0x1820 <CLR_DATA>
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <Read_byte+0x52>
	else		SET_DATA();
    196c:	0e 94 22 0c 	call	0x1844	; 0x1844 <SET_DATA>

	SET_SCK();
    1970:	0e 94 16 0c 	call	0x182c	; 0x182c <SET_SCK>
	asm("nop");asm("nop"); 
    1974:	00 00       	nop
    1976:	00 00       	nop
	CLR_SCK();
    1978:	0e 94 1c 0c 	call	0x1838	; 0x1838 <CLR_SCK>
	asm("nop");asm("nop"); 
    197c:	00 00       	nop
    197e:	00 00       	nop
	SET_DATA();
    1980:	0e 94 22 0c 	call	0x1844	; 0x1844 <SET_DATA>

	return val;
}
    1984:	80 2f       	mov	r24, r16
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	1f 91       	pop	r17
    198c:	0f 91       	pop	r16
    198e:	ff 90       	pop	r15
    1990:	08 95       	ret

00001992 <Measure>:
	else 							return	0;
}

unsigned char Measure (unsigned short *p_value, unsigned short *p_checksum,
			unsigned char mode)
{ 
    1992:	ef 92       	push	r14
    1994:	ff 92       	push	r15
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	7c 01       	movw	r14, r24
    199e:	8b 01       	movw	r16, r22
    19a0:	c4 2f       	mov	r28, r20
	unsigned short error	=	0;
	unsigned short SHT11_msb, SHT11_lsb;

	Transmission_start ();		//transmission start
    19a2:	0e 94 28 0c 	call	0x1850	; 0x1850 <Transmission_start>
	switch (mode)				//send command to sensor
    19a6:	cc 23       	and	r28, r28
    19a8:	19 f0       	breq	.+6      	; 0x19b0 <Measure+0x1e>
    19aa:	c1 30       	cpi	r28, 0x01	; 1
    19ac:	59 f4       	brne	.+22     	; 0x19c4 <Measure+0x32>
    19ae:	05 c0       	rjmp	.+10     	; 0x19ba <Measure+0x28>
	{
		case TEMP :
			error	+=	Write_byte (MEASURE_TEMP);
    19b0:	83 e0       	ldi	r24, 0x03	; 3
    19b2:	0e 94 5f 0c 	call	0x18be	; 0x18be <Write_byte>
    19b6:	90 e0       	ldi	r25, 0x00	; 0
			break;
    19b8:	07 c0       	rjmp	.+14     	; 0x19c8 <Measure+0x36>
		case HUMI :
			error	+=	Write_byte (MEASURE_HUMI);
    19ba:	85 e0       	ldi	r24, 0x05	; 5
    19bc:	0e 94 5f 0c 	call	0x18be	; 0x18be <Write_byte>
    19c0:	90 e0       	ldi	r25, 0x00	; 0
			break;
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <Measure+0x36>
}

unsigned char Measure (unsigned short *p_value, unsigned short *p_checksum,
			unsigned char mode)
{ 
	unsigned short error	=	0;
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	90 e0       	ldi	r25, 0x00	; 0
			error	+=	Write_byte (MEASURE_HUMI);
			break;
		default :
			break;	 
	}
	if (error != 0)
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	e9 f4       	brne	.+58     	; 0x1a06 <Measure+0x74>
		return	error;

	I2C_data_input ();
    19cc:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <I2C_data_input>

	while (READ_DATA());
    19d0:	0e 94 0b 0c 	call	0x1816	; 0x1816 <READ_DATA>
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	e1 f7       	brne	.-8      	; 0x19d0 <Measure+0x3e>

	I2C_data_input();
    19d8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <I2C_data_input>

	SHT11_msb	=	Read_byte (ACK);		// read the first byte (MSB)
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	0e 94 8f 0c 	call	0x191e	; 0x191e <Read_byte>
    19e2:	c8 2f       	mov	r28, r24
	SHT11_lsb	=	Read_byte (ACK);		// read the second byte (LSB)
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	0e 94 8f 0c 	call	0x191e	; 0x191e <Read_byte>
	*p_value	=	(SHT11_msb * 256) + SHT11_lsb;
    19ea:	3c 2f       	mov	r19, r28
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	28 0f       	add	r18, r24
    19f0:	31 1d       	adc	r19, r1
    19f2:	f7 01       	movw	r30, r14
    19f4:	31 83       	std	Z+1, r19	; 0x01
    19f6:	20 83       	st	Z, r18
	*p_checksum	=	Read_byte (NOACK);	// read checksum
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	0e 94 8f 0c 	call	0x191e	; 0x191e <Read_byte>
    19fe:	f8 01       	movw	r30, r16
    1a00:	80 83       	st	Z, r24
    1a02:	11 82       	std	Z+1, r1	; 0x01

	return error;
    1a04:	80 e0       	ldi	r24, 0x00	; 0
}
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	ff 90       	pop	r15
    1a0e:	ef 90       	pop	r14
    1a10:	08 95       	ret

00001a12 <calc_SHT11>:

	return val;
}

void calc_SHT11 (unsigned short humidity, unsigned short temperature)
{ 
    1a12:	2f 92       	push	r2
    1a14:	3f 92       	push	r3
    1a16:	4f 92       	push	r4
    1a18:	5f 92       	push	r5
    1a1a:	6f 92       	push	r6
    1a1c:	7f 92       	push	r7
    1a1e:	8f 92       	push	r8
    1a20:	9f 92       	push	r9
    1a22:	af 92       	push	r10
    1a24:	bf 92       	push	r11
    1a26:	cf 92       	push	r12
    1a28:	df 92       	push	r13
    1a2a:	ef 92       	push	r14
    1a2c:	ff 92       	push	r15
    1a2e:	0f 93       	push	r16
    1a30:	1f 93       	push	r17
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29
    1a36:	0f 92       	push	r0
    1a38:	0f 92       	push	r0
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	8b 01       	movw	r16, r22
	const float T2	=	0.00008; 		// for 12 Bit
 
	float rh_lin;		// Relative Humidity
	float rh_true; 		// Humidity Sensor RH/Temperature compensation
	float t_C; 			// Temperature
	float rh	=	(float)humidity;
    1a40:	bc 01       	movw	r22, r24
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	0e 94 a3 10 	call	0x2146	; 0x2146 <__floatunsisf>
    1a4a:	c6 2e       	mov	r12, r22
    1a4c:	d7 2e       	mov	r13, r23
    1a4e:	f8 2e       	mov	r15, r24
    1a50:	e9 2e       	mov	r14, r25
	float t		=	(float)temperature;
    1a52:	b8 01       	movw	r22, r16
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	0e 94 a3 10 	call	0x2146	; 0x2146 <__floatunsisf>
    
	t_C			=	((t * 0.01) - 40) - 5;
    1a5c:	2a e0       	ldi	r18, 0x0A	; 10
    1a5e:	37 ed       	ldi	r19, 0xD7	; 215
    1a60:	43 e2       	ldi	r20, 0x23	; 35
    1a62:	5c e3       	ldi	r21, 0x3C	; 60
    1a64:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e2       	ldi	r20, 0x20	; 32
    1a6e:	52 e4       	ldi	r21, 0x42	; 66
    1a70:	0e 94 0e 10 	call	0x201c	; 0x201c <__subsf3>
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 ea       	ldi	r20, 0xA0	; 160
    1a7a:	50 e4       	ldi	r21, 0x40	; 64
    1a7c:	0e 94 0e 10 	call	0x201c	; 0x201c <__subsf3>
    1a80:	36 2e       	mov	r3, r22
    1a82:	27 2e       	mov	r2, r23
    1a84:	89 83       	std	Y+1, r24	; 0x01
    1a86:	9a 83       	std	Y+2, r25	; 0x02
	rh_lin		=	(C3 * rh * rh) + (C2 * rh) + C1;
	rh_true 	=	(t_C - 25) * (T1 + (T2 * rh)) + rh_lin;
    1a88:	38 2f       	mov	r19, r24
    1a8a:	29 2f       	mov	r18, r25
    1a8c:	86 2f       	mov	r24, r22
    1a8e:	92 2d       	mov	r25, r2
    1a90:	a3 2f       	mov	r26, r19
    1a92:	b2 2f       	mov	r27, r18
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	48 ec       	ldi	r20, 0xC8	; 200
    1a9e:	51 e4       	ldi	r21, 0x41	; 65
    1aa0:	0e 94 0e 10 	call	0x201c	; 0x201c <__subsf3>
    1aa4:	4b 01       	movw	r8, r22
    1aa6:	5c 01       	movw	r10, r24
    1aa8:	8c 2d       	mov	r24, r12
    1aaa:	9d 2d       	mov	r25, r13
    1aac:	af 2d       	mov	r26, r15
    1aae:	be 2d       	mov	r27, r14
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	2c ea       	ldi	r18, 0xAC	; 172
    1ab6:	35 ec       	ldi	r19, 0xC5	; 197
    1ab8:	47 ea       	ldi	r20, 0xA7	; 167
    1aba:	58 e3       	ldi	r21, 0x38	; 56
    1abc:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    1ac0:	2a e0       	ldi	r18, 0x0A	; 10
    1ac2:	37 ed       	ldi	r19, 0xD7	; 215
    1ac4:	43 e2       	ldi	r20, 0x23	; 35
    1ac6:	5c e3       	ldi	r21, 0x3C	; 60
    1ac8:	0e 94 0f 10 	call	0x201e	; 0x201e <__addsf3>
    1acc:	9b 01       	movw	r18, r22
    1ace:	ac 01       	movw	r20, r24
    1ad0:	c5 01       	movw	r24, r10
    1ad2:	b4 01       	movw	r22, r8
    1ad4:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    1ad8:	2b 01       	movw	r4, r22
    1ada:	3c 01       	movw	r6, r24
	float t_C; 			// Temperature
	float rh	=	(float)humidity;
	float t		=	(float)temperature;
    
	t_C			=	((t * 0.01) - 40) - 5;
	rh_lin		=	(C3 * rh * rh) + (C2 * rh) + C1;
    1adc:	8c 2d       	mov	r24, r12
    1ade:	9d 2d       	mov	r25, r13
    1ae0:	af 2d       	mov	r26, r15
    1ae2:	be 2d       	mov	r27, r14
    1ae4:	bc 01       	movw	r22, r24
    1ae6:	cd 01       	movw	r24, r26
    1ae8:	22 ea       	ldi	r18, 0xA2	; 162
    1aea:	37 ee       	ldi	r19, 0xE7	; 231
    1aec:	4b e3       	ldi	r20, 0x3B	; 59
    1aee:	56 eb       	ldi	r21, 0xB6	; 182
    1af0:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    1af4:	0c 2d       	mov	r16, r12
    1af6:	1d 2d       	mov	r17, r13
    1af8:	2f 2d       	mov	r18, r15
    1afa:	3e 2d       	mov	r19, r14
    1afc:	a9 01       	movw	r20, r18
    1afe:	98 01       	movw	r18, r16
    1b00:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    1b04:	4b 01       	movw	r8, r22
    1b06:	5c 01       	movw	r10, r24
    1b08:	80 2f       	mov	r24, r16
    1b0a:	91 2f       	mov	r25, r17
    1b0c:	af 2d       	mov	r26, r15
    1b0e:	be 2d       	mov	r27, r14
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	24 e5       	ldi	r18, 0x54	; 84
    1b16:	33 ee       	ldi	r19, 0xE3	; 227
    1b18:	45 e2       	ldi	r20, 0x25	; 37
    1b1a:	5d e3       	ldi	r21, 0x3D	; 61
    1b1c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    1b20:	9b 01       	movw	r18, r22
    1b22:	ac 01       	movw	r20, r24
    1b24:	c5 01       	movw	r24, r10
    1b26:	b4 01       	movw	r22, r8
    1b28:	0e 94 0f 10 	call	0x201e	; 0x201e <__addsf3>
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e8       	ldi	r20, 0x80	; 128
    1b32:	50 e4       	ldi	r21, 0x40	; 64
    1b34:	0e 94 0e 10 	call	0x201c	; 0x201c <__subsf3>
    1b38:	9b 01       	movw	r18, r22
    1b3a:	ac 01       	movw	r20, r24
	rh_true 	=	(t_C - 25) * (T1 + (T2 * rh)) + rh_lin;
    1b3c:	c3 01       	movw	r24, r6
    1b3e:	b2 01       	movw	r22, r4
    1b40:	0e 94 0f 10 	call	0x201e	; 0x201e <__addsf3>
    1b44:	f6 2e       	mov	r15, r22
    1b46:	07 2f       	mov	r16, r23
    1b48:	48 2e       	mov	r4, r24
    1b4a:	89 2e       	mov	r8, r25
    1b4c:	e6 2e       	mov	r14, r22
    1b4e:	17 2f       	mov	r17, r23
    1b50:	d8 2e       	mov	r13, r24
    1b52:	c9 2e       	mov	r12, r25

	if (rh_true > 100)	rh_true = 100;
    1b54:	86 2f       	mov	r24, r22
    1b56:	90 2f       	mov	r25, r16
    1b58:	a4 2d       	mov	r26, r4
    1b5a:	b8 2d       	mov	r27, r8
    1b5c:	bc 01       	movw	r22, r24
    1b5e:	cd 01       	movw	r24, r26
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	48 ec       	ldi	r20, 0xC8	; 200
    1b66:	52 e4       	ldi	r21, 0x42	; 66
    1b68:	0e 94 55 11 	call	0x22aa	; 0x22aa <__gesf2>
    1b6c:	18 16       	cp	r1, r24
    1b6e:	7c f0       	brlt	.+30     	; 0x1b8e <calc_SHT11+0x17c>
	if (rh_true < 0.1)	rh_true = 0.1;
    1b70:	8f 2d       	mov	r24, r15
    1b72:	90 2f       	mov	r25, r16
    1b74:	a4 2d       	mov	r26, r4
    1b76:	b8 2d       	mov	r27, r8
    1b78:	bc 01       	movw	r22, r24
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	2d ec       	ldi	r18, 0xCD	; 205
    1b7e:	3c ec       	ldi	r19, 0xCC	; 204
    1b80:	4c ec       	ldi	r20, 0xCC	; 204
    1b82:	5d e3       	ldi	r21, 0x3D	; 61
    1b84:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__cmpsf2>
    1b88:	88 23       	and	r24, r24
    1b8a:	64 f0       	brlt	.+24     	; 0x1ba4 <calc_SHT11+0x192>
    1b8c:	18 c0       	rjmp	.+48     	; 0x1bbe <calc_SHT11+0x1ac>
    
	t_C			=	((t * 0.01) - 40) - 5;
	rh_lin		=	(C3 * rh * rh) + (C2 * rh) + C1;
	rh_true 	=	(t_C - 25) * (T1 + (T2 * rh)) + rh_lin;

	if (rh_true > 100)	rh_true = 100;
    1b8e:	ee 24       	eor	r14, r14
    1b90:	10 e0       	ldi	r17, 0x00	; 0
    1b92:	0f 2e       	mov	r0, r31
    1b94:	f8 ec       	ldi	r31, 0xC8	; 200
    1b96:	df 2e       	mov	r13, r31
    1b98:	f0 2d       	mov	r31, r0
    1b9a:	0f 2e       	mov	r0, r31
    1b9c:	f2 e4       	ldi	r31, 0x42	; 66
    1b9e:	cf 2e       	mov	r12, r31
    1ba0:	f0 2d       	mov	r31, r0
    1ba2:	0d c0       	rjmp	.+26     	; 0x1bbe <calc_SHT11+0x1ac>
	if (rh_true < 0.1)	rh_true = 0.1;
    1ba4:	0f 2e       	mov	r0, r31
    1ba6:	fd ec       	ldi	r31, 0xCD	; 205
    1ba8:	ef 2e       	mov	r14, r31
    1baa:	f0 2d       	mov	r31, r0
    1bac:	1c ec       	ldi	r17, 0xCC	; 204
    1bae:	0f 2e       	mov	r0, r31
    1bb0:	fc ec       	ldi	r31, 0xCC	; 204
    1bb2:	df 2e       	mov	r13, r31
    1bb4:	f0 2d       	mov	r31, r0
    1bb6:	0f 2e       	mov	r0, r31
    1bb8:	fd e3       	ldi	r31, 0x3D	; 61
    1bba:	cf 2e       	mov	r12, r31
    1bbc:	f0 2d       	mov	r31, r0

	val_temp	=	(unsigned short)(t_C*10);
    1bbe:	39 81       	ldd	r19, Y+1	; 0x01
    1bc0:	2a 81       	ldd	r18, Y+2	; 0x02
    1bc2:	83 2d       	mov	r24, r3
    1bc4:	92 2d       	mov	r25, r2
    1bc6:	a3 2f       	mov	r26, r19
    1bc8:	b2 2f       	mov	r27, r18
    1bca:	bc 01       	movw	r22, r24
    1bcc:	cd 01       	movw	r24, r26
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e2       	ldi	r20, 0x20	; 32
    1bd4:	51 e4       	ldi	r21, 0x41	; 65
    1bd6:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    1bda:	0e 94 77 10 	call	0x20ee	; 0x20ee <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	90 93 aa 0a 	sts	0x0AAA, r25
    1be6:	80 93 a9 0a 	sts	0x0AA9, r24
	val_humi	=	(unsigned short)(rh_true*10);
    1bea:	8e 2d       	mov	r24, r14
    1bec:	91 2f       	mov	r25, r17
    1bee:	ad 2d       	mov	r26, r13
    1bf0:	bc 2d       	mov	r27, r12
    1bf2:	bc 01       	movw	r22, r24
    1bf4:	cd 01       	movw	r24, r26
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e2       	ldi	r20, 0x20	; 32
    1bfc:	51 e4       	ldi	r21, 0x41	; 65
    1bfe:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    1c02:	0e 94 77 10 	call	0x20ee	; 0x20ee <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	90 93 ac 0a 	sts	0x0AAC, r25
    1c0e:	80 93 ab 0a 	sts	0x0AAB, r24
}
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	1f 91       	pop	r17
    1c1c:	0f 91       	pop	r16
    1c1e:	ff 90       	pop	r15
    1c20:	ef 90       	pop	r14
    1c22:	df 90       	pop	r13
    1c24:	cf 90       	pop	r12
    1c26:	bf 90       	pop	r11
    1c28:	af 90       	pop	r10
    1c2a:	9f 90       	pop	r9
    1c2c:	8f 90       	pop	r8
    1c2e:	7f 90       	pop	r7
    1c30:	6f 90       	pop	r6
    1c32:	5f 90       	pop	r5
    1c34:	4f 90       	pop	r4
    1c36:	3f 90       	pop	r3
    1c38:	2f 90       	pop	r2
    1c3a:	08 95       	ret

00001c3c <get_SHT11_data>:

	CLR_SCK();
}

unsigned short get_SHT11_data (unsigned char type)
{
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
	sensing_type	=	type;
    1c40:	80 93 b1 0a 	sts	0x0AB1, r24

	error	=	0;
    1c44:	10 92 b0 0a 	sts	0x0AB0, r1
    1c48:	10 92 af 0a 	sts	0x0AAF, r1
	// measure humidity
	error	+=	Measure (&SHT11_humi, &checksum, HUMI);
    1c4c:	c2 eb       	ldi	r28, 0xB2	; 178
    1c4e:	da e0       	ldi	r29, 0x0A	; 10
    1c50:	87 ea       	ldi	r24, 0xA7	; 167
    1c52:	9a e0       	ldi	r25, 0x0A	; 10
    1c54:	be 01       	movw	r22, r28
    1c56:	41 e0       	ldi	r20, 0x01	; 1
    1c58:	0e 94 c9 0c 	call	0x1992	; 0x1992 <Measure>
    1c5c:	20 91 af 0a 	lds	r18, 0x0AAF
    1c60:	30 91 b0 0a 	lds	r19, 0x0AB0
    1c64:	28 0f       	add	r18, r24
    1c66:	31 1d       	adc	r19, r1
    1c68:	30 93 b0 0a 	sts	0x0AB0, r19
    1c6c:	20 93 af 0a 	sts	0x0AAF, r18
	// measure temperature
	error	+=	Measure (&SHT11_temp, &checksum, TEMP);
    1c70:	8d ea       	ldi	r24, 0xAD	; 173
    1c72:	9a e0       	ldi	r25, 0x0A	; 10
    1c74:	be 01       	movw	r22, r28
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	0e 94 c9 0c 	call	0x1992	; 0x1992 <Measure>
    1c7c:	20 91 af 0a 	lds	r18, 0x0AAF
    1c80:	30 91 b0 0a 	lds	r19, 0x0AB0
    1c84:	28 0f       	add	r18, r24
    1c86:	31 1d       	adc	r19, r1
    1c88:	30 93 b0 0a 	sts	0x0AB0, r19
    1c8c:	20 93 af 0a 	sts	0x0AAF, r18

	if (error != 0)		// [Error] connection reset
    1c90:	21 15       	cp	r18, r1
    1c92:	31 05       	cpc	r19, r1
    1c94:	19 f0       	breq	.+6      	; 0x1c9c <get_SHT11_data+0x60>
		Connection_reset ();
    1c96:	0e 94 45 0c 	call	0x188a	; 0x188a <Connection_reset>
    1c9a:	0a c0       	rjmp	.+20     	; 0x1cb0 <get_SHT11_data+0x74>
	else				// Calculate humidity, temperature
		calc_SHT11 (SHT11_humi, SHT11_temp);
    1c9c:	60 91 ad 0a 	lds	r22, 0x0AAD
    1ca0:	70 91 ae 0a 	lds	r23, 0x0AAE
    1ca4:	80 91 a7 0a 	lds	r24, 0x0AA7
    1ca8:	90 91 a8 0a 	lds	r25, 0x0AA8
    1cac:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <calc_SHT11>

	if (sensing_type == HUMI)		return	val_humi;
    1cb0:	80 91 b1 0a 	lds	r24, 0x0AB1
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	29 f4       	brne	.+10     	; 0x1cc2 <get_SHT11_data+0x86>
    1cb8:	80 91 ab 0a 	lds	r24, 0x0AAB
    1cbc:	90 91 ac 0a 	lds	r25, 0x0AAC
    1cc0:	09 c0       	rjmp	.+18     	; 0x1cd4 <get_SHT11_data+0x98>
	else if (sensing_type == TEMP)	return	val_temp;
    1cc2:	88 23       	and	r24, r24
    1cc4:	29 f4       	brne	.+10     	; 0x1cd0 <get_SHT11_data+0x94>
    1cc6:	80 91 a9 0a 	lds	r24, 0x0AA9
    1cca:	90 91 aa 0a 	lds	r25, 0x0AAA
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <get_SHT11_data+0x98>
	else 							return	0;
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
}
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	08 95       	ret

00001cda <TIMER_100mSInit>:
  
void TIMER_100mSInit (void)
{
	// Timer/Count0 ÏÇ¨Ïö©
	// ÎèôÏûëÎ™®ÎìúÏôÄ ÌÅ¥Îü≠ÏÜåÏä§ Î∞è ÌîÑÎ¶¨Ïä§ÏºÄÏùºÎü¨ Í≤∞Ï†ï
	TCCR0B	=	0x05;  //  fclk_io / 1024   
    1cda:	85 e0       	ldi	r24, 0x05	; 5
    1cdc:	85 bd       	out	0x25, r24	; 37
	// 0.01sÏóê Ïò§Î≤ÑÌîåÎ°úÏö∞ Î∞úÏÉù, 1/(14745600Hz/1024)‚Öπ144 = 0.01s
	// Ïò§Î≤ÑÌîåÎ°úÏö∞ÍπåÏßÄ Ïπ¥Ïö¥Ìä∏Î•º 144Î°ú ÏÑ§Ï†ï
	TCNT0	=	0xff - 144;
    1cde:	8f e6       	ldi	r24, 0x6F	; 111
    1ce0:	86 bd       	out	0x26, r24	; 38
	TIMSK0	|=	1 << TOIE0;	// Overflow Interupt Enable
    1ce2:	ee e6       	ldi	r30, 0x6E	; 110
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	81 60       	ori	r24, 0x01	; 1
    1cea:	80 83       	st	Z, r24
	TIFR0	|=	1 << TOV0;	// set Overflow Interupt Flag
    1cec:	a8 9a       	sbi	0x15, 0	; 21
}
    1cee:	08 95       	ret

00001cf0 <setElapsedTime100mSUnit>:


void setElapsedTime100mSUnit(uint32_t Counter)
{
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
	setTimerCheckCounter = Counter;
    1cf4:	80 93 5b 04 	sts	0x045B, r24
    1cf8:	90 93 5c 04 	sts	0x045C, r25
    1cfc:	a0 93 5d 04 	sts	0x045D, r26
    1d00:	b0 93 5e 04 	sts	0x045E, r27
	timerCouter = 0;
    1d04:	10 92 5f 04 	sts	0x045F, r1
    1d08:	10 92 60 04 	sts	0x0460, r1
    1d0c:	10 92 61 04 	sts	0x0461, r1
    1d10:	10 92 62 04 	sts	0x0462, r1
}
    1d14:	08 95       	ret

00001d16 <isElapsed>:

uint8_t isElapsed()
{
	if (flagOverflowSetTimer )
    1d16:	80 91 5a 04 	lds	r24, 0x045A
    1d1a:	88 23       	and	r24, r24
    1d1c:	21 f0       	breq	.+8      	; 0x1d26 <isElapsed+0x10>
	{
		flagOverflowSetTimer = 0;
    1d1e:	10 92 5a 04 	sts	0x045A, r1
		return 1;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	08 95       	ret
	}
	
	return 0;
    1d26:	80 e0       	ldi	r24, 0x00	; 0
}
    1d28:	08 95       	ret

00001d2a <eventCallback>:
volatile unsigned short humi;
extern int n_flag_getADC;//--------------^ºˆ¡§∫Œ∫–

static void eventCallback(int eventType,uint8_t* rxBuff, int rxSize)
{
	if (eventType == EVENT_RX_DATA) 
    1d2a:	81 30       	cpi	r24, 0x01	; 1
    1d2c:	91 05       	cpc	r25, r1
    1d2e:	81 f4       	brne	.+32     	; 0x1d50 <eventCallback+0x26>
	{
		debugprint("\r\nRX:%s\r\n", rxBuff);
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <eventCallback+0x8>
    1d32:	0f 92       	push	r0
    1d34:	8b e3       	ldi	r24, 0x3B	; 59
    1d36:	93 e0       	ldi	r25, 0x03	; 3
    1d38:	ed b7       	in	r30, 0x3d	; 61
    1d3a:	fe b7       	in	r31, 0x3e	; 62
    1d3c:	92 83       	std	Z+2, r25	; 0x02
    1d3e:	81 83       	std	Z+1, r24	; 0x01
    1d40:	74 83       	std	Z+4, r23	; 0x04
    1d42:	63 83       	std	Z+3, r22	; 0x03
    1d44:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debugprint>
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	08 95       	ret

00001d52 <main>:
	}
}


int main(void)
{
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	c0 50       	subi	r28, 0x00	; 0
    1d5c:	d1 40       	sbci	r29, 0x01	; 1
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
	uint8_t strTemp[256];
	debugInit();
    1d68:	0e 94 42 01 	call	0x284	; 0x284 <debugInit>
	wifiInit();
    1d6c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <wifiInit>
	
	sei();
    1d70:	78 94       	sei
		
	debugprint("wifi test start\r\n");
    1d72:	0f 92       	push	r0
    1d74:	0f 92       	push	r0
    1d76:	85 e4       	ldi	r24, 0x45	; 69
    1d78:	93 e0       	ldi	r25, 0x03	; 3
    1d7a:	ad b7       	in	r26, 0x3d	; 61
    1d7c:	be b7       	in	r27, 0x3e	; 62
    1d7e:	12 96       	adiw	r26, 0x02	; 2
    1d80:	9c 93       	st	X, r25
    1d82:	8e 93       	st	-X, r24
    1d84:	11 97       	sbiw	r26, 0x01	; 1
    1d86:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debugprint>
    1d8a:	8f ef       	ldi	r24, 0xFF	; 255
    1d8c:	9f ef       	ldi	r25, 0xFF	; 255
    1d8e:	ac e2       	ldi	r26, 0x2C	; 44
    1d90:	81 50       	subi	r24, 0x01	; 1
    1d92:	90 40       	sbci	r25, 0x00	; 0
    1d94:	a0 40       	sbci	r26, 0x00	; 0
    1d96:	e1 f7       	brne	.-8      	; 0x1d90 <main+0x3e>
    1d98:	00 c0       	rjmp	.+0      	; 0x1d9a <main+0x48>
    1d9a:	00 00       	nop
	_delay_ms(1000);
	
	wificlearUartBuff();
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	0e 94 6f 08 	call	0x10de	; 0x10de <wificlearUartBuff>
	
	// UART echo disable 
	wifiEchoDisable();
    1da4:	0e 94 90 08 	call	0x1120	; 0x1120 <wifiEchoDisable>
	wificlearUartBuff();
    1da8:	0e 94 6f 08 	call	0x10de	; 0x10de <wificlearUartBuff>
	
	// register callback function 
	wifiSetEventCallback(eventCallback);
    1dac:	85 e9       	ldi	r24, 0x95	; 149
    1dae:	9e e0       	ldi	r25, 0x0E	; 14
    1db0:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <wifiSetEventCallback>
	
	// Auto connection disable
	wifiAutoConnectDisable();
    1db4:	0e 94 76 08 	call	0x10ec	; 0x10ec <wifiAutoConnectDisable>
	wificlearUartBuff();
    1db8:	0e 94 6f 08 	call	0x10de	; 0x10de <wificlearUartBuff>
	
	wifiModeSet();
    1dbc:	0e 94 8b 07 	call	0xf16	; 0xf16 <wifiModeSet>
	
	wifiEnableDHCP();
    1dc0:	0e 94 a9 07 	call	0xf52	; 0xf52 <wifiEnableDHCP>
	
	debugprint("\r\nAP list display:\r\n");
    1dc4:	0f 92       	push	r0
    1dc6:	0f 92       	push	r0
    1dc8:	87 e5       	ldi	r24, 0x57	; 87
    1dca:	93 e0       	ldi	r25, 0x03	; 3
    1dcc:	ad b7       	in	r26, 0x3d	; 61
    1dce:	be b7       	in	r27, 0x3e	; 62
    1dd0:	12 96       	adiw	r26, 0x02	; 2
    1dd2:	9c 93       	st	X, r25
    1dd4:	8e 93       	st	-X, r24
    1dd6:	11 97       	sbiw	r26, 0x01	; 1
    1dd8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debugprint>
	wifiDisplayAPlist();
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0e 94 53 07 	call	0xea6	; 0xea6 <wifiDisplayAPlist>
	
	// connect  AP 
	debugprint("\r\n");
    1de4:	0f 92       	push	r0
    1de6:	0f 92       	push	r0
    1de8:	8c e6       	ldi	r24, 0x6C	; 108
    1dea:	93 e0       	ldi	r25, 0x03	; 3
    1dec:	ed b7       	in	r30, 0x3d	; 61
    1dee:	fe b7       	in	r31, 0x3e	; 62
    1df0:	92 83       	std	Z+2, r25	; 0x02
    1df2:	81 83       	std	Z+1, r24	; 0x01
    1df4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debugprint>
	if ( !wifiConnectAP("CSNET-301", "gwnucomse"))
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	8f e6       	ldi	r24, 0x6F	; 111
    1dfe:	93 e0       	ldi	r25, 0x03	; 3
    1e00:	69 e7       	ldi	r22, 0x79	; 121
    1e02:	73 e0       	ldi	r23, 0x03	; 3
    1e04:	0e 94 6d 07 	call	0xeda	; 0xeda <wifiConnectAP>
    1e08:	88 23       	and	r24, r24
    1e0a:	79 f4       	brne	.+30     	; 0x1e2a <main+0xd8>
	{
		debugprint("AP connected.\r\n");
    1e0c:	0f 92       	push	r0
    1e0e:	0f 92       	push	r0
    1e10:	83 e8       	ldi	r24, 0x83	; 131
    1e12:	93 e0       	ldi	r25, 0x03	; 3
    1e14:	ad b7       	in	r26, 0x3d	; 61
    1e16:	be b7       	in	r27, 0x3e	; 62
    1e18:	12 96       	adiw	r26, 0x02	; 2
    1e1a:	9c 93       	st	X, r25
    1e1c:	8e 93       	st	-X, r24
    1e1e:	11 97       	sbiw	r26, 0x01	; 1
    1e20:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debugprint>
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0c c0       	rjmp	.+24     	; 0x1e42 <main+0xf0>
	}
	else
	{
		debugprint("AP connection fail.\r\n");
    1e2a:	0f 92       	push	r0
    1e2c:	0f 92       	push	r0
    1e2e:	83 e9       	ldi	r24, 0x93	; 147
    1e30:	93 e0       	ldi	r25, 0x03	; 3
    1e32:	ed b7       	in	r30, 0x3d	; 61
    1e34:	fe b7       	in	r31, 0x3e	; 62
    1e36:	92 83       	std	Z+2, r25	; 0x02
    1e38:	81 83       	std	Z+1, r24	; 0x01
    1e3a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debugprint>
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
	}
	// display  local allocated IP 
	debugprint("\r\n Allocated local IP:\r\n");
    1e42:	0f 92       	push	r0
    1e44:	0f 92       	push	r0
    1e46:	89 ea       	ldi	r24, 0xA9	; 169
    1e48:	93 e0       	ldi	r25, 0x03	; 3
    1e4a:	ad b7       	in	r26, 0x3d	; 61
    1e4c:	be b7       	in	r27, 0x3e	; 62
    1e4e:	12 96       	adiw	r26, 0x02	; 2
    1e50:	9c 93       	st	X, r25
    1e52:	8e 93       	st	-X, r24
    1e54:	11 97       	sbiw	r26, 0x01	; 1
    1e56:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debugprint>
	wifiDisplayLocalIP();
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	0e 94 9a 07 	call	0xf34	; 0xf34 <wifiDisplayLocalIP>
	debugprint("\r\n");
    1e62:	0f 92       	push	r0
    1e64:	0f 92       	push	r0
    1e66:	8c e6       	ldi	r24, 0x6C	; 108
    1e68:	93 e0       	ldi	r25, 0x03	; 3
    1e6a:	ed b7       	in	r30, 0x3d	; 61
    1e6c:	fe b7       	in	r31, 0x3e	; 62
    1e6e:	92 83       	std	Z+2, r25	; 0x02
    1e70:	81 83       	std	Z+1, r24	; 0x01
    1e72:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debugprint>

	// TCP remote server connection
	if( !wifiConnectTCPServer(SERVER_IP_STR,SERVER_PORT))
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	82 ec       	ldi	r24, 0xC2	; 194
    1e7c:	93 e0       	ldi	r25, 0x03	; 3
    1e7e:	41 e5       	ldi	r20, 0x51	; 81
    1e80:	53 ec       	ldi	r21, 0xC3	; 195
    1e82:	60 e0       	ldi	r22, 0x00	; 0
    1e84:	70 e0       	ldi	r23, 0x00	; 0
    1e86:	0e 94 b8 07 	call	0xf70	; 0xf70 <wifiConnectTCPServer>
    1e8a:	88 23       	and	r24, r24
    1e8c:	79 f4       	brne	.+30     	; 0x1eac <main+0x15a>
	{
		debugprint("Connected Server.\r\n");
    1e8e:	0f 92       	push	r0
    1e90:	0f 92       	push	r0
    1e92:	8f ec       	ldi	r24, 0xCF	; 207
    1e94:	93 e0       	ldi	r25, 0x03	; 3
    1e96:	ad b7       	in	r26, 0x3d	; 61
    1e98:	be b7       	in	r27, 0x3e	; 62
    1e9a:	12 96       	adiw	r26, 0x02	; 2
    1e9c:	9c 93       	st	X, r25
    1e9e:	8e 93       	st	-X, r24
    1ea0:	11 97       	sbiw	r26, 0x01	; 1
    1ea2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debugprint>
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0c c0       	rjmp	.+24     	; 0x1ec4 <main+0x172>
	}
	else
	{
		debugprint("Server connection fail.\r\n");
    1eac:	0f 92       	push	r0
    1eae:	0f 92       	push	r0
    1eb0:	83 ee       	ldi	r24, 0xE3	; 227
    1eb2:	93 e0       	ldi	r25, 0x03	; 3
    1eb4:	ed b7       	in	r30, 0x3d	; 61
    1eb6:	fe b7       	in	r31, 0x3e	; 62
    1eb8:	92 83       	std	Z+2, r25	; 0x02
    1eba:	81 83       	std	Z+1, r24	; 0x01
    1ebc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debugprint>
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
	}				
	debugprint("\r\n");
    1ec4:	0f 92       	push	r0
    1ec6:	0f 92       	push	r0
    1ec8:	8c e6       	ldi	r24, 0x6C	; 108
    1eca:	93 e0       	ldi	r25, 0x03	; 3
    1ecc:	ad b7       	in	r26, 0x3d	; 61
    1ece:	be b7       	in	r27, 0x3e	; 62
    1ed0:	12 96       	adiw	r26, 0x02	; 2
    1ed2:	9c 93       	st	X, r25
    1ed4:	8e 93       	st	-X, r24
    1ed6:	11 97       	sbiw	r26, 0x01	; 1
    1ed8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debugprint>
	
	// Send Test message 
	strcpy(strTemp,"test msessage: hello\r\n");
    1edc:	de 01       	movw	r26, r28
    1ede:	11 96       	adiw	r26, 0x01	; 1
    1ee0:	ed ef       	ldi	r30, 0xFD	; 253
    1ee2:	f3 e0       	ldi	r31, 0x03	; 3
    1ee4:	87 e1       	ldi	r24, 0x17	; 23
    1ee6:	01 90       	ld	r0, Z+
    1ee8:	0d 92       	st	X+, r0
    1eea:	81 50       	subi	r24, 0x01	; 1
    1eec:	e1 f7       	brne	.-8      	; 0x1ee6 <main+0x194>
	wifiSendData(strTemp, sizeof("test msessage: hello\r\n"));
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	01 96       	adiw	r24, 0x01	; 1
    1ef6:	67 e1       	ldi	r22, 0x17	; 23
    1ef8:	70 e0       	ldi	r23, 0x00	; 0
    1efa:	0e 94 e6 07 	call	0xfcc	; 0xfcc <wifiSendData>
	
	 //ø©±‚º≠∫Œ≈Õ Ω«¡¶ µ•¿Ã≈Õ∞° ∞°∞¯µ»¥Ÿ. 
	TIMER_100mSInit ();
    1efe:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <TIMER_100mSInit>
	setElapsedTime100mSUnit(100);
    1f02:	64 e6       	ldi	r22, 0x64	; 100
    1f04:	70 e0       	ldi	r23, 0x00	; 0
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <setElapsedTime100mSUnit>

	debugprint("start Loop\r\n");	
    1f0e:	0f 92       	push	r0
    1f10:	0f 92       	push	r0
    1f12:	84 e1       	ldi	r24, 0x14	; 20
    1f14:	94 e0       	ldi	r25, 0x04	; 4
    1f16:	ed b7       	in	r30, 0x3d	; 61
    1f18:	fe b7       	in	r31, 0x3e	; 62
    1f1a:	92 83       	std	Z+2, r25	; 0x02
    1f1c:	81 83       	std	Z+1, r24	; 0x01
    1f1e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debugprint>
/*----------------led∫Œ∫–¡¶∞≈
	LED_Init ();		// PORTB = GREEN, PORTE = RED------------------------vºˆ¡§ ∫Œ∫–
	AdcInit(1);			// PORTF = ADC1
	TIMER_Init();
	*/	
	sei();//-------------------------------------------^ºˆ¡§∫Œ∫–
    1f22:	78 94       	sei
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
	TIMER_100mSInit ();
	setElapsedTime100mSUnit(100);

	debugprint("start Loop\r\n");	
	
	int counter = 0;
    1f28:	ee 24       	eor	r14, r14
    1f2a:	ff 24       	eor	r15, r15
        
		wifiMain();
		
		if ( isElapsed())
		{
			sprintf(strTemp,"hello:%d CDS : %d temp : %d humi : %d\n",counter++, gun_AdcValue, temp, humi);		//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫– 
    1f2c:	8e 01       	movw	r16, r28
    1f2e:	0f 5f       	subi	r16, 0xFF	; 255
    1f30:	1f 4f       	sbci	r17, 0xFF	; 255
    1f32:	0f 2e       	mov	r0, r31
    1f34:	f1 e2       	ldi	r31, 0x21	; 33
    1f36:	af 2e       	mov	r10, r31
    1f38:	f4 e0       	ldi	r31, 0x04	; 4
    1f3a:	bf 2e       	mov	r11, r31
    1f3c:	f0 2d       	mov	r31, r0
			wifiSendData(strTemp, strlen(strTemp));			//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
			debugprint("TX:%s\r\n",strTemp);				//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
    1f3e:	0f 2e       	mov	r0, r31
    1f40:	f8 e4       	ldi	r31, 0x48	; 72
    1f42:	8f 2e       	mov	r8, r31
    1f44:	f4 e0       	ldi	r31, 0x04	; 4
    1f46:	9f 2e       	mov	r9, r31
    1f48:	f0 2d       	mov	r31, r0
	
	
    while(1)
    {//TODO:: Please write your application code 
		
		temp = get_SHT11_data (TEMP);	
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <get_SHT11_data>
    1f50:	90 93 b7 0a 	sts	0x0AB7, r25
    1f54:	80 93 b6 0a 	sts	0x0AB6, r24
		humi = get_SHT11_data (HUMI); 	
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <get_SHT11_data>
    1f5e:	90 93 b5 0a 	sts	0x0AB5, r25
    1f62:	80 93 b4 0a 	sts	0x0AB4, r24
		else
		{	controlLED (GREEN, 0x00);	controlLED (RED, 0x00);	}//-------------------------^ºˆ¡§∫Œ∫–
		*/
		//µ•¿Ã≈Õ ¿¸º€ ∫Œ∫–
        
		wifiMain();
    1f66:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <wifiMain>
		
		if ( isElapsed())
    1f6a:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <isElapsed>
    1f6e:	88 23       	and	r24, r24
    1f70:	61 f3       	breq	.-40     	; 0x1f4a <main+0x1f8>
		{
			sprintf(strTemp,"hello:%d CDS : %d temp : %d humi : %d\n",counter++, gun_AdcValue, temp, humi);		//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫– 
    1f72:	67 01       	movw	r12, r14
    1f74:	08 94       	sec
    1f76:	c1 1c       	adc	r12, r1
    1f78:	d1 1c       	adc	r13, r1
    1f7a:	20 91 b6 0a 	lds	r18, 0x0AB6
    1f7e:	30 91 b7 0a 	lds	r19, 0x0AB7
    1f82:	40 91 b4 0a 	lds	r20, 0x0AB4
    1f86:	50 91 b5 0a 	lds	r21, 0x0AB5
    1f8a:	8d b7       	in	r24, 0x3d	; 61
    1f8c:	9e b7       	in	r25, 0x3e	; 62
    1f8e:	0c 97       	sbiw	r24, 0x0c	; 12
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	9e bf       	out	0x3e, r25	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	8d bf       	out	0x3d, r24	; 61
    1f9a:	ed b7       	in	r30, 0x3d	; 61
    1f9c:	fe b7       	in	r31, 0x3e	; 62
    1f9e:	31 96       	adiw	r30, 0x01	; 1
    1fa0:	ad b7       	in	r26, 0x3d	; 61
    1fa2:	be b7       	in	r27, 0x3e	; 62
    1fa4:	12 96       	adiw	r26, 0x02	; 2
    1fa6:	1c 93       	st	X, r17
    1fa8:	0e 93       	st	-X, r16
    1faa:	11 97       	sbiw	r26, 0x01	; 1
    1fac:	b3 82       	std	Z+3, r11	; 0x03
    1fae:	a2 82       	std	Z+2, r10	; 0x02
    1fb0:	f5 82       	std	Z+5, r15	; 0x05
    1fb2:	e4 82       	std	Z+4, r14	; 0x04
    1fb4:	80 91 63 04 	lds	r24, 0x0463
    1fb8:	90 91 64 04 	lds	r25, 0x0464
    1fbc:	97 83       	std	Z+7, r25	; 0x07
    1fbe:	86 83       	std	Z+6, r24	; 0x06
    1fc0:	31 87       	std	Z+9, r19	; 0x09
    1fc2:	20 87       	std	Z+8, r18	; 0x08
    1fc4:	53 87       	std	Z+11, r21	; 0x0b
    1fc6:	42 87       	std	Z+10, r20	; 0x0a
    1fc8:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <sprintf>
			wifiSendData(strTemp, strlen(strTemp));			//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
    1fcc:	f8 01       	movw	r30, r16
    1fce:	01 90       	ld	r0, Z+
    1fd0:	00 20       	and	r0, r0
    1fd2:	e9 f7       	brne	.-6      	; 0x1fce <main+0x27c>
    1fd4:	bf 01       	movw	r22, r30
    1fd6:	61 50       	subi	r22, 0x01	; 1
    1fd8:	70 40       	sbci	r23, 0x00	; 0
    1fda:	60 1b       	sub	r22, r16
    1fdc:	71 0b       	sbc	r23, r17
    1fde:	8d b7       	in	r24, 0x3d	; 61
    1fe0:	9e b7       	in	r25, 0x3e	; 62
    1fe2:	0c 96       	adiw	r24, 0x0c	; 12
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	9e bf       	out	0x3e, r25	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	8d bf       	out	0x3d, r24	; 61
    1fee:	c8 01       	movw	r24, r16
    1ff0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <wifiSendData>
			debugprint("TX:%s\r\n",strTemp);				//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫–  
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <main+0x2a4>
    1ff6:	0f 92       	push	r0
    1ff8:	ad b7       	in	r26, 0x3d	; 61
    1ffa:	be b7       	in	r27, 0x3e	; 62
    1ffc:	12 96       	adiw	r26, 0x02	; 2
    1ffe:	9c 92       	st	X, r9
    2000:	8e 92       	st	-X, r8
    2002:	11 97       	sbiw	r26, 0x01	; 1
    2004:	14 96       	adiw	r26, 0x04	; 4
    2006:	1c 93       	st	X, r17
    2008:	0e 93       	st	-X, r16
    200a:	13 97       	sbiw	r26, 0x03	; 3
    200c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <debugprint>
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
        
		wifiMain();
		
		if ( isElapsed())
		{
			sprintf(strTemp,"hello:%d CDS : %d temp : %d humi : %d\n",counter++, gun_AdcValue, temp, humi);		//∞°¿Â «ŸΩ…¿˚¿Œ ∫Œ∫– 
    2018:	76 01       	movw	r14, r12
    201a:	97 cf       	rjmp	.-210    	; 0x1f4a <main+0x1f8>

0000201c <__subsf3>:
    201c:	50 58       	subi	r21, 0x80	; 128

0000201e <__addsf3>:
    201e:	bb 27       	eor	r27, r27
    2020:	aa 27       	eor	r26, r26
    2022:	0e d0       	rcall	.+28     	; 0x2040 <__addsf3x>
    2024:	08 c1       	rjmp	.+528    	; 0x2236 <__fp_round>
    2026:	f9 d0       	rcall	.+498    	; 0x221a <__fp_pscA>
    2028:	30 f0       	brcs	.+12     	; 0x2036 <__addsf3+0x18>
    202a:	fe d0       	rcall	.+508    	; 0x2228 <__fp_pscB>
    202c:	20 f0       	brcs	.+8      	; 0x2036 <__addsf3+0x18>
    202e:	31 f4       	brne	.+12     	; 0x203c <__addsf3+0x1e>
    2030:	9f 3f       	cpi	r25, 0xFF	; 255
    2032:	11 f4       	brne	.+4      	; 0x2038 <__addsf3+0x1a>
    2034:	1e f4       	brtc	.+6      	; 0x203c <__addsf3+0x1e>
    2036:	ee c0       	rjmp	.+476    	; 0x2214 <__fp_nan>
    2038:	0e f4       	brtc	.+2      	; 0x203c <__addsf3+0x1e>
    203a:	e0 95       	com	r30
    203c:	e7 fb       	bst	r30, 7
    203e:	e4 c0       	rjmp	.+456    	; 0x2208 <__fp_inf>

00002040 <__addsf3x>:
    2040:	e9 2f       	mov	r30, r25
    2042:	0a d1       	rcall	.+532    	; 0x2258 <__fp_split3>
    2044:	80 f3       	brcs	.-32     	; 0x2026 <__addsf3+0x8>
    2046:	ba 17       	cp	r27, r26
    2048:	62 07       	cpc	r22, r18
    204a:	73 07       	cpc	r23, r19
    204c:	84 07       	cpc	r24, r20
    204e:	95 07       	cpc	r25, r21
    2050:	18 f0       	brcs	.+6      	; 0x2058 <__addsf3x+0x18>
    2052:	71 f4       	brne	.+28     	; 0x2070 <__addsf3x+0x30>
    2054:	9e f5       	brtc	.+102    	; 0x20bc <__addsf3x+0x7c>
    2056:	22 c1       	rjmp	.+580    	; 0x229c <__fp_zero>
    2058:	0e f4       	brtc	.+2      	; 0x205c <__addsf3x+0x1c>
    205a:	e0 95       	com	r30
    205c:	0b 2e       	mov	r0, r27
    205e:	ba 2f       	mov	r27, r26
    2060:	a0 2d       	mov	r26, r0
    2062:	0b 01       	movw	r0, r22
    2064:	b9 01       	movw	r22, r18
    2066:	90 01       	movw	r18, r0
    2068:	0c 01       	movw	r0, r24
    206a:	ca 01       	movw	r24, r20
    206c:	a0 01       	movw	r20, r0
    206e:	11 24       	eor	r1, r1
    2070:	ff 27       	eor	r31, r31
    2072:	59 1b       	sub	r21, r25
    2074:	99 f0       	breq	.+38     	; 0x209c <__addsf3x+0x5c>
    2076:	59 3f       	cpi	r21, 0xF9	; 249
    2078:	50 f4       	brcc	.+20     	; 0x208e <__addsf3x+0x4e>
    207a:	50 3e       	cpi	r21, 0xE0	; 224
    207c:	68 f1       	brcs	.+90     	; 0x20d8 <__addsf3x+0x98>
    207e:	1a 16       	cp	r1, r26
    2080:	f0 40       	sbci	r31, 0x00	; 0
    2082:	a2 2f       	mov	r26, r18
    2084:	23 2f       	mov	r18, r19
    2086:	34 2f       	mov	r19, r20
    2088:	44 27       	eor	r20, r20
    208a:	58 5f       	subi	r21, 0xF8	; 248
    208c:	f3 cf       	rjmp	.-26     	; 0x2074 <__addsf3x+0x34>
    208e:	46 95       	lsr	r20
    2090:	37 95       	ror	r19
    2092:	27 95       	ror	r18
    2094:	a7 95       	ror	r26
    2096:	f0 40       	sbci	r31, 0x00	; 0
    2098:	53 95       	inc	r21
    209a:	c9 f7       	brne	.-14     	; 0x208e <__addsf3x+0x4e>
    209c:	7e f4       	brtc	.+30     	; 0x20bc <__addsf3x+0x7c>
    209e:	1f 16       	cp	r1, r31
    20a0:	ba 0b       	sbc	r27, r26
    20a2:	62 0b       	sbc	r22, r18
    20a4:	73 0b       	sbc	r23, r19
    20a6:	84 0b       	sbc	r24, r20
    20a8:	ba f0       	brmi	.+46     	; 0x20d8 <__addsf3x+0x98>
    20aa:	91 50       	subi	r25, 0x01	; 1
    20ac:	a1 f0       	breq	.+40     	; 0x20d6 <__addsf3x+0x96>
    20ae:	ff 0f       	add	r31, r31
    20b0:	bb 1f       	adc	r27, r27
    20b2:	66 1f       	adc	r22, r22
    20b4:	77 1f       	adc	r23, r23
    20b6:	88 1f       	adc	r24, r24
    20b8:	c2 f7       	brpl	.-16     	; 0x20aa <__addsf3x+0x6a>
    20ba:	0e c0       	rjmp	.+28     	; 0x20d8 <__addsf3x+0x98>
    20bc:	ba 0f       	add	r27, r26
    20be:	62 1f       	adc	r22, r18
    20c0:	73 1f       	adc	r23, r19
    20c2:	84 1f       	adc	r24, r20
    20c4:	48 f4       	brcc	.+18     	; 0x20d8 <__addsf3x+0x98>
    20c6:	87 95       	ror	r24
    20c8:	77 95       	ror	r23
    20ca:	67 95       	ror	r22
    20cc:	b7 95       	ror	r27
    20ce:	f7 95       	ror	r31
    20d0:	9e 3f       	cpi	r25, 0xFE	; 254
    20d2:	08 f0       	brcs	.+2      	; 0x20d6 <__addsf3x+0x96>
    20d4:	b3 cf       	rjmp	.-154    	; 0x203c <__addsf3+0x1e>
    20d6:	93 95       	inc	r25
    20d8:	88 0f       	add	r24, r24
    20da:	08 f0       	brcs	.+2      	; 0x20de <__addsf3x+0x9e>
    20dc:	99 27       	eor	r25, r25
    20de:	ee 0f       	add	r30, r30
    20e0:	97 95       	ror	r25
    20e2:	87 95       	ror	r24
    20e4:	08 95       	ret

000020e6 <__cmpsf2>:
    20e6:	6c d0       	rcall	.+216    	; 0x21c0 <__fp_cmp>
    20e8:	08 f4       	brcc	.+2      	; 0x20ec <__cmpsf2+0x6>
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	08 95       	ret

000020ee <__fixunssfsi>:
    20ee:	bc d0       	rcall	.+376    	; 0x2268 <__fp_splitA>
    20f0:	88 f0       	brcs	.+34     	; 0x2114 <__fixunssfsi+0x26>
    20f2:	9f 57       	subi	r25, 0x7F	; 127
    20f4:	90 f0       	brcs	.+36     	; 0x211a <__fixunssfsi+0x2c>
    20f6:	b9 2f       	mov	r27, r25
    20f8:	99 27       	eor	r25, r25
    20fa:	b7 51       	subi	r27, 0x17	; 23
    20fc:	a0 f0       	brcs	.+40     	; 0x2126 <__fixunssfsi+0x38>
    20fe:	d1 f0       	breq	.+52     	; 0x2134 <__fixunssfsi+0x46>
    2100:	66 0f       	add	r22, r22
    2102:	77 1f       	adc	r23, r23
    2104:	88 1f       	adc	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	1a f0       	brmi	.+6      	; 0x2110 <__fixunssfsi+0x22>
    210a:	ba 95       	dec	r27
    210c:	c9 f7       	brne	.-14     	; 0x2100 <__fixunssfsi+0x12>
    210e:	12 c0       	rjmp	.+36     	; 0x2134 <__fixunssfsi+0x46>
    2110:	b1 30       	cpi	r27, 0x01	; 1
    2112:	81 f0       	breq	.+32     	; 0x2134 <__fixunssfsi+0x46>
    2114:	c3 d0       	rcall	.+390    	; 0x229c <__fp_zero>
    2116:	b1 e0       	ldi	r27, 0x01	; 1
    2118:	08 95       	ret
    211a:	c0 c0       	rjmp	.+384    	; 0x229c <__fp_zero>
    211c:	67 2f       	mov	r22, r23
    211e:	78 2f       	mov	r23, r24
    2120:	88 27       	eor	r24, r24
    2122:	b8 5f       	subi	r27, 0xF8	; 248
    2124:	39 f0       	breq	.+14     	; 0x2134 <__fixunssfsi+0x46>
    2126:	b9 3f       	cpi	r27, 0xF9	; 249
    2128:	cc f3       	brlt	.-14     	; 0x211c <__fixunssfsi+0x2e>
    212a:	86 95       	lsr	r24
    212c:	77 95       	ror	r23
    212e:	67 95       	ror	r22
    2130:	b3 95       	inc	r27
    2132:	d9 f7       	brne	.-10     	; 0x212a <__fixunssfsi+0x3c>
    2134:	3e f4       	brtc	.+14     	; 0x2144 <__fixunssfsi+0x56>
    2136:	90 95       	com	r25
    2138:	80 95       	com	r24
    213a:	70 95       	com	r23
    213c:	61 95       	neg	r22
    213e:	7f 4f       	sbci	r23, 0xFF	; 255
    2140:	8f 4f       	sbci	r24, 0xFF	; 255
    2142:	9f 4f       	sbci	r25, 0xFF	; 255
    2144:	08 95       	ret

00002146 <__floatunsisf>:
    2146:	e8 94       	clt
    2148:	09 c0       	rjmp	.+18     	; 0x215c <__floatsisf+0x12>

0000214a <__floatsisf>:
    214a:	97 fb       	bst	r25, 7
    214c:	3e f4       	brtc	.+14     	; 0x215c <__floatsisf+0x12>
    214e:	90 95       	com	r25
    2150:	80 95       	com	r24
    2152:	70 95       	com	r23
    2154:	61 95       	neg	r22
    2156:	7f 4f       	sbci	r23, 0xFF	; 255
    2158:	8f 4f       	sbci	r24, 0xFF	; 255
    215a:	9f 4f       	sbci	r25, 0xFF	; 255
    215c:	99 23       	and	r25, r25
    215e:	a9 f0       	breq	.+42     	; 0x218a <__floatsisf+0x40>
    2160:	f9 2f       	mov	r31, r25
    2162:	96 e9       	ldi	r25, 0x96	; 150
    2164:	bb 27       	eor	r27, r27
    2166:	93 95       	inc	r25
    2168:	f6 95       	lsr	r31
    216a:	87 95       	ror	r24
    216c:	77 95       	ror	r23
    216e:	67 95       	ror	r22
    2170:	b7 95       	ror	r27
    2172:	f1 11       	cpse	r31, r1
    2174:	f8 cf       	rjmp	.-16     	; 0x2166 <__floatsisf+0x1c>
    2176:	fa f4       	brpl	.+62     	; 0x21b6 <__floatsisf+0x6c>
    2178:	bb 0f       	add	r27, r27
    217a:	11 f4       	brne	.+4      	; 0x2180 <__floatsisf+0x36>
    217c:	60 ff       	sbrs	r22, 0
    217e:	1b c0       	rjmp	.+54     	; 0x21b6 <__floatsisf+0x6c>
    2180:	6f 5f       	subi	r22, 0xFF	; 255
    2182:	7f 4f       	sbci	r23, 0xFF	; 255
    2184:	8f 4f       	sbci	r24, 0xFF	; 255
    2186:	9f 4f       	sbci	r25, 0xFF	; 255
    2188:	16 c0       	rjmp	.+44     	; 0x21b6 <__floatsisf+0x6c>
    218a:	88 23       	and	r24, r24
    218c:	11 f0       	breq	.+4      	; 0x2192 <__floatsisf+0x48>
    218e:	96 e9       	ldi	r25, 0x96	; 150
    2190:	11 c0       	rjmp	.+34     	; 0x21b4 <__floatsisf+0x6a>
    2192:	77 23       	and	r23, r23
    2194:	21 f0       	breq	.+8      	; 0x219e <__floatsisf+0x54>
    2196:	9e e8       	ldi	r25, 0x8E	; 142
    2198:	87 2f       	mov	r24, r23
    219a:	76 2f       	mov	r23, r22
    219c:	05 c0       	rjmp	.+10     	; 0x21a8 <__floatsisf+0x5e>
    219e:	66 23       	and	r22, r22
    21a0:	71 f0       	breq	.+28     	; 0x21be <__floatsisf+0x74>
    21a2:	96 e8       	ldi	r25, 0x86	; 134
    21a4:	86 2f       	mov	r24, r22
    21a6:	70 e0       	ldi	r23, 0x00	; 0
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	2a f0       	brmi	.+10     	; 0x21b6 <__floatsisf+0x6c>
    21ac:	9a 95       	dec	r25
    21ae:	66 0f       	add	r22, r22
    21b0:	77 1f       	adc	r23, r23
    21b2:	88 1f       	adc	r24, r24
    21b4:	da f7       	brpl	.-10     	; 0x21ac <__floatsisf+0x62>
    21b6:	88 0f       	add	r24, r24
    21b8:	96 95       	lsr	r25
    21ba:	87 95       	ror	r24
    21bc:	97 f9       	bld	r25, 7
    21be:	08 95       	ret

000021c0 <__fp_cmp>:
    21c0:	99 0f       	add	r25, r25
    21c2:	00 08       	sbc	r0, r0
    21c4:	55 0f       	add	r21, r21
    21c6:	aa 0b       	sbc	r26, r26
    21c8:	e0 e8       	ldi	r30, 0x80	; 128
    21ca:	fe ef       	ldi	r31, 0xFE	; 254
    21cc:	16 16       	cp	r1, r22
    21ce:	17 06       	cpc	r1, r23
    21d0:	e8 07       	cpc	r30, r24
    21d2:	f9 07       	cpc	r31, r25
    21d4:	c0 f0       	brcs	.+48     	; 0x2206 <__stack+0x7>
    21d6:	12 16       	cp	r1, r18
    21d8:	13 06       	cpc	r1, r19
    21da:	e4 07       	cpc	r30, r20
    21dc:	f5 07       	cpc	r31, r21
    21de:	98 f0       	brcs	.+38     	; 0x2206 <__stack+0x7>
    21e0:	62 1b       	sub	r22, r18
    21e2:	73 0b       	sbc	r23, r19
    21e4:	84 0b       	sbc	r24, r20
    21e6:	95 0b       	sbc	r25, r21
    21e8:	39 f4       	brne	.+14     	; 0x21f8 <__fp_cmp+0x38>
    21ea:	0a 26       	eor	r0, r26
    21ec:	61 f0       	breq	.+24     	; 0x2206 <__stack+0x7>
    21ee:	23 2b       	or	r18, r19
    21f0:	24 2b       	or	r18, r20
    21f2:	25 2b       	or	r18, r21
    21f4:	21 f4       	brne	.+8      	; 0x21fe <__fp_cmp+0x3e>
    21f6:	08 95       	ret
    21f8:	0a 26       	eor	r0, r26
    21fa:	09 f4       	brne	.+2      	; 0x21fe <__fp_cmp+0x3e>
    21fc:	a1 40       	sbci	r26, 0x01	; 1
    21fe:	a6 95       	lsr	r26
    2200:	8f ef       	ldi	r24, 0xFF	; 255
    2202:	81 1d       	adc	r24, r1
    2204:	81 1d       	adc	r24, r1
    2206:	08 95       	ret

00002208 <__fp_inf>:
    2208:	97 f9       	bld	r25, 7
    220a:	9f 67       	ori	r25, 0x7F	; 127
    220c:	80 e8       	ldi	r24, 0x80	; 128
    220e:	70 e0       	ldi	r23, 0x00	; 0
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	08 95       	ret

00002214 <__fp_nan>:
    2214:	9f ef       	ldi	r25, 0xFF	; 255
    2216:	80 ec       	ldi	r24, 0xC0	; 192
    2218:	08 95       	ret

0000221a <__fp_pscA>:
    221a:	00 24       	eor	r0, r0
    221c:	0a 94       	dec	r0
    221e:	16 16       	cp	r1, r22
    2220:	17 06       	cpc	r1, r23
    2222:	18 06       	cpc	r1, r24
    2224:	09 06       	cpc	r0, r25
    2226:	08 95       	ret

00002228 <__fp_pscB>:
    2228:	00 24       	eor	r0, r0
    222a:	0a 94       	dec	r0
    222c:	12 16       	cp	r1, r18
    222e:	13 06       	cpc	r1, r19
    2230:	14 06       	cpc	r1, r20
    2232:	05 06       	cpc	r0, r21
    2234:	08 95       	ret

00002236 <__fp_round>:
    2236:	09 2e       	mov	r0, r25
    2238:	03 94       	inc	r0
    223a:	00 0c       	add	r0, r0
    223c:	11 f4       	brne	.+4      	; 0x2242 <__fp_round+0xc>
    223e:	88 23       	and	r24, r24
    2240:	52 f0       	brmi	.+20     	; 0x2256 <__fp_round+0x20>
    2242:	bb 0f       	add	r27, r27
    2244:	40 f4       	brcc	.+16     	; 0x2256 <__fp_round+0x20>
    2246:	bf 2b       	or	r27, r31
    2248:	11 f4       	brne	.+4      	; 0x224e <__fp_round+0x18>
    224a:	60 ff       	sbrs	r22, 0
    224c:	04 c0       	rjmp	.+8      	; 0x2256 <__fp_round+0x20>
    224e:	6f 5f       	subi	r22, 0xFF	; 255
    2250:	7f 4f       	sbci	r23, 0xFF	; 255
    2252:	8f 4f       	sbci	r24, 0xFF	; 255
    2254:	9f 4f       	sbci	r25, 0xFF	; 255
    2256:	08 95       	ret

00002258 <__fp_split3>:
    2258:	57 fd       	sbrc	r21, 7
    225a:	90 58       	subi	r25, 0x80	; 128
    225c:	44 0f       	add	r20, r20
    225e:	55 1f       	adc	r21, r21
    2260:	59 f0       	breq	.+22     	; 0x2278 <__fp_splitA+0x10>
    2262:	5f 3f       	cpi	r21, 0xFF	; 255
    2264:	71 f0       	breq	.+28     	; 0x2282 <__fp_splitA+0x1a>
    2266:	47 95       	ror	r20

00002268 <__fp_splitA>:
    2268:	88 0f       	add	r24, r24
    226a:	97 fb       	bst	r25, 7
    226c:	99 1f       	adc	r25, r25
    226e:	61 f0       	breq	.+24     	; 0x2288 <__fp_splitA+0x20>
    2270:	9f 3f       	cpi	r25, 0xFF	; 255
    2272:	79 f0       	breq	.+30     	; 0x2292 <__fp_splitA+0x2a>
    2274:	87 95       	ror	r24
    2276:	08 95       	ret
    2278:	12 16       	cp	r1, r18
    227a:	13 06       	cpc	r1, r19
    227c:	14 06       	cpc	r1, r20
    227e:	55 1f       	adc	r21, r21
    2280:	f2 cf       	rjmp	.-28     	; 0x2266 <__fp_split3+0xe>
    2282:	46 95       	lsr	r20
    2284:	f1 df       	rcall	.-30     	; 0x2268 <__fp_splitA>
    2286:	08 c0       	rjmp	.+16     	; 0x2298 <__fp_splitA+0x30>
    2288:	16 16       	cp	r1, r22
    228a:	17 06       	cpc	r1, r23
    228c:	18 06       	cpc	r1, r24
    228e:	99 1f       	adc	r25, r25
    2290:	f1 cf       	rjmp	.-30     	; 0x2274 <__fp_splitA+0xc>
    2292:	86 95       	lsr	r24
    2294:	71 05       	cpc	r23, r1
    2296:	61 05       	cpc	r22, r1
    2298:	08 94       	sec
    229a:	08 95       	ret

0000229c <__fp_zero>:
    229c:	e8 94       	clt

0000229e <__fp_szero>:
    229e:	bb 27       	eor	r27, r27
    22a0:	66 27       	eor	r22, r22
    22a2:	77 27       	eor	r23, r23
    22a4:	cb 01       	movw	r24, r22
    22a6:	97 f9       	bld	r25, 7
    22a8:	08 95       	ret

000022aa <__gesf2>:
    22aa:	8a df       	rcall	.-236    	; 0x21c0 <__fp_cmp>
    22ac:	08 f4       	brcc	.+2      	; 0x22b0 <__gesf2+0x6>
    22ae:	8f ef       	ldi	r24, 0xFF	; 255
    22b0:	08 95       	ret

000022b2 <__mulsf3>:
    22b2:	0b d0       	rcall	.+22     	; 0x22ca <__mulsf3x>
    22b4:	c0 cf       	rjmp	.-128    	; 0x2236 <__fp_round>
    22b6:	b1 df       	rcall	.-158    	; 0x221a <__fp_pscA>
    22b8:	28 f0       	brcs	.+10     	; 0x22c4 <__mulsf3+0x12>
    22ba:	b6 df       	rcall	.-148    	; 0x2228 <__fp_pscB>
    22bc:	18 f0       	brcs	.+6      	; 0x22c4 <__mulsf3+0x12>
    22be:	95 23       	and	r25, r21
    22c0:	09 f0       	breq	.+2      	; 0x22c4 <__mulsf3+0x12>
    22c2:	a2 cf       	rjmp	.-188    	; 0x2208 <__fp_inf>
    22c4:	a7 cf       	rjmp	.-178    	; 0x2214 <__fp_nan>
    22c6:	11 24       	eor	r1, r1
    22c8:	ea cf       	rjmp	.-44     	; 0x229e <__fp_szero>

000022ca <__mulsf3x>:
    22ca:	c6 df       	rcall	.-116    	; 0x2258 <__fp_split3>
    22cc:	a0 f3       	brcs	.-24     	; 0x22b6 <__mulsf3+0x4>

000022ce <__mulsf3_pse>:
    22ce:	95 9f       	mul	r25, r21
    22d0:	d1 f3       	breq	.-12     	; 0x22c6 <__mulsf3+0x14>
    22d2:	95 0f       	add	r25, r21
    22d4:	50 e0       	ldi	r21, 0x00	; 0
    22d6:	55 1f       	adc	r21, r21
    22d8:	62 9f       	mul	r22, r18
    22da:	f0 01       	movw	r30, r0
    22dc:	72 9f       	mul	r23, r18
    22de:	bb 27       	eor	r27, r27
    22e0:	f0 0d       	add	r31, r0
    22e2:	b1 1d       	adc	r27, r1
    22e4:	63 9f       	mul	r22, r19
    22e6:	aa 27       	eor	r26, r26
    22e8:	f0 0d       	add	r31, r0
    22ea:	b1 1d       	adc	r27, r1
    22ec:	aa 1f       	adc	r26, r26
    22ee:	64 9f       	mul	r22, r20
    22f0:	66 27       	eor	r22, r22
    22f2:	b0 0d       	add	r27, r0
    22f4:	a1 1d       	adc	r26, r1
    22f6:	66 1f       	adc	r22, r22
    22f8:	82 9f       	mul	r24, r18
    22fa:	22 27       	eor	r18, r18
    22fc:	b0 0d       	add	r27, r0
    22fe:	a1 1d       	adc	r26, r1
    2300:	62 1f       	adc	r22, r18
    2302:	73 9f       	mul	r23, r19
    2304:	b0 0d       	add	r27, r0
    2306:	a1 1d       	adc	r26, r1
    2308:	62 1f       	adc	r22, r18
    230a:	83 9f       	mul	r24, r19
    230c:	a0 0d       	add	r26, r0
    230e:	61 1d       	adc	r22, r1
    2310:	22 1f       	adc	r18, r18
    2312:	74 9f       	mul	r23, r20
    2314:	33 27       	eor	r19, r19
    2316:	a0 0d       	add	r26, r0
    2318:	61 1d       	adc	r22, r1
    231a:	23 1f       	adc	r18, r19
    231c:	84 9f       	mul	r24, r20
    231e:	60 0d       	add	r22, r0
    2320:	21 1d       	adc	r18, r1
    2322:	82 2f       	mov	r24, r18
    2324:	76 2f       	mov	r23, r22
    2326:	6a 2f       	mov	r22, r26
    2328:	11 24       	eor	r1, r1
    232a:	9f 57       	subi	r25, 0x7F	; 127
    232c:	50 40       	sbci	r21, 0x00	; 0
    232e:	8a f0       	brmi	.+34     	; 0x2352 <__mulsf3_pse+0x84>
    2330:	e1 f0       	breq	.+56     	; 0x236a <__mulsf3_pse+0x9c>
    2332:	88 23       	and	r24, r24
    2334:	4a f0       	brmi	.+18     	; 0x2348 <__mulsf3_pse+0x7a>
    2336:	ee 0f       	add	r30, r30
    2338:	ff 1f       	adc	r31, r31
    233a:	bb 1f       	adc	r27, r27
    233c:	66 1f       	adc	r22, r22
    233e:	77 1f       	adc	r23, r23
    2340:	88 1f       	adc	r24, r24
    2342:	91 50       	subi	r25, 0x01	; 1
    2344:	50 40       	sbci	r21, 0x00	; 0
    2346:	a9 f7       	brne	.-22     	; 0x2332 <__mulsf3_pse+0x64>
    2348:	9e 3f       	cpi	r25, 0xFE	; 254
    234a:	51 05       	cpc	r21, r1
    234c:	70 f0       	brcs	.+28     	; 0x236a <__mulsf3_pse+0x9c>
    234e:	5c cf       	rjmp	.-328    	; 0x2208 <__fp_inf>
    2350:	a6 cf       	rjmp	.-180    	; 0x229e <__fp_szero>
    2352:	5f 3f       	cpi	r21, 0xFF	; 255
    2354:	ec f3       	brlt	.-6      	; 0x2350 <__mulsf3_pse+0x82>
    2356:	98 3e       	cpi	r25, 0xE8	; 232
    2358:	dc f3       	brlt	.-10     	; 0x2350 <__mulsf3_pse+0x82>
    235a:	86 95       	lsr	r24
    235c:	77 95       	ror	r23
    235e:	67 95       	ror	r22
    2360:	b7 95       	ror	r27
    2362:	f7 95       	ror	r31
    2364:	e7 95       	ror	r30
    2366:	9f 5f       	subi	r25, 0xFF	; 255
    2368:	c1 f7       	brne	.-16     	; 0x235a <__mulsf3_pse+0x8c>
    236a:	fe 2b       	or	r31, r30
    236c:	88 0f       	add	r24, r24
    236e:	91 1d       	adc	r25, r1
    2370:	96 95       	lsr	r25
    2372:	87 95       	ror	r24
    2374:	97 f9       	bld	r25, 7
    2376:	08 95       	ret

00002378 <atoi>:
    2378:	fc 01       	movw	r30, r24
    237a:	88 27       	eor	r24, r24
    237c:	99 27       	eor	r25, r25
    237e:	e8 94       	clt
    2380:	21 91       	ld	r18, Z+
    2382:	20 32       	cpi	r18, 0x20	; 32
    2384:	e9 f3       	breq	.-6      	; 0x2380 <atoi+0x8>
    2386:	29 30       	cpi	r18, 0x09	; 9
    2388:	10 f0       	brcs	.+4      	; 0x238e <atoi+0x16>
    238a:	2e 30       	cpi	r18, 0x0E	; 14
    238c:	c8 f3       	brcs	.-14     	; 0x2380 <atoi+0x8>
    238e:	2b 32       	cpi	r18, 0x2B	; 43
    2390:	41 f0       	breq	.+16     	; 0x23a2 <atoi+0x2a>
    2392:	2d 32       	cpi	r18, 0x2D	; 45
    2394:	39 f4       	brne	.+14     	; 0x23a4 <atoi+0x2c>
    2396:	68 94       	set
    2398:	04 c0       	rjmp	.+8      	; 0x23a2 <atoi+0x2a>
    239a:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <__mulhi_const_10>
    239e:	82 0f       	add	r24, r18
    23a0:	91 1d       	adc	r25, r1
    23a2:	21 91       	ld	r18, Z+
    23a4:	20 53       	subi	r18, 0x30	; 48
    23a6:	2a 30       	cpi	r18, 0x0A	; 10
    23a8:	c0 f3       	brcs	.-16     	; 0x239a <atoi+0x22>
    23aa:	1e f4       	brtc	.+6      	; 0x23b2 <atoi+0x3a>
    23ac:	90 95       	com	r25
    23ae:	81 95       	neg	r24
    23b0:	9f 4f       	sbci	r25, 0xFF	; 255
    23b2:	08 95       	ret

000023b4 <memcpy>:
    23b4:	fb 01       	movw	r30, r22
    23b6:	dc 01       	movw	r26, r24
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <memcpy+0xa>
    23ba:	01 90       	ld	r0, Z+
    23bc:	0d 92       	st	X+, r0
    23be:	41 50       	subi	r20, 0x01	; 1
    23c0:	50 40       	sbci	r21, 0x00	; 0
    23c2:	d8 f7       	brcc	.-10     	; 0x23ba <memcpy+0x6>
    23c4:	08 95       	ret

000023c6 <strncmp>:
    23c6:	fb 01       	movw	r30, r22
    23c8:	dc 01       	movw	r26, r24
    23ca:	41 50       	subi	r20, 0x01	; 1
    23cc:	50 40       	sbci	r21, 0x00	; 0
    23ce:	30 f0       	brcs	.+12     	; 0x23dc <strncmp+0x16>
    23d0:	8d 91       	ld	r24, X+
    23d2:	01 90       	ld	r0, Z+
    23d4:	80 19       	sub	r24, r0
    23d6:	19 f4       	brne	.+6      	; 0x23de <strncmp+0x18>
    23d8:	00 20       	and	r0, r0
    23da:	b9 f7       	brne	.-18     	; 0x23ca <strncmp+0x4>
    23dc:	88 1b       	sub	r24, r24
    23de:	99 0b       	sbc	r25, r25
    23e0:	08 95       	ret

000023e2 <__mulhi_const_10>:
    23e2:	7a e0       	ldi	r23, 0x0A	; 10
    23e4:	97 9f       	mul	r25, r23
    23e6:	90 2d       	mov	r25, r0
    23e8:	87 9f       	mul	r24, r23
    23ea:	80 2d       	mov	r24, r0
    23ec:	91 0d       	add	r25, r1
    23ee:	11 24       	eor	r1, r1
    23f0:	08 95       	ret

000023f2 <sprintf>:
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	2e 97       	sbiw	r28, 0x0e	; 14
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	0e 89       	ldd	r16, Y+22	; 0x16
    240c:	1f 89       	ldd	r17, Y+23	; 0x17
    240e:	86 e0       	ldi	r24, 0x06	; 6
    2410:	8c 83       	std	Y+4, r24	; 0x04
    2412:	1a 83       	std	Y+2, r17	; 0x02
    2414:	09 83       	std	Y+1, r16	; 0x01
    2416:	8f ef       	ldi	r24, 0xFF	; 255
    2418:	9f e7       	ldi	r25, 0x7F	; 127
    241a:	9e 83       	std	Y+6, r25	; 0x06
    241c:	8d 83       	std	Y+5, r24	; 0x05
    241e:	ae 01       	movw	r20, r28
    2420:	46 5e       	subi	r20, 0xE6	; 230
    2422:	5f 4f       	sbci	r21, 0xFF	; 255
    2424:	ce 01       	movw	r24, r28
    2426:	01 96       	adiw	r24, 0x01	; 1
    2428:	68 8d       	ldd	r22, Y+24	; 0x18
    242a:	79 8d       	ldd	r23, Y+25	; 0x19
    242c:	0e 94 51 12 	call	0x24a2	; 0x24a2 <vfprintf>
    2430:	ef 81       	ldd	r30, Y+7	; 0x07
    2432:	f8 85       	ldd	r31, Y+8	; 0x08
    2434:	e0 0f       	add	r30, r16
    2436:	f1 1f       	adc	r31, r17
    2438:	10 82       	st	Z, r1
    243a:	2e 96       	adiw	r28, 0x0e	; 14
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	1f 91       	pop	r17
    244c:	0f 91       	pop	r16
    244e:	08 95       	ret

00002450 <vsprintf>:
    2450:	0f 93       	push	r16
    2452:	1f 93       	push	r17
    2454:	cf 93       	push	r28
    2456:	df 93       	push	r29
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    245c:	2e 97       	sbiw	r28, 0x0e	; 14
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	8c 01       	movw	r16, r24
    246a:	86 e0       	ldi	r24, 0x06	; 6
    246c:	8c 83       	std	Y+4, r24	; 0x04
    246e:	1a 83       	std	Y+2, r17	; 0x02
    2470:	09 83       	std	Y+1, r16	; 0x01
    2472:	8f ef       	ldi	r24, 0xFF	; 255
    2474:	9f e7       	ldi	r25, 0x7F	; 127
    2476:	9e 83       	std	Y+6, r25	; 0x06
    2478:	8d 83       	std	Y+5, r24	; 0x05
    247a:	ce 01       	movw	r24, r28
    247c:	01 96       	adiw	r24, 0x01	; 1
    247e:	0e 94 51 12 	call	0x24a2	; 0x24a2 <vfprintf>
    2482:	ef 81       	ldd	r30, Y+7	; 0x07
    2484:	f8 85       	ldd	r31, Y+8	; 0x08
    2486:	e0 0f       	add	r30, r16
    2488:	f1 1f       	adc	r31, r17
    248a:	10 82       	st	Z, r1
    248c:	2e 96       	adiw	r28, 0x0e	; 14
    248e:	0f b6       	in	r0, 0x3f	; 63
    2490:	f8 94       	cli
    2492:	de bf       	out	0x3e, r29	; 62
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	cd bf       	out	0x3d, r28	; 61
    2498:	df 91       	pop	r29
    249a:	cf 91       	pop	r28
    249c:	1f 91       	pop	r17
    249e:	0f 91       	pop	r16
    24a0:	08 95       	ret

000024a2 <vfprintf>:
    24a2:	2f 92       	push	r2
    24a4:	3f 92       	push	r3
    24a6:	4f 92       	push	r4
    24a8:	5f 92       	push	r5
    24aa:	6f 92       	push	r6
    24ac:	7f 92       	push	r7
    24ae:	8f 92       	push	r8
    24b0:	9f 92       	push	r9
    24b2:	af 92       	push	r10
    24b4:	bf 92       	push	r11
    24b6:	cf 92       	push	r12
    24b8:	df 92       	push	r13
    24ba:	ef 92       	push	r14
    24bc:	ff 92       	push	r15
    24be:	0f 93       	push	r16
    24c0:	1f 93       	push	r17
    24c2:	cf 93       	push	r28
    24c4:	df 93       	push	r29
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	2d 97       	sbiw	r28, 0x0d	; 13
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	3c 01       	movw	r6, r24
    24d8:	7d 87       	std	Y+13, r23	; 0x0d
    24da:	6c 87       	std	Y+12, r22	; 0x0c
    24dc:	5a 01       	movw	r10, r20
    24de:	fc 01       	movw	r30, r24
    24e0:	17 82       	std	Z+7, r1	; 0x07
    24e2:	16 82       	std	Z+6, r1	; 0x06
    24e4:	83 81       	ldd	r24, Z+3	; 0x03
    24e6:	81 ff       	sbrs	r24, 1
    24e8:	c8 c1       	rjmp	.+912    	; 0x287a <vfprintf+0x3d8>
    24ea:	2e 01       	movw	r4, r28
    24ec:	08 94       	sec
    24ee:	41 1c       	adc	r4, r1
    24f0:	51 1c       	adc	r5, r1
    24f2:	f3 01       	movw	r30, r6
    24f4:	93 81       	ldd	r25, Z+3	; 0x03
    24f6:	ec 85       	ldd	r30, Y+12	; 0x0c
    24f8:	fd 85       	ldd	r31, Y+13	; 0x0d
    24fa:	93 fd       	sbrc	r25, 3
    24fc:	85 91       	lpm	r24, Z+
    24fe:	93 ff       	sbrs	r25, 3
    2500:	81 91       	ld	r24, Z+
    2502:	fd 87       	std	Y+13, r31	; 0x0d
    2504:	ec 87       	std	Y+12, r30	; 0x0c
    2506:	88 23       	and	r24, r24
    2508:	09 f4       	brne	.+2      	; 0x250c <vfprintf+0x6a>
    250a:	b3 c1       	rjmp	.+870    	; 0x2872 <vfprintf+0x3d0>
    250c:	85 32       	cpi	r24, 0x25	; 37
    250e:	41 f4       	brne	.+16     	; 0x2520 <vfprintf+0x7e>
    2510:	93 fd       	sbrc	r25, 3
    2512:	85 91       	lpm	r24, Z+
    2514:	93 ff       	sbrs	r25, 3
    2516:	81 91       	ld	r24, Z+
    2518:	fd 87       	std	Y+13, r31	; 0x0d
    251a:	ec 87       	std	Y+12, r30	; 0x0c
    251c:	85 32       	cpi	r24, 0x25	; 37
    251e:	29 f4       	brne	.+10     	; 0x252a <vfprintf+0x88>
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	b3 01       	movw	r22, r6
    2524:	0e 94 6e 14 	call	0x28dc	; 0x28dc <fputc>
    2528:	e4 cf       	rjmp	.-56     	; 0x24f2 <vfprintf+0x50>
    252a:	ff 24       	eor	r15, r15
    252c:	ee 24       	eor	r14, r14
    252e:	10 e0       	ldi	r17, 0x00	; 0
    2530:	10 32       	cpi	r17, 0x20	; 32
    2532:	b0 f4       	brcc	.+44     	; 0x2560 <vfprintf+0xbe>
    2534:	8b 32       	cpi	r24, 0x2B	; 43
    2536:	69 f0       	breq	.+26     	; 0x2552 <vfprintf+0xb0>
    2538:	8c 32       	cpi	r24, 0x2C	; 44
    253a:	28 f4       	brcc	.+10     	; 0x2546 <vfprintf+0xa4>
    253c:	80 32       	cpi	r24, 0x20	; 32
    253e:	51 f0       	breq	.+20     	; 0x2554 <vfprintf+0xb2>
    2540:	83 32       	cpi	r24, 0x23	; 35
    2542:	71 f4       	brne	.+28     	; 0x2560 <vfprintf+0xbe>
    2544:	0b c0       	rjmp	.+22     	; 0x255c <vfprintf+0xba>
    2546:	8d 32       	cpi	r24, 0x2D	; 45
    2548:	39 f0       	breq	.+14     	; 0x2558 <vfprintf+0xb6>
    254a:	80 33       	cpi	r24, 0x30	; 48
    254c:	49 f4       	brne	.+18     	; 0x2560 <vfprintf+0xbe>
    254e:	11 60       	ori	r17, 0x01	; 1
    2550:	2c c0       	rjmp	.+88     	; 0x25aa <vfprintf+0x108>
    2552:	12 60       	ori	r17, 0x02	; 2
    2554:	14 60       	ori	r17, 0x04	; 4
    2556:	29 c0       	rjmp	.+82     	; 0x25aa <vfprintf+0x108>
    2558:	18 60       	ori	r17, 0x08	; 8
    255a:	27 c0       	rjmp	.+78     	; 0x25aa <vfprintf+0x108>
    255c:	10 61       	ori	r17, 0x10	; 16
    255e:	25 c0       	rjmp	.+74     	; 0x25aa <vfprintf+0x108>
    2560:	17 fd       	sbrc	r17, 7
    2562:	2e c0       	rjmp	.+92     	; 0x25c0 <vfprintf+0x11e>
    2564:	28 2f       	mov	r18, r24
    2566:	20 53       	subi	r18, 0x30	; 48
    2568:	2a 30       	cpi	r18, 0x0A	; 10
    256a:	98 f4       	brcc	.+38     	; 0x2592 <vfprintf+0xf0>
    256c:	16 ff       	sbrs	r17, 6
    256e:	08 c0       	rjmp	.+16     	; 0x2580 <vfprintf+0xde>
    2570:	8f 2d       	mov	r24, r15
    2572:	88 0f       	add	r24, r24
    2574:	f8 2e       	mov	r15, r24
    2576:	ff 0c       	add	r15, r15
    2578:	ff 0c       	add	r15, r15
    257a:	f8 0e       	add	r15, r24
    257c:	f2 0e       	add	r15, r18
    257e:	15 c0       	rjmp	.+42     	; 0x25aa <vfprintf+0x108>
    2580:	8e 2d       	mov	r24, r14
    2582:	88 0f       	add	r24, r24
    2584:	e8 2e       	mov	r14, r24
    2586:	ee 0c       	add	r14, r14
    2588:	ee 0c       	add	r14, r14
    258a:	e8 0e       	add	r14, r24
    258c:	e2 0e       	add	r14, r18
    258e:	10 62       	ori	r17, 0x20	; 32
    2590:	0c c0       	rjmp	.+24     	; 0x25aa <vfprintf+0x108>
    2592:	8e 32       	cpi	r24, 0x2E	; 46
    2594:	21 f4       	brne	.+8      	; 0x259e <vfprintf+0xfc>
    2596:	16 fd       	sbrc	r17, 6
    2598:	6c c1       	rjmp	.+728    	; 0x2872 <vfprintf+0x3d0>
    259a:	10 64       	ori	r17, 0x40	; 64
    259c:	06 c0       	rjmp	.+12     	; 0x25aa <vfprintf+0x108>
    259e:	8c 36       	cpi	r24, 0x6C	; 108
    25a0:	11 f4       	brne	.+4      	; 0x25a6 <vfprintf+0x104>
    25a2:	10 68       	ori	r17, 0x80	; 128
    25a4:	02 c0       	rjmp	.+4      	; 0x25aa <vfprintf+0x108>
    25a6:	88 36       	cpi	r24, 0x68	; 104
    25a8:	59 f4       	brne	.+22     	; 0x25c0 <vfprintf+0x11e>
    25aa:	ec 85       	ldd	r30, Y+12	; 0x0c
    25ac:	fd 85       	ldd	r31, Y+13	; 0x0d
    25ae:	93 fd       	sbrc	r25, 3
    25b0:	85 91       	lpm	r24, Z+
    25b2:	93 ff       	sbrs	r25, 3
    25b4:	81 91       	ld	r24, Z+
    25b6:	fd 87       	std	Y+13, r31	; 0x0d
    25b8:	ec 87       	std	Y+12, r30	; 0x0c
    25ba:	88 23       	and	r24, r24
    25bc:	09 f0       	breq	.+2      	; 0x25c0 <vfprintf+0x11e>
    25be:	b8 cf       	rjmp	.-144    	; 0x2530 <vfprintf+0x8e>
    25c0:	98 2f       	mov	r25, r24
    25c2:	95 54       	subi	r25, 0x45	; 69
    25c4:	93 30       	cpi	r25, 0x03	; 3
    25c6:	18 f0       	brcs	.+6      	; 0x25ce <vfprintf+0x12c>
    25c8:	90 52       	subi	r25, 0x20	; 32
    25ca:	93 30       	cpi	r25, 0x03	; 3
    25cc:	38 f4       	brcc	.+14     	; 0x25dc <vfprintf+0x13a>
    25ce:	24 e0       	ldi	r18, 0x04	; 4
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	a2 0e       	add	r10, r18
    25d4:	b3 1e       	adc	r11, r19
    25d6:	3f e3       	ldi	r19, 0x3F	; 63
    25d8:	39 83       	std	Y+1, r19	; 0x01
    25da:	0f c0       	rjmp	.+30     	; 0x25fa <vfprintf+0x158>
    25dc:	83 36       	cpi	r24, 0x63	; 99
    25de:	31 f0       	breq	.+12     	; 0x25ec <vfprintf+0x14a>
    25e0:	83 37       	cpi	r24, 0x73	; 115
    25e2:	81 f0       	breq	.+32     	; 0x2604 <vfprintf+0x162>
    25e4:	83 35       	cpi	r24, 0x53	; 83
    25e6:	09 f0       	breq	.+2      	; 0x25ea <vfprintf+0x148>
    25e8:	5a c0       	rjmp	.+180    	; 0x269e <vfprintf+0x1fc>
    25ea:	22 c0       	rjmp	.+68     	; 0x2630 <vfprintf+0x18e>
    25ec:	f5 01       	movw	r30, r10
    25ee:	80 81       	ld	r24, Z
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	22 e0       	ldi	r18, 0x02	; 2
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	a2 0e       	add	r10, r18
    25f8:	b3 1e       	adc	r11, r19
    25fa:	21 e0       	ldi	r18, 0x01	; 1
    25fc:	c2 2e       	mov	r12, r18
    25fe:	d1 2c       	mov	r13, r1
    2600:	42 01       	movw	r8, r4
    2602:	14 c0       	rjmp	.+40     	; 0x262c <vfprintf+0x18a>
    2604:	92 e0       	ldi	r25, 0x02	; 2
    2606:	29 2e       	mov	r2, r25
    2608:	31 2c       	mov	r3, r1
    260a:	2a 0c       	add	r2, r10
    260c:	3b 1c       	adc	r3, r11
    260e:	f5 01       	movw	r30, r10
    2610:	80 80       	ld	r8, Z
    2612:	91 80       	ldd	r9, Z+1	; 0x01
    2614:	16 ff       	sbrs	r17, 6
    2616:	03 c0       	rjmp	.+6      	; 0x261e <vfprintf+0x17c>
    2618:	6f 2d       	mov	r22, r15
    261a:	70 e0       	ldi	r23, 0x00	; 0
    261c:	02 c0       	rjmp	.+4      	; 0x2622 <vfprintf+0x180>
    261e:	6f ef       	ldi	r22, 0xFF	; 255
    2620:	7f ef       	ldi	r23, 0xFF	; 255
    2622:	c4 01       	movw	r24, r8
    2624:	0e 94 63 14 	call	0x28c6	; 0x28c6 <strnlen>
    2628:	6c 01       	movw	r12, r24
    262a:	51 01       	movw	r10, r2
    262c:	1f 77       	andi	r17, 0x7F	; 127
    262e:	15 c0       	rjmp	.+42     	; 0x265a <vfprintf+0x1b8>
    2630:	82 e0       	ldi	r24, 0x02	; 2
    2632:	28 2e       	mov	r2, r24
    2634:	31 2c       	mov	r3, r1
    2636:	2a 0c       	add	r2, r10
    2638:	3b 1c       	adc	r3, r11
    263a:	f5 01       	movw	r30, r10
    263c:	80 80       	ld	r8, Z
    263e:	91 80       	ldd	r9, Z+1	; 0x01
    2640:	16 ff       	sbrs	r17, 6
    2642:	03 c0       	rjmp	.+6      	; 0x264a <vfprintf+0x1a8>
    2644:	6f 2d       	mov	r22, r15
    2646:	70 e0       	ldi	r23, 0x00	; 0
    2648:	02 c0       	rjmp	.+4      	; 0x264e <vfprintf+0x1ac>
    264a:	6f ef       	ldi	r22, 0xFF	; 255
    264c:	7f ef       	ldi	r23, 0xFF	; 255
    264e:	c4 01       	movw	r24, r8
    2650:	0e 94 58 14 	call	0x28b0	; 0x28b0 <strnlen_P>
    2654:	6c 01       	movw	r12, r24
    2656:	10 68       	ori	r17, 0x80	; 128
    2658:	51 01       	movw	r10, r2
    265a:	13 fd       	sbrc	r17, 3
    265c:	1c c0       	rjmp	.+56     	; 0x2696 <vfprintf+0x1f4>
    265e:	06 c0       	rjmp	.+12     	; 0x266c <vfprintf+0x1ca>
    2660:	80 e2       	ldi	r24, 0x20	; 32
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	b3 01       	movw	r22, r6
    2666:	0e 94 6e 14 	call	0x28dc	; 0x28dc <fputc>
    266a:	ea 94       	dec	r14
    266c:	8e 2d       	mov	r24, r14
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	c8 16       	cp	r12, r24
    2672:	d9 06       	cpc	r13, r25
    2674:	a8 f3       	brcs	.-22     	; 0x2660 <vfprintf+0x1be>
    2676:	0f c0       	rjmp	.+30     	; 0x2696 <vfprintf+0x1f4>
    2678:	f4 01       	movw	r30, r8
    267a:	17 fd       	sbrc	r17, 7
    267c:	85 91       	lpm	r24, Z+
    267e:	17 ff       	sbrs	r17, 7
    2680:	81 91       	ld	r24, Z+
    2682:	4f 01       	movw	r8, r30
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	b3 01       	movw	r22, r6
    2688:	0e 94 6e 14 	call	0x28dc	; 0x28dc <fputc>
    268c:	e1 10       	cpse	r14, r1
    268e:	ea 94       	dec	r14
    2690:	08 94       	sec
    2692:	c1 08       	sbc	r12, r1
    2694:	d1 08       	sbc	r13, r1
    2696:	c1 14       	cp	r12, r1
    2698:	d1 04       	cpc	r13, r1
    269a:	71 f7       	brne	.-36     	; 0x2678 <vfprintf+0x1d6>
    269c:	e7 c0       	rjmp	.+462    	; 0x286c <vfprintf+0x3ca>
    269e:	84 36       	cpi	r24, 0x64	; 100
    26a0:	11 f0       	breq	.+4      	; 0x26a6 <vfprintf+0x204>
    26a2:	89 36       	cpi	r24, 0x69	; 105
    26a4:	51 f5       	brne	.+84     	; 0x26fa <vfprintf+0x258>
    26a6:	f5 01       	movw	r30, r10
    26a8:	17 ff       	sbrs	r17, 7
    26aa:	07 c0       	rjmp	.+14     	; 0x26ba <vfprintf+0x218>
    26ac:	80 81       	ld	r24, Z
    26ae:	91 81       	ldd	r25, Z+1	; 0x01
    26b0:	a2 81       	ldd	r26, Z+2	; 0x02
    26b2:	b3 81       	ldd	r27, Z+3	; 0x03
    26b4:	24 e0       	ldi	r18, 0x04	; 4
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	08 c0       	rjmp	.+16     	; 0x26ca <vfprintf+0x228>
    26ba:	80 81       	ld	r24, Z
    26bc:	91 81       	ldd	r25, Z+1	; 0x01
    26be:	aa 27       	eor	r26, r26
    26c0:	97 fd       	sbrc	r25, 7
    26c2:	a0 95       	com	r26
    26c4:	ba 2f       	mov	r27, r26
    26c6:	22 e0       	ldi	r18, 0x02	; 2
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	a2 0e       	add	r10, r18
    26cc:	b3 1e       	adc	r11, r19
    26ce:	01 2f       	mov	r16, r17
    26d0:	0f 76       	andi	r16, 0x6F	; 111
    26d2:	b7 ff       	sbrs	r27, 7
    26d4:	08 c0       	rjmp	.+16     	; 0x26e6 <vfprintf+0x244>
    26d6:	b0 95       	com	r27
    26d8:	a0 95       	com	r26
    26da:	90 95       	com	r25
    26dc:	81 95       	neg	r24
    26de:	9f 4f       	sbci	r25, 0xFF	; 255
    26e0:	af 4f       	sbci	r26, 0xFF	; 255
    26e2:	bf 4f       	sbci	r27, 0xFF	; 255
    26e4:	00 68       	ori	r16, 0x80	; 128
    26e6:	bc 01       	movw	r22, r24
    26e8:	cd 01       	movw	r24, r26
    26ea:	a2 01       	movw	r20, r4
    26ec:	2a e0       	ldi	r18, 0x0A	; 10
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	0e 94 9a 14 	call	0x2934	; 0x2934 <__ultoa_invert>
    26f4:	d8 2e       	mov	r13, r24
    26f6:	d4 18       	sub	r13, r4
    26f8:	3f c0       	rjmp	.+126    	; 0x2778 <vfprintf+0x2d6>
    26fa:	85 37       	cpi	r24, 0x75	; 117
    26fc:	21 f4       	brne	.+8      	; 0x2706 <vfprintf+0x264>
    26fe:	1f 7e       	andi	r17, 0xEF	; 239
    2700:	2a e0       	ldi	r18, 0x0A	; 10
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	20 c0       	rjmp	.+64     	; 0x2746 <vfprintf+0x2a4>
    2706:	19 7f       	andi	r17, 0xF9	; 249
    2708:	8f 36       	cpi	r24, 0x6F	; 111
    270a:	a9 f0       	breq	.+42     	; 0x2736 <vfprintf+0x294>
    270c:	80 37       	cpi	r24, 0x70	; 112
    270e:	20 f4       	brcc	.+8      	; 0x2718 <vfprintf+0x276>
    2710:	88 35       	cpi	r24, 0x58	; 88
    2712:	09 f0       	breq	.+2      	; 0x2716 <vfprintf+0x274>
    2714:	ae c0       	rjmp	.+348    	; 0x2872 <vfprintf+0x3d0>
    2716:	0b c0       	rjmp	.+22     	; 0x272e <vfprintf+0x28c>
    2718:	80 37       	cpi	r24, 0x70	; 112
    271a:	21 f0       	breq	.+8      	; 0x2724 <vfprintf+0x282>
    271c:	88 37       	cpi	r24, 0x78	; 120
    271e:	09 f0       	breq	.+2      	; 0x2722 <vfprintf+0x280>
    2720:	a8 c0       	rjmp	.+336    	; 0x2872 <vfprintf+0x3d0>
    2722:	01 c0       	rjmp	.+2      	; 0x2726 <vfprintf+0x284>
    2724:	10 61       	ori	r17, 0x10	; 16
    2726:	14 ff       	sbrs	r17, 4
    2728:	09 c0       	rjmp	.+18     	; 0x273c <vfprintf+0x29a>
    272a:	14 60       	ori	r17, 0x04	; 4
    272c:	07 c0       	rjmp	.+14     	; 0x273c <vfprintf+0x29a>
    272e:	14 ff       	sbrs	r17, 4
    2730:	08 c0       	rjmp	.+16     	; 0x2742 <vfprintf+0x2a0>
    2732:	16 60       	ori	r17, 0x06	; 6
    2734:	06 c0       	rjmp	.+12     	; 0x2742 <vfprintf+0x2a0>
    2736:	28 e0       	ldi	r18, 0x08	; 8
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	05 c0       	rjmp	.+10     	; 0x2746 <vfprintf+0x2a4>
    273c:	20 e1       	ldi	r18, 0x10	; 16
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <vfprintf+0x2a4>
    2742:	20 e1       	ldi	r18, 0x10	; 16
    2744:	32 e0       	ldi	r19, 0x02	; 2
    2746:	f5 01       	movw	r30, r10
    2748:	17 ff       	sbrs	r17, 7
    274a:	07 c0       	rjmp	.+14     	; 0x275a <vfprintf+0x2b8>
    274c:	60 81       	ld	r22, Z
    274e:	71 81       	ldd	r23, Z+1	; 0x01
    2750:	82 81       	ldd	r24, Z+2	; 0x02
    2752:	93 81       	ldd	r25, Z+3	; 0x03
    2754:	44 e0       	ldi	r20, 0x04	; 4
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	06 c0       	rjmp	.+12     	; 0x2766 <vfprintf+0x2c4>
    275a:	60 81       	ld	r22, Z
    275c:	71 81       	ldd	r23, Z+1	; 0x01
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	42 e0       	ldi	r20, 0x02	; 2
    2764:	50 e0       	ldi	r21, 0x00	; 0
    2766:	a4 0e       	add	r10, r20
    2768:	b5 1e       	adc	r11, r21
    276a:	a2 01       	movw	r20, r4
    276c:	0e 94 9a 14 	call	0x2934	; 0x2934 <__ultoa_invert>
    2770:	d8 2e       	mov	r13, r24
    2772:	d4 18       	sub	r13, r4
    2774:	01 2f       	mov	r16, r17
    2776:	0f 77       	andi	r16, 0x7F	; 127
    2778:	06 ff       	sbrs	r16, 6
    277a:	09 c0       	rjmp	.+18     	; 0x278e <vfprintf+0x2ec>
    277c:	0e 7f       	andi	r16, 0xFE	; 254
    277e:	df 14       	cp	r13, r15
    2780:	30 f4       	brcc	.+12     	; 0x278e <vfprintf+0x2ec>
    2782:	04 ff       	sbrs	r16, 4
    2784:	06 c0       	rjmp	.+12     	; 0x2792 <vfprintf+0x2f0>
    2786:	02 fd       	sbrc	r16, 2
    2788:	04 c0       	rjmp	.+8      	; 0x2792 <vfprintf+0x2f0>
    278a:	0f 7e       	andi	r16, 0xEF	; 239
    278c:	02 c0       	rjmp	.+4      	; 0x2792 <vfprintf+0x2f0>
    278e:	1d 2d       	mov	r17, r13
    2790:	01 c0       	rjmp	.+2      	; 0x2794 <vfprintf+0x2f2>
    2792:	1f 2d       	mov	r17, r15
    2794:	80 2f       	mov	r24, r16
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	04 ff       	sbrs	r16, 4
    279a:	0c c0       	rjmp	.+24     	; 0x27b4 <vfprintf+0x312>
    279c:	fe 01       	movw	r30, r28
    279e:	ed 0d       	add	r30, r13
    27a0:	f1 1d       	adc	r31, r1
    27a2:	20 81       	ld	r18, Z
    27a4:	20 33       	cpi	r18, 0x30	; 48
    27a6:	11 f4       	brne	.+4      	; 0x27ac <vfprintf+0x30a>
    27a8:	09 7e       	andi	r16, 0xE9	; 233
    27aa:	09 c0       	rjmp	.+18     	; 0x27be <vfprintf+0x31c>
    27ac:	02 ff       	sbrs	r16, 2
    27ae:	06 c0       	rjmp	.+12     	; 0x27bc <vfprintf+0x31a>
    27b0:	1e 5f       	subi	r17, 0xFE	; 254
    27b2:	05 c0       	rjmp	.+10     	; 0x27be <vfprintf+0x31c>
    27b4:	86 78       	andi	r24, 0x86	; 134
    27b6:	90 70       	andi	r25, 0x00	; 0
    27b8:	00 97       	sbiw	r24, 0x00	; 0
    27ba:	09 f0       	breq	.+2      	; 0x27be <vfprintf+0x31c>
    27bc:	1f 5f       	subi	r17, 0xFF	; 255
    27be:	80 2e       	mov	r8, r16
    27c0:	99 24       	eor	r9, r9
    27c2:	03 fd       	sbrc	r16, 3
    27c4:	12 c0       	rjmp	.+36     	; 0x27ea <vfprintf+0x348>
    27c6:	00 ff       	sbrs	r16, 0
    27c8:	0d c0       	rjmp	.+26     	; 0x27e4 <vfprintf+0x342>
    27ca:	fd 2c       	mov	r15, r13
    27cc:	1e 15       	cp	r17, r14
    27ce:	50 f4       	brcc	.+20     	; 0x27e4 <vfprintf+0x342>
    27d0:	fe 0c       	add	r15, r14
    27d2:	f1 1a       	sub	r15, r17
    27d4:	1e 2d       	mov	r17, r14
    27d6:	06 c0       	rjmp	.+12     	; 0x27e4 <vfprintf+0x342>
    27d8:	80 e2       	ldi	r24, 0x20	; 32
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	b3 01       	movw	r22, r6
    27de:	0e 94 6e 14 	call	0x28dc	; 0x28dc <fputc>
    27e2:	1f 5f       	subi	r17, 0xFF	; 255
    27e4:	1e 15       	cp	r17, r14
    27e6:	c0 f3       	brcs	.-16     	; 0x27d8 <vfprintf+0x336>
    27e8:	04 c0       	rjmp	.+8      	; 0x27f2 <vfprintf+0x350>
    27ea:	1e 15       	cp	r17, r14
    27ec:	10 f4       	brcc	.+4      	; 0x27f2 <vfprintf+0x350>
    27ee:	e1 1a       	sub	r14, r17
    27f0:	01 c0       	rjmp	.+2      	; 0x27f4 <vfprintf+0x352>
    27f2:	ee 24       	eor	r14, r14
    27f4:	84 fe       	sbrs	r8, 4
    27f6:	0f c0       	rjmp	.+30     	; 0x2816 <vfprintf+0x374>
    27f8:	80 e3       	ldi	r24, 0x30	; 48
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	b3 01       	movw	r22, r6
    27fe:	0e 94 6e 14 	call	0x28dc	; 0x28dc <fputc>
    2802:	82 fe       	sbrs	r8, 2
    2804:	1f c0       	rjmp	.+62     	; 0x2844 <vfprintf+0x3a2>
    2806:	81 fe       	sbrs	r8, 1
    2808:	03 c0       	rjmp	.+6      	; 0x2810 <vfprintf+0x36e>
    280a:	88 e5       	ldi	r24, 0x58	; 88
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	10 c0       	rjmp	.+32     	; 0x2830 <vfprintf+0x38e>
    2810:	88 e7       	ldi	r24, 0x78	; 120
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	0d c0       	rjmp	.+26     	; 0x2830 <vfprintf+0x38e>
    2816:	c4 01       	movw	r24, r8
    2818:	86 78       	andi	r24, 0x86	; 134
    281a:	90 70       	andi	r25, 0x00	; 0
    281c:	00 97       	sbiw	r24, 0x00	; 0
    281e:	91 f0       	breq	.+36     	; 0x2844 <vfprintf+0x3a2>
    2820:	81 fc       	sbrc	r8, 1
    2822:	02 c0       	rjmp	.+4      	; 0x2828 <vfprintf+0x386>
    2824:	80 e2       	ldi	r24, 0x20	; 32
    2826:	01 c0       	rjmp	.+2      	; 0x282a <vfprintf+0x388>
    2828:	8b e2       	ldi	r24, 0x2B	; 43
    282a:	07 fd       	sbrc	r16, 7
    282c:	8d e2       	ldi	r24, 0x2D	; 45
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	b3 01       	movw	r22, r6
    2832:	0e 94 6e 14 	call	0x28dc	; 0x28dc <fputc>
    2836:	06 c0       	rjmp	.+12     	; 0x2844 <vfprintf+0x3a2>
    2838:	80 e3       	ldi	r24, 0x30	; 48
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	b3 01       	movw	r22, r6
    283e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <fputc>
    2842:	fa 94       	dec	r15
    2844:	df 14       	cp	r13, r15
    2846:	c0 f3       	brcs	.-16     	; 0x2838 <vfprintf+0x396>
    2848:	da 94       	dec	r13
    284a:	f2 01       	movw	r30, r4
    284c:	ed 0d       	add	r30, r13
    284e:	f1 1d       	adc	r31, r1
    2850:	80 81       	ld	r24, Z
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	b3 01       	movw	r22, r6
    2856:	0e 94 6e 14 	call	0x28dc	; 0x28dc <fputc>
    285a:	dd 20       	and	r13, r13
    285c:	a9 f7       	brne	.-22     	; 0x2848 <vfprintf+0x3a6>
    285e:	06 c0       	rjmp	.+12     	; 0x286c <vfprintf+0x3ca>
    2860:	80 e2       	ldi	r24, 0x20	; 32
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	b3 01       	movw	r22, r6
    2866:	0e 94 6e 14 	call	0x28dc	; 0x28dc <fputc>
    286a:	ea 94       	dec	r14
    286c:	ee 20       	and	r14, r14
    286e:	c1 f7       	brne	.-16     	; 0x2860 <vfprintf+0x3be>
    2870:	40 ce       	rjmp	.-896    	; 0x24f2 <vfprintf+0x50>
    2872:	f3 01       	movw	r30, r6
    2874:	86 81       	ldd	r24, Z+6	; 0x06
    2876:	97 81       	ldd	r25, Z+7	; 0x07
    2878:	02 c0       	rjmp	.+4      	; 0x287e <vfprintf+0x3dc>
    287a:	8f ef       	ldi	r24, 0xFF	; 255
    287c:	9f ef       	ldi	r25, 0xFF	; 255
    287e:	2d 96       	adiw	r28, 0x0d	; 13
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	f8 94       	cli
    2884:	de bf       	out	0x3e, r29	; 62
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	cd bf       	out	0x3d, r28	; 61
    288a:	df 91       	pop	r29
    288c:	cf 91       	pop	r28
    288e:	1f 91       	pop	r17
    2890:	0f 91       	pop	r16
    2892:	ff 90       	pop	r15
    2894:	ef 90       	pop	r14
    2896:	df 90       	pop	r13
    2898:	cf 90       	pop	r12
    289a:	bf 90       	pop	r11
    289c:	af 90       	pop	r10
    289e:	9f 90       	pop	r9
    28a0:	8f 90       	pop	r8
    28a2:	7f 90       	pop	r7
    28a4:	6f 90       	pop	r6
    28a6:	5f 90       	pop	r5
    28a8:	4f 90       	pop	r4
    28aa:	3f 90       	pop	r3
    28ac:	2f 90       	pop	r2
    28ae:	08 95       	ret

000028b0 <strnlen_P>:
    28b0:	fc 01       	movw	r30, r24
    28b2:	05 90       	lpm	r0, Z+
    28b4:	61 50       	subi	r22, 0x01	; 1
    28b6:	70 40       	sbci	r23, 0x00	; 0
    28b8:	01 10       	cpse	r0, r1
    28ba:	d8 f7       	brcc	.-10     	; 0x28b2 <strnlen_P+0x2>
    28bc:	80 95       	com	r24
    28be:	90 95       	com	r25
    28c0:	8e 0f       	add	r24, r30
    28c2:	9f 1f       	adc	r25, r31
    28c4:	08 95       	ret

000028c6 <strnlen>:
    28c6:	fc 01       	movw	r30, r24
    28c8:	61 50       	subi	r22, 0x01	; 1
    28ca:	70 40       	sbci	r23, 0x00	; 0
    28cc:	01 90       	ld	r0, Z+
    28ce:	01 10       	cpse	r0, r1
    28d0:	d8 f7       	brcc	.-10     	; 0x28c8 <strnlen+0x2>
    28d2:	80 95       	com	r24
    28d4:	90 95       	com	r25
    28d6:	8e 0f       	add	r24, r30
    28d8:	9f 1f       	adc	r25, r31
    28da:	08 95       	ret

000028dc <fputc>:
    28dc:	0f 93       	push	r16
    28de:	1f 93       	push	r17
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	8c 01       	movw	r16, r24
    28e6:	eb 01       	movw	r28, r22
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	81 ff       	sbrs	r24, 1
    28ec:	1b c0       	rjmp	.+54     	; 0x2924 <fputc+0x48>
    28ee:	82 ff       	sbrs	r24, 2
    28f0:	0d c0       	rjmp	.+26     	; 0x290c <fputc+0x30>
    28f2:	2e 81       	ldd	r18, Y+6	; 0x06
    28f4:	3f 81       	ldd	r19, Y+7	; 0x07
    28f6:	8c 81       	ldd	r24, Y+4	; 0x04
    28f8:	9d 81       	ldd	r25, Y+5	; 0x05
    28fa:	28 17       	cp	r18, r24
    28fc:	39 07       	cpc	r19, r25
    28fe:	64 f4       	brge	.+24     	; 0x2918 <fputc+0x3c>
    2900:	e8 81       	ld	r30, Y
    2902:	f9 81       	ldd	r31, Y+1	; 0x01
    2904:	01 93       	st	Z+, r16
    2906:	f9 83       	std	Y+1, r31	; 0x01
    2908:	e8 83       	st	Y, r30
    290a:	06 c0       	rjmp	.+12     	; 0x2918 <fputc+0x3c>
    290c:	e8 85       	ldd	r30, Y+8	; 0x08
    290e:	f9 85       	ldd	r31, Y+9	; 0x09
    2910:	80 2f       	mov	r24, r16
    2912:	19 95       	eicall
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	31 f4       	brne	.+12     	; 0x2924 <fputc+0x48>
    2918:	8e 81       	ldd	r24, Y+6	; 0x06
    291a:	9f 81       	ldd	r25, Y+7	; 0x07
    291c:	01 96       	adiw	r24, 0x01	; 1
    291e:	9f 83       	std	Y+7, r25	; 0x07
    2920:	8e 83       	std	Y+6, r24	; 0x06
    2922:	02 c0       	rjmp	.+4      	; 0x2928 <fputc+0x4c>
    2924:	0f ef       	ldi	r16, 0xFF	; 255
    2926:	1f ef       	ldi	r17, 0xFF	; 255
    2928:	c8 01       	movw	r24, r16
    292a:	df 91       	pop	r29
    292c:	cf 91       	pop	r28
    292e:	1f 91       	pop	r17
    2930:	0f 91       	pop	r16
    2932:	08 95       	ret

00002934 <__ultoa_invert>:
    2934:	fa 01       	movw	r30, r20
    2936:	aa 27       	eor	r26, r26
    2938:	28 30       	cpi	r18, 0x08	; 8
    293a:	51 f1       	breq	.+84     	; 0x2990 <__ultoa_invert+0x5c>
    293c:	20 31       	cpi	r18, 0x10	; 16
    293e:	81 f1       	breq	.+96     	; 0x29a0 <__ultoa_invert+0x6c>
    2940:	e8 94       	clt
    2942:	6f 93       	push	r22
    2944:	6e 7f       	andi	r22, 0xFE	; 254
    2946:	6e 5f       	subi	r22, 0xFE	; 254
    2948:	7f 4f       	sbci	r23, 0xFF	; 255
    294a:	8f 4f       	sbci	r24, 0xFF	; 255
    294c:	9f 4f       	sbci	r25, 0xFF	; 255
    294e:	af 4f       	sbci	r26, 0xFF	; 255
    2950:	b1 e0       	ldi	r27, 0x01	; 1
    2952:	3e d0       	rcall	.+124    	; 0x29d0 <__ultoa_invert+0x9c>
    2954:	b4 e0       	ldi	r27, 0x04	; 4
    2956:	3c d0       	rcall	.+120    	; 0x29d0 <__ultoa_invert+0x9c>
    2958:	67 0f       	add	r22, r23
    295a:	78 1f       	adc	r23, r24
    295c:	89 1f       	adc	r24, r25
    295e:	9a 1f       	adc	r25, r26
    2960:	a1 1d       	adc	r26, r1
    2962:	68 0f       	add	r22, r24
    2964:	79 1f       	adc	r23, r25
    2966:	8a 1f       	adc	r24, r26
    2968:	91 1d       	adc	r25, r1
    296a:	a1 1d       	adc	r26, r1
    296c:	6a 0f       	add	r22, r26
    296e:	71 1d       	adc	r23, r1
    2970:	81 1d       	adc	r24, r1
    2972:	91 1d       	adc	r25, r1
    2974:	a1 1d       	adc	r26, r1
    2976:	20 d0       	rcall	.+64     	; 0x29b8 <__ultoa_invert+0x84>
    2978:	09 f4       	brne	.+2      	; 0x297c <__ultoa_invert+0x48>
    297a:	68 94       	set
    297c:	3f 91       	pop	r19
    297e:	2a e0       	ldi	r18, 0x0A	; 10
    2980:	26 9f       	mul	r18, r22
    2982:	11 24       	eor	r1, r1
    2984:	30 19       	sub	r19, r0
    2986:	30 5d       	subi	r19, 0xD0	; 208
    2988:	31 93       	st	Z+, r19
    298a:	de f6       	brtc	.-74     	; 0x2942 <__ultoa_invert+0xe>
    298c:	cf 01       	movw	r24, r30
    298e:	08 95       	ret
    2990:	46 2f       	mov	r20, r22
    2992:	47 70       	andi	r20, 0x07	; 7
    2994:	40 5d       	subi	r20, 0xD0	; 208
    2996:	41 93       	st	Z+, r20
    2998:	b3 e0       	ldi	r27, 0x03	; 3
    299a:	0f d0       	rcall	.+30     	; 0x29ba <__ultoa_invert+0x86>
    299c:	c9 f7       	brne	.-14     	; 0x2990 <__ultoa_invert+0x5c>
    299e:	f6 cf       	rjmp	.-20     	; 0x298c <__ultoa_invert+0x58>
    29a0:	46 2f       	mov	r20, r22
    29a2:	4f 70       	andi	r20, 0x0F	; 15
    29a4:	40 5d       	subi	r20, 0xD0	; 208
    29a6:	4a 33       	cpi	r20, 0x3A	; 58
    29a8:	18 f0       	brcs	.+6      	; 0x29b0 <__ultoa_invert+0x7c>
    29aa:	49 5d       	subi	r20, 0xD9	; 217
    29ac:	31 fd       	sbrc	r19, 1
    29ae:	40 52       	subi	r20, 0x20	; 32
    29b0:	41 93       	st	Z+, r20
    29b2:	02 d0       	rcall	.+4      	; 0x29b8 <__ultoa_invert+0x84>
    29b4:	a9 f7       	brne	.-22     	; 0x29a0 <__ultoa_invert+0x6c>
    29b6:	ea cf       	rjmp	.-44     	; 0x298c <__ultoa_invert+0x58>
    29b8:	b4 e0       	ldi	r27, 0x04	; 4
    29ba:	a6 95       	lsr	r26
    29bc:	97 95       	ror	r25
    29be:	87 95       	ror	r24
    29c0:	77 95       	ror	r23
    29c2:	67 95       	ror	r22
    29c4:	ba 95       	dec	r27
    29c6:	c9 f7       	brne	.-14     	; 0x29ba <__ultoa_invert+0x86>
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	61 05       	cpc	r22, r1
    29cc:	71 05       	cpc	r23, r1
    29ce:	08 95       	ret
    29d0:	9b 01       	movw	r18, r22
    29d2:	ac 01       	movw	r20, r24
    29d4:	0a 2e       	mov	r0, r26
    29d6:	06 94       	lsr	r0
    29d8:	57 95       	ror	r21
    29da:	47 95       	ror	r20
    29dc:	37 95       	ror	r19
    29de:	27 95       	ror	r18
    29e0:	ba 95       	dec	r27
    29e2:	c9 f7       	brne	.-14     	; 0x29d6 <__ultoa_invert+0xa2>
    29e4:	62 0f       	add	r22, r18
    29e6:	73 1f       	adc	r23, r19
    29e8:	84 1f       	adc	r24, r20
    29ea:	95 1f       	adc	r25, r21
    29ec:	a0 1d       	adc	r26, r0
    29ee:	08 95       	ret

000029f0 <_exit>:
    29f0:	f8 94       	cli

000029f2 <__stop_program>:
    29f2:	ff cf       	rjmp	.-2      	; 0x29f2 <__stop_program>
